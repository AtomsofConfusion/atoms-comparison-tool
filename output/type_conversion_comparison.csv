Type,File,Line,CLJ,CQL,CLJ_Code,CQL_Column,CQL_Code
type_conversion,AEDataModel.h,231,+,-,(int)0xFFFFFFFF,,
type_conversion,CodeFragments.h,63,+,-,(int)0xFFFFFFFF,,
type_conversion,CodeFragments.h,93,+,-,(int)0xFFFFFFFF,,
type_conversion,Collections.h,50,+,-,(int)0xFFFFFFFF,,
type_conversion,Files.h,1108,+,-,(int)0xFFFC0000,,
type_conversion,Files.h,1359,+,-,(int)0xFFFFFFFC,,
type_conversion,Files.h,7188,+,-,(int)0x80000000,,
type_conversion,Gestalt.h,464,+,-,(int)0xFFFF0000,,
type_conversion,Gestalt.h,2412,+,-,(int)0xFFFF0000,,
type_conversion,Gestalt.h,2413,+,-,(int)0x80000000,,
type_conversion,IconsCore.h,288,+,-,(int)0xC4686C70,,
type_conversion,IconsCore.h,290,+,-,(int)0xC46E6574,,
type_conversion,IconsCore.h,292,+,-,(int)0xC46C6F63,,
type_conversion,IconsCore.h,297,+,-,(int)0xC4707264,,
type_conversion,IconsCore.h,302,+,-,(int)0xC4736372,,
type_conversion,IconsCore.h,303,+,-,(int)0xC46C6962,,
type_conversion,IconsCore.h,312,+,-,(int)0xC4746578,,
type_conversion,MacErrors.h,2938,+,-,(int)0x80008001,,
type_conversion,MacErrors.h,2939,+,-,(int)0x80008002,,
type_conversion,MixedMode.h,268,+,-,(int)0xFFFFFFC0,,
type_conversion,PEFBinaryFormat.h,1172,+,-,(int)0xF04D6163,,
type_conversion,Script.h,598,+,-,(int)0xFFFFFFFF,,
type_conversion,abspath.c,23,-,+,,53,	while (offset < len && !is_dir_sep(path->buf[len - 1]))
type_conversion,abspath.c,26,-,+,,52,	while (offset < len && is_dir_sep(path->buf[len - 1]))
type_conversion,abspath.c,42,-,+,,42,	for (start = remaining->buf; is_dir_sep(*start); start++)
type_conversion,abspath.c,45,-,+,,40,	for (end = start; *end && !is_dir_sep(*end); end++)
type_conversion,abspath.c,48,-,+,,26,"	strbuf_add(next, start, end - start);"
type_conversion,abspath.c,50,-,+,,27,"	strbuf_remove(remaining, 0, end - remaining->buf);"
type_conversion,abspath.c,59,-,+,,39,"	strbuf_add(resolved, remaining->buf, offset);"
type_conversion,abspath.c,63,-,+,,27,"	strbuf_remove(remaining, 0, offset);"
type_conversion,abspath.c,110,-,+,,25,	while (remaining.len > 0) {
type_conversion,abspath.c,113,-,+,,19,		if (next.len == 0) {
type_conversion,abspath.c,115,-,+,,26,"		} else if (next.len == 1 && !strcmp(next.buf, ""."")) {"
type_conversion,abspath.c,117,-,+,,26,"		} else if (next.len == 2 && !strcmp(next.buf, "".."")) {"
type_conversion,abspath.c,124,-,+,,49,		if (!is_dir_sep(resolved->buf[resolved->len - 1]))
type_conversion,abspath.c,152,-,+,,10,"			len = strbuf_readlink(&symlink, resolved->buf,
					      st.st_size);"
type_conversion,abspath.c,153,-,+,,12,					      st.st_size);
type_conversion,abspath.c,154,-,+,,14,			if (len < 0) {
type_conversion,abspath.c,270,-,+,,39,	size_t pfx_len = pfx ? strlen(pfx) : 0;
type_conversion,abspath.c,275,-,+,,13,		pfx_len = 0;
type_conversion,abspath.c,311,-,+,,59,		if (sb->len > orig_len && !is_dir_sep(sb->buf[sb->len - 1]))
type_conversion,abspath.h,30,-,+,,20,	return is_dir_sep(path[0]) || has_dos_drive_prefix(path);
type_conversion,add-interactive.c,29,-,+,,12,		dst[0] = '\0';
type_conversion,add-interactive.c,146,-,+,,11,			*len = 0;
type_conversion,add-interactive.c,150,-,+,,7,		if (c != other_string[*len - 1])
type_conversion,add-interactive.c,168,-,+,,11,	for (i = 0; i < list->items.nr; i++) {
type_conversion,add-interactive.c,175,-,+,,11,	for (i = 0; i < list->sorted.nr; i++) {
type_conversion,add-interactive.c,180,-,+,,10,		*len = 0;
type_conversion,add-interactive.c,185,-,+,,12,				*len = 0;
type_conversion,add-interactive.c,190,-,+,,11,		if (i > 0)
type_conversion,add-interactive.c,193,-,+,,11,		if (i + 1 < list->sorted.nr)
type_conversion,add-interactive.c,213,-,+,,10,		return -1;
type_conversion,add-interactive.c,214,-,+,,11,	else if (index + 1 < list->sorted.nr &&
type_conversion,add-interactive.c,216,-,+,,10,		return -1;
type_conversion,add-interactive.c,217,-,+,,11,	else if (index < list->sorted.nr &&
type_conversion,add-interactive.c,221,-,+,,10,		return -1;
type_conversion,add-interactive.c,245,-,+,,14,	for (i = 0; i < list->nr; i++) {
type_conversion,add-interactive.c,287,-,+,,18,	int singleton = opts->flags & SINGLETON;
type_conversion,add-interactive.c,288,-,+,,18,	int immediate = opts->flags & IMMEDIATE;
type_conversion,add-interactive.c,334,-,+,,19,"			ssize_t from = -1, to = -1;"
type_conversion,add-interactive.c,344,-,+,,8,			if (*p == '-') {
type_conversion,add-interactive.c,350,-,+,,15,			if (sep == 1 && *p == '*') {
type_conversion,add-interactive.c,351,-,+,,12,				from = 0;
type_conversion,add-interactive.c,352,-,+,,10,				to = items->items.nr;
type_conversion,add-interactive.c,364,-,+,,36,"				from = strtoul(p, &endp, 10) - 1;"
type_conversion,add-interactive.c,366,-,+,,18,					to = from + 1;
type_conversion,add-interactive.c,367,-,+,,14,				else if (*endp == '-') {
type_conversion,add-interactive.c,369,-,+,,12,"						to = strtoul(endp, &endp, 10);"
type_conversion,add-interactive.c,371,-,+,,12,						to = items->items.nr;
type_conversion,add-interactive.c,374,-,+,,14,						from = -1;
type_conversion,add-interactive.c,379,-,+,,16,				p[sep++] = '\0';
type_conversion,add-interactive.c,380,-,+,,15,			if (from < 0) {
type_conversion,add-interactive.c,382,-,+,,17,				if (from >= 0)
type_conversion,add-interactive.c,383,-,+,,18,					to = from + 1;
type_conversion,add-interactive.c,386,-,+,,15,			if (from < 0 || from >= items->items.nr ||
type_conversion,add-interactive.c,387,-,+,,29,			    (singleton && from + 1 != to)) {
type_conversion,add-interactive.c,396,-,+,,8,			if (to > items->items.nr)
type_conversion,add-interactive.c,397,-,+,,10,				to = items->items.nr;
type_conversion,add-interactive.c,402,-,+,,13,					res += choose ? +1 : -1;
type_conversion,add-interactive.c,429,-,+,,35,"	struct file_item *item = xcalloc(1, sizeof(*item));"
type_conversion,add-interactive.c,479,-,+,,14,		int hash = strhash(name);
type_conversion,add-interactive.c,493,-,+,,36,"			hashmap_entry_init(&entry->ent, hash);"
type_conversion,add-interactive.c,494,-,+,,49,			entry->name = s->files->items[s->files->nr - 1].string;
type_conversion,add-interactive.c,495,-,+,,49,			entry->item = s->files->items[s->files->nr - 1].util;
type_conversion,add-interactive.c,500,-,+,,12,		adddel = s->mode == FROM_INDEX ?
type_conversion,add-interactive.c,502,-,+,,18,		other_adddel = s->mode == FROM_INDEX ?
type_conversion,add-interactive.c,504,-,+,,18,		adddel->seen = 1;
type_conversion,add-interactive.c,510,-,+,,21,			adddel->binary = 1;
type_conversion,add-interactive.c,515,-,+,,23,			adddel->unmerged = 1;
type_conversion,add-interactive.c,542,-,+,,37,"	if (repo_read_index_preload(r, ps, 0) < 0)"
type_conversion,add-interactive.c,547,-,+,,54,"	hashmap_init(&s.file_map, pathname_entry_cmp, NULL, 0);"
type_conversion,add-interactive.c,553,-,+,,7,		if (filter == INDEX_ONLY)
type_conversion,add-interactive.c,557,-,+,,19,		s.skip_unseen = filter && i;
type_conversion,add-interactive.c,572,-,+,,7,		if (s.mode == FROM_INDEX)
type_conversion,add-interactive.c,575,-,+,,48,			rev.diffopt.flags.ignore_dirty_submodules = 1;
type_conversion,add-interactive.c,576,-,+,,25,"			run_diff_files(&rev, 0);"
type_conversion,add-interactive.c,615,-,+,,3,		*prefix != '-' &&				/* deselection */
type_conversion,add-interactive.c,617,-,+,,18,		(prefix_len != 1 ||
type_conversion,add-interactive.c,618,-,+,,5,"		 (*prefix != '*' &&				/* ""all"" wildcard */"
type_conversion,add-interactive.c,619,-,+,,5,		  *prefix != '?'));				/* prompt help */
type_conversion,add-interactive.c,640,-,+,,25,	if (c->prefix_length > 0 &&
type_conversion,add-interactive.c,694,-,+,,10,"	count = list_and_choose(s, files, opts);"
type_conversion,add-interactive.c,695,-,+,,15,	if (count <= 0) {
type_conversion,add-interactive.c,706,-,+,,11,	for (i = 0; i < files->items.nr; i++) {
type_conversion,add-interactive.c,747,-,+,,44,"			ce = make_cache_entry(opt->repo->index, one->mode,"
type_conversion,add-interactive.c,748,-,+,,37,"					      &one->oid, one->path, 0, 0);"
type_conversion,add-interactive.c,783,-,+,,10,"	count = list_and_choose(s, files, opts);"
type_conversion,add-interactive.c,784,-,+,,15,	if (count <= 0)
type_conversion,add-interactive.c,805,-,+,,15,	for (i = j = 0; i < files->items.nr; i++)
type_conversion,add-interactive.c,810,-,+,,36,"	parse_pathspec(&diffopt.pathspec, 0,"
type_conversion,add-interactive.c,816,-,+,,44,	diffopt.flags.override_submodule_config = 1;
type_conversion,add-interactive.c,832,-,+,,59,"		res = repo_refresh_and_write_index(s->r, REFRESH_QUIET, 0, 1,"
type_conversion,add-interactive.c,860,-,+,,18,	for (i = 0; i < dir.nr; i++) {
type_conversion,add-interactive.c,863,-,+,,48,"		if (index_name_is_other(r->index, ent->name, ent->len)) {"
type_conversion,add-interactive.c,865,-,+,,32,"			strbuf_add(&buf, ent->name, ent->len);"
type_conversion,add-interactive.c,893,-,+,,18,	d->only_names = 1;
type_conversion,add-interactive.c,894,-,+,,10,"	count = list_and_choose(s, files, opts);"
type_conversion,add-interactive.c,895,-,+,,18,	d->only_names = 0;
type_conversion,add-interactive.c,896,-,+,,15,	if (count <= 0)
type_conversion,add-interactive.c,905,-,+,,11,	for (i = 0; i < files->items.nr; i++) {
type_conversion,add-interactive.c,933,-,+,,26,"	size_t unmerged_count = 0, binary_count = 0;"
type_conversion,add-interactive.c,940,-,+,,19,		for (i = j = 0; i < files->items.nr; i++) {
type_conversion,add-interactive.c,956,-,+,,21,		files->items.nr = j;
type_conversion,add-interactive.c,969,-,+,,14,	if (count > 0) {
type_conversion,add-interactive.c,973,-,+,,15,		for (i = 0; i < files->items.nr; i++)
type_conversion,add-interactive.c,1012,-,+,,14,	if (count > 0) {
type_conversion,add-interactive.c,1019,-,+,,15,		for (i = 0; i < files->items.nr; i++)
type_conversion,add-interactive.c,1117,-,+,,19,"		N_(""What now""), SINGLETON | IMMEDIATE, command_prompt_help"
type_conversion,add-interactive.c,1147,-,+,,14,	for (i = 0; i < ARRAY_SIZE(command_list); i++) {
type_conversion,add-interactive.c,1148,-,+,,39,"		struct command_item *util = xcalloc(1, sizeof(*util));"
type_conversion,add-interactive.c,1174,-,+,,53,"	    repo_refresh_and_write_index(r, REFRESH_QUIET, 0, 1,"
type_conversion,add-interactive.c,1184,-,+,,11,		if (i < 0 || i >= commands.items.nr)
type_conversion,add-patch.c,83,-,+,,16,"	.is_reverse = 1,"
type_conversion,add-patch.c,84,-,+,,16,"	.index_only = 1,"
type_conversion,add-patch.c,107,-,+,,16,"	.index_only = 1,"
type_conversion,add-patch.c,130,-,+,,16,"	.is_reverse = 1,"
type_conversion,add-patch.c,151,-,+,,24,"	.apply_for_checkout = 1,"
type_conversion,add-patch.c,153,-,+,,16,"	.is_reverse = 1,"
type_conversion,add-patch.c,174,-,+,,24,"	.apply_for_checkout = 1,"
type_conversion,add-patch.c,198,-,+,,16,"	.is_reverse = 1,"
type_conversion,add-patch.c,284,-,+,,11,	for (i = 0; i < s->file_diff_nr; i++)
type_conversion,add-patch.c,313,-,+,,16,	cp->git_cmd = 1;
type_conversion,add-patch.c,326,-,+,,6,"	if (*pend != ',') {"
type_conversion,add-patch.c,327,-,+,,12,		*count = 1;
type_conversion,add-patch.c,352,-,+,,38,	hunk->start = eol - s->plain.buf + (*eol == '\n');
type_conversion,add-patch.c,353,-,+,,24,	header->extra_start = p - s->plain.buf;
type_conversion,add-patch.c,357,-,+,,61,		header->colored_extra_start = header->colored_extra_end = 0;
type_conversion,add-patch.c,366,-,+,,19,"	p = memmem(line, eol - line, ""@@ -"", 4);"
type_conversion,add-patch.c,367,-,+,,40,"	if (p && (p = memmem(p + 4, eol - p - 4, "" @@"", 3))) {"
type_conversion,add-patch.c,368,-,+,,33,		header->colored_extra_start = p + 3 - s->colored.buf;
type_conversion,add-patch.c,372,-,+,,41,		header->suppress_colored_line_range = 1;
type_conversion,add-patch.c,374,-,+,,48,	hunk->colored_start = eol - s->colored.buf + (*eol == '\n');
type_conversion,add-patch.c,386,-,+,,7,		if (*p < '0' || *(p++) > '7')
type_conversion,add-patch.c,393,-,+,,6,	if (marker == '-' || marker == '+')
type_conversion,add-patch.c,408,-,+,,68,"	char *p, *pend, *colored_p = NULL, *colored_pend = NULL, marker = '\0';"
type_conversion,add-patch.c,409,-,+,,27,"	size_t file_diff_alloc = 0, i, color_arg_index;"
type_conversion,add-patch.c,429,-,+,,18,	for (i = 0; i < ps->nr; i++)
type_conversion,add-patch.c,434,-,+,,36,"	res = capture_command(&cp, plain, 0);"
type_conversion,add-patch.c,450,-,+,,46,"		xsnprintf((char *)args.v[color_arg_index], 8, ""--color"");"
type_conversion,add-patch.c,453,-,+,,47,"		res = capture_command(&colored_cp, colored, 0);"
type_conversion,add-patch.c,463,-,+,,24,			filter_cp.git_cmd = 0;
type_conversion,add-patch.c,464,-,+,,26,			filter_cp.use_shell = 1;
type_conversion,add-patch.c,469,-,+,,13,"					 NULL, 0) < 0)"
type_conversion,add-patch.c,485,-,+,,31,"		char *eol = memchr(p, '\n', pend - p);"
type_conversion,add-patch.c,498,-,+,,18,			hunk->start = p - plain->buf;
type_conversion,add-patch.c,500,-,+,,27,				hunk->colored_start = colored_p - colored->buf;
type_conversion,add-patch.c,501,-,+,,13,			marker = '\0';
type_conversion,add-patch.c,510,-,+,,8,			if (marker == '-' || marker == '+')
type_conversion,add-patch.c,521,-,+,,18,			hunk->start = p - plain->buf;
type_conversion,add-patch.c,523,-,+,,27,				hunk->colored_start = colored_p - colored->buf;
type_conversion,add-patch.c,526,-,+,,26,				file_diff->deleted = 1;
type_conversion,add-patch.c,537,-,+,,23,			file_diff->added = 1;
type_conversion,add-patch.c,540,-,+,,29,"			   is_octal(mode_change, eol - mode_change)) {"
type_conversion,add-patch.c,552,-,+,,29,			file_diff->mode_change = 1;
type_conversion,add-patch.c,555,-,+,,29,			file_diff->hunk->start = p - plain->buf;
type_conversion,add-patch.c,558,-,+,,6,					colored_p - colored->buf;
type_conversion,add-patch.c,561,-,+,,29,"			   is_octal(mode_change, eol - mode_change)) {"
type_conversion,add-patch.c,570,-,+,,30,			if (file_diff->hunk_nr != 1)
type_conversion,add-patch.c,573,-,+,,8,			if (p - plain->buf != file_diff->hunk->end)
type_conversion,add-patch.c,579,-,+,,24,			file_diff->binary = 1;
type_conversion,add-patch.c,588,-,+,,8,		if ((marker == '-' || marker == '+') && *p == ' ')
type_conversion,add-patch.c,590,-,+,,17,		if (marker && *p != '\\')
type_conversion,add-patch.c,594,-,+,,15,		hunk->end = p - plain->buf;
type_conversion,add-patch.c,598,-,+,,10,						   colored_pend - colored_p);
type_conversion,add-patch.c,610,-,+,,24,			hunk->colored_end = colored_p - colored->buf;
type_conversion,add-patch.c,614,-,+,,30,			if (file_diff->hunk_nr != 1)
type_conversion,add-patch.c,648,-,+,,25,	return eol - sb->buf + 1;
type_conversion,add-patch.c,656,-,+,,33,	if (hunk->header.old_offset != 0 || hunk->header.new_offset != 0) {
type_conversion,add-patch.c,686,-,+,,18,			old_offset -= delta;
type_conversion,add-patch.c,688,-,+,,18,			new_offset += delta;
type_conversion,add-patch.c,691,-,+,,28,		if (header->old_count != 1)
type_conversion,add-patch.c,694,-,+,,28,		if (header->new_count != 1)
type_conversion,add-patch.c,724,-,+,,29,		file_diff->mode_change && file_diff->hunk->use != USE_HUNK;
type_conversion,add-patch.c,728,-,+,,24,"		render_hunk(s, head, 0, colored, out);"
type_conversion,add-patch.c,756,-,+,,18,	if (!use_all && hunk->use != USE_HUNK)
type_conversion,add-patch.c,761,-,+,,48,	merged->colored_start = merged->colored_end = 0;
type_conversion,add-patch.c,763,-,+,,13,	for (; i + 1 < file_diff->hunk_nr; i++) {
type_conversion,add-patch.c,773,-,+,,20,		if ((!use_all && hunk->use != USE_HUNK) ||
type_conversion,add-patch.c,774,-,+,,48,		    header->new_offset >= next->new_offset + merged->delta ||
type_conversion,add-patch.c,776,-,+,,28,		    < next->new_offset + merged->delta)
type_conversion,add-patch.c,786,-,+,,12,			delta = 0;
type_conversion,add-patch.c,790,-,+,,27,				+ header->new_count - merged->delta
type_conversion,add-patch.c,804,-,+,,13,			for (j = 0; j < overlapping_line_count; j++) {
type_conversion,add-patch.c,815,-,+,,9,				if (plain[overlap_end] != ' ')
type_conversion,add-patch.c,858,-,+,,12,			delta = merged->delta;
type_conversion,add-patch.c,881,-,+,,18,	ssize_t delta = 0;
type_conversion,add-patch.c,885,-,+,,11,	for (i = file_diff->mode_change; i < file_diff->hunk_nr; i++) {
type_conversion,add-patch.c,886,-,+,,26,		struct hunk merged = { 0 };
type_conversion,add-patch.c,889,-,+,,19,		if (!use_all && hunk->use != USE_HUNK)
type_conversion,add-patch.c,917,-,+,,54,"	size_t end, colored_end, current, colored_current = 0, context_line_count;"
type_conversion,add-patch.c,925,-,+,,30,	if (hunk->splittable_into < 2)
type_conversion,add-patch.c,934,-,+,,42,	file_diff->hunk_nr += splittable_into - 1;
type_conversion,add-patch.c,942,-,+,,26,	hunk->splittable_into = 1;
type_conversion,add-patch.c,943,-,+,,41,"	memset(hunk + 1, 0, (splittable_into - 1) * sizeof(*hunk));"
type_conversion,add-patch.c,946,-,+,,42,	header->old_count = header->new_count = 0;
type_conversion,add-patch.c,951,-,+,,11,	marker = '\0';
type_conversion,add-patch.c,952,-,+,,23,	context_line_count = 0;
type_conversion,add-patch.c,954,-,+,,27,	while (splittable_into > 1) {
type_conversion,add-patch.c,964,-,+,,8,		if ((marker == '-' || marker == '+') && ch == ' ') {
type_conversion,add-patch.c,969,-,+,,25,			context_line_count = 0;
type_conversion,add-patch.c,979,-,+,,7,		if (marker != ' ' || (ch != '-' && ch != '+')) {
type_conversion,add-patch.c,982,-,+,,8,			if (ch == '\\')
type_conversion,add-patch.c,983,-,+,,19,				ch = marker ? marker : ' ';
type_conversion,add-patch.c,986,-,+,,8,			if (ch == ' ')
type_conversion,add-patch.c,988,-,+,,13,			else if (ch == '-')
type_conversion,add-patch.c,990,-,+,,13,			else if (ch == '+')
type_conversion,add-patch.c,1018,-,+,,25,			context_line_count = 0;
type_conversion,add-patch.c,1043,-,+,,27,		hunk->splittable_into = 1;
type_conversion,add-patch.c,1048,-,+,,24,		context_line_count = 0;
type_conversion,add-patch.c,1081,-,+,,8,			if (plain[eol] == '\n')
type_conversion,add-patch.c,1083,-,+,,16,		next = eol + (eol < hunk->end);
type_conversion,add-patch.c,1084,-,+,,36,		if (eol > current && plain[eol - 1] == '\r')
type_conversion,add-patch.c,1088,-,+,,10,			      plain[current] == '-' ?
type_conversion,add-patch.c,1090,-,+,,10,			      plain[current] == '+' ?
type_conversion,add-patch.c,1110,-,+,,23,"	render_hunk(s, hunk, 0, 0, &s->buf);"
type_conversion,add-patch.c,1138,-,+,,11,	for (i = 0; i < s->buf.len; ) {
type_conversion,add-patch.c,1158,-,+,,6,	if (s->plain.buf[hunk->start] == '@' &&
type_conversion,add-patch.c,1171,-,+,,42,	header->old_count = header->new_count = 0;
type_conversion,add-patch.c,1173,-,+,,11,		switch (s->plain.buf[i]) {
type_conversion,add-patch.c,1189,-,+,,9,"	return orig_old_count - orig_new_count
		- header->old_count + header->new_count;"
type_conversion,add-patch.c,1204,-,+,,54,"	if (pipe_command(&cp, s->buf.buf, s->buf.len, NULL, 0, NULL, 0))"
type_conversion,add-patch.c,1295,-,+,,17,"				      NULL, 0, NULL, 0);"
type_conversion,add-patch.c,1300,-,+,,13,"					 NULL, 0, NULL, 0);"
type_conversion,add-patch.c,1306,-,+,,15,"			     NULL, 0, NULL, 0);"
type_conversion,add-patch.c,1311,-,+,,15,"			     NULL, 0, NULL, 0);"
type_conversion,add-patch.c,1323,-,+,,27,"					    diff->len, NULL, 0, NULL, 0);"
type_conversion,add-patch.c,1328,-,+,,32,"		fwrite(diff->buf, diff->len, 1, stdout);"
type_conversion,add-patch.c,1349,-,+,,7,		if (plain->buf[i] != ' ')
type_conversion,add-patch.c,1371,-,+,,35,"		strbuf_addf(&s->buf, ""%c%2d: "", hunk->use == USE_HUNK ? '+'"
type_conversion,add-patch.c,1372,-,+,,10,"			    : hunk->use == SKIP_HUNK ? '-' : ' ',"
type_conversion,add-patch.c,1396,-,+,,22,	size_t hunk_index = 0;
type_conversion,add-patch.c,1397,-,+,,71,"	ssize_t i, undecided_previous, undecided_next, rendered_hunk_index = -1;"
type_conversion,add-patch.c,1422,-,+,,17,			hunk_index = 0;
type_conversion,add-patch.c,1426,-,+,,24,		undecided_previous = -1;
type_conversion,add-patch.c,1427,-,+,,20,		undecided_next = -1;
type_conversion,add-patch.c,1430,-,+,,34,			for (i = hunk_index - 1; i >= 0; i--)
type_conversion,add-patch.c,1431,-,+,,9,				if (file_diff->hunk[i].use == UNDECIDED_HUNK) {
type_conversion,add-patch.c,1436,-,+,,29,			for (i = hunk_index + 1; i < file_diff->hunk_nr; i++)
type_conversion,add-patch.c,1437,-,+,,9,				if (file_diff->hunk[i].use == UNDECIDED_HUNK) {
type_conversion,add-patch.c,1444,-,+,,28,		if (undecided_previous < 0 && undecided_next < 0 &&
type_conversion,add-patch.c,1445,-,+,,7,		    hunk->use != UNDECIDED_HUNK)
type_conversion,add-patch.c,1450,-,+,,8,			if (rendered_hunk_index != hunk_index) {
type_conversion,add-patch.c,1451,-,+,,26,"				render_hunk(s, hunk, 0, colored, &s->buf);"
type_conversion,add-patch.c,1453,-,+,,27,				rendered_hunk_index = hunk_index;
type_conversion,add-patch.c,1457,-,+,,30,			if (undecided_previous >= 0) {
type_conversion,add-patch.c,1458,-,+,,18,				permitted |= ALLOW_GOTO_PREVIOUS_UNDECIDED_HUNK;
type_conversion,add-patch.c,1462,-,+,,18,				permitted |= ALLOW_GOTO_PREVIOUS_HUNK;
type_conversion,add-patch.c,1465,-,+,,26,			if (undecided_next >= 0) {
type_conversion,add-patch.c,1466,-,+,,18,				permitted |= ALLOW_GOTO_NEXT_UNDECIDED_HUNK;
type_conversion,add-patch.c,1469,-,+,,21,			if (hunk_index + 1 < file_diff->hunk_nr) {
type_conversion,add-patch.c,1470,-,+,,18,				permitted |= ALLOW_GOTO_NEXT_HUNK;
type_conversion,add-patch.c,1473,-,+,,29,			if (file_diff->hunk_nr > 1) {
type_conversion,add-patch.c,1474,-,+,,18,				permitted |= ALLOW_SEARCH_AND_GOTO;
type_conversion,add-patch.c,1477,-,+,,32,			if (hunk->splittable_into > 1) {
type_conversion,add-patch.c,1478,-,+,,18,				permitted |= ALLOW_SPLIT;
type_conversion,add-patch.c,1481,-,+,,21,			if (hunk_index + 1 > file_diff->mode_change &&
type_conversion,add-patch.c,1483,-,+,,18,				permitted |= ALLOW_EDIT;
type_conversion,add-patch.c,1498,-,+,,34,"			      (uintmax_t)hunk_index + 1,"
type_conversion,add-patch.c,1501,-,+,,9,						: 1));
type_conversion,add-patch.c,1513,-,+,,7,		if (ch == 'y') {
type_conversion,add-patch.c,1516,-,+,,34,			hunk_index = undecided_next < 0 ?
type_conversion,add-patch.c,1517,-,+,,26,				file_diff->hunk_nr : undecided_next;
type_conversion,add-patch.c,1518,-,+,,14,		} else if (ch == 'n') {
type_conversion,add-patch.c,1521,-,+,,14,		} else if (ch == 'a') {
type_conversion,add-patch.c,1525,-,+,,10,					if (hunk->use == UNDECIDED_HUNK)
type_conversion,add-patch.c,1528,-,+,,15,			} else if (hunk->use == UNDECIDED_HUNK) {
type_conversion,add-patch.c,1531,-,+,,14,		} else if (ch == 'd' || ch == 'q') {
type_conversion,add-patch.c,1535,-,+,,10,					if (hunk->use == UNDECIDED_HUNK)
type_conversion,add-patch.c,1538,-,+,,15,			} else if (hunk->use == UNDECIDED_HUNK) {
type_conversion,add-patch.c,1541,-,+,,8,			if (ch == 'q') {
type_conversion,add-patch.c,1545,-,+,,14,		} else if (s->answer.buf[0] == 'K') {
type_conversion,add-patch.c,1546,-,+,,8,			if (permitted & ALLOW_GOTO_PREVIOUS_HUNK)
type_conversion,add-patch.c,1550,-,+,,14,		} else if (s->answer.buf[0] == 'J') {
type_conversion,add-patch.c,1551,-,+,,8,			if (permitted & ALLOW_GOTO_NEXT_HUNK)
type_conversion,add-patch.c,1555,-,+,,14,		} else if (s->answer.buf[0] == 'k') {
type_conversion,add-patch.c,1556,-,+,,8,			if (permitted & ALLOW_GOTO_PREVIOUS_UNDECIDED_HUNK)
type_conversion,add-patch.c,1557,-,+,,18,				hunk_index = undecided_previous;
type_conversion,add-patch.c,1560,-,+,,14,		} else if (s->answer.buf[0] == 'j') {
type_conversion,add-patch.c,1561,-,+,,8,			if (permitted & ALLOW_GOTO_NEXT_UNDECIDED_HUNK)
type_conversion,add-patch.c,1562,-,+,,18,				hunk_index = undecided_next;
type_conversion,add-patch.c,1565,-,+,,14,		} else if (s->answer.buf[0] == 'g') {
type_conversion,add-patch.c,1569,-,+,,10,			if (!(permitted & ALLOW_SEARCH_AND_GOTO)) {
type_conversion,add-patch.c,1573,-,+,,30,"			strbuf_remove(&s->answer, 0, 1);"
type_conversion,add-patch.c,1576,-,+,,12,			if (i < (int)file_diff->mode_change)
type_conversion,add-patch.c,1577,-,+,,9,				i = file_diff->mode_change;
type_conversion,add-patch.c,1578,-,+,,28,			while (s->answer.len == 0) {
type_conversion,add-patch.c,1579,-,+,,37,"				i = display_hunks(s, file_diff, i);"
type_conversion,add-patch.c,1580,-,+,,18,"				printf(""%s"", i < file_diff->hunk_nr ?"
type_conversion,add-patch.c,1595,-,+,,13,			else if (0 < response && response <= file_diff->hunk_nr)
type_conversion,add-patch.c,1596,-,+,,29,				hunk_index = response - 1;
type_conversion,add-patch.c,1602,-,+,,14,		} else if (s->answer.buf[0] == '/') {
type_conversion,add-patch.c,1606,-,+,,10,			if (!(permitted & ALLOW_SEARCH_AND_GOTO)) {
type_conversion,add-patch.c,1610,-,+,,30,"			strbuf_remove(&s->answer, 0, 1);"
type_conversion,add-patch.c,1612,-,+,,25,			if (s->answer.len == 0) {
type_conversion,add-patch.c,1619,-,+,,26,				if (s->answer.len == 0)
type_conversion,add-patch.c,1632,-,+,,8,			i = hunk_index;
type_conversion,add-patch.c,1635,-,+,,41,"				render_hunk(s, file_diff->hunk + i, 0, 0,"
type_conversion,add-patch.c,1637,-,+,,37,"				if (regexec(&regex, s->buf.buf, 0, NULL, 0)"
type_conversion,add-patch.c,1641,-,+,,9,				if (i == file_diff->hunk_nr)
type_conversion,add-patch.c,1642,-,+,,10,					i = 0;
type_conversion,add-patch.c,1643,-,+,,9,				if (i != hunk_index)
type_conversion,add-patch.c,1649,-,+,,17,			hunk_index = i;
type_conversion,add-patch.c,1650,-,+,,14,		} else if (s->answer.buf[0] == 's') {
type_conversion,add-patch.c,1652,-,+,,10,			if (!(permitted & ALLOW_SPLIT)) {
type_conversion,add-patch.c,1655,-,+,,11,					     hunk - file_diff->hunk)) {
type_conversion,add-patch.c,1659,-,+,,27,				rendered_hunk_index = -1;
type_conversion,add-patch.c,1661,-,+,,14,		} else if (s->answer.buf[0] == 'e') {
type_conversion,add-patch.c,1662,-,+,,10,			if (!(permitted & ALLOW_EDIT))
type_conversion,add-patch.c,1668,-,+,,14,		} else if (s->answer.buf[0] == 'p') {
type_conversion,add-patch.c,1669,-,+,,26,			rendered_hunk_index = -1;
type_conversion,add-patch.c,1670,-,+,,14,		} else if (s->answer.buf[0] == '?') {
type_conversion,add-patch.c,1680,-,+,,26,			for (; *p; p = eol + (*eol == '\n')) {
type_conversion,add-patch.c,1688,-,+,,9,"				if (*p != '?' && !strchr(s->buf.buf, *p))"
type_conversion,add-patch.c,1701,-,+,,14,	for (i = 0; i < file_diff->hunk_nr; i++)
type_conversion,add-patch.c,1702,-,+,,7,		if (file_diff->hunk[i].use == USE_HUNK)
type_conversion,add-patch.c,1705,-,+,,6,	if (i < file_diff->hunk_nr ||
type_conversion,add-patch.c,1706,-,+,,30,	    (!file_diff->hunk_nr && file_diff->head.use == USE_HUNK)) {
type_conversion,add-patch.c,1714,-,+,,9,					   s->mode->is_reverse);
type_conversion,add-patch.c,1719,-,+,,13,"					 NULL, 0, NULL, 0))"
type_conversion,add-patch.c,1723,-,+,,56,"			repo_refresh_and_write_index(s->s.r, REFRESH_QUIET, 0,"
type_conversion,add-patch.c,1737,-,+,,27,"	size_t i, binary_count = 0;"
type_conversion,add-patch.c,1741,-,+,,6,	if (mode == ADD_P_STASH)
type_conversion,add-patch.c,1743,-,+,,11,	else if (mode == ADD_P_RESET) {
type_conversion,add-patch.c,1748,-,+,,13,	} else if (mode == ADD_P_CHECKOUT) {
type_conversion,add-patch.c,1755,-,+,,13,	} else if (mode == ADD_P_WORKTREE) {
type_conversion,add-patch.c,1769,-,+,,54,"	     repo_refresh_and_write_index(r, REFRESH_QUIET, 0, 1,"
type_conversion,add-patch.c,1776,-,+,,11,	for (i = 0; i < s.file_diff_nr; i++)
type_conversion,add-patch.c,1782,-,+,,24,	if (s.file_diff_nr == 0)
type_conversion,add.c,43,-,+,,14,	for (i = 0; i < the_repository->index->cache_nr; i++) {
type_conversion,add.c,71,-,+,,14,	for (i = 0; i < the_repository->index->cache_nr; i++) {
type_conversion,add.c,97,-,+,,17,"	seen = xcalloc(pathspec->nr, 1);"
type_conversion,add.c,106,-,+,,12,	dir->nr = dst - dir->entries;
type_conversion,add.c,121,-,+,,17,"	seen = xcalloc(pathspec->nr, 1);"
type_conversion,add.c,159,-,+,,28,"	parse_pathspec(&pathspec, 0,"
type_conversion,add.c,193,-,+,,46,	rev.diffopt.flags.ignore_dirty_submodules = 1;
type_conversion,add.c,197,-,+,,23,"	run_diff_files(&rev, 0);"
type_conversion,add.c,207,-,+,,18,	child.git_cmd = 1;
type_conversion,add.c,410,-,+,,21,	if (chmod_arg && ((chmod_arg[0] != '-' && chmod_arg[0] != '+') ||
type_conversion,add.c,411,-,+,,6,			  chmod_arg[1] != 'x' || chmod_arg[2]))
type_conversion,add.c,426,-,+,,28,"	parse_pathspec(&pathspec, 0,"
type_conversion,add.c,435,-,+,,34,"		parse_pathspec_file(&pathspec, 0,"
type_conversion,add.c,461,-,+,,57,"	if (repo_read_index_preload(the_repository, &pathspec, 0) < 0)"
type_conversion,add.c,472,-,+,,17,			dir.flags |= DIR_COLLECT_IGNORED;
type_conversion,add.c,552,-,+,,23,"	ps_matched = xcalloc(pathspec.nr, 1);"
type_conversion,advice.c,24,-,+,,10,		return ADVICE_COLOR_RESET;
type_conversion,advice.c,26,-,+,,10,		return ADVICE_COLOR_HINT;
type_conversion,advice.c,130,-,+,,16,	int enabled = advice_setting[type].level != ADVICE_LEVEL_DISABLED;
type_conversion,advice.c,138,-,+,,6,	if (type == ADVICE_PUSH_UPDATE_REJECTED)
type_conversion,advice.c,180,-,+,,14,	for (i = 0; i < ARRAY_SIZE(advice_setting); i++) {
type_conversion,advice.c,196,-,+,,14,	for (i = 0; i < ARRAY_SIZE(advice_setting); i++)
type_conversion,alias.c,59,-,+,,8,"			if (c == '""' || c =='\\')"
type_conversion,alias.c,61,-,+,,22,"			strbuf_addch(buf, c);"
type_conversion,alias.c,78,-,+,,27,"	size_t src, dst, count = 0, size = 16;"
type_conversion,alias.c,79,-,+,,16,	char quoted = 0;
type_conversion,alias.c,85,-,+,,19,	for (src = dst = 0; cmdline[src];) {
type_conversion,alias.c,88,-,+,,21,			cmdline[dst++] = 0;
type_conversion,alias.c,94,-,+,,26,"		} else if (!quoted && (c == '\'' || c == '""')) {"
type_conversion,alias.c,97,-,+,,14,		} else if (c == quoted) {
type_conversion,alias.c,98,-,+,,13,			quoted = 0;
type_conversion,alias.c,101,-,+,,8,			if (c == '\\' && quoted != '\'') {
type_conversion,alias.c,114,-,+,,17,	cmdline[dst] = 0;
type_conversion,alias.c,129,-,+,,9,	return count;
type_conversion,alloc.c,41,-,+,,17,"	return xcalloc(1, sizeof(struct alloc_state));"
type_conversion,alloc.c,76,-,+,,19,	b->object.type = OBJ_BLOB;
type_conversion,alloc.c,83,-,+,,19,	t->object.type = OBJ_TREE;
type_conversion,alloc.c,90,-,+,,19,	t->object.type = OBJ_TAG;
type_conversion,alloc.c,97,-,+,,14,	obj->type = OBJ_NONE;
type_conversion,alloc.c,114,-,+,,19,	c->object.type = OBJ_COMMIT;
type_conversion,am.c,49,-,+,,9,"	return strchrnul(msg, '\n') - msg;"
type_conversion,am.c,170,-,+,,20,	state->scissors = SCISSORS_UNSET;
type_conversion,am.c,171,-,+,,21,	state->quoted_cr = quoted_cr_unset;
type_conversion,am.c,210,-,+,,16,		*opt_value = STOP_ON_EMPTY_COMMIT;
type_conversion,am.c,212,-,+,,16,		*opt_value = DROP_EMPTY_COMMIT;
type_conversion,am.c,214,-,+,,16,		*opt_value = KEEP_EMPTY_COMMIT;
type_conversion,am.c,293,-,+,,49,"	if (strbuf_read_file(sb, am_path(state, file), 0) >= 0) {"
type_conversion,am.c,297,-,+,,10,		return sb->len;
type_conversion,am.c,437,-,+,,17,		state->keep = KEEP_TRUE;
type_conversion,am.c,439,-,+,,17,		state->keep = KEEP_NON_PATCH;
type_conversion,am.c,441,-,+,,17,		state->keep = KEEP_FALSE;
type_conversion,am.c,448,-,+,,21,		state->scissors = SCISSORS_TRUE;
type_conversion,am.c,450,-,+,,21,		state->scissors = SCISSORS_FALSE;
type_conversion,am.c,452,-,+,,21,		state->scissors = SCISSORS_UNSET;
type_conversion,am.c,456,-,+,,22,		state->quoted_cr = quoted_cr_unset;
type_conversion,am.c,545,-,+,,40,		if (sb.len != the_hash_algo->hexsz * 2 + 1) {
type_conversion,am.c,555,-,+,,7,		if (*p != ' ') {
type_conversion,am.c,602,-,+,,7,		if (*sb.buf == '\t' || *sb.buf == ' ')
type_conversion,am.c,606,-,+,,31,"		if (regexec(&regex, sb.buf, 0, NULL, 0)) {"
type_conversion,am.c,635,-,+,,10,		return PATCH_FORMAT_MBOX;
type_conversion,am.c,689,-,+,,9,	return ret;
type_conversion,am.c,703,-,+,,15,	cp.git_cmd = 1;
type_conversion,am.c,715,-,+,,36,"	ret = capture_command(&cp, &last, 8);"
type_conversion,am.c,816,-,+,,27,"	while (strbuf_fread(&sb, 8192, in) > 0) {"
type_conversion,am.c,817,-,+,,18,"		fwrite(sb.buf, 1, sb.len, out);"
type_conversion,am.c,855,-,+,,7,		if (*sb.buf == '#')
type_conversion,am.c,919,-,+,,21,			tz2 = labs(tz) / 3600 * 100 + labs(tz) % 3600 / 60;
type_conversion,am.c,920,-,+,,13,			if (tz > 0)
type_conversion,am.c,923,-,+,,52,"			fprintf(out, ""Date: %s\n"", show_date(timestamp, tz2, DATE_MODE(RFC2822)));"
type_conversion,am.c,933,-,+,,27,"	while (strbuf_fread(&sb, 8192, in) > 0) {"
type_conversion,am.c,934,-,+,,18,"		fwrite(sb.buf, 1, sb.len, out);"
type_conversion,am.c,1002,-,+,,24,"	if (mkdir(state->dir, 0777) < 0 && errno != EEXIST)"
type_conversion,am.c,1025,-,+,,7,	case KEEP_FALSE:
type_conversion,am.c,1028,-,+,,7,	case KEEP_TRUE:
type_conversion,am.c,1031,-,+,,7,	case KEEP_NON_PATCH:
type_conversion,am.c,1042,-,+,,7,	case SCISSORS_UNSET:
type_conversion,am.c,1045,-,+,,7,	case SCISSORS_FALSE:
type_conversion,am.c,1048,-,+,,7,	case SCISSORS_TRUE:
type_conversion,am.c,1057,-,+,,7,	case quoted_cr_unset:
type_conversion,am.c,1060,-,+,,7,	case quoted_cr_nowarn:
type_conversion,am.c,1063,-,+,,7,	case quoted_cr_warn:
type_conversion,am.c,1066,-,+,,7,	case quoted_cr_strip:
type_conversion,am.c,1087,-,+,,6,"					0,"
type_conversion,am.c,1093,-,+,,31,"					NULL, ""ORIG_HEAD"", NULL, 0);"
type_conversion,am.c,1119,-,+,,19,	state->msg_len = 0;
type_conversion,am.c,1188,-,+,,22,"	append_signoff(&sb, 0, 0);"
type_conversion,am.c,1220,-,+,,7,	case KEEP_FALSE:
type_conversion,am.c,1222,-,+,,7,	case KEEP_TRUE:
type_conversion,am.c,1225,-,+,,7,	case KEEP_NON_PATCH:
type_conversion,am.c,1236,-,+,,7,	case SCISSORS_UNSET:
type_conversion,am.c,1238,-,+,,7,	case SCISSORS_FALSE:
type_conversion,am.c,1241,-,+,,7,	case SCISSORS_TRUE:
type_conversion,am.c,1249,-,+,,7,	case quoted_cr_unset:
type_conversion,am.c,1251,-,+,,7,	case quoted_cr_nowarn:
type_conversion,am.c,1252,-,+,,7,	case quoted_cr_warn:
type_conversion,am.c,1253,-,+,,7,	case quoted_cr_strip:
type_conversion,am.c,1360,-,+,,40,"	if (split_ident_line(&id, ident_line, ident_len) < 0)"
type_conversion,am.c,1366,-,+,,28,"			xmemdupz(id.name_begin, id.name_end - id.name_begin);"
type_conversion,am.c,1373,-,+,,28,"			xmemdupz(id.mail_begin, id.mail_end - id.mail_begin);"
type_conversion,am.c,1399,-,+,,18,	rev_info.diff = 1;
type_conversion,am.c,1400,-,+,,20,	rev_info.abbrev = 0;
type_conversion,am.c,1401,-,+,,27,	rev_info.disable_stdin = 1;
type_conversion,am.c,1402,-,+,,28,	rev_info.show_root_diff = 1;
type_conversion,am.c,1404,-,+,,26,	rev_info.no_commit_id = 1;
type_conversion,am.c,1405,-,+,,34,	rev_info.diffopt.flags.binary = 1;
type_conversion,am.c,1406,-,+,,38,	rev_info.diffopt.flags.full_index = 1;
type_conversion,am.c,1436,-,+,,18,	rev_info.diff = 1;
type_conversion,am.c,1437,-,+,,27,	rev_info.disable_stdin = 1;
type_conversion,am.c,1438,-,+,,26,	rev_info.no_commit_id = 1;
type_conversion,am.c,1508,-,+,,34,"	opts_left = apply_parse_options(apply_opts.nr, apply_argv,"
type_conversion,am.c,1533,-,+,,40,"	res = apply_all_patches(&apply_state, apply_paths.nr, apply_paths.v, options);"
type_conversion,am.c,1559,-,+,,15,	cp.git_cmd = 1;
type_conversion,am.c,1605,-,+,,46,		rev_info.diffopt.filter |= diff_filter_bit('A');
type_conversion,am.c,1606,-,+,,46,		rev_info.diffopt.filter |= diff_filter_bit('M');
type_conversion,am.c,1607,-,+,,49,"		add_pending_oid(&rev_info, ""HEAD"", &our_tree, 0);"
type_conversion,am.c,1707,-,+,,22,"			&commit, old_oid, 0,"
type_conversion,am.c,1764,-,+,,21,"		if (!fgets(reply, sizeof(reply), stdin))"
type_conversion,am.c,1767,-,+,,7,		if (*reply == 'y' || *reply == 'Y') {
type_conversion,am.c,1769,-,+,,14,		} else if (*reply == 'a' || *reply == 'A') {
type_conversion,am.c,1772,-,+,,14,		} else if (*reply == 'n' || *reply == 'N') {
type_conversion,am.c,1774,-,+,,14,		} else if (*reply == 'e' || *reply == 'E') {
type_conversion,am.c,1782,-,+,,14,		} else if (*reply == 'v' || *reply == 'V') {
type_conversion,am.c,1808,-,+,,66,"	if (repo_refresh_and_write_index(the_repository, REFRESH_QUIET, 0, 0,"
type_conversion,am.c,1855,-,+,,9,			case DROP_EMPTY_COMMIT:
type_conversion,am.c,1859,-,+,,9,			case KEEP_EMPTY_COMMIT:
type_conversion,am.c,1864,-,+,,9,			case STOP_ON_EMPTY_COMMIT:
type_conversion,am.c,2003,-,+,,16,	opts.update = 1;
type_conversion,am.c,2004,-,+,,15,	opts.merge = 1;
type_conversion,am.c,2005,-,+,,23,	opts.reset = reset ? UNPACK_RESET_PROTECT_UNTRACKED : 0;
type_conversion,am.c,2006,-,+,,26,	opts.preserve_ignored = 0; /* FIXME: !overwrite_ignore */
type_conversion,am.c,2011,-,+,,19,"	if (unpack_trees(2, t, &opts)) {"
type_conversion,am.c,2041,-,+,,15,	opts.merge = 1;
type_conversion,am.c,2045,-,+,,19,"	if (unpack_trees(1, t, &opts)) {"
type_conversion,am.c,2201,-,+,,40,"				has_curr_head ? &curr_head : NULL, 0,"
type_conversion,am.c,2222,-,+,,17,		cmd.git_cmd = 1;
type_conversion,am.c,2237,-,+,,42,"	len = strbuf_read_file(&sb, patch_path, 0);"
type_conversion,am.c,2256,-,+,,16,		*opt_value = PATCH_FORMAT_UNKNOWN;
type_conversion,am.c,2258,-,+,,16,		*opt_value = PATCH_FORMAT_MBOX;
type_conversion,am.c,2260,-,+,,16,		*opt_value = PATCH_FORMAT_STGIT;
type_conversion,am.c,2262,-,+,,16,		*opt_value = PATCH_FORMAT_STGIT_SERIES;
type_conversion,am.c,2264,-,+,,16,		*opt_value = PATCH_FORMAT_HG;
type_conversion,am.c,2266,-,+,,16,		*opt_value = PATCH_FORMAT_MBOXRD;
type_conversion,am.c,2284,-,+,,16,		*opt_value = opt->defval;
type_conversion,am.c,2286,-,+,,16,		*opt_value = RESUME_SHOW_PATCH_RAW;
type_conversion,am.c,2288,-,+,,16,		*opt_value = RESUME_SHOW_PATCH_DIFF;
type_conversion,am.c,2304,-,+,,21,	int patch_format = PATCH_FORMAT_UNKNOWN;
type_conversion,am.c,2394,-,+,,5,"		  PARSE_OPT_CMDMODE | PARSE_OPT_OPTARG | PARSE_OPT_NONEG | PARSE_OPT_LITERAL_ARGHELP,"
type_conversion,am.c,2395,-,+,,35,"		  parse_opt_show_current_patch, RESUME_SHOW_PATCH_RAW },"
type_conversion,am.c,2407,-,+,,40,"		  PARSE_OPT_OPTARG, NULL, (intptr_t) """" },"
type_conversion,am.c,2436,-,+,,52,"	if (repo_read_index_preload(the_repository, NULL, 0) < 0)"
type_conversion,am.c,2451,-,+,,16,		if (argc || (resume_mode == RESUME_FALSE && !isatty(0)))
type_conversion,am.c,2455,-,+,,7,		if (resume_mode == RESUME_FALSE)
type_conversion,am.c,2458,-,+,,24,		if (state.signoff == SIGNOFF_EXPLICIT)
type_conversion,am.c,2470,-,+,,8,			if (resume_mode == RESUME_ABORT || resume_mode == RESUME_QUIT) {
type_conversion,am.c,2508,-,+,,22,"		am_resolve(&state, resume_mode == RESUME_ALLOW_EMPTY ? 1 : 0);"
type_conversion,annotate.c,21,-,+,,19,
type_conversion,apply.c,122,-,+,,28,"	strbuf_init(&state->root, 0);"
type_conversion,apply.c,160,-,+,,7,		if (state->apply_verbosity == verbosity_normal)
type_conversion,apply.c,177,-,+,,6,	if (state->apply_verbosity <= verbosity_silent) {
type_conversion,apply.c,289,-,+,,11,"	for (i = 0, h = 0; i < len; i++) {"
type_conversion,apply.c,291,-,+,,12,			h = h * 3 + (cp[i] & 0xff);
type_conversion,apply.c,308,-,+,,23,	while (s1 < end1 && (end1[-1] == '\r' || end1[-1] == '\n'))
type_conversion,apply.c,310,-,+,,23,	while (s2 < end2 && (end2[-1] == '\r' || end2[-1] == '\n'))
type_conversion,apply.c,325,-,+,,14,		} else if (*s1++ != *s2++)
type_conversion,apply.c,338,-,+,,38,	img->line_allocated[img->nr].flag = flag;
type_conversion,apply.c,363,-,+,,32,		for (next = cp; next < ep && *next != '\n'; next++)
type_conversion,apply.c,367,-,+,,28,"		add_line_info(image, cp, next - cp, 0);"
type_conversion,apply.c,387,-,+,,45,"		quote_c_style(patch->old_name, &sb, NULL, 0);"
type_conversion,apply.c,389,-,+,,45,"		quote_c_style(patch->new_name, &sb, NULL, 0);"
type_conversion,apply.c,394,-,+,,31,"		quote_c_style(n, &sb, NULL, 0);"
type_conversion,apply.c,415,-,+,,26,"	if (strbuf_read(sb, fd, 0) < 0)"
type_conversion,apply.c,431,-,+,,22,	unsigned long len = 0;
type_conversion,apply.c,434,-,+,,7,		if (*buffer++ == '\n')
type_conversion,apply.c,467,-,+,,7,		if ((name[j++] = name[i++]) == '/')
type_conversion,apply.c,468,-,+,,11,			while (name[i] == '/')
type_conversion,apply.c,471,-,+,,12,	name[j] = '\0';
type_conversion,apply.c,500,-,+,,23,"	strbuf_remove(&name, 0, cp - name.buf);"
type_conversion,apply.c,502,-,+,,24,"		strbuf_insert(&name, 0, root->buf, root->len);"
type_conversion,apply.c,510,-,+,,32,"	if (len < strlen("" +0500"") || line[len-strlen("" +0500"")] != ' ')"
type_conversion,apply.c,511,-,+,,10,		return 0;
type_conversion,apply.c,514,-,+,,6,	if (tz[1] != '+' && tz[1] != '-')
type_conversion,apply.c,515,-,+,,10,		return 0;
type_conversion,apply.c,519,-,+,,11,			return 0;
type_conversion,apply.c,521,-,+,,9,	return line + len - tz;
type_conversion,apply.c,528,-,+,,33,"	if (len < strlen("" +08:00"") || line[len - strlen("":00"")] != ':')"
type_conversion,apply.c,529,-,+,,10,		return 0;
type_conversion,apply.c,532,-,+,,6,	if (tz[0] != ' ' || (tz[1] != '+' && tz[1] != '-'))
type_conversion,apply.c,533,-,+,,10,		return 0;
type_conversion,apply.c,535,-,+,,42,	if (!isdigit(*p++) || !isdigit(*p++) || *p++ != ':' ||
type_conversion,apply.c,537,-,+,,10,		return 0;
type_conversion,apply.c,539,-,+,,9,	return line + len - tz;
type_conversion,apply.c,546,-,+,,34,"	if (len < strlen(""72-02-05"") || line[len-strlen(""-05"")] != '-')"
type_conversion,apply.c,547,-,+,,10,		return 0;
type_conversion,apply.c,550,-,+,,42,	if (!isdigit(*p++) || !isdigit(*p++) || *p++ != '-' ||
type_conversion,apply.c,551,-,+,,42,	    !isdigit(*p++) || !isdigit(*p++) || *p++ != '-' ||
type_conversion,apply.c,553,-,+,,10,		return 0;
type_conversion,apply.c,555,-,+,,6,"	if (date - line >= strlen(""19"") &&"
type_conversion,apply.c,559,-,+,,9,	return line + len - date;
type_conversion,apply.c,566,-,+,,35,"	if (len < strlen("" 07:01:32"") || line[len-strlen("":32"")] != ':')"
type_conversion,apply.c,567,-,+,,10,		return 0;
type_conversion,apply.c,571,-,+,,6,	if (*p++ != ' ' ||
type_conversion,apply.c,572,-,+,,42,	    !isdigit(*p++) || !isdigit(*p++) || *p++ != ':' ||
type_conversion,apply.c,573,-,+,,42,	    !isdigit(*p++) || !isdigit(*p++) || *p++ != ':' ||
type_conversion,apply.c,575,-,+,,10,		return 0;
type_conversion,apply.c,587,-,+,,10,		return 0;
type_conversion,apply.c,593,-,+,,6,	if (*p != '.')
type_conversion,apply.c,594,-,+,,10,		return 0;
type_conversion,apply.c,597,-,+,,27,"	n = short_time_len(line, p - line);"
type_conversion,apply.c,599,-,+,,10,		return 0;
type_conversion,apply.c,601,-,+,,9,	return line + len - p + n;
type_conversion,apply.c,609,-,+,,25,	if (!len || line[len - 1] != ' ')
type_conversion,apply.c,610,-,+,,10,		return 0;
type_conversion,apply.c,615,-,+,,7,		if (*p != ' ')
type_conversion,apply.c,616,-,+,,11,			return line + len - (p + 1);
type_conversion,apply.c,634,-,+,,10,		return 0;
type_conversion,apply.c,636,-,+,,24,"	n = sane_tz_len(line, end - line);"
type_conversion,apply.c,638,-,+,,31,"		n = tz_with_colon_len(line, end - line);"
type_conversion,apply.c,641,-,+,,27,"	n = short_time_len(line, end - line);"
type_conversion,apply.c,643,-,+,,33,"		n = fractional_time_len(line, end - line);"
type_conversion,apply.c,646,-,+,,21,"	n = date_len(line, end - line);"
type_conversion,apply.c,648,-,+,,10,		return 0;
type_conversion,apply.c,652,-,+,,10,		return 0;
type_conversion,apply.c,653,-,+,,6,	if (end[-1] == '\t') {	/* Success! */
type_conversion,apply.c,655,-,+,,10,		return line + len - end;
type_conversion,apply.c,657,-,+,,6,	if (end[-1] != ' ')	/* No space before date. */
type_conversion,apply.c,658,-,+,,10,		return 0;
type_conversion,apply.c,661,-,+,,35,"	end -= trailing_spaces_len(line, end - line);"
type_conversion,apply.c,662,-,+,,9,	return line + len - end;
type_conversion,apply.c,681,-,+,,8,			if (c == '\n')
type_conversion,apply.c,683,-,+,,23,"			if (name_terminate(c, terminate))"
type_conversion,apply.c,687,-,+,,7,		if (c == '/' && !--p_value)
type_conversion,apply.c,692,-,+,,8,	len = line - start;
type_conversion,apply.c,703,-,+,,16,		int deflen = strlen(def);
type_conversion,apply.c,704,-,+,,44,"		if (deflen < len && !strncmp(start, def, deflen))"
type_conversion,apply.c,713,-,+,,38,"	return squash_slash(xmemdupz(start, len));"
type_conversion,apply.c,722,-,+,,6,"	if (*line == '""') {"
type_conversion,apply.c,739,-,+,,6,"	if (*line == '""') {"
type_conversion,apply.c,745,-,+,,8,"	len = strchrnul(line, '\n') - line;"
type_conversion,apply.c,811,-,+,,22,	for (cp = nameline; *cp != '\n'; cp++) {
type_conversion,apply.c,812,-,+,,7,		if (*cp == '\t')
type_conversion,apply.c,849,-,+,,15,"	zoneoffset = strtol(timestamp + m[3].rm_so + 1, (char **) &colon, 10);"
type_conversion,apply.c,850,-,+,,6,	if (*colon == ':')
type_conversion,apply.c,851,-,+,,16,"		zoneoffset = zoneoffset * 60 + strtol(colon + 1, NULL, 10);"
type_conversion,apply.c,854,-,+,,6,	if (timestamp[m[3].rm_so] == '-')
type_conversion,apply.c,992,-,+,,10,"	*mode = strtoul(line, &end, 8);"
type_conversion,apply.c,1036,-,+,,19,	patch->is_copy = 1;
type_conversion,apply.c,1046,-,+,,19,	patch->is_copy = 1;
type_conversion,apply.c,1056,-,+,,21,	patch->is_rename = 1;
type_conversion,apply.c,1066,-,+,,21,	patch->is_rename = 1;
type_conversion,apply.c,1077,-,+,,13,	if (val <= 100)
type_conversion,apply.c,1078,-,+,,18,		patch->score = val;
type_conversion,apply.c,1087,-,+,,13,	if (val <= 100)
type_conversion,apply.c,1088,-,+,,18,		patch->score = val;
type_conversion,apply.c,1105,-,+,,14,	if (!ptr || ptr[1] != '.' || hexsz < ptr - line)
type_conversion,apply.c,1107,-,+,,8,	len = ptr - line;
type_conversion,apply.c,1108,-,+,,38,"	memcpy(patch->old_oid_prefix, line, len);"
type_conversion,apply.c,1109,-,+,,31,	patch->old_oid_prefix[len] = 0;
type_conversion,apply.c,1117,-,+,,8,	len = ptr - line;
type_conversion,apply.c,1119,-,+,,14,	if (hexsz < len)
type_conversion,apply.c,1121,-,+,,38,"	memcpy(patch->new_oid_prefix, line, len);"
type_conversion,apply.c,1122,-,+,,31,	patch->new_oid_prefix[len] = 0;
type_conversion,apply.c,1123,-,+,,6,	if (*ptr == ' ')
type_conversion,apply.c,1151,-,+,,19,		return (llen && line[0] == '/') ? NULL : line;
type_conversion,apply.c,1155,-,+,,12,		int ch = line[i];
type_conversion,apply.c,1181,-,+,,6,"	if (*line == '""') {"
type_conversion,apply.c,1190,-,+,,45,"		cp = skip_tree_prefix(p_value, first.buf, first.len);"
type_conversion,apply.c,1193,-,+,,25,"		strbuf_remove(&first, 0, cp - first.buf);"
type_conversion,apply.c,1204,-,+,,7,"		if (*second == '""') {"
type_conversion,apply.c,1207,-,+,,43,"			cp = skip_tree_prefix(p_value, sp.buf, sp.len);"
type_conversion,apply.c,1218,-,+,,42,"		cp = skip_tree_prefix(p_value, second, line + llen - second);"
type_conversion,apply.c,1221,-,+,,7,		if (line + llen - cp != first.len ||
type_conversion,apply.c,1242,-,+,,7,"		if (*second == '""') {"
type_conversion,apply.c,1249,-,+,,43,"			np = skip_tree_prefix(p_value, sp.buf, sp.len);"
type_conversion,apply.c,1253,-,+,,10,			len = sp.buf + sp.len - np;
type_conversion,apply.c,1254,-,+,,14,			if (len < second - name &&
type_conversion,apply.c,1258,-,+,,24,"				strbuf_remove(&sp, 0, np - sp.buf);"
type_conversion,apply.c,1275,-,+,,13,	line_len = second - name;
type_conversion,apply.c,1276,-,+,,13,	for (len = 0 ; ; len++) {
type_conversion,apply.c,1277,-,+,,11,		switch (name[len]) {
type_conversion,apply.c,1291,-,+,,20,			if (!name[len + 1])
type_conversion,apply.c,1294,-,+,,27,						  line_len - (len + 1));
type_conversion,apply.c,1309,-,+,,8,"			if (second[len] == '\n' && !strncmp(name, second, len))"
type_conversion,apply.c,1318,-,+,,6,			 (patch->is_rename == 1) + (patch->is_copy == 1);
type_conversion,apply.c,1356,-,+,,10,	size -= len;
type_conversion,apply.c,1362,-,+,,29,"	for (offset = len ; size > 0 ; offset += len, size -= len, line += len, (*linenr)++) {"
type_conversion,apply.c,1387,-,+,,23,"		len = linelen(line, size);"
type_conversion,apply.c,1388,-,+,,15,		if (!len || line[len-1] != '\n')
type_conversion,apply.c,1390,-,+,,15,		for (i = 0; i < ARRAY_SIZE(optable); i++) {
type_conversion,apply.c,1392,-,+,,16,			int oplen = strlen(p->str);
type_conversion,apply.c,1394,-,+,,44,"			if (len < oplen || memcmp(p->str, line, oplen))"
type_conversion,apply.c,1427,-,+,,32,	patch->is_toplevel_relative = 1;
type_conversion,apply.c,1428,-,+,,9,	return offset;
type_conversion,apply.c,1438,-,+,,9,	return ptr - line;
type_conversion,apply.c,1459,-,+,,8,	*p2 = 1;
type_conversion,apply.c,1460,-,+,,6,"	if (*line == ',') {"
type_conversion,apply.c,1470,-,+,,7,	ex = strlen(expect);
type_conversion,apply.c,1473,-,+,,27,"	if (memcmp(line, expect, ex))"
type_conversion,apply.c,1489,-,+,,27,"		int len = linelen(line, size);"
type_conversion,apply.c,1496,-,+,,11,		switch (*line) {
type_conversion,apply.c,1520,-,+,,24,"				(int)linelen(line, size), line);"
type_conversion,apply.c,1525,-,+,,23,	fragment->oldlines = oldlines;
type_conversion,apply.c,1526,-,+,,23,	fragment->newlines = newlines;
type_conversion,apply.c,1537,-,+,,14,	if (!len || line[len-1] != '\n')
type_conversion,apply.c,1563,-,+,,32,	patch->is_toplevel_relative = 0;
type_conversion,apply.c,1564,-,+,,38,	patch->is_rename = patch->is_copy = 0;
type_conversion,apply.c,1566,-,+,,38,	patch->old_mode = patch->new_mode = 0;
type_conversion,apply.c,1568,-,+,,26,"	for (offset = 0; size > 0; offset += len, size -= len, line += len, state->linenr++) {"
type_conversion,apply.c,1576,-,+,,13,		if (len < 6)
type_conversion,apply.c,1584,-,+,,29,"		if (!memcmp(""@@ -"", line, 4)) {"
type_conversion,apply.c,1586,-,+,,36,"			if (parse_fragment_header(line, len, &dummy) < 0)"
type_conversion,apply.c,1593,-,+,,20,		if (size < len + 6)
type_conversion,apply.c,1600,-,+,,36,"		if (!memcmp(""diff --git "", line, 11)) {"
type_conversion,apply.c,1602,-,+,,31,"								state->p_value, line, len,"
type_conversion,apply.c,1603,-,+,,9,"								size, patch);"
type_conversion,apply.c,1606,-,+,,8,			if (git_hdr_len <= len)
type_conversion,apply.c,1609,-,+,,11,			return offset;
type_conversion,apply.c,1613,-,+,,29,"		if (memcmp(""--- "", line,  4) || memcmp(""+++ "", line + len, 4))"
type_conversion,apply.c,1622,-,+,,24,"		if (size < nextlen + 14 || memcmp(""@@ -"", line + len + nextlen, 4))"
type_conversion,apply.c,1628,-,+,,14,		*hdrsize = len + nextlen;
type_conversion,apply.c,1630,-,+,,10,		return offset;
type_conversion,apply.c,1652,-,+,,6,	if (state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,1674,-,+,,18,	if (len >= 2 && line[len-1] == '\n' && line[len-2] == '\r') {
type_conversion,apply.c,1676,-,+,,24,		patch->crlf_in_old = 1;
type_conversion,apply.c,1694,-,+,,12,"	int len = linelen(line, size), offset;"
type_conversion,apply.c,1702,-,+,,38,"		recount_diff(line + offset, size - offset, fragment);"
type_conversion,apply.c,1705,-,+,,12,	leading = 0;
type_conversion,apply.c,1706,-,+,,13,	trailing = 0;
type_conversion,apply.c,1710,-,+,,10,	size -= len;
type_conversion,apply.c,1714,-,+,,7,	     0 < size;
type_conversion,apply.c,1715,-,+,,30,"	     offset += len, size -= len, line += len, state->linenr++) {"
type_conversion,apply.c,1718,-,+,,9,"		len = linelen(line, size);"
type_conversion,apply.c,1719,-,+,,15,		if (!len || line[len-1] != '\n')
type_conversion,apply.c,1721,-,+,,11,		switch (*line) {
type_conversion,apply.c,1733,-,+,,8,			    state->ws_error_action == correct_ws_error)
type_conversion,apply.c,1740,-,+,,8,			    state->ws_error_action != nowarn_ws_error)
type_conversion,apply.c,1744,-,+,,15,			trailing = 0;
type_conversion,apply.c,1750,-,+,,8,			    state->ws_error_action != nowarn_ws_error)
type_conversion,apply.c,1754,-,+,,15,			trailing = 0;
type_conversion,apply.c,1766,-,+,,40,"			if (len < 12 || memcmp(line, ""\\ "", 2))"
type_conversion,apply.c,1784,-,+,,6,"	if (12 < size && !memcmp(line, ""\\ "", 2))"
type_conversion,apply.c,1814,-,+,,25,	unsigned long offset = 0;
type_conversion,apply.c,1815,-,+,,27,"	unsigned long oldlines = 0, newlines = 0, context = 0;"
type_conversion,apply.c,1818,-,+,,16,"	while (size > 4 && !memcmp(line, ""@@ -"", 4)) {"
type_conversion,apply.c,1838,-,+,,13,		offset += len;
type_conversion,apply.c,1840,-,+,,11,		size -= len;
type_conversion,apply.c,1867,-,+,,51,	if (!patch->is_delete && !newlines && context && state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,1873,-,+,,9,	return offset;
type_conversion,apply.c,1878,-,+,,9,	return	patch->is_rename > 0 ||
type_conversion,apply.c,1879,-,+,,3,		patch->is_copy > 0 ||
type_conversion,apply.c,1941,-,+,,9,"	llen = linelen(buffer, size);"
type_conversion,apply.c,1959,-,+,,10,	size -= llen;
type_conversion,apply.c,1962,-,+,,10,"		llen = linelen(buffer, size);"
type_conversion,apply.c,1978,-,+,,17,		byte_length = *buffer;
type_conversion,apply.c,1993,-,+,,25,"		data = xrealloc(data, newsize);"
type_conversion,apply.c,1998,-,+,,11,		size -= llen;
type_conversion,apply.c,2002,-,+,,33,"	frag->patch = inflate_it(data, hunk_size, origlen);"
type_conversion,apply.c,2003,-,+,,21,	frag->free_patch = 1;
type_conversion,apply.c,2007,-,+,,15,	frag->size = origlen;
type_conversion,apply.c,2011,-,+,,30,	frag->binary_patch_method = patch_method;
type_conversion,apply.c,2073,-,+,,21,	patch->is_binary = 1;
type_conversion,apply.c,2121,-,+,,14,	for (i = 0; i < state->limit_by_name.nr; i++) {
type_conversion,apply.c,2123,-,+,,40,"		if (!wildmatch(it->string, pathname, 0))"
type_conversion,apply.c,2157,-,+,,20,		patch->ws_rule = 0;
type_conversion,apply.c,2167,-,+,,19,"				       size - offset - hdrsize,"
type_conversion,apply.c,2176,-,+,,52,"		unsigned long llen = linelen(buffer + hd, size - hd);"
type_conversion,apply.c,2178,-,+,,36,		if (llen == sizeof(git_binary) - 1 &&
type_conversion,apply.c,2183,-,+,,17,"					    size - hd - llen, patch);"
type_conversion,apply.c,2187,-,+,,17,				patchsize = used + llen;
type_conversion,apply.c,2191,-,+,,57,"		else if (!memcmp("" differ\n"", buffer + hd + llen - 8, 8)) {"
type_conversion,apply.c,2199,-,+,,15,				int len = strlen(binhdr[i]);
type_conversion,apply.c,2200,-,+,,9,				if (len < size - hd &&
type_conversion,apply.c,2201,-,+,,41,"				    !memcmp(binhdr[i], buffer + hd, len)) {"
type_conversion,apply.c,2203,-,+,,25,					patch->is_binary = 1;
type_conversion,apply.c,2204,-,+,,18,					patchsize = llen;
type_conversion,apply.c,2254,-,+,,34,"	quote_c_style(cp, &qname, NULL, 0);"
type_conversion,apply.c,2263,-,+,,18,	if (qname.len > max) {
type_conversion,apply.c,2267,-,+,,25,"		strbuf_splice(&qname, 0, cp - qname.buf, ""..."", 3);"
type_conversion,apply.c,2302,-,+,,34,"		if (strbuf_readlink(buf, path, st->st_size) < 0)"
type_conversion,apply.c,2306,-,+,,35,"		if (strbuf_read_file(buf, path, st->st_size) != st->st_size)"
type_conversion,apply.c,2348,-,+,,14,	for (i = 0; i < fixed_preimage.nr; i++)
type_conversion,apply.c,2349,-,+,,33,		fixed_preimage.line[i].flag = preimage->line[i].flag;
type_conversion,apply.c,2369,-,+,,30,	for (i = reduced = ctx = 0; i < postimage->nr; i++) {
type_conversion,apply.c,2371,-,+,,9,		if (!(postimage->line[i].flag & LINE_COMMON)) {
type_conversion,apply.c,2383,-,+,,10,		while (ctx < preimage->nr &&
type_conversion,apply.c,2384,-,+,,12,		       !(preimage->line[ctx].flag & LINE_COMMON)) {
type_conversion,apply.c,2393,-,+,,23,		if (preimage->nr <= ctx) {
type_conversion,apply.c,2408,-,+,,18,	    ? postlen < new_buf - postimage->buf
type_conversion,apply.c,2409,-,+,,25,	    : postimage->len < new_buf - postimage->buf)
type_conversion,apply.c,2414,-,+,,19,	postimage->len = new_buf - postimage->buf;
type_conversion,apply.c,2415,-,+,,19,	postimage->nr -= reduced;
type_conversion,apply.c,2426,-,+,,18,	size_t imgoff = 0;
type_conversion,apply.c,2427,-,+,,18,	size_t preoff = 0;
type_conversion,apply.c,2444,-,+,,7,		if (preimage->line[i].flag & LINE_COMMON)
type_conversion,apply.c,2462,-,+,,10,	for ( ; i < preimage->nr; i++)
type_conversion,apply.c,2476,-,+,,16,	extra_chars = preimage_end - preimage_eof;
type_conversion,apply.c,2501,-,+,,21,	if (preimage->nr + current_lno <= img->nr) {
type_conversion,apply.c,2505,-,+,,20,		preimage_limit = preimage->nr;
type_conversion,apply.c,2506,-,+,,36,		if (match_end && (preimage->nr + current_lno != img->nr))
type_conversion,apply.c,2508,-,+,,13,	} else if (state->ws_error_action == correct_ws_error &&
type_conversion,apply.c,2517,-,+,,30,		preimage_limit = img->nr - current_lno;
type_conversion,apply.c,2532,-,+,,8,		if ((img->line[current_lno + i].flag & LINE_PATCHED) ||
type_conversion,apply.c,2533,-,+,,8,		    (preimage->line[i].hash != img->line[current_lno + i].hash))
type_conversion,apply.c,2536,-,+,,6,	if (preimage_limit == preimage->nr) {
type_conversion,apply.c,2576,-,+,,6,	if (state->ws_ignore_action == ignore_ws_change)
type_conversion,apply.c,2580,-,+,,6,	if (state->ws_error_action != correct_ws_error)
type_conversion,apply.c,2599,-,+,,12,	postlen = 0;
type_conversion,apply.c,2600,-,+,,14,	for (i = 0; i < postimage->nr; i++) {
type_conversion,apply.c,2601,-,+,,9,		if (!(postimage->line[i].flag & LINE_COMMON))
type_conversion,apply.c,2610,-,+,,38,"	strbuf_init(&fixed, preimage->len + 1);"
type_conversion,apply.c,2621,-,+,,29,"		ws_fix_copy(&fixed, orig, oldlen, ws_rule, NULL);"
type_conversion,apply.c,2625,-,+,,32,"		ws_fix_copy(&tgtfix, target, tgtlen, ws_rule, NULL);"
type_conversion,apply.c,2642,-,+,,7,		if (preimage->line[i].flag & LINE_COMMON)
type_conversion,apply.c,2660,-,+,,10,	for ( ; i < preimage->nr; i++) {
type_conversion,apply.c,2666,-,+,,29,"		ws_fix_copy(&fixed, orig, oldlen, ws_rule, NULL);"
type_conversion,apply.c,2668,-,+,,22,		for (j = fixstart; j < fixed.len; j++)
type_conversion,apply.c,2682,-,+,,13,		postlen = 0;
type_conversion,apply.c,2711,-,+,,32,	    img->nr - preimage->nr != 0)
type_conversion,apply.c,2722,-,+,,10,		line = img->nr - preimage->nr;
type_conversion,apply.c,2730,-,+,,10,		line = img->nr;
type_conversion,apply.c,2732,-,+,,12,	current = 0;
type_conversion,apply.c,2753,-,+,,29,		if (backwards_lno == 0 && forwards_lno == img->nr)
type_conversion,apply.c,2766,-,+,,8,			if (forwards_lno == img->nr) {
type_conversion,apply.c,2809,-,+,,50,"	size_t remove_count, insert_count, applied_at = 0;"
type_conversion,apply.c,2822,-,+,,19,	preimage_limit = preimage->nr;
type_conversion,apply.c,2823,-,+,,6,	if (preimage_limit > img->nr - applied_pos)
type_conversion,apply.c,2824,-,+,,30,		preimage_limit = img->nr - applied_pos;
type_conversion,apply.c,2829,-,+,,17,	remove_count = 0;
type_conversion,apply.c,2844,-,+,,21,	result[img->len] = '\0';
type_conversion,apply.c,2847,-,+,,33,	nr = img->nr + postimage->nr - preimage_limit;
type_conversion,apply.c,2848,-,+,,6,	if (preimage_limit < postimage->nr) {
type_conversion,apply.c,2856,-,+,,6,	if (preimage_limit != postimage->nr)
type_conversion,apply.c,2862,-,+,,15,		for (i = 0; i < postimage->nr; i++)
type_conversion,apply.c,2864,-,+,,12,	img->nr = nr;
type_conversion,apply.c,2892,-,+,,21,	oldlines = xmalloc(size);
type_conversion,apply.c,2893,-,+,,25,"	strbuf_init(&newlines, size);"
type_conversion,apply.c,2898,-,+,,28,"		int len = linelen(patch, size);"
type_conversion,apply.c,2915,-,+,,21,		if (len < size && patch[len] == '\\')
type_conversion,apply.c,2919,-,+,,8,			if (first == '-')
type_conversion,apply.c,2920,-,+,,13,				first = '+';
type_conversion,apply.c,2921,-,+,,13,			else if (first == '+')
type_conversion,apply.c,2922,-,+,,13,				first = '-';
type_conversion,apply.c,2925,-,+,,11,		switch (first) {
type_conversion,apply.c,2931,-,+,,13,			*old++ = '\n';
type_conversion,apply.c,2933,-,+,,35,"			add_line_info(&preimage, ""\n"", 1, LINE_COMMON);"
type_conversion,apply.c,2934,-,+,,36,"			add_line_info(&postimage, ""\n"", 1, LINE_COMMON);"
type_conversion,apply.c,2943,-,+,,27,"			memcpy(old, patch + 1, plen);"
type_conversion,apply.c,2944,-,+,,34,"			add_line_info(&preimage, old, plen,"
type_conversion,apply.c,2945,-,+,,12,				      (first == ' ' ? LINE_COMMON : 0));
type_conversion,apply.c,2947,-,+,,8,			if (first == '-')
type_conversion,apply.c,2952,-,+,,8,			if (first == '+' && state->no_add)
type_conversion,apply.c,2956,-,+,,8,			if (first != '+' ||
type_conversion,apply.c,2958,-,+,,8,			    state->ws_error_action != correct_ws_error) {
type_conversion,apply.c,2959,-,+,,38,"				strbuf_add(&newlines, patch + 1, plen);"
type_conversion,apply.c,2965,-,+,,12,				      (first == '+' ? 0 : LINE_COMMON));
type_conversion,apply.c,2966,-,+,,8,			if (first == '+' &&
type_conversion,apply.c,2975,-,+,,8,			if (state->apply_verbosity > verbosity_normal)
type_conversion,apply.c,2994,-,+,,24,	    old > oldlines && old[-1] == '\n' &&
type_conversion,apply.c,2995,-,+,,21,	    newlines.len > 0 && newlines.buf[newlines.len - 1] == '\n') {
type_conversion,apply.c,2997,-,+,,43,"		strbuf_setlen(&newlines, newlines.len - 1);"
type_conversion,apply.c,2998,-,+,,41,		preimage.line_allocated[preimage.nr - 1].len--;
type_conversion,apply.c,2999,-,+,,43,		postimage.line_allocated[postimage.nr - 1].len--;
type_conversion,apply.c,3018,-,+,,24,			   (frag->oldpos == 1 && !state->unidiff_zero));
type_conversion,apply.c,3028,-,+,,39,	pos = frag->newpos ? (frag->newpos - 1) : 0;
type_conversion,apply.c,3030,-,+,,17,	preimage.len = old - oldlines;
type_conversion,apply.c,3045,-,+,,19,		if ((leading <= state->p_context) && (trailing <= state->p_context))
type_conversion,apply.c,3072,-,+,,21,		    preimage.nr + applied_pos >= img->nr &&
type_conversion,apply.c,3074,-,+,,7,		    state->ws_error_action != nowarn_ws_error) {
type_conversion,apply.c,3077,-,+,,8,			if (state->ws_error_action == correct_ws_error) {
type_conversion,apply.c,3088,-,+,,8,			if (state->ws_error_action == die_on_ws_error)
type_conversion,apply.c,3092,-,+,,7,		if (state->apply_verbosity > verbosity_normal && applied_pos != pos) {
type_conversion,apply.c,3099,-,+,,11,"				      offset),"
type_conversion,apply.c,3108,-,+,,39,		     trailing != frag->trailing) && state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,3114,-,+,,7,		if (state->apply_verbosity > verbosity_normal)
type_conversion,apply.c,3154,-,+,,7,"				  fragment->size, &len);"
type_conversion,apply.c,3163,-,+,,14,		img->len = fragment->size;
type_conversion,apply.c,3188,-,+,,39,	if (strlen(patch->old_oid_prefix) != hexsz ||
type_conversion,apply.c,3189,-,+,,39,	    strlen(patch->new_oid_prefix) != hexsz ||
type_conversion,apply.c,3221,-,+,,39,"	if (has_object(the_repository, &oid, 0)) {"
type_conversion,apply.c,3262,-,+,,28,	unsigned inaccurate_eof = patch->inaccurate_eof;
type_conversion,apply.c,3270,-,+,,44,"		if (apply_one_fragment(state, img, frag, inaccurate_eof, ws_rule, nth)) {"
type_conversion,apply.c,3274,-,+,,21,			frag->rejected = 1;
type_conversion,apply.c,3284,-,+,,20,"		strbuf_grow(buf, 100);"
type_conversion,apply.c,3296,-,+,,39,"		strbuf_attach(buf, result, sz, sz + 1);"
type_conversion,apply.c,3391,-,+,,26,	costate.refresh_cache = 1;
type_conversion,apply.c,3454,-,+,,45,"		} else if (has_symlink_leading_path(name, strlen(name))) {"
type_conversion,apply.c,3522,-,+,,21,	if (!image->buf || type != OBJ_BLOB)
type_conversion,apply.c,3555,-,+,,6,	if (status == LL_MERGE_BINARY_CONFLICT)
type_conversion,apply.c,3561,-,+,,6,	if (status < 0 || !result.ptr) {
type_conversion,apply.c,3567,-,+,,15,	image->len = result.size;
type_conversion,apply.c,3569,-,+,,9,	return status;
type_conversion,apply.c,3593,-,+,,49,"	pos = index_name_pos(state->repo->index, name, strlen(name));"
type_conversion,apply.c,3638,-,+,,25,"		write_object_file("""", 0, OBJ_BLOB, &pre_oid);"
type_conversion,apply.c,3643,-,+,,6,	if (state->apply_verbosity > verbosity_silent && patch->direct_to_threeway)
type_conversion,apply.c,3674,-,+,,7,		if (state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,3681,-,+,,32,		patch->conflicted_threeway = 1;
type_conversion,apply.c,3688,-,+,,7,		if (state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,3693,-,+,,7,		if (state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,3710,-,+,,7,		if (state->apply_verbosity > verbosity_silent &&
type_conversion,apply.c,3750,-,+,,21,	unsigned st_mode = 0;
type_conversion,apply.c,3770,-,+,,7,					 strlen(old_name));
type_conversion,apply.c,3837,-,+,,54,"		pos = index_name_pos(state->repo->index, new_name, strlen(new_name));"
type_conversion,apply.c,3864,-,+,,42,"		if (has_symlink_leading_path(new_name, strlen(new_name)))"
type_conversion,apply.c,3891,-,+,,25,		while (--name->len && name->buf[name->len] != '/')
type_conversion,apply.c,3895,-,+,,26,		name->buf[name->len] = '\0';
type_conversion,apply.c,3910,-,+,,13,"					       name->len, ignore_case);"
type_conversion,apply.c,4000,-,+,,32,			patch->direct_to_threeway = 1;
type_conversion,apply.c,4071,-,+,,7,		if (state->apply_verbosity > verbosity_normal)
type_conversion,apply.c,4100,-,+,,49,"	pos = index_name_pos(state->repo->index, path, strlen(path));"
type_conversion,apply.c,4126,-,+,,22,	    hunk->oldpos == 1 && hunk->oldlines == 1 &&
type_conversion,apply.c,4128,-,+,,44,"	    (preimage = memchr(hunk->patch, '\n', hunk->size)) != NULL &&"
type_conversion,apply.c,4132,-,+,,56,	    preimage[sizeof(heading) + the_hash_algo->hexsz - 1] == '\n' &&
type_conversion,apply.c,4178,-,+,,66,"		ce = make_cache_entry(&result, patch->old_mode, &oid, name, 0, 0);"
type_conversion,apply.c,4263,-,+,,34,"		    memcmp(old_name, new_name, slash_new - new_name))"
type_conversion,apply.c,4313,-,+,,56,"		int len = quote_c_style(patch->old_name, NULL, NULL, 0);"
type_conversion,apply.c,4315,-,+,,10,			len = strlen(patch->old_name);
type_conversion,apply.c,4320,-,+,,56,"		int len = quote_c_style(patch->new_name, NULL, NULL, 0);"
type_conversion,apply.c,4322,-,+,,10,			len = strlen(patch->new_name);
type_conversion,apply.c,4350,-,+,,16,	int namelen = strlen(path);
type_conversion,apply.c,4352,-,+,,50,"	ce = make_empty_cache_entry(state->repo->index, namelen);"
type_conversion,apply.c,4353,-,+,,25,"	memcpy(ce->name, path, namelen);"
type_conversion,apply.c,4355,-,+,,33,	ce->ce_flags = create_ce_flags(0);
type_conversion,apply.c,4356,-,+,,19,	ce->ce_namelen = namelen;
type_conversion,apply.c,4409,-,+,,24,"		return !!mkdir(path, 0777);"
type_conversion,apply.c,4418,-,+,,55,"	fd = open(path, O_CREAT | O_EXCL | O_WRONLY, (mode & 0100) ? 0777 : 0666);"
type_conversion,apply.c,4427,-,+,,39,"	res = write_in_full(fd, buf, size) < 0;"
type_conversion,apply.c,4512,-,+,,21,		unsigned int nr = getpid();
type_conversion,apply.c,4546,-,+,,12,	namelen = strlen(patch->new_name);
type_conversion,apply.c,4553,-,+,,51,"		ce = make_empty_cache_entry(state->repo->index, namelen);"
type_conversion,apply.c,4554,-,+,,37,"		memcpy(ce->name, patch->new_name, namelen);"
type_conversion,apply.c,4556,-,+,,34,		ce->ce_flags = create_ce_flags(stage);
type_conversion,apply.c,4557,-,+,,20,		ce->ce_namelen = namelen;
type_conversion,apply.c,4608,-,+,,36,"		return remove_file(state, patch, patch->is_rename);"
type_conversion,apply.c,4629,-,+,,7,		if (state->apply_verbosity > verbosity_normal)
type_conversion,apply.c,4644,-,+,,8,"			    cnt),"
type_conversion,apply.c,4646,-,+,,6,	if (state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,4686,-,+,,8,			if (state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,4690,-,+,,7,		if (state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,4693,-,+,,7,		if (frag->patch[frag->size-1] != '\n')
type_conversion,apply.c,4742,-,+,,7,		if (state->apply_verbosity > verbosity_silent) {
type_conversion,apply.c,4783,-,+,,11,	offset = 0;
type_conversion,apply.c,4821,-,+,,8,			if (state->apply_verbosity > verbosity_normal)
type_conversion,apply.c,4826,-,+,,13,		offset += nr;
type_conversion,apply.c,4837,-,+,,34,	if (state->whitespace_error && (state->ws_error_action == die_on_ws_error))
type_conversion,apply.c,4888,-,+,,25,	if (state->diffstat && state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,4891,-,+,,24,	if (state->numstat && state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,4894,-,+,,24,	if (state->summary && state->apply_verbosity > verbosity_silent)
type_conversion,apply.c,4978,-,+,,32,"	strbuf_complete(&state->root, '/');"
type_conversion,apply.c,5038,-,+,,8,"				   squelched),"
type_conversion,apply.c,5041,-,+,,7,		if (state->ws_error_action == die_on_ws_error) {
type_conversion,apply.c,5054,-,+,,8,"				   state->applied_after_fixing_ws),"
type_conversion,apply.c,5059,-,+,,8,"				   state->whitespace_error),"
type_conversion,apply.c,5077,-,+,,6,	if (state->apply_verbosity <= verbosity_silent) {
type_conversion,archive-tar.c,58,-,+,,12,		offset = 0;
type_conversion,archive-tar.c,115,-,+,,28,"	memset(block + offset, 0, tail);"
type_conversion,archive-tar.c,140,-,+,,18,		if (readlen <= 0)
type_conversion,archive-tar.c,142,-,+,,25,"		do_write_blocked(buf, readlen);"
type_conversion,archive-tar.c,147,-,+,,9,	return readlen;
type_conversion,archive-tar.c,163,-,+,,8,	len = 1 + 1 + strlen(keyword) + 1 + valuelen + 1;
type_conversion,archive-tar.c,164,-,+,,22,	for (tmp = 1; len / 10 >= tmp; tmp *= 10)
type_conversion,archive-tar.c,189,-,+,,45,"	strbuf_append_ext_header(sb, keyword, buf, len);"
type_conversion,archive-tar.c,195,-,+,,24,	unsigned int chksum = 0;
type_conversion,archive-tar.c,197,-,+,,13,		chksum += *p++;
type_conversion,archive-tar.c,198,-,+,,37,	chksum += sizeof(header->chksum) * ' ';
type_conversion,archive-tar.c,201,-,+,,13,		chksum += *p++;
type_conversion,archive-tar.c,208,-,+,,10,	if (i > 1 && path[i - 1] == '/')
type_conversion,archive-tar.c,214,-,+,,15,	} while (i > 0 && path[i] != '/');
type_conversion,archive-tar.c,222,-,+,,63,"	xsnprintf(header->mode, sizeof(header->mode), ""%07o"", mode & 07777);"
type_conversion,archive-tar.c,233,-,+,,33,"	memcpy(header->magic, ""ustar"", 6);"
type_conversion,archive-tar.c,234,-,+,,32,"	memcpy(header->version, ""00"", 2);"
type_conversion,archive-tar.c,247,-,+,,9,	mode = 0100666;
type_conversion,archive-tar.c,269,-,+,,18,		mode = (mode | 0777) & ~tar_umask;
type_conversion,archive-tar.c,272,-,+,,11,		mode |= 0777;
type_conversion,archive-tar.c,275,-,+,,27,		mode = (mode | ((mode & 0100) ? 0777 : 0666)) & ~tar_umask;
type_conversion,archive-tar.c,283,-,+,,34,		size_t rest = pathlen - plen - 1;
type_conversion,archive-tar.c,284,-,+,,14,		if (plen > 0 && rest <= sizeof(header.name)) {
type_conversion,archive-tar.c,307,+,-,size > USTAR_MAX_SIZE,,
type_conversion,archive-tar.c,308,-,+,,20,		size_in_header = 0;
type_conversion,archive-tar.c,314,-,+,,23,	if (ext_header.len > 0) {
type_conversion,archive-tar.c,320,-,+,,30,	if (S_ISREG(mode) && size > 0) {
type_conversion,archive-tar.c,351,-,+,,9,	mode = 0100666;
type_conversion,archive-tar.c,419,-,+,,22,			tar_umask = umask(0);
type_conversion,archive-tar.c,420,-,+,,10,			umask(tar_umask);
type_conversion,archive-tar.c,450,-,+,,28,"			write_or_die(1, outbuf, gzstream.next_out - outbuf);"
type_conversion,archive-tar.c,505,-,+,,21,	filter.use_shell = 1;
type_conversion,archive-tar.c,507,-,+,,31,	filter.silent_exec_failure = 1;
type_conversion,archive-zip.c,144,-,+,,12,	dest[0] = 0xff & n;
type_conversion,archive-zip.c,145,-,+,,12,	dest[1] = 0xff & (n >> 010);
type_conversion,archive-zip.c,150,-,+,,12,	dest[0] = 0xff & n;
type_conversion,archive-zip.c,151,-,+,,12,	dest[1] = 0xff & (n >> 010);
type_conversion,archive-zip.c,152,-,+,,12,	dest[2] = 0xff & (n >> 020);
type_conversion,archive-zip.c,153,-,+,,12,	dest[3] = 0xff & (n >> 030);
type_conversion,archive-zip.c,158,-,+,,12,	dest[0] = 0xff & n;
type_conversion,archive-zip.c,159,-,+,,12,	dest[1] = 0xff & (n >> 010);
type_conversion,archive-zip.c,160,-,+,,12,	dest[2] = 0xff & (n >> 020);
type_conversion,archive-zip.c,161,-,+,,12,	dest[3] = 0xff & (n >> 030);
type_conversion,archive-zip.c,162,-,+,,12,	dest[4] = 0xff & (n >> 040);
type_conversion,archive-zip.c,163,-,+,,12,	dest[5] = 0xff & (n >> 050);
type_conversion,archive-zip.c,164,-,+,,12,	dest[6] = 0xff & (n >> 060);
type_conversion,archive-zip.c,165,-,+,,12,	dest[7] = 0xff & (n >> 070);
type_conversion,archive-zip.c,178,-,+,,31,"	copy_le16(dest, clamp_max(n, 0xffff, clamped));"
type_conversion,archive-zip.c,183,-,+,,31,"	copy_le32(dest, clamp_max(n, 0xffffffff, clamped));"
type_conversion,archive-zip.c,188,-,+,,18,	while (size-- > 0) {
type_conversion,archive-zip.c,189,-,+,,24,"		strbuf_addch(sb, n & 0xff);"
type_conversion,archive-zip.c,197,-,+,,24,	const uintmax_t max = 0xffffffff;
type_conversion,archive-zip.c,198,-,+,,9,	return (n < max) ? n : max;
type_conversion,archive-zip.c,238,-,+,,14,	if (size >= 0xffffffff || compressed_size >= 0xffffffff) {
type_conversion,archive-zip.c,240,-,+,,28,"		copy_le32(trailer.magic, 0x08074b50);"
type_conversion,archive-zip.c,241,-,+,,28,"		copy_le32(trailer.crc32, crc);"
type_conversion,archive-zip.c,248,-,+,,28,"		copy_le32(trailer.magic, 0x08074b50);"
type_conversion,archive-zip.c,249,-,+,,28,"		copy_le32(trailer.crc32, crc);"
type_conversion,archive-zip.c,250,-,+,,38,"		copy_le32(trailer.compressed_size, compressed_size);"
type_conversion,archive-zip.c,251,-,+,,27,"		copy_le32(trailer.size, size);"
type_conversion,archive-zip.c,262,-,+,,27,"	copy_le32(header->crc32, crc);"
type_conversion,archive-zip.c,263,-,+,,37,"	copy_le32(header->compressed_size, compressed_size);"
type_conversion,archive-zip.c,264,-,+,,26,"	copy_le32(header->size, size);"
type_conversion,archive-zip.c,270,-,+,,11,		int c = *s++;
type_conversion,archive-zip.c,310,-,+,,24,	unsigned long flags = 0;
type_conversion,archive-zip.c,313,-,+,,33,	unsigned int creator_version = 0;
type_conversion,archive-zip.c,314,-,+,,32,	unsigned int version_needed = 10;
type_conversion,archive-zip.c,316,-,+,,40,	size_t zip64_dir_extra_payload_size = 0;
type_conversion,archive-zip.c,318,-,+,,14,"	crc = crc32(0, NULL, 0);"
type_conversion,archive-zip.c,327,-,+,,16,	if (pathlen > 0xffff) {
type_conversion,archive-zip.c,334,-,+,,11,		attr2 = 16;
type_conversion,archive-zip.c,336,-,+,,21,		compressed_size = 0;
type_conversion,archive-zip.c,339,-,+,,36,		attr2 = S_ISLNK(mode) ? ((mode | 0777) << 16) :
type_conversion,archive-zip.c,340,-,+,,12,			(mode & 0111) ? ((mode) << 16) : 0;
type_conversion,archive-zip.c,341,-,+,,32,		if (S_ISLNK(mode) || (mode & 0111))
type_conversion,archive-zip.c,342,-,+,,22,			creator_version = 0x0317;
type_conversion,archive-zip.c,343,-,+,,63,		if (S_ISREG(mode) && args->compression_level != 0 && size > 0)
type_conversion,archive-zip.c,356,-,+,,29,"			crc = crc32(crc, buffer, size);"
type_conversion,archive-zip.c,362,-,+,,22,		compressed_size = (method == ZIP_METHOD_STORE) ? size : 0;
type_conversion,archive-zip.c,371,-,+,,16,	if (buffer && method == ZIP_METHOD_DEFLATE) {
type_conversion,archive-zip.c,382,-,+,,25,"	copy_le16(extra.magic, 0x5455);"
type_conversion,archive-zip.c,384,-,+,,19,	extra.flags[0] = 1;	/* just mtime */
type_conversion,archive-zip.c,387,-,+,,13,	if (size > 0xffffffff || compressed_size > 0xffffffff)
type_conversion,archive-zip.c,389,-,+,,23,	if (stream && size > 0x7fffffff)
type_conversion,archive-zip.c,393,-,+,,20,		version_needed = 45;
type_conversion,archive-zip.c,395,-,+,,26,"	copy_le32(header.magic, 0x04034b50);"
type_conversion,archive-zip.c,397,-,+,,26,"	copy_le16(header.flags, flags);"
type_conversion,archive-zip.c,398,-,+,,39,"	copy_le16(header.compression_method, method);"
type_conversion,archive-zip.c,399,-,+,,26,"	copy_le16(header.mtime, zip_time);"
type_conversion,archive-zip.c,400,-,+,,26,"	copy_le16(header.mdate, zip_date);"
type_conversion,archive-zip.c,402,-,+,,37,"		set_zip_header_data_desc(&header, 0xffffffff, 0xffffffff, crc);"
type_conversion,archive-zip.c,407,-,+,,36,"	copy_le16(header.filename_length, pathlen);"
type_conversion,archive-zip.c,408,-,+,,33,"	copy_le16(header.extra_length, header_extra_size);"
type_conversion,archive-zip.c,416,-,+,,28,"		copy_le16(extra64.magic, 0x0001);"
type_conversion,archive-zip.c,424,-,+,,16,	if (stream && method == ZIP_METHOD_STORE) {
type_conversion,archive-zip.c,430,-,+,,19,			if (readlen <= 0)
type_conversion,archive-zip.c,432,-,+,,26,"			crc = crc32(crc, buf, readlen);"
type_conversion,archive-zip.c,436,-,+,,17,"							    buf, readlen);"
type_conversion,archive-zip.c,437,-,+,,25,"			write_or_die(1, buf, readlen);"
type_conversion,archive-zip.c,441,-,+,,11,			return readlen;
type_conversion,archive-zip.c,447,-,+,,23,	} else if (stream && method == ZIP_METHOD_DEFLATE) {
type_conversion,archive-zip.c,457,-,+,,21,		compressed_size = 0;
type_conversion,archive-zip.c,463,-,+,,19,			if (readlen <= 0)
type_conversion,archive-zip.c,465,-,+,,26,"			crc = crc32(crc, buf, readlen);"
type_conversion,archive-zip.c,469,-,+,,17,"							    buf, readlen);"
type_conversion,archive-zip.c,472,-,+,,23,			zstream.avail_in = readlen;
type_conversion,archive-zip.c,476,-,+,,14,			out_len = zstream.next_out - compressed;
type_conversion,archive-zip.c,478,-,+,,18,			if (out_len > 0) {
type_conversion,archive-zip.c,488,-,+,,11,			return readlen;
type_conversion,archive-zip.c,491,-,+,,22,		zstream.avail_in = 0;
type_conversion,archive-zip.c,497,-,+,,13,		out_len = zstream.next_out - compressed;
type_conversion,archive-zip.c,503,-,+,,31,	} else if (compressed_size > 0) {
type_conversion,archive-zip.c,510,-,+,,24,	if (compressed_size > 0xffffffff || size > 0xffffffff ||
type_conversion,archive-zip.c,511,-,+,,15,	    offset > 0xffffffff) {
type_conversion,archive-zip.c,512,-,+,,26,		if (compressed_size >= 0xffffffff)
type_conversion,archive-zip.c,513,-,+,,36,			zip64_dir_extra_payload_size += 8;
type_conversion,archive-zip.c,514,-,+,,15,		if (size >= 0xffffffff)
type_conversion,archive-zip.c,515,-,+,,36,			zip64_dir_extra_payload_size += 8;
type_conversion,archive-zip.c,516,-,+,,17,		if (offset >= 0xffffffff)
type_conversion,archive-zip.c,517,-,+,,36,			zip64_dir_extra_payload_size += 8;
type_conversion,archive-zip.c,518,-,+,,25,		zip_dir_extra_size += 2 + 2 + zip64_dir_extra_payload_size;
type_conversion,archive-zip.c,521,-,+,,26,"	strbuf_add_le(&zip_dir, 4, 0x02014b50);	/* magic */"
type_conversion,archive-zip.c,522,-,+,,26,"	strbuf_add_le(&zip_dir, 2, creator_version);"
type_conversion,archive-zip.c,523,-,+,,26,"	strbuf_add_le(&zip_dir, 2, version_needed);"
type_conversion,archive-zip.c,524,-,+,,26,"	strbuf_add_le(&zip_dir, 2, flags);"
type_conversion,archive-zip.c,525,-,+,,26,"	strbuf_add_le(&zip_dir, 2, method);"
type_conversion,archive-zip.c,526,-,+,,26,"	strbuf_add_le(&zip_dir, 2, zip_time);"
type_conversion,archive-zip.c,527,-,+,,26,"	strbuf_add_le(&zip_dir, 2, zip_date);"
type_conversion,archive-zip.c,528,-,+,,26,"	strbuf_add_le(&zip_dir, 4, crc);"
type_conversion,archive-zip.c,529,-,+,,26,"	strbuf_add_le(&zip_dir, 4, clamp32(compressed_size));"
type_conversion,archive-zip.c,530,-,+,,26,"	strbuf_add_le(&zip_dir, 4, clamp32(size));"
type_conversion,archive-zip.c,531,-,+,,26,"	strbuf_add_le(&zip_dir, 2, pathlen);"
type_conversion,archive-zip.c,532,-,+,,26,"	strbuf_add_le(&zip_dir, 2, zip_dir_extra_size);"
type_conversion,archive-zip.c,533,-,+,,26,"	strbuf_add_le(&zip_dir, 2, 0);		/* comment length */"
type_conversion,archive-zip.c,534,-,+,,26,"	strbuf_add_le(&zip_dir, 2, 0);		/* disk */"
type_conversion,archive-zip.c,535,-,+,,26,"	strbuf_add_le(&zip_dir, 2, !is_binary);"
type_conversion,archive-zip.c,536,-,+,,26,"	strbuf_add_le(&zip_dir, 4, attr2);"
type_conversion,archive-zip.c,537,-,+,,26,"	strbuf_add_le(&zip_dir, 4, clamp32(offset));"
type_conversion,archive-zip.c,541,-,+,,27,"		strbuf_add_le(&zip_dir, 2, 0x0001);	/* magic */"
type_conversion,archive-zip.c,542,-,+,,27,"		strbuf_add_le(&zip_dir, 2, zip64_dir_extra_payload_size);"
type_conversion,archive-zip.c,543,-,+,,15,		if (size >= 0xffffffff)
type_conversion,archive-zip.c,544,-,+,,28,"			strbuf_add_le(&zip_dir, 8, size);"
type_conversion,archive-zip.c,545,-,+,,26,		if (compressed_size >= 0xffffffff)
type_conversion,archive-zip.c,546,-,+,,28,"			strbuf_add_le(&zip_dir, 8, compressed_size);"
type_conversion,archive-zip.c,547,-,+,,17,		if (offset >= 0xffffffff)
type_conversion,archive-zip.c,548,-,+,,28,"			strbuf_add_le(&zip_dir, 8, offset);"
type_conversion,archive-zip.c,560,-,+,,29,"	copy_le32(trailer64.magic, 0x06064b50);"
type_conversion,archive-zip.c,563,-,+,,31,"	copy_le16(trailer64.version, 45);"
type_conversion,archive-zip.c,564,-,+,,28,"	copy_le32(trailer64.disk, 0);"
type_conversion,archive-zip.c,565,-,+,,44,"	copy_le32(trailer64.directory_start_disk, 0);"
type_conversion,archive-zip.c,571,-,+,,29,"	copy_le32(locator64.magic, 0x07064b50);"
type_conversion,archive-zip.c,572,-,+,,28,"	copy_le32(locator64.disk, 0);"
type_conversion,archive-zip.c,574,-,+,,39,"	copy_le32(locator64.number_of_disks, 1);"
type_conversion,archive-zip.c,585,-,+,,27,"	copy_le32(trailer.magic, 0x06054b50);"
type_conversion,archive-zip.c,586,-,+,,26,"	copy_le16(trailer.disk, 0);"
type_conversion,archive-zip.c,587,-,+,,42,"	copy_le16(trailer.directory_start_disk, 0);"
type_conversion,archive-zip.c,591,-,+,,26,"	copy_le32(trailer.size, zip_dir.len);"
type_conversion,archive-zip.c,593,-,+,,65,"	copy_le16(trailer.comment_length, oid ? the_hash_algo->hexsz : 0);"
type_conversion,archive-zip.c,636,-,+,,24,"	strbuf_init(&zip_dir, 0);"
type_conversion,archive.c,54,-,+,,43,"	packet_reader_init(&reader, fd[0], NULL, 0,"
type_conversion,archive.c,58,-,+,,6,	if (packet_reader_read(&reader) != PACKET_READ_NORMAL)
type_conversion,archive.c,60,-,+,,36,"		b = memmem(src, len, ""$Format:"", 8);"
type_conversion,archive.c,63,-,+,,44,"		c = memchr(b + 8, '$', (src + len) - b - 8);"
type_conversion,archive.c,66,-,+,,6,	if (packet_reader_read(&reader) != PACKET_READ_FLUSH)
type_conversion,archive.c,68,-,+,,35,"		strbuf_add(&fmt, b + 8, c - b - 8);"
type_conversion,archive.c,70,-,+,,24,"		strbuf_add(buf, src, b - src);"
type_conversion,archive.c,73,-,+,,10,		len -= c + 1 - src;
type_conversion,archive.c,100,-,+,,17,		size_t size = 0;
type_conversion,archive.c,102,-,+,,48,"		strbuf_attach(&buf, buffer, *sizep, *sizep + 1);"
type_conversion,archive.c,161,-,+,,18,	args->convert = 0;
type_conversion,archive.c,165,-,+,,26,"	strbuf_add(&path, base, baselen);"
type_conversion,archive.c,176,-,+,,19,		args->convert = check_attr_export_subst(check);
type_conversion,archive.c,206,-,+,,64,"		err = write_entry(args, oid, path.buf, path.len, mode, NULL, 0);"
type_conversion,archive.c,214,-,+,,49,"	    oid_object_info(args->repo, oid, &size) == OBJ_BLOB &&"
type_conversion,archive.c,234,-,+,,15,	d->baselen = base->len;
type_conversion,archive.c,249,-,+,,24,	d->path[d->len - 1] = '\0'; /* no trailing slash */
type_conversion,archive.c,266,-,+,,24,	       !(base->len >= c->bottom->len &&
type_conversion,archive.c,267,-,+,,41,"		 !strncmp(base->buf, c->bottom->path, c->bottom->len))) {"
type_conversion,archive.c,291,-,+,,45,"	return write_archive_entry(oid, base->buf, base->len, filename, mode,"
type_conversion,archive.c,315,-,+,,22,	if (args->baselen > 0 && args->base[args->baselen - 1] == '/') {
type_conversion,archive.c,318,-,+,,16,		while (len > 1 && args->base[len - 2] == '/')
type_conversion,archive.c,323,-,+,,12,"				  len, 040777, NULL, 0);"
type_conversion,archive.c,337,-,+,,21,		opts.index_only = 1;
type_conversion,archive.c,344,-,+,,20,"		if (unpack_trees(1, &t, &opts))"
type_conversion,archive.c,361,-,+,,14,	for (i = 0; i < args->extra_files.nr; i++) {
type_conversion,archive.c,366,-,+,,27,"		put_be64(fake_oid.hash, i + 1);"
type_conversion,archive.c,375,-,+,,41,"			if (strbuf_read_file(&content, path, info->stat.st_size) < 0)"
type_conversion,archive.c,386,-,+,,23,"					  info->content, info->stat.st_size);"
type_conversion,archive.c,431,-,+,,17,"				    sb.buf, sb.len, 0, NULL, 1))"
type_conversion,archive.c,466,-,+,,32,"	parse_pathspec(&ctx.pathspec, 0, PATHSPEC_PREFER_CWD,"
type_conversion,archive.c,468,-,+,,27,	ctx.pathspec.recursive = 1;
type_conversion,archive.c,488,-,+,,37,"	parse_pathspec(&ar_args->pathspec, 0, PATHSPEC_PREFER_CWD,"
type_conversion,archive.c,490,-,+,,32,	ar_args->pathspec.recursive = 1;
type_conversion,archive.c,514,-,+,,20,		int refnamelen = colon - name;
type_conversion,archive.c,519,-,+,,39,"		repo_dwim_ref(the_repository, name, strlen(name), &oid, &ref,"
type_conversion,archive.c,529,-,+,,18,		archive_time = commit->date;
type_conversion,archive.c,545,-,+,,18,	ar_args->time = archive_time;
type_conversion,archive.c,588,-,+,,7,"		if (*p != '""')"
type_conversion,archive.c,593,-,+,,13,		if (!p || *p != ':')
type_conversion,archive.c,600,-,+,,46,"			strbuf_detach(&buf, NULL) : xstrndup(arg, p - arg);"
type_conversion,archive.c,610,-,+,,24,		info->stat.st_size = strlen(info->content);
type_conversion,archive.c,720,-,+,,18,	args->verbose = verbose;
type_conversion,archive.c,723,-,+,,30,	args->worktree_attributes = worktree_attributes;
type_conversion,archive.c,734,-,+,,57,	struct pretty_print_describe_status describe_status = {0};
type_conversion,archive.c,742,-,+,,36,	describe_status.max_invocations = 1;
type_conversion,archive.c,774,-,+,,18,	int prefixlen = strlen(filename) - strlen(ext);
type_conversion,archive.c,781,-,+,,23,	if (prefixlen < 2 || filename[prefixlen - 1] != '.')
type_conversion,attr.c,151,-,+,,13,	if (size < check->all_attrs_nr)
type_conversion,attr.c,160,-,+,,14,	if (size != check->all_attrs_nr) {
type_conversion,attr.c,165,-,+,,25,		check->all_attrs_nr = size;
type_conversion,attr.c,202,-,+,,17,	if (namelen <= 0 || *name == '-')
type_conversion,attr.c,206,-,+,,10,		if (! (ch == '-' || ch == '.' || ch == '_' ||
type_conversion,attr.c,207,-,+,,18,		       ('0' <= ch && ch <= '9') ||
type_conversion,attr.c,208,-,+,,18,		       ('a' <= ch && ch <= 'z') ||
type_conversion,attr.c,209,-,+,,18,		       ('A' <= ch && ch <= 'Z')) )
type_conversion,attr.c,246,-,+,,61,		if (a->attr_nr != hashmap_get_size(&g_attr_hashmap.map) - 1)
type_conversion,attr.c,320,-,+,,9,		len = equals - cp;
type_conversion,attr.c,322,-,+,,9,		len = ep - cp;
type_conversion,attr.c,324,-,+,,7,		if (*cp == '-' || *cp == '!') {
type_conversion,attr.c,339,-,+,,7,		if (*cp == '-' || *cp == '!') {
type_conversion,attr.c,340,-,+,,16,			e->setto = (*cp == '-') ? ATTR__FALSE : ATTR__UNSET;
type_conversion,attr.c,347,-,+,,50,"			e->setto = xmemdupz(equals + 1, ep - equals - 1);"
type_conversion,attr.c,364,-,+,,14,	if (!*cp || *cp == '#')
type_conversion,attr.c,373,-,+,,6,"	if (*cp == '""' && !unquote_c_style(&pattern, name, &states)) {"
type_conversion,attr.c,403,-,+,,31,"	for (cp = states, num_attr = 0; *cp; num_attr++) {"
type_conversion,attr.c,409,-,+,,16,"	res = xcalloc(1, st_add3(sizeof(*res),"
type_conversion,attr.c,428,-,+,,18,	res->is_macro = is_macro;
type_conversion,attr.c,432,-,+,,24,"	for (cp = states, i = 0; *cp; i++) {"
type_conversion,attr.c,476,-,+,,11,	for (i = 0; i < e->num_matches; i++) {
type_conversion,attr.c,480,-,+,,12,		for (j = 0; j < a->num_attr; j++) {
type_conversion,attr.c,542,-,+,,14,	for (i = 0; i < check_vector.nr; i++)
type_conversion,attr.c,546,-,+,,6,	if (i >= check_vector.nr)
type_conversion,attr.c,550,-,+,,9,	for (; i < check_vector.nr - 1; i++)
type_conversion,attr.c,565,-,+,,14,	for (i = 0; i < check_vector.nr; i++) {
type_conversion,attr.c,574,-,+,,33,"	struct attr_check *c = xcalloc(1, sizeof(struct attr_check));"
type_conversion,attr.c,688,-,+,,32,	res->attrs[res->num_matches - 1] = a;
type_conversion,attr.c,717,-,+,,30,	if (is_bare_repository() && new_direction != GIT_ATTR_INDEX)
type_conversion,attr.c,720,-,+,,6,	if (new_direction != direction)
type_conversion,attr.c,759,-,+,,24,"			strbuf_remove(&buf, 0, strlen(utf8_bom));"
type_conversion,attr.c,789,-,+,,11,		more = (*ep == '\n');
type_conversion,attr.c,790,-,+,,9,		*ep = '\0';
type_conversion,attr.c,816,-,+,,14,	if (!buf || type != OBJ_BLOB) {
type_conversion,attr.c,855,-,+,,49,"		int pos = index_name_pos_sparse(istate, path, strlen(path));"
type_conversion,attr.c,879,-,+,,6,	if (direction == GIT_ATTR_INDEX) {
type_conversion,attr.c,884,-,+,,7,		if (direction == GIT_ATTR_CHECKOUT) {
type_conversion,attr.c,888,-,+,,14,		} else if (direction == GIT_ATTR_CHECKIN) {
type_conversion,attr.c,953,-,+,,29,"	push_stack(stack, e, NULL, 0);"
type_conversion,attr.c,958,-,+,,30,"		push_stack(stack, e, NULL, 0);"
type_conversion,attr.c,964,-,+,,30,"		push_stack(stack, e, NULL, 0);"
type_conversion,attr.c,969,-,+,,36,"	push_stack(stack, e, xstrdup(""""), 0);"
type_conversion,attr.c,978,-,+,,29,"	push_stack(stack, e, NULL, 0);"
type_conversion,attr.c,1019,-,+,,17,		int namelen = (*stack)->originlen;
type_conversion,attr.c,1024,-,+,,36,"		    !strncmp(elem->origin, path, namelen) &&"
type_conversion,attr.c,1025,-,+,,20,		    (!namelen || path[namelen] == '/'))
type_conversion,attr.c,1042,-,+,,23,	while (pathbuf.len < dirlen) {
type_conversion,attr.c,1048,-,+,,13,		if (len < dirlen && is_dir_sep(path[len]))
type_conversion,attr.c,1051,-,+,,16,		while (len < dirlen && !is_dir_sep(path[len]))
type_conversion,attr.c,1054,-,+,,21,		if (pathbuf.len > 0)
type_conversion,attr.c,1071,-,+,,32,"	push_stack(stack, info, NULL, 0);"
type_conversion,attr.c,1083,-,+,,26,	int isdir = (pathlen && pathname[pathlen - 1] == '/');
type_conversion,attr.c,1106,-,+,,39,	for (i = a->num_attr; rem > 0 && i > 0; i--) {
type_conversion,attr.c,1107,-,+,,46,		const struct git_attr *attr = a->state[i - 1].attr;
type_conversion,attr.c,1109,-,+,,32,		const char *v = a->state[i - 1].setto;
type_conversion,attr.c,1114,-,+,,37,"			rem = macroexpand_one(all_attrs, attr->attr_nr, rem);"
type_conversion,attr.c,1128,-,+,,43,		for (i = stack->num_matches; 0 < rem && 0 < i; i--) {
type_conversion,attr.c,1129,-,+,,50,			const struct match_attr *a = stack->attrs[i - 1];
type_conversion,attr.c,1133,-,+,,24,"					 &a->u.pat, base, stack->originlen))"
type_conversion,attr.c,1161,-,+,,36,		for (i = stack->num_matches; i > 0; i--) {
type_conversion,attr.c,1162,-,+,,51,			const struct match_attr *ma = stack->attrs[i - 1];
type_conversion,attr.c,1187,-,+,,7,		if (*cp == '/' && cp[1])
type_conversion,attr.c,1190,-,+,,12,	pathlen = cp - path;
type_conversion,attr.c,1192,-,+,,21,		basename_offset = last_slash + 1 - path;
type_conversion,attr.c,1193,-,+,,12,		dirlen = last_slash - path;
type_conversion,attr.c,1251,-,+,,12,"		{ .val = 0040000 },"
type_conversion,attr.c,1252,-,+,,12,"		{ .val = 0100644 },"
type_conversion,attr.c,1253,-,+,,12,"		{ .val = 0100755 },"
type_conversion,attr.c,1254,-,+,,12,"		{ .val = 0120000 },"
type_conversion,attr.c,1255,-,+,,12,"		{ .val = 0160000 },"
type_conversion,attr.c,1259,-,+,,14,	for (i = 0; i < ARRAY_SIZE(mode_string); i++) {
type_conversion,attr.c,1274,-,+,,6,	if (direction == GIT_ATTR_CHECKIN) {
type_conversion,attr.c,1287,-,+,,43,"			int pos = index_name_pos(istate, path, strlen(path));"
type_conversion,attr.c,1300,-,+,,42,"		int pos = index_name_pos(istate, path, strlen(path));"
type_conversion,base85.c,17,-,+,,2,"	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',"
type_conversion,base85.c,18,-,+,,2,"	'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',"
type_conversion,base85.c,19,-,+,,2,"	'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',"
type_conversion,base85.c,20,-,+,,2,"	'U', 'V', 'W', 'X', 'Y', 'Z',"
type_conversion,base85.c,21,-,+,,2,"	'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',"
type_conversion,base85.c,22,-,+,,2,"	'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',"
type_conversion,base85.c,23,-,+,,2,"	'u', 'v', 'w', 'x', 'y', 'z',"
type_conversion,base85.c,24,-,+,,2,"	'!', '#', '$', '%', '&', '(', ')', '*', '+', '-',"
type_conversion,base85.c,25,-,+,,2,"	';', '<', '=', '>', '?', '@', '^', '_',	'`', '{',"
type_conversion,base85.c,26,-,+,,2,"	'|', '}', '~'"
type_conversion,base85.c,35,-,+,,14,	for (i = 0; i < ARRAY_SIZE(en85); i++) {
type_conversion,base85.c,36,-,+,,12,		int ch = en85[i];
type_conversion,base85.c,37,-,+,,14,		de85[ch] = i + 1;
type_conversion,base85.c,47,-,+,,18,		unsigned acc = 0;
type_conversion,base85.c,51,-,+,,9,			ch = *buffer++;
type_conversion,base85.c,52,-,+,,9,			de = de85[ch];
type_conversion,base85.c,55,-,+,,16,			acc = acc * 85 + de;
type_conversion,base85.c,57,-,+,,8,		ch = *buffer++;
type_conversion,base85.c,58,-,+,,8,		de = de85[ch];
type_conversion,base85.c,62,-,+,,20,		if (0xffffffff / 85 < acc ||
type_conversion,base85.c,63,-,+,,20,		    0xffffffff - de < (acc *= 85))
type_conversion,base85.c,65,-,+,,10,		acc += de;
type_conversion,base85.c,72,-,+,,13,			*dst++ = acc;
type_conversion,base85.c,84,-,+,,18,		unsigned acc = 0;
type_conversion,base85.c,87,-,+,,18,			unsigned ch = *data++;
type_conversion,base85.c,94,-,+,,20,			int val = acc % 85;
type_conversion,base85.c,95,-,+,,11,			acc /= 85;
type_conversion,base85.c,102,-,+,,9,	*buf = 0;
type_conversion,basics.c,13,-,+,,33,	out[0] = (uint8_t)((i >> 16) & 0xff);
type_conversion,basics.c,14,-,+,,32,	out[1] = (uint8_t)((i >> 8) & 0xff);
type_conversion,basics.c,15,-,+,,25,	out[2] = (uint8_t)(i & 0xff);
type_conversion,basics.c,26,-,+,,22,	out[0] = (uint8_t)((i >> 8) & 0xff);
type_conversion,basics.c,27,-,+,,21,	out[1] = (uint8_t)(i & 0xff);
type_conversion,basics.c,32,-,+,,14,	size_t lo = 0;
type_conversion,basics.c,40,-,+,,19,	while (hi - lo > 1) {
type_conversion,basics.c,41,-,+,,33,		size_t mid = lo + (hi - lo) / 2;
type_conversion,basics.c,55,-,+,,11,"	return f(0, args) ? 0 : 1;"
type_conversion,basics.c,75,-,+,,9,	return p - names;
type_conversion,basics.c,81,-,+,,21,	size_t names_cap = 0;
type_conversion,basics.c,82,-,+,,21,	size_t names_len = 0;
type_conversion,basics.c,89,-,+,,12,			*next = 0;
type_conversion,basics.c,120,-,+,,9,	for (; p < a->len && p < b->len; p++) {
type_conversion,basics.c,121,-,+,,7,		if (a->buf[p] != b->buf[p])
type_conversion,basics_test.c,33,-,+,,11,"		{-9000, 0},"
type_conversion,basics_test.c,34,-,+,,8,"		{-1, 0},"
type_conversion,basics_test.c,35,-,+,,7,"		{0, 0},"
type_conversion,basics_test.c,36,-,+,,7,"		{2, 0},"
type_conversion,basics_test.c,37,-,+,,7,"		{3, 1},"
type_conversion,basics_test.c,38,-,+,,7,"		{4, 1},"
type_conversion,basics_test.c,39,-,+,,7,"		{7, 3},"
type_conversion,basics_test.c,40,-,+,,7,"		{9, 4},"
type_conversion,basics_test.c,41,-,+,,8,"		{10, 4},"
type_conversion,basics_test.c,42,-,+,,8,"		{11, 5},"
type_conversion,basics_test.c,43,-,+,,10,"		{9000, 5},"
type_conversion,basics_test.c,45,-,+,,13,	size_t i = 0;
type_conversion,basics_test.c,47,-,+,,11,	for (i = 0; i < ARRAY_SIZE(testcases); i++) {
type_conversion,basics_test.c,69,-,+,,18,"	parse_names(in, strlen(in), &out);"
type_conversion,basics_test.c,80,-,+,,18,"	parse_names(in, strlen(in), &out);"
type_conversion,bisect.c,121,-,+,,3,		res == BISECT_INTERNAL_SUCCESS_1ST_BAD_FOUND ||
type_conversion,bisect.c,122,-,+,,3,		res == BISECT_INTERNAL_SUCCESS_MERGE_BASE;
type_conversion,bisect.c,152,-,+,,27,		unsigned commit_flags = commit->object.flags;
type_conversion,bisect.c,192,-,+,,27,		unsigned commit_flags = p->item->object.flags;
type_conversion,bisect.c,227,-,+,,38,"	struct commit_dist *array = xcalloc(nr, sizeof(*array));"
type_conversion,bisect.c,233,-,+,,27,		unsigned commit_flags = p->item->object.flags;
type_conversion,bisect.c,234,-,+,,59,"		if (!strbuf_read_file(&branch, git_path_bisect_start(), 0))"
type_conversion,bisect.c,249,-,+,,17,		cmd.git_cmd = 1;
type_conversion,bisect.c,289,-,+,,27,		unsigned commit_flags = commit->object.flags;
type_conversion,bisect.c,305,-,+,,85,"	if (refs_update_ref(get_main_ref_store(the_repository), NULL, tag.buf, &oid, NULL, 0,"
type_conversion,bisect.c,352,-,+,,28,			unsigned commit_flags = p->item->object.flags;
type_conversion,bisect.c,414,-,+,,27,		unsigned commit_flags = p->item->object.flags;
type_conversion,bisect.c,420,-,+,,19,		state->nr_bad = 1;
type_conversion,bisect.c,448,-,+,,32,	struct bisect_state state = { 0 };
type_conversion,bisect.c,461,-,+,,10,"				     state.nr_good), state.nr_good);"
type_conversion,bisect.c,469,-,+,,32,	struct bisect_state state = { 0 };
type_conversion,bisect.c,506,-,+,,14,	for (i = 0; i < array->nr; i++) {
type_conversion,bisect.c,508,-,+,,7,		if (i + 1 < array->nr)
type_conversion,bisect.c,509,-,+,,31,"			strbuf_addch(&joined_hexs, delim);"
type_conversion,bisect.c,588,-,+,,18,	count = count * 1103515245 + 12345;
type_conversion,bisect.c,589,-,+,,16,	return (count/65536) % PRN_MODULO;
type_conversion,bisect.c,598,-,+,,15,"	float d, x = val;"
type_conversion,bisect.c,604,-,+,,36,		float y = (x + (float)val / x) / 2;
type_conversion,bisect.c,607,-,+,,11,	} while (d >= 0.5);
type_conversion,bisect.c,609,+,-,(int)x,,
type_conversion,bisect.c,617,-,+,,16,	prn = get_prn(count);
type_conversion,bisect.c,662,-,+,,33,"		.free_removed_argv_elements = 1,"
type_conversion,bisect.c,667,-,+,,17,	revs->abbrev = 0;
type_conversion,bisect.c,669,-,+,,6,	if (res == BISECT_INTERNAL_SUCCESS_1ST_BAD_FOUND) {
type_conversion,bisect.c,672,-,+,,13,	} else if (res == BISECT_ONLY_SKIPPED_LEFT) {
type_conversion,bisect.c,673,-,+,,14,	for (i = 0; i < good_revs.nr; i++)
type_conversion,bisect.c,680,-,+,,18,"	setup_revisions(rev_argv->nr, rev_argv->v, revs, &opt);"
type_conversion,bisect.c,726,-,+,,45,"			""BISECT_EXPECTED_REV"", bisect_rev, NULL, 0,"
type_conversion,bisect.c,731,-,+,,38,"				""BISECT_HEAD"", bisect_rev, NULL, 0,"
type_conversion,bisect.c,736,-,+,,17,		cmd.git_cmd = 1;
type_conversion,bisect.c,773,-,+,,14,	for (i = 0; i < revs.nr; i++) {
type_conversion,bisect.c,774,-,+,,14,	for (i = 0; i < good_revs.nr; i++)
type_conversion,bisect.c,785,-,+,,51,"		char *good_hex = join_oid_array_hex(&good_revs, ' ');"
type_conversion,bisect.c,796,-,+,,58,"		strbuf_read_file(&start_head, git_path_bisect_start(), 0);"
type_conversion,bisect.c,801,-,+,,18,			cmd.git_cmd = 1;
type_conversion,bisect.c,816,-,+,,50,"	char *good_hex = join_oid_array_hex(&good_revs, ' ');"
type_conversion,bisect.c,845,-,+,,92,"		if (refs_update_ref(get_main_ref_store(the_repository), NULL, ""BISECT_HEAD"", &oid, NULL, 0,"
type_conversion,bisect.c,856,-,+,,14,	for (i = 0; i < states.nr; i++)
type_conversion,bisect.c,914,-,+,,8,"		-1 : bisect_start(terms, 0, empty_strvec);"
type_conversion,bisect.c,948,-,+,,7,		if (res_head == MISSING_OBJECT) {
type_conversion,bisect.c,975,-,+,,17,	show.git_cmd = 1;
type_conversion,bisect.c,982,-,+,,14,	for (i = 0; i < revs.nr; i++) {
type_conversion,bisect.c,1029,-,+,,14,	*word_end = '\0'; /* NUL-terminate the word */
type_conversion,bisect.c,1036,-,+,,26,	unsigned bisect_flags = 0;
type_conversion,bisect.c,1039,-,+,,29,"		res = bisect_start(terms, argv.nr, argv.v);"
type_conversion,bisect.c,1052,-,+,,40,"		res = bisect_terms(terms, argv.nr == 1 ? argv.v[0] : NULL);"
type_conversion,bisect.c,1055,-,+,,17,	revs.limited = 1;
type_conversion,bisect.c,1068,-,+,,7,		if (res < 0)
type_conversion,bisect.c,1112,-,+,,5,"		  steps), steps);"
type_conversion,bisect.c,1119,-,+,,5,"		  nr), nr, steps_msg);"
type_conversion,bisect.c,1120,-,+,,28,"	res = bisect_state(terms, argv_state.nr, argv_state.v);"
type_conversion,bisect.c,1133,-,+,,10,		return BISECT_FAILED;
type_conversion,bisect.c,1135,-,+,,17,	cmd.no_stdin = 1;
type_conversion,bisect.c,1142,-,+,,18,			cmd.git_cmd = 1;
type_conversion,bisect.c,1145,-,+,,7,		if (argv[0][0] == '-') {
type_conversion,bisect.c,1147,-,+,,18,			cmd.git_cmd = 1;
type_conversion,bisect.c,1149,-,+,,18,			cmd.git_cmd = 1;
type_conversion,bisect.c,1156,-,+,,49,"	strbuf_read_file(&sb, git_path_bisect_names(), 0);"
type_conversion,bisect.c,1176,-,+,,18,	cmd.use_shell = 1;
type_conversion,bisect.c,1194,-,+,,36,	refs_for_removal.strdup_strings = 1;
type_conversion,bisect.c,1200,-,+,,6,	if (res != BISECT_OK)
type_conversion,bisect.c,1206,-,+,,6,	if (res != BISECT_OK)
type_conversion,bisect.c,1214,-,+,,12,	int res = BISECT_OK;
type_conversion,bisect.c,1221,-,+,,10,		return BISECT_FAILED;
type_conversion,bisect.c,1225,-,+,,10,		return BISECT_FAILED;
type_conversion,bisect.c,1246,-,+,,11,				res = BISECT_FAILED;
type_conversion,bisect.c,1252,-,+,,11,				res = BISECT_FAILED;
type_conversion,bisect.c,1281,-,+,,9,"		res = bisect_state(terms, 1, &new_state);"
type_conversion,bisect.c,1290,-,+,,14,		if (res == BISECT_ONLY_SKIPPED_LEFT)
type_conversion,bisect.c,1292,-,+,,19,		else if (res == BISECT_INTERNAL_SUCCESS_MERGE_BASE) {
type_conversion,bisect.c,1294,-,+,,10,			res = BISECT_OK;
type_conversion,bisect.c,1295,-,+,,21,		} else if (res == BISECT_INTERNAL_SUCCESS_1ST_BAD_FOUND) {
type_conversion,bisect.c,1297,-,+,,10,			res = BISECT_OK;
type_conversion,bisect.c,1338,-,+,,8,"	res = bisect_start(&terms, argc, argv);"
type_conversion,bisect.c,1352,-,+,,8,"	res = bisect_next(&terms, prefix);"
type_conversion,bisect.c,1359,-,+,,9,	return bisect_log();
type_conversion,bisect.c,1370,-,+,,8,"	res = bisect_replay(&terms, argv[0]);"
type_conversion,bisect.c,1382,-,+,,8,"	res = bisect_skip(&terms, argc, argv);"
type_conversion,bisect.c,1442,-,+,,9,"		res = bisect_state(&terms, argc, argv);"
type_conversion,bitmap.c,35,-,+,,27,	return bitmap_word_alloc(32);
type_conversion,bitmap.c,57,-,+,,28,"	bitmap_grow(self, block + 1);"
type_conversion,bitmap.c,73,-,+,,44,		(self->words[block] & EWAH_MASK(pos)) != 0;
type_conversion,bitmap.c,79,-,+,,34,"	size_t i, running_empty_words = 0;"
type_conversion,bitmap.c,80,-,+,,22,	eword_t last_word = 0;
type_conversion,bitmap.c,82,-,+,,11,	for (i = 0; i < bitmap->word_alloc; ++i) {
type_conversion,bitmap.c,83,-,+,,27,		if (bitmap->words[i] == 0) {
type_conversion,bitmap.c,88,-,+,,20,		if (last_word != 0)
type_conversion,bitmap.c,91,-,+,,29,		if (running_empty_words > 0) {
type_conversion,bitmap.c,93,-,+,,26,			running_empty_words = 0;
type_conversion,bitmap.c,108,-,+,,13,	size_t i = 0;
type_conversion,bitmap.c,128,-,+,,11,	for (i = 0; i < count; ++i)
type_conversion,bitmap.c,137,-,+,,11,	for (i = 0; i < other->word_alloc; i++)
type_conversion,bitmap.c,144,-,+,,59,	size_t other_final = (other->bit_size / BITS_IN_EWORD) + 1;
type_conversion,bitmap.c,145,-,+,,13,	size_t i = 0;
type_conversion,bitmap.c,164,-,+,,20,"	size_t i, count = 0;"
type_conversion,bitmap.c,166,-,+,,11,	for (i = 0; i < self->word_alloc; ++i)
type_conversion,bitmap.c,167,-,+,,12,		count += ewah_bit_popcount64(self->words[i]);
type_conversion,bitmap.c,175,-,+,,11,	for (i = 0; i < self->word_alloc; i++)
type_conversion,bitmap.c,194,-,+,,11,	for (i = 0; i < small->word_alloc; ++i) {
type_conversion,bitmap.c,200,-,+,,24,		if (big->words[i] != 0)
type_conversion,bitmap.c,221,-,+,,11,	for (i = 0; i < common_size; i++) {
type_conversion,blame.c,116,-,+,,46,"		    oid_object_info(r, &blob_oid, NULL) == OBJ_BLOB)"
type_conversion,blame.c,120,-,+,,39,"	pos = index_name_pos(r->index, path, strlen(path));"
type_conversion,blame.c,123,-,+,,11,	else if (-1 - pos < r->index->cache_nr &&
type_conversion,blame.c,148,-,+,,9,		len = endp - tmp;
type_conversion,blame.c,150,-,+,,36,"	if (split_ident_line(&ident, tmp, len)) {"
type_conversion,blame.c,157,-,+,,11,		*time = 0;
type_conversion,blame.c,161,-,+,,12,	namelen = ident.name_end - ident.name_begin;
type_conversion,blame.c,164,-,+,,12,	maillen = ident.mail_end - ident.mail_begin;
type_conversion,blame.c,170,-,+,,11,		*time = 0;
type_conversion,blame.c,173,-,+,,34,"		strbuf_add(tz, ident.tz_begin, ident.tz_end - ident.tz_begin);"
type_conversion,blame.c,205,-,+,,26,	commit->object.parsed = 1;
type_conversion,blame.c,206,-,+,,17,	commit->date = now;
type_conversion,blame.c,224,-,+,,38,"		strbuf_add(&ret->summary, subject, len);"
type_conversion,blame.c,256,-,+,,53,"				strbuf_attach(&buf, buf_ptr, buf_len, buf_len + 1);"
type_conversion,blame.c,257,-,+,,47,"			else if (strbuf_read_file(&buf, read_from, st.st_size) != st.st_size)"
type_conversion,blame.c,261,-,+,,41,"			if (strbuf_readlink(&buf, read_from, st.st_size) < 0)"
type_conversion,blame.c,270,-,+,,10,		mode = 0;
type_conversion,blame.c,271,-,+,,28,"		if (strbuf_read(&buf, 0, 0) < 0)"
type_conversion,blame.c,276,-,+,,22,	origin->file.size = buf.len;
type_conversion,blame.c,288,-,+,,8,	len = strlen(path);
type_conversion,blame.c,297,-,+,,40,"	ce = make_empty_cache_entry(r->index, len);"
type_conversion,blame.c,299,-,+,,25,"	memcpy(ce->name, path, len);"
type_conversion,blame.c,300,-,+,,33,	ce->ce_flags = create_ce_flags(0);
type_conversion,blame.c,301,-,+,,19,	ce->ce_namelen = len;
type_conversion,blame.c,302,-,+,,33,"	display_progress(pi->progress, pi->blamed_lines);"
type_conversion,blame.c,316,-,+,,19,	xpparam_t xpp = {0};
type_conversion,blame.c,317,-,+,,24,	xdemitconf_t xecfg = {0};
type_conversion,blame.c,320,-,+,,14,	xpp.flags = xdl_opts;
type_conversion,blame.c,325,-,+,,21,		for (time_width = utf8_strwidth(time_str);
type_conversion,blame.c,328,-,+,,39,"	const char *nl = memchr(start, '\n', end - start);"
type_conversion,blame.c,348,-,+,,15,		*lineno++ = p - buf;
type_conversion,blame.c,350,-,+,,12,	*lineno = len;
type_conversion,blame.c,356,-,+,,15,	int repeat = opt & OUTPUT_LINE_PORCELAIN;
type_conversion,blame.c,370,-,+,,26,"	cp = blame_nth_line(sb, ent->lno);"
type_conversion,blame.c,383,-,+,,12,			putchar(ch);
type_conversion,blame.c,384,-,+,,12,		} while (ch != '\n' &&
type_conversion,blame.c,388,-,+,,28,	if (sb->final_buf_size && cp[-1] != '\n')
type_conversion,blame.c,409,-,+,,26,"	unsigned int hash, c0 = 0, c1;"
type_conversion,blame.c,411,-,+,,28,	int max_map_entry_count = 1 + line_end - line_begin;
type_conversion,blame.c,412,-,+,,44,"	struct fingerprint_entry *entry = xcalloc(max_map_entry_count,"
type_conversion,blame.c,416,-,+,,41,"	hashmap_init(&result->map, NULL, NULL, max_map_entry_count);"
type_conversion,blame.c,425,-,+,,9,			c1 = 0;
type_conversion,blame.c,426,-,+,,6,	if (next == EXPECT_COLOR)
type_conversion,blame.c,430,-,+,,15,		if (hash == 0)
type_conversion,blame.c,455,-,+,,25,	int show_raw_time = !!(opt & OUTPUT_RAW_TIMESTAMP);
type_conversion,blame.c,461,-,+,,26,"	cp = blame_nth_line(sb, ent->lno);"
type_conversion,blame.c,463,-,+,,6,	if (opt & OUTPUT_SHOW_AGE_WITH_COLOR) {
type_conversion,blame.c,471,-,+,,17,		int length = (opt & OUTPUT_LONG_OBJECT_NAME) ? the_hash_algo->hexsz : abbrev;
type_conversion,blame.c,473,-,+,,7,		if (opt & OUTPUT_COLOR_LINE) {
type_conversion,blame.c,487,-,+,,22,"				memset(hex, ' ', length);"
type_conversion,blame.c,488,-,+,,15,			else if (!(opt & OUTPUT_ANNOTATE_COMPAT)) {
type_conversion,blame.c,503,-,+,,7,		if (opt & OUTPUT_ANNOTATE_COMPAT) {
type_conversion,blame.c,505,-,+,,8,			if (opt & OUTPUT_SHOW_EMAIL)
type_conversion,blame.c,510,-,+,,14,	for (i = 0; i < line_count; ++i) {
type_conversion,blame.c,514,-,+,,8,			if (opt & OUTPUT_SHOW_SCORE)
type_conversion,blame.c,518,-,+,,8,			if (opt & OUTPUT_SHOW_NAME)
type_conversion,blame.c,521,-,+,,8,			if (opt & OUTPUT_SHOW_NUMBER)
type_conversion,blame.c,525,-,+,,10,			if (!(opt & OUTPUT_NO_AUTHOR)) {
type_conversion,blame.c,528,-,+,,9,				if (opt & OUTPUT_SHOW_EMAIL)
type_conversion,blame.c,546,-,+,,12,			putchar(ch);
type_conversion,blame.c,547,-,+,,12,		} while (ch != '\n' &&
type_conversion,blame.c,551,-,+,,28,	if (sb->final_buf_size && cp[-1] != '\n')
type_conversion,blame.c,561,-,+,,6,	if (option & OUTPUT_PORCELAIN) {
type_conversion,blame.c,578,-,+,,7,		if (option & OUTPUT_PORCELAIN)
type_conversion,blame.c,613,-,+,,12,	int len = strlen(uniq);
type_conversion,blame.c,627,-,+,,27,	unsigned largest_score = 0;
type_conversion,blame.c,640,-,+,,9,		num = strlen(suspect->path);
type_conversion,blame.c,647,-,+,,8,			if (*option & OUTPUT_SHOW_EMAIL)
type_conversion,blame.c,664,-,+,,34,	max_orig_digits = decimal_width(longest_src_lines);
type_conversion,blame.c,665,-,+,,29,	max_digits = decimal_width(longest_dst_lines);
type_conversion,blame.c,666,-,+,,35,	max_score_digits = decimal_width(largest_score);
type_conversion,blame.c,686,-,+,,10,		return 0;
type_conversion,blame.c,687,-,+,,9,	return score;
type_conversion,blame.c,692,-,+,,55,"	return prefix_path(prefix, prefix ? strlen(prefix) : 0, path);"
type_conversion,blame.c,739,-,+,,30,"		if (color_parse_mem(value, strlen(value), repeated_meta_color))"
type_conversion,blame.c,817,-,+,,9,"	return OBJ_NONE < oid_object_info(the_repository, &oid, NULL);"
type_conversion,blame.c,829,-,+,,15,		if (kind == OBJ_COMMIT) {
type_conversion,blame.c,833,-,+,,15,		if (kind != OBJ_TAG)
type_conversion,blame.c,849,-,+,,32,"	oidset_init(&sb->ignore_list, 0);"
type_conversion,blame.c,919,-,+,,19,	long num_lines = 0;
type_conversion,blame.c,927,-,+,,38,	revs.diffopt.flags.allow_textconv = 1;
type_conversion,blame.c,928,-,+,,38,	revs.diffopt.flags.follow_renames = 1;
type_conversion,blame.c,931,-,+,,17,	dashdash_pos = 0;
type_conversion,blame.c,935,-,+,,8,			    PARSE_OPT_KEEP_DASHDASH | PARSE_OPT_KEEP_ARGV0);
type_conversion,blame.c,949,-,+,,20,				dashdash_pos = ctx.cpidx;
type_conversion,blame.c,963,-,+,,38,	revs.diffopt.flags.follow_renames = 0;
type_conversion,blame.c,969,-,+,,22,	if (incremental || (output_option & OUTPUT_PORCELAIN)) {
type_conversion,blame.c,1007,-,+,,6,					o->file.size);
type_conversion,blame.c,1010,-,+,,10,"			      0, o->num_lines);"
type_conversion,blame.c,1022,-,+,,22,"		blame_date_width = utf8_strwidth(_(""4 years, 11 months ago"")) + 1; /* add the null */"
type_conversion,blame.c,1032,-,+,,39,"		blame_date_width = strlen(show_date(0, 0, blame_date_mode)) + 1; /* add the null */"
type_conversion,blame.c,1035,-,+,,22,	blame_date_width -= 1; /* strip the null */
type_conversion,blame.c,1037,-,+,,43,"		    textconv_object(opt->repo, o->path, o->mode,"
type_conversion,blame.c,1044,-,+,,16,		file->size = file_size;
type_conversion,blame.c,1060,-,+,,11,		switch (argc - dashdash_pos - 1) {
type_conversion,blame.c,1061,-,+,,8,		case 2: /* (1b) */
type_conversion,blame.c,1069,-,+,,8,		case 1: /* (1a) */
type_conversion,blame.c,1090,-,+,,23,	revs.disable_stdin = 1;
type_conversion,blame.c,1123,-,+,,8,	lno = sb.num_lines;
type_conversion,blame.c,1128,-,+,,11,	anchor = 1;
type_conversion,blame.c,1130,-,+,,20,	for (range_i = 0; range_i < range_list.nr; ++range_i) {
type_conversion,blame.c,1140,-,+,,11,"			       lno), sb.path, lno);"
type_conversion,blame.c,1141,-,+,,16,		if (bottom < 1)
type_conversion,blame.c,1142,-,+,,13,			bottom = 1;
type_conversion,blame.c,1143,-,+,,13,		if (top < 1 || lno < top)
type_conversion,blame.c,1147,-,+,,18,		anchor = top + 1;
type_conversion,blame.c,1151,-,+,,38,	for (range_i = ranges.nr; range_i > 0; --range_i) {
type_conversion,blame.c,1152,-,+,,52,		const struct range *r = &ranges.ranges[range_i - 1];
type_conversion,blame.c,1157,-,+,,15,		num_lines = sb.num_lines;
type_conversion,blame.c,1186,-,+,,60,"		pi.progress = start_delayed_progress(_(""Blaming lines""), num_lines);"
type_conversion,blame.c,1196,-,+,,17,			ent->score = 0;
type_conversion,blame.c,1201,-,+,,8,	if (!(output_option & (OUTPUT_COLOR_LINE | OUTPUT_SHOW_AGE_WITH_COLOR)))
type_conversion,blame.c,1204,-,+,,8,	if (!(output_option & OUTPUT_PORCELAIN)) {
type_conversion,blame.c,1207,-,+,,8,		    (output_option & OUTPUT_COLOR_LINE))
type_conversion,blame.c,1212,-,+,,6,	if (output_option & OUTPUT_ANNOTATE_COMPAT)
type_conversion,blame.c,1245,-,+,,53,"	if (oid_object_info(r, &origin->blob_oid, NULL) != OBJ_BLOB)"
type_conversion,blame.c,1278,-,+,,6,	if (commit_graph_generation(origin->commit) == GENERATION_NUMBER_INFINITY)
type_conversion,blame.c,1342,-,+,,30,	diff_opts.flags.recursive = 1;
type_conversion,blame.c,1392,-,+,,11,		switch (p->status) {
type_conversion,blame.c,1395,-,+,,8,			    p->status);
type_conversion,blame.c,1425,-,+,,30,	diff_opts.flags.recursive = 1;
type_conversion,blame.c,1441,-,+,,8,		if ((p->status == 'R' || p->status == 'C') &&
type_conversion,blame.c,1635,-,+,,34,"	struct blame_entry *n = xcalloc(1, sizeof(struct blame_entry));"
type_conversion,blame.c,1644,-,+,,13,	e->score = 0;
type_conversion,blame.c,1925,-,+,,34,"	blame_chunk(&d->dstq, &d->srcq, start_b, start_a - start_b,"
type_conversion,blame.c,1926,-,+,,7,"		    start_b + count_b, count_a, d->parent, d->target,"
type_conversion,blame.c,1950,-,+,,13,	d.offset = 0;
type_conversion,blame.c,1965,-,+,,41,"	blame_chunk(&d.dstq, &d.srcq, INT_MAX, d.offset, INT_MAX, 0,"
type_conversion,blame.c,1992,-,+,,10,	score = 1;
type_conversion,blame.c,1993,-,+,,26,"	cp = blame_nth_line(sb, e->lno);"
type_conversion,blame.c,1994,-,+,,26,"	ep = blame_nth_line(sb, e->lno + e->num_lines);"
type_conversion,blame.c,1996,-,+,,17,		unsigned ch = *((unsigned char *)cp);
type_conversion,blame.c,2077,-,+,,30,"	handle_split(d->sb, d->ent, d->tlno, d->plno, start_b, d->parent,"
type_conversion,blame.c,2104,-,+,,26,"	cp = blame_nth_line(sb, ent->lno);"
type_conversion,blame.c,2106,-,+,,35,"	file_o.size = blame_nth_line(sb, ent->lno + ent->num_lines) - cp;"
type_conversion,blame.c,2117,-,+,,24,"	handle_split(sb, ent, d.tlno, d.plno, ent->num_lines, parent, split);"
type_conversion,blame.c,2248,-,+,,30,	diff_opts.flags.recursive = 1;
type_conversion,blame.c,2263,-,+,,40,		diff_opts.flags.find_copies_harder = 1;
type_conversion,blame.c,2378,-,+,,9,	return commit_list_count(l);
type_conversion,blame.c,2423,-,+,,11,	else if (num_sg < ARRAY_SIZE(sg_buf))
type_conversion,blame.c,2609,-,+,,27,		     !(revs->max_age != -1 && commit->date < revs->max_age)))
type_conversion,blame.c,2623,-,+,,22,			suspect->guilty = 1;
type_conversion,blame.c,2663,-,+,,14,	for (i = 0; i < revs->pending.nr; i++) {
type_conversion,blame.c,2668,-,+,,15,		if (!obj || obj->type != OBJ_COMMIT)
type_conversion,blame.c,2693,-,+,,26,	if (revs->pending.nr != 1)
type_conversion,blame.c,2699,-,+,,14,	if (!obj || obj->type != OBJ_COMMIT)
type_conversion,blame.c,2730,-,+,,14,	for (i = 0; i < revs->pending.nr; i++) {
type_conversion,blame.c,2735,-,+,,15,		if (!obj || obj->type != OBJ_COMMIT)
type_conversion,blame.c,2841,-,+,,36,"			struct commit_list *l = xcalloc(1, sizeof(*l));"
type_conversion,blame.c,2856,-,+,,41,"		sb->final_buf = xmemdupz(o->file.ptr, o->file.size);"
type_conversion,blame.c,2857,-,+,,24,		sb->final_buf_size = o->file.size;
type_conversion,blame.c,2865,-,+,,43,"		    textconv_object(sb->repo, sb->path, o->mode, &o->blob_oid, 1, (char **) &sb->final_buf,"
type_conversion,blame.c,2894,-,+,,41,"	struct blame_entry *new_head = xcalloc(1, sizeof(struct blame_entry));"
type_conversion,blame.c,2895,-,+,,18,	new_head->lno = start;
type_conversion,blame.c,2896,-,+,,24,	new_head->num_lines = end - start;
type_conversion,blame.c,2898,-,+,,20,	new_head->s_lno = start;
type_conversion,blob.c,17,-,+,,24,
type_conversion,block.c,43,-,+,,13,	int rlen = w->restart_len;
type_conversion,block.c,51,-,+,,6,	if (2 + 3 * rlen + n > w->block_size - w->next)
type_conversion,block.c,58,-,+,,13,	w->next += n;
type_conversion,block.c,74,-,+,,26,	bw->next = header_off + 4;
type_conversion,block.c,77,-,+,,20,	bw->restart_len = 0;
type_conversion,block.c,78,-,+,,21,	bw->last_key.len = 0;
type_conversion,block.c,100,-,+,,10,"		.len = w->block_size - w->next,"
type_conversion,block.c,112,-,+,,9,		err = REFTABLE_API_ERROR;
type_conversion,block.c,127,-,+,,41,"	err = block_writer_register_restart(w, start.len - out.len, is_restart,"
type_conversion,block.c,137,-,+,,14,	for (i = 0; i < w->restart_len; i++) {
type_conversion,block.c,139,-,+,,14,		w->next += 3;
type_conversion,block.c,142,-,+,,29,"	put_be16(w->buf + w->next, w->restart_len);"
type_conversion,block.c,143,-,+,,13,	w->next += 2;
type_conversion,block.c,150,-,+,,6,	if (block_writer_type(w) == BLOCK_TYPE_LOG) {
type_conversion,block.c,151,-,+,,27,		int block_header_skip = 4 + w->header_off;
type_conversion,block.c,152,-,+,,30,"		uLongf src_len = w->next - block_header_skip, compressed_len;"
type_conversion,block.c,157,-,+,,11,			return REFTABLE_ZLIB_ERROR;
type_conversion,block.c,168,-,+,,27,		w->zstream->avail_out = compressed_len;
type_conversion,block.c,170,-,+,,26,		w->zstream->avail_in = src_len;
type_conversion,block.c,180,-,+,,11,			return REFTABLE_ZLIB_ERROR;
type_conversion,block.c,189,-,+,,37,		w->next = w->zstream->total_out + block_header_skip;
type_conversion,block.c,192,-,+,,9,	return w->next;
type_conversion,block.c,203,-,+,,27,	uint16_t restart_count = 0;
type_conversion,block.c,204,-,+,,27,	uint32_t restart_start = 0;
type_conversion,block.c,210,-,+,,10,		err =  REFTABLE_FORMAT_ERROR;
type_conversion,block.c,214,-,+,,6,	if (typ == BLOCK_TYPE_LOG) {
type_conversion,block.c,215,-,+,,32,		uint32_t block_header_skip = 4 + header_off;
type_conversion,block.c,216,-,+,,19,		uLong dst_len = sz - block_header_skip;
type_conversion,block.c,217,-,+,,19,		uLong src_len = block->len - block_header_skip;
type_conversion,block.c,224,-,+,,46,"		memcpy(br->uncompressed_data, block->data, block_header_skip);"
type_conversion,block.c,233,-,+,,10,			err = REFTABLE_ZLIB_ERROR;
type_conversion,block.c,238,-,+,,27,		br->zstream->avail_in = src_len;
type_conversion,block.c,240,-,+,,28,		br->zstream->avail_out = dst_len;
type_conversion,block.c,251,-,+,,10,			err = REFTABLE_ZLIB_ERROR;
type_conversion,block.c,256,-,+,,32,		if (br->zstream->total_out + block_header_skip != sz) {
type_conversion,block.c,257,-,+,,10,			err = REFTABLE_FORMAT_ERROR;
type_conversion,block.c,264,-,+,,16,		block->len = sz;
type_conversion,block.c,265,-,+,,31,		full_block_size = src_len + block_header_skip - br->zstream->avail_in;
type_conversion,block.c,266,-,+,,32,	} else if (full_block_size == 0) {
type_conversion,block.c,268,-,+,,42,	} else if (sz < full_block_size && sz < block->len &&
type_conversion,block.c,269,-,+,,6,		   block->data[sz] != 0) {
type_conversion,block.c,277,-,+,,23,	restart_start = sz - 2 - 3 * restart_count;
type_conversion,block.c,311,-,+,,29,"	int off = br->header_off + 4, n;"
type_conversion,block.c,314,-,+,,26,"		.len = br->block_len - off,"
type_conversion,block.c,316,-,+,,18,	uint8_t extra = 0;
type_conversion,block.c,324,-,+,,10,		return REFTABLE_FORMAT_ERROR;
type_conversion,block.c,337,-,+,,18,	it->block_len = br->block_len;
type_conversion,block.c,340,-,+,,34,	it->next_off = br->header_off + 4;
type_conversion,block.c,352,-,+,,59,"	uint32_t off = block_reader_restart_offset(args->reader, idx);"
type_conversion,block.c,355,-,+,,10,"		.len = args->reader->block_len - off,"
type_conversion,block.c,389,-,+,,26,"		.len = it->block_len - it->next_off,"
type_conversion,block.c,392,-,+,,18,	uint8_t extra = 0;
type_conversion,block.c,395,-,+,,6,	if (it->next_off >= it->block_len)
type_conversion,block.c,402,-,+,,10,		return REFTABLE_FORMAT_ERROR;
type_conversion,block.c,418,-,+,,17,	it->next_off = 0;
type_conversion,block.c,420,-,+,,18,	it->block_len = 0;
type_conversion,block.c,453,-,+,,16,"	i = binsearch(br->restart_count, &restart_needle_less, &args);"
type_conversion,block.c,455,-,+,,9,		err = REFTABLE_FORMAT_ERROR;
type_conversion,block.c,477,-,+,,10,	if (i > 0)
type_conversion,block.c,478,-,+,,54,"		it->next_off = block_reader_restart_offset(br, i - 1);"
type_conversion,block.c,480,-,+,,35,		it->next_off = br->header_off + 4;
type_conversion,block.c,482,-,+,,18,	it->block_len = br->block_len;
type_conversion,block.c,495,-,+,,21,		size_t prev_off = it->next_off;
type_conversion,block.c,501,-,+,,19,			it->next_off = prev_off;
type_conversion,block.c,522,-,+,,19,			it->next_off = prev_off;
type_conversion,block_test.c,34,-,+,,29,	struct block_reader br = { 0 };
type_conversion,block_test.c,42,-,+,,53,"	block_writer_init(&bw, BLOCK_TYPE_REF, block.data, block_size,"
type_conversion,block_test.c,43,-,+,,6,"			  header_off, hash_size(GIT_SHA1_FORMAT_ID));"
type_conversion,block_test.c,70,-,+,,33,"	block_reader_init(&br, &block, header_off, block_size, GIT_SHA1_RAWSZ);"
type_conversion,blocksource.c,19,-,+,,28,"		memset(dest->data, 0xff, dest->len);"
type_conversion,blocksource.c,33,-,+,,35,"	memcpy(dest->data, b->buf + off, size);"
type_conversion,blocksource.c,34,-,+,,14,	dest->len = size;
type_conversion,blocksource.c,35,-,+,,9,	return size;
type_conversion,blocksource.c,61,-,+,,28,"		memset(dest->data, 0xff, dest->len);"
type_conversion,blocksource.c,105,-,+,,14,	dest->len = size;
type_conversion,blocksource.c,106,-,+,,9,	return size;
type_conversion,blocksource.c,126,-,+,,11,			return REFTABLE_NOT_EXIST_ERROR;
type_conversion,blocksource.c,132,-,+,,10,		return REFTABLE_IO_ERROR;
type_conversion,blocksource.c,136,-,+,,12,	p->size = st.st_size;
type_conversion,blocksource.c,137,-,+,,24,"	p->data = xmmap(NULL, st.st_size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,bloom.c,21,-,+,,18,	uint32_t mask = 8 * sizeof(uint32_t) - 1;
type_conversion,bloom.c,23,-,+,,40,	return ((value << count) | (value >> ((-count) & mask)));
type_conversion,bloom.c,28,-,+,,9,	return ((unsigned char)1) << (pos & (BITS_PER_WORD - 1));
type_conversion,bloom.c,41,-,+,,6,	if (offset <= g->chunk_bloom_data_size - BLOOMDATA_CHUNK_HEADER_SIZE)
type_conversion,bloom.c,66,-,+,,48,	end_index = get_be32(g->chunk_bloom_indexes + 4 * lex_pos);
type_conversion,bloom.c,68,-,+,,16,	if (lex_pos > 0)
type_conversion,bloom.c,69,-,+,,51,		start_index = get_be32(g->chunk_bloom_indexes + 4 * (lex_pos - 1));
type_conversion,bloom.c,71,-,+,,17,		start_index = 0;
type_conversion,bloom.c,74,-,+,,38,"	    check_bloom_offset(g, lex_pos - 1, start_index) < 0)"
type_conversion,bloom.c,82,-,+,,24,"			(uintmax_t)(lex_pos-1), (uintmax_t)lex_pos,"
type_conversion,bloom.c,87,-,+,,16,	filter->len = end_index - start_index;
type_conversion,bloom.c,89,-,+,,30,					sizeof(unsigned char) * start_index +
type_conversion,bloom.c,105,-,+,,22,	const uint32_t c2 = 0x1b873593;
type_conversion,bloom.c,106,-,+,,22,	const uint32_t r1 = 15;
type_conversion,bloom.c,107,-,+,,22,	const uint32_t r2 = 13;
type_conversion,bloom.c,108,-,+,,21,	const uint32_t m = 5;
type_conversion,bloom.c,111,-,+,,16,	uint32_t k1 = 0;
type_conversion,bloom.c,114,-,+,,13,	int len4 = len / sizeof(uint32_t);
type_conversion,bloom.c,124,-,+,,22,"		k = rotate_left(k, r1);"
type_conversion,bloom.c,128,-,+,,28,"		seed = rotate_left(seed, r2) * m + n;"
type_conversion,bloom.c,131,-,+,,17,	tail = (data + len4 * sizeof(uint32_t));
type_conversion,bloom.c,133,-,+,,36,	switch (len & (sizeof(uint32_t) - 1)) {
type_conversion,bloom.c,134,-,+,,7,	case 3:
type_conversion,bloom.c,137,-,+,,7,	case 2:
type_conversion,bloom.c,140,-,+,,7,	case 1:
type_conversion,bloom.c,143,-,+,,24,"		k1 = rotate_left(k1, r1);"
type_conversion,bloom.c,165,-,+,,25,	const uint32_t seed0 = 0x293ae76f;
type_conversion,bloom.c,166,-,+,,25,	const uint32_t seed1 = 0x7e646e2c;
type_conversion,bloom.c,170,-,+,,36,"	key->hashes = (uint32_t *)xcalloc(settings->num_hashes, sizeof(uint32_t));"
type_conversion,bloom.c,171,-,+,,14,	for (i = 0; i < settings->num_hashes; i++)
type_conversion,bloom.c,172,-,+,,28,		key->hashes[i] = hash0 + i * hash1;
type_conversion,bloom.c,187,-,+,,14,	for (i = 0; i < settings->num_hashes; i++) {
type_conversion,bloom.c,188,-,+,,23,		uint64_t hash_mod = key->hashes[i] % mod;
type_conversion,bloom.c,191,-,+,,42,		filter->data[block_pos] |= get_bitmask(hash_mod);
type_conversion,bloom.c,215,-,+,,25,	filter->data = xmalloc(1);
type_conversion,bloom.c,216,-,+,,20,	filter->data[0] = 0xFF;
type_conversion,bloom.c,217,-,+,,16,	filter->len = 1;
type_conversion,bloom.c,251,-,+,,28,	diffopt.flags.recursive = 1;
type_conversion,bloom.c,253,-,+,,24,	diffopt.max_changes = settings->max_changed_paths;
type_conversion,bloom.c,265,-,+,,6,	if (diff_queued_diff.nr <= settings->max_changed_paths) {
type_conversion,bloom.c,294,-,+,,19,				*last_slash = '\0';
type_conversion,bloom.c,304,-,+,,18,				*computed |= BLOOM_TRUNC_LARGE;
type_conversion,bloom.c,308,-,+,,90,		filter->len = (hashmap_get_size(&pathmap) * settings->bits_per_entry + BITS_PER_WORD - 1) / BITS_PER_WORD;
type_conversion,bloom.c,311,-,+,,18,				*computed |= BLOOM_TRUNC_EMPTY;
type_conversion,bloom.c,312,-,+,,18,			filter->len = 1;
type_conversion,bloom.c,331,-,+,,17,			*computed |= BLOOM_TRUNC_LARGE;
type_conversion,bloom.c,335,-,+,,16,		*computed |= BLOOM_COMPUTED;
type_conversion,bloom.c,353,-,+,,14,	for (i = 0; i < settings->num_hashes; i++) {
type_conversion,bloom.c,354,-,+,,23,		uint64_t hash_mod = key->hashes[i] % mod;
type_conversion,bloom.c,356,-,+,,9,		if (!(filter->data[block_pos] & get_bitmask(hash_mod)))
type_conversion,branch.c,99,-,+,,32,	if (rebasing && remotes->nr > 1)
type_conversion,branch.c,131,-,+,,80,"		if (git_config_set_multivar_gently(key.buf, item->string, CONFIG_REGEX_NONE, 0) < 0)"
type_conversion,branch.c,161,-,+,,22,		if (remotes->nr == 1) {
type_conversion,branch.c,187,-,+,,21,	if (remotes->nr == 1)
type_conversion,branch.c,251,-,+,,20,"	branch_name_pos = strcspn(fmt, ""%"");"
type_conversion,branch.c,267,-,+,,6,	if (track != BRANCH_TRACK_INHERIT)
type_conversion,branch.c,325,-,+,,6,	if (track == BRANCH_TRACK_SIMPLE) {
type_conversion,branch.c,340,-,+,,26,	if (tracking.srcs->nr < 1)
type_conversion,branch.c,465,-,+,,36,"		maxwidth = calc_maxwidth(&array, strlen(remote_prefix));"
type_conversion,branch.c,543,-,+,,6,	if (track == BRANCH_TRACK_EXPLICIT || track == BRANCH_TRACK_OVERRIDE)
type_conversion,branch.c,557,-,+,,39,"	switch (repo_dwim_ref(r, start_name, strlen(start_name), &oid,"
type_conversion,branch.c,604,-,+,,6,	if (track == BRANCH_TRACK_OVERRIDE)
type_conversion,branch.c,631,-,+,,18,"					NULL, NULL, 0, msg, &err) ||"
type_conversion,branch.c,675,-,+,,18,	child.git_cmd = 1;
type_conversion,branch.c,677,-,+,,27,	child.stdout_to_stderr = 1;
type_conversion,branch.c,682,-,+,,34,	if (!buf.len || buf.buf[buf.len-1] != '\n')
type_conversion,branch.c,728,-,+,,37,"	strbuf_read(&child_err, child.err, 0);"
type_conversion,branch.c,798,-,+,,21,		filter.detached = 1;
type_conversion,branch.c,832,-,+,,23,	filter.ignore_case = icase;
type_conversion,branch.c,838,-,+,,13,		colopts = 0;
type_conversion,branch.c,855,-,+,,50,"		return delete_branches(argc, argv, delete > 1, filter.kind, quiet);"
type_conversion,branch.c,872,-,+,,43,"		ref_sorting_set_sort_flags_all(sorting, REF_SORTING_ICASE, icase);"
type_conversion,branch.c,874,-,+,,13,"			sorting, REF_SORTING_DETACHED_HEAD_FIRST, 1);"
type_conversion,branch.c,991,-,+,,7,		if (track == BRANCH_TRACK_OVERRIDE)
type_conversion,bswap.h,18,-,+,,11,		((val & 0x00ff0000) >>  8) |
type_conversion,bswap.h,19,-,+,,11,		((val & 0x0000ff00) <<  8) |
type_conversion,bswap.h,20,-,+,,11,		((val & 0x000000ff) << 24));
type_conversion,bswap.h,151,-,+,,9,	return	(uint16_t)p[0] << 8 |
type_conversion,bswap.h,152,-,+,,3,		(uint16_t)p[1] << 0;
type_conversion,bswap.h,174,-,+,,9,	p[0] = value >> 24;
type_conversion,bswap.h,175,-,+,,9,	p[1] = value >> 16;
type_conversion,bswap.h,176,-,+,,9,	p[2] = value >>  8;
type_conversion,bswap.h,177,-,+,,9,	p[3] = value >>  0;
type_conversion,bswap.h,183,-,+,,9,	p[0] = value >> 56;
type_conversion,bswap.h,184,-,+,,9,	p[1] = value >> 48;
type_conversion,bswap.h,185,-,+,,9,	p[2] = value >> 40;
type_conversion,bswap.h,186,-,+,,9,	p[3] = value >> 32;
type_conversion,bswap.h,187,-,+,,9,	p[4] = value >> 24;
type_conversion,bswap.h,188,-,+,,9,	p[5] = value >> 16;
type_conversion,bswap.h,189,-,+,,9,	p[6] = value >>  8;
type_conversion,bswap.h,190,-,+,,9,	p[7] = value >>  0;
type_conversion,bugreport.c,139,-,+,,32,"	strbuf_complete(&report_path, '/');"
type_conversion,bugreport.c,159,-,+,,6,	if (diagnose != DIAGNOSE_NONE) {
type_conversion,bugreport.c,184,-,+,,54,"	if (write_in_full(report, buffer.buf, buffer.len) < 0)"
type_conversion,bulk-checkin.c,59,-,+,,27,	if (state->nr_written == 0) {
type_conversion,bulk-checkin.c,63,-,+,,34,	} else if (state->nr_written == 1) {
type_conversion,bulk-checkin.c,67,-,+,,68,"		int fd = finalize_hashfile(state->f, hash, FSYNC_COMPONENT_PACK, 0);"
type_conversion,bulk-checkin.c,79,-,+,,14,	for (i = 0; i < state->nr_written; i++)
type_conversion,bulk-checkin.c,134,-,+,,14,	for (i = 0; i < state->nr_written; i++)
type_conversion,bulk-checkin.c,168,-,+,,17,	off_t offset = 0;
type_conversion,bulk-checkin.c,172,-,+,,46,"	hdrlen = encode_in_pack_object_header(obuf, sizeof(obuf), OBJ_BLOB, size);"
type_conversion,bulk-checkin.c,174,-,+,,31,	s.avail_out = sizeof(obuf) - hdrlen;
type_conversion,bulk-checkin.c,178,-,+,,20,			ssize_t rsize = size < sizeof(ibuf) ? size : sizeof(ibuf);
type_conversion,bulk-checkin.c,179,-,+,,49,"			ssize_t read_result = read_in_full(fd, ibuf, rsize);"
type_conversion,bulk-checkin.c,180,-,+,,22,			if (read_result < 0)
type_conversion,bulk-checkin.c,187,-,+,,20,				size_t hsize = offset - *already_hashed_to;
type_conversion,bulk-checkin.c,188,-,+,,9,				if (rsize < hsize)
type_conversion,bulk-checkin.c,189,-,+,,14,					hsize = rsize;
type_conversion,bulk-checkin.c,195,-,+,,17,			s.avail_in = rsize;
type_conversion,bulk-checkin.c,196,-,+,,12,			size -= rsize;
type_conversion,bulk-checkin.c,203,-,+,,22,				size_t written = s.next_out - obuf;
type_conversion,bulk-checkin.c,208,-,+,,31,				    pack_size_limit_cfg < state->offset + written) {
type_conversion,bulk-checkin.c,213,-,+,,31,"				hashwrite(state->f, obuf, written);"
type_conversion,bulk-checkin.c,244,-,+,,46,"	state->offset = write_pack_header(state->f, 1);"
type_conversion,bulk-checkin.c,258,-,+,,43,	struct hashfile_checkpoint checkpoint = {0};
type_conversion,bulk-checkin.c,261,-,+,,23,"	seekback = lseek(fd, 0, SEEK_CUR);"
type_conversion,bulk-checkin.c,265,-,+,,15,"	header_len = format_object_header((char *)obuf, sizeof(obuf),
					  OBJ_BLOB, size);"
type_conversion,bulk-checkin.c,268,-,+,,39,"	the_hash_algo->update_fn(&ctx, obuf, header_len);"
type_conversion,bulk-checkin.c,272,-,+,,37,	if ((flags & HASH_WRITE_OBJECT) != 0)
type_conversion,bulk-checkin.c,275,-,+,,22,	already_hashed_to = 0;
type_conversion,bundle-uri.c,43,-,+,,54,"	hashmap_init(&list->bundles, compare_bundles, NULL, 0);"
type_conversion,bundle-uri.c,52,-,+,,22,	bundle->unbundled = 0;
type_conversion,bundle-uri.c,118,-,+,,19,		for (i = 0; i < BUNDLE_HEURISTIC__COUNT; i++) {
type_conversion,bundle-uri.c,119,-,+,,8,			if (heuristics[i].heuristic == list->heuristic) {
type_conversion,bundle-uri.c,171,-,+,,20,			for (i = 0; i < BUNDLE_HEURISTIC__COUNT; i++) {
type_conversion,bundle-uri.c,260,-,+,,17,	if (!result && list->mode == BUNDLE_MODE_NONE) {
type_conversion,bundle-uri.c,436,-,+,,6,	if (ctx->mode == BUNDLE_MODE_ANY && ctx->count)
type_conversion,bundle-uri.c,492,-,+,,30,"	uint64_t maxCreationToken = 0, newMaxCreationToken = 0;"
type_conversion,bundle-uri.c,499,-,+,,12,"		.alloc = hashmap_get_size(&list->bundles),"
type_conversion,bundle-uri.c,545,-,+,,21,	while (cur >= 0 && cur < bundles.nr) {
type_conversion,bundle-uri.c,566,-,+,,25,				bundle->unbundled = 1;
type_conversion,bundle-uri.c,595,-,+,,25,				bundle->unbundled = 1;
type_conversion,bundle-uri.c,624,-,+,,28,"						    value.buf, NULL, 0))"
type_conversion,bundle-uri.c,664,-,+,,6,	if (list_from_bundle.mode == BUNDLE_MODE_NONE) {
type_conversion,bundle-uri.c,676,-,+,,6,	if (list_from_bundle.heuristic == BUNDLE_HEURISTIC_CREATIONTOKEN) {
type_conversion,bundle-uri.c,759,-,+,,21,		info->unbundled = 1;
type_conversion,bundle-uri.c,821,-,+,,21,		*has_heuristic = (list.heuristic != BUNDLE_HEURISTIC_NONE);
type_conversion,bundle-uri.c,838,-,+,,6,	if (list->heuristic == BUNDLE_HEURISTIC_CREATIONTOKEN)
type_conversion,bundle-uri.c,849,-,+,,6,	if (list->heuristic == BUNDLE_HEURISTIC_CREATIONTOKEN)
type_conversion,bundle-uri.c,896,-,+,,9,	while (packet_reader_read(request) == PACKET_READ_NORMAL)
type_conversion,bundle-uri.c,898,-,+,,6,	if (request->status != PACKET_READ_FLUSH)
type_conversion,bundle-uri.c,931,-,+,,25,"	strbuf_add(&key, line, equals - line);"
type_conversion,bundle.c,65,-,+,,14,	for (i = 0; i < ARRAY_SIZE(bundle_sigs); i++) {
type_conversion,bundle.c,67,-,+,,22,			header->version = bundle_sigs[i].version;
type_conversion,bundle.c,94,-,+,,20,	       buf.len && buf.buf[0] != '\n') {
type_conversion,bundle.c,101,-,+,,26,		if (header->version == 3 && *buf.buf == '@') {
type_conversion,bundle.c,109,-,+,,7,		if (*buf.buf == '-') {
type_conversion,bundle.c,111,-,+,,24,"			strbuf_remove(&buf, 0, 1);"
type_conversion,bundle.c,172,-,+,,14,	for (i = 0; i < r->nr; i++) {
type_conversion,bundle.c,231,-,+,,14,	for (i = 0; i < p->nr; i++) {
type_conversion,bundle.c,239,-,+,,7,		if (flags & VERIFY_BUNDLE_QUIET)
type_conversion,bundle.c,253,-,+,,6,	if (flags & VERIFY_BUNDLE_VERBOSE) {
type_conversion,bundle.c,297,-,+,,23,	if (revs->max_age == -1 && revs->min_age == -1)
type_conversion,bundle.c,303,-,+,,40,"	line = memmem(buf, size, ""\ntagger "", 8);"
type_conversion,bundle.c,306,-,+,,31,"	lineend = memchr(line, '\n', buf + size - line);"
type_conversion,bundle.c,307,-,+,,27,"	line = memchr(line, '>', lineend ? lineend - line : buf + size - line);"
type_conversion,bundle.c,311,-,+,,29,	result = (revs->max_age == -1 || revs->max_age < date) &&
type_conversion,bundle.c,312,-,+,,21,		(revs->min_age == -1 || revs->min_age > date);
type_conversion,bundle.c,335,-,+,,25,	pack_objects.git_cmd = 1;
type_conversion,bundle.c,353,-,+,,14,	for (i = 0; i < revs->pending.nr; i++) {
type_conversion,bundle.c,356,-,+,,39,"			write_or_die(pack_objects.in, ""^"", 1);"
type_conversion,bundle.c,358,-,+,,39,"		write_or_die(pack_objects.in, ""\n"", 1);"
type_conversion,bundle.c,380,-,+,,14,	for (i = 0; i < revs->pending.nr; i++) {
type_conversion,bundle.c,389,-,+,,46,"		if (repo_dwim_ref(the_repository, e->name, strlen(e->name),"
type_conversion,bundle.c,396,-,+,,7,		if (e->item->type == OBJ_TAG &&
type_conversion,bundle.c,411,-,+,,36,		if (!(e->item->flags & SHOWN) && e->item->type == OBJ_COMMIT) {
type_conversion,bundle.c,449,-,+,,32,"		write_or_die(bundle_fd, "" "", 1);"
type_conversion,bundle.c,451,-,+,,33,"		write_or_die(bundle_fd, ""\n"", 1);"
type_conversion,bundle.c,457,-,+,,32,"	write_or_die(bundle_fd, ""\n"", 1);"
type_conversion,bundle.c,513,-,+,,42,	revs.tree_objects = revs.blob_objects = 1;
type_conversion,bundle.c,553,-,+,,33,"		write_or_die(bundle_fd, ""\n"", 1);"
type_conversion,bundle.c,560,-,+,,34,"			write_or_die(bundle_fd, ""\n"", 1);"
type_conversion,bundle.c,566,-,+,,25,	revs_copy.pending.nr = 0;
type_conversion,bundle.c,567,-,+,,28,	revs_copy.pending.alloc = 0;
type_conversion,bundle.c,569,-,+,,14,	for (i = 0; i < revs.pending.nr; i++) {
type_conversion,bundle.c,578,-,+,,18,	revs.boundary = 1;
type_conversion,bundle.c,588,-,+,,42,	revs.blob_objects = revs.tree_objects = 0;
type_conversion,bundle.c,634,-,+,,17,	ip.no_stdout = 1;
type_conversion,bundle.c,635,-,+,,15,	ip.git_cmd = 1;
type_conversion,cache-tree.c,23,-,+,,34,"	struct cache_tree *it = xcalloc(1, sizeof(struct cache_tree));"
type_conversion,cache-tree.c,52,-,+,,26,"	return memcmp(one, two, onelen);"
type_conversion,cache-tree.c,105,-,+,,16,	int pathlen = strlen(path);
type_conversion,cache-tree.c,129,-,+,,12,	namelen = slash - path;
type_conversion,cache-tree.c,167,-,+,,10,	funny = 0;
type_conversion,cache-tree.c,168,-,+,,11,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,cache-tree.c,173,-,+,,8,			if (10 < ++funny) {
type_conversion,cache-tree.c,188,-,+,,10,	funny = 0;
type_conversion,cache-tree.c,189,-,+,,18,	for (i = 0; i + 1 < istate->cache_nr; i++) {
type_conversion,cache-tree.c,195,-,+,,57,		const struct cache_entry *next_ce = istate->cache[i + 1];
type_conversion,cache-tree.c,199,-,+,,7,		if (this_len < ce_namelen(next_ce) &&
type_conversion,cache-tree.c,200,-,+,,7,		    next_name[this_len] == '/' &&
type_conversion,cache-tree.c,201,-,+,,37,"		    strncmp(this_name, next_name, this_len) == 0) {"
type_conversion,cache-tree.c,202,-,+,,8,			if (10 < ++funny) {
type_conversion,cache-tree.c,280,-,+,,25,		    ce->ce_namelen == baselen &&
type_conversion,cache-tree.c,281,-,+,,32,"		    !strncmp(ce->name, base, baselen)) {"
type_conversion,cache-tree.c,311,-,+,,48,"		if (pathlen <= baselen || memcmp(base, path, baselen))"
type_conversion,cache-tree.c,324,-,+,,12,		sublen = slash - (path + baselen);
type_conversion,cache-tree.c,349,-,+,,23,"	strbuf_init(&buffer, 8192);"
type_conversion,cache-tree.c,365,-,+,,48,"		if (pathlen <= baselen || memcmp(base, path, baselen))"
type_conversion,cache-tree.c,370,-,+,,13,			entlen = slash - (path + baselen);
type_conversion,cache-tree.c,428,-,+,,24,"		strbuf_grow(&buffer, entlen + 100);"
type_conversion,cache-tree.c,484,-,+,,52,"	i = update_one(istate->cache_tree, istate->cache, istate->cache_nr,"
type_conversion,cache-tree.c,506,-,+,,22,"	strbuf_grow(buffer, pathlen + 100);"
type_conversion,cache-tree.c,507,-,+,,27,"	strbuf_add(buffer, path, pathlen);"
type_conversion,cache-tree.c,564,-,+,,20,"	it->entry_count = strtol(cp, &ep, 10);"
type_conversion,cache-tree.c,568,-,+,,15,"	subtree_nr = strtol(cp, &ep, 10);"
type_conversion,cache-tree.c,571,-,+,,25,	while (size && *buf && *buf != '\n') {
type_conversion,cache-tree.c,579,-,+,,14,		if (size < rawsz)
type_conversion,cache-tree.c,583,-,+,,11,		size -= rawsz;
type_conversion,cache-tree.c,653,-,+,,32,"		sub = find_subtree(it, path, slash - path, 0);"
type_conversion,cache-tree.c,659,-,+,,10,		while (*path == '/')
type_conversion,cache-tree.c,704,-,+,,15,		for (i = 0; i < index_state->cache_nr; i++) {
type_conversion,cache-tree.c,793,-,+,,39,"				strbuf_add(tree_path, entry.path, entry.pathlen);"
type_conversion,cache-tree.c,805,-,+,,53,"			    index_entry_exists(r->index, tree_path->buf, tree_path->len))"
type_conversion,cache-tree.c,887,-,+,,20,"	int i, pos, len = path->len;"
type_conversion,cache-tree.c,895,-,+,,23,"		strbuf_setlen(path, len);"
type_conversion,cache-tree.c,909,-,+,,19,		int is_sparse = istate->sparse_index;
type_conversion,cache-tree.c,910,-,+,,43,"		pos = index_name_pos(istate, path->buf, path->len);"
type_conversion,cache-tree.c,940,-,+,,13,			entlen = slash - name;
type_conversion,cache-tree.c,962,-,+,,22,"	strbuf_setlen(path, len);"
type_conversion,cat-file.c,59,-,+,,48,"	strbuf_attach(&sb, object_buf, *size, *size + 1);"
type_conversion,cat-file.c,75,-,+,,7,	if ((type == OBJ_BLOB) && S_ISREG(mode)) {
type_conversion,cat-file.c,127,-,+,,6,	if (obj_context.mode == S_IFINVALID)
type_conversion,cat-file.c,128,-,+,,22,		obj_context.mode = 0100644;
type_conversion,cat-file.c,155,-,+,,23,		if (use_mailmap && (type == OBJ_COMMIT || type == OBJ_TAG)) {
type_conversion,cat-file.c,170,-,+,,27,"		if (filter_object(path, obj_context.mode,"
type_conversion,cat-file.c,178,-,+,,45,"		if (textconv_object(the_repository, path, obj_context.mode,"
type_conversion,cat-file.c,185,-,+,,7,		if (type < 0)
type_conversion,cat-file.c,189,-,+,,7,		if (type == OBJ_TREE) {
type_conversion,cat-file.c,197,-,+,,7,		if (type == OBJ_BLOB) {
type_conversion,cat-file.c,219,-,+,,7,		if (exp_type_id == OBJ_BLOB) {
type_conversion,cat-file.c,221,-,+,,55,"			if (oid_object_info(the_repository, &oid, NULL) == OBJ_TAG) {"
type_conversion,cat-file.c,239,-,+,,60,"			if (oid_object_info(the_repository, &blob_oid, NULL) == OBJ_BLOB) {"
type_conversion,cat-file.c,313,-,+,,13,	int alen = strlen(atom);
type_conversion,cat-file.c,314,-,+,,42,"	return alen == slen && !memcmp(atom, s, alen);"
type_conversion,cat-file.c,327,-,+,,32,"			strbuf_addstr(sb, type_name(data->type));"
type_conversion,cat-file.c,360,-,+,,42,"		if (skip_prefix(start, ""%"", &start) || *start != '(')"
type_conversion,cat-file.c,363,-,+,,46,"			 expand_atom(sb, start + 1, end - start - 1, data))"
type_conversion,cat-file.c,373,-,+,,20,"		if (fwrite(data, 1, len, stdout) != len)"
type_conversion,cat-file.c,376,-,+,,25,"		write_or_die(1, data, len);"
type_conversion,cat-file.c,385,-,+,,6,	if (data->type == OBJ_BLOB) {
type_conversion,cat-file.c,396,-,+,,35,"				if (filter_object(data->rest, 0100644, oid,"
type_conversion,cat-file.c,403,-,+,,24,"						     data->rest, 0100644, oid,"
type_conversion,cat-file.c,414,-,+,,31,"			batch_write(opt, contents, size);"
type_conversion,cat-file.c,436,-,+,,7,		if (type != data->type)
type_conversion,cat-file.c,441,-,+,,30,"		batch_write(opt, contents, size);"
type_conversion,cat-file.c,450,-,+,,17,"		    type_name(data->type),"
type_conversion,cat-file.c,451,-,+,,30,"		    (uintmax_t)data->size, opt->output_delim);"
type_conversion,cat-file.c,481,-,+,,57,"			       obj_name ? obj_name : oid_to_hex(&data->oid), opt->output_delim);"
type_conversion,cat-file.c,486,-,+,,23,		if (use_mailmap && (data->type == OBJ_COMMIT || data->type == OBJ_TAG)) {
type_conversion,cat-file.c,507,-,+,,25,"		strbuf_addch(scratch, opt->output_delim);"
type_conversion,cat-file.c,510,-,+,,33,"	batch_write(opt, scratch->buf, scratch->len);"
type_conversion,cat-file.c,512,-,+,,6,	if (opt->batch_mode == BATCH_MODE_CONTENTS) {
type_conversion,cat-file.c,530,-,+,,11,"				      flags, &data->oid, &ctx);"
type_conversion,cat-file.c,531,-,+,,6,	if (result != FOUND) {
type_conversion,cat-file.c,534,-,+,,37,"			printf(""%s missing%c"", obj_name, opt->output_delim);"
type_conversion,cat-file.c,537,-,+,,39,"			printf(""%s ambiguous%c"", obj_name, opt->output_delim);"
type_conversion,cat-file.c,542,-,+,,11,"			       opt->output_delim, obj_name, opt->output_delim);"
type_conversion,cat-file.c,547,-,+,,11,"			       opt->output_delim, obj_name, opt->output_delim);"
type_conversion,cat-file.c,552,-,+,,11,"			       opt->output_delim, obj_name, opt->output_delim);"
type_conversion,cat-file.c,563,-,+,,6,	if (ctx.mode == 0) {
type_conversion,cat-file.c,566,-,+,,10,"		       opt->output_delim, ctx.symlink_path.buf, opt->output_delim);"
type_conversion,cat-file.c,571,-,+,,57,"	batch_object_write(obj_name, scratch, opt, data, NULL, 0);"
type_conversion,cat-file.c,586,-,+,,13,"			   NULL, 0);"
type_conversion,cat-file.c,626,-,+,,43,"	return batch_unordered_object(oid, NULL, 0, data);"
type_conversion,cat-file.c,686,-,+,,11,	for (i = 0; i < *nr; i++)
type_conversion,cat-file.c,689,-,+,,8,	*nr = 0;
type_conversion,cat-file.c,698,-,+,,36,"	{ ""contents"", parse_cmd_contents, 1},"
type_conversion,cat-file.c,699,-,+,,28,"	{ ""info"", parse_cmd_info, 1},"
type_conversion,cat-file.c,700,-,+,,19,"	{ ""flush"", NULL, 0},"
type_conversion,cat-file.c,709,-,+,,17,"	size_t alloc = 0, nr = 0;"
type_conversion,cat-file.c,711,-,+,,51,"	while (strbuf_getdelim_strip_crlf(&input, stdin, opt->input_delim) != EOF) {"
type_conversion,cat-file.c,722,-,+,,15,		for (i = 0; i < ARRAY_SIZE(commands); i++) {
type_conversion,cat-file.c,728,-,+,,9,				if (*cmd_end != ' ')
type_conversion,cat-file.c,745,-,+,,50,"			dispatch_calls(opt, output, data, queued_cmd, nr);"
type_conversion,cat-file.c,760,-,+,,49,"		dispatch_calls(opt, output, data, queued_cmd, nr);"
type_conversion,cat-file.c,800,-,+,,6,	if (opt->batch_mode == BATCH_MODE_CONTENTS)
type_conversion,cat-file.c,808,-,+,,28,			data.skip_object_info = 1;
type_conversion,cat-file.c,854,-,+,,6,	if (opt->batch_mode == BATCH_MODE_QUEUE_AND_DISPATCH) {
type_conversion,cat-file.c,859,-,+,,51,"	while (strbuf_getdelim_strip_crlf(&input, stdin, opt->input_delim) != EOF) {"
type_conversion,cat-file.c,868,-,+,,32,"				while (*p && strchr("" \t"", *p))"
type_conversion,cat-file.c,869,-,+,,13,					*p++ = '\0';
type_conversion,cat-file.c,1035,-,+,,43,	batch.input_delim = batch.output_delim = '\n';
type_conversion,cat-file.c,1037,-,+,,23,		batch.input_delim = '\0';
type_conversion,cat-file.c,1039,-,+,,44,		batch.input_delim = batch.output_delim = '\0';
type_conversion,cbtree.c,12,-,+,,43,	return (struct cb_node *)((uintptr_t)p - 1);
type_conversion,cbtree.c,19,-,+,,9,	while (1 & (uintptr_t)p) {
type_conversion,cbtree.c,21,-,+,,15,		uint8_t c = q->byte < klen ? k[q->byte] : 0;
type_conversion,cbtree.c,22,-,+,,28,		size_t direction = (1 + (q->otherbits | c)) >> 8;
type_conversion,cbtree.c,48,-,+,,17,	for (newbyte = 0; newbyte < klen; newbyte++) {
type_conversion,cbtree.c,49,-,+,,7,		if (p->k[newbyte] != node->k[newbyte])
type_conversion,cbtree.c,55,-,+,,17,	newotherbits = p->k[newbyte] ^ node->k[newbyte];
type_conversion,cbtree.c,59,-,+,,57,	newotherbits = (newotherbits & ~(newotherbits >> 1)) ^ 255;
type_conversion,cbtree.c,61,-,+,,18,	newdirection = (1 + (newotherbits | c)) >> 8;
type_conversion,cbtree.c,63,-,+,,15,	node->byte = newbyte;
type_conversion,cbtree.c,64,-,+,,20,	node->otherbits = newotherbits;
type_conversion,cbtree.c,74,-,+,,9,		if (!(1 & (uintptr_t)p))
type_conversion,cbtree.c,77,-,+,,7,		if (q->byte > newbyte)
type_conversion,cbtree.c,79,-,+,,7,		if (q->byte == newbyte && q->otherbits > newotherbits)
type_conversion,cbtree.c,81,-,+,,7,		c = q->byte < klen ? node->k[q->byte] : 0;
type_conversion,cbtree.c,82,-,+,,21,		direction = (1 + (q->otherbits | c)) >> 8;
type_conversion,cbtree.c,87,-,+,,31,	*wherep = (struct cb_node *)(1 + (uintptr_t)node);
type_conversion,cbtree.c,101,-,+,,6,	if (1 & (uintptr_t)p) {
type_conversion,cbtree.c,105,-,+,,10,"		return n == CB_BREAK ? n : cb_descend(q->child[1], fn, arg);"
type_conversion,cbtree.c,116,-,+,,13,	size_t i = 0;
type_conversion,cbtree.c,121,-,+,,9,	while (1 & (uintptr_t)p) {
type_conversion,cbtree.c,123,-,+,,15,		uint8_t c = q->byte < klen ? kpfx[q->byte] : 0;
type_conversion,cbtree.c,124,-,+,,28,		size_t direction = (1 + (q->otherbits | c)) >> 8;
type_conversion,cbtree.c,127,-,+,,7,		if (q->byte < klen)
type_conversion,cbtree.c,131,-,+,,11,	for (i = 0; i < klen; i++) {
type_conversion,cbtree.c,132,-,+,,7,		if (p->k[i] != kpfx[i])
type_conversion,check-attr.c,57,-,+,,38,"			quote_c_style(file, NULL, stdout, 0);"
type_conversion,check-attr.c,70,-,+,,49,"		prefix_path(prefix, prefix ? strlen(prefix) : 0, file);"
type_conversion,check-attr.c,91,-,+,,25,"		if (!nul_term_line && buf.buf[0] == '""') {"
type_conversion,check-ignore.c,45,-,+,,51,"				quote_c_style(pattern->pl->src, NULL, stdout, 0);"
type_conversion,check-ignore.c,53,-,+,,38,"			quote_c_style(path, NULL, stdout, 0);"
type_conversion,check-ignore.c,138,-,+,,25,"		if (!nul_term_line && buf.buf[0] == '""') {"
type_conversion,check-mailmap.c,28,-,+,,40,"	if (split_ident_line(&ident, contact, strlen(contact)))"
type_conversion,check-mailmap.c,32,-,+,,12,	namelen = ident.name_end - ident.name_begin;
type_conversion,check-mailmap.c,34,-,+,,12,	maillen = ident.mail_end - ident.mail_begin;
type_conversion,check-ref-format.c,25,-,+,,14,	char prev = '/';
type_conversion,check-ref-format.c,28,-,+,,9,	while ((ch = *refname++) != '\0') {
type_conversion,check-ref-format.c,29,-,+,,7,		if (prev == '/' && ch == prev)
type_conversion,check-ref-format.c,35,-,+,,8,	*cp = '\0';
type_conversion,check-ref-format.c,71,-,+,,26,	for (i = 1; i < argc && argv[i][0] == '-'; i++) {
type_conversion,checkout--worker.c,17,-,+,,6,	if (len < sizeof(struct pc_item_fixed_portion))
type_conversion,checkout--worker.c,23,-,+,,6,	if (len - sizeof(struct pc_item_fixed_portion) !=
type_conversion,checkout--worker.c,45,-,+,,28,	pc_item->ce->ce_namelen = fixed_portion->name_len;
type_conversion,checkout--worker.c,47,-,+,,37,"	memcpy(pc_item->ce->name, variant, pc_item->ce->ce_namelen);"
type_conversion,checkout--worker.c,58,-,+,,32,	struct pc_item_result res = { 0 };
type_conversion,checkout--worker.c,64,-,+,,6,	if (pc_item->status == PC_ITEM_WRITTEN) {
type_conversion,checkout--worker.c,84,-,+,,17,"	size_t i, nr = 0, alloc = 0;"
type_conversion,checkout--worker.c,87,-,+,,43,"		int len = packet_read(0, packet_buffer, sizeof(packet_buffer),"
type_conversion,checkout--worker.c,99,-,+,,11,	for (i = 0; i < nr; i++) {
type_conversion,checkout--worker.c,136,-,+,,24,		state.base_dir_len = strlen(state.base_dir);
type_conversion,checkout--worker.c,143,-,+,,24,	state.refresh_cache = 1;
type_conversion,checkout-index.c,65,-,+,,18,		topath[i][0] = 0;
type_conversion,checkout-index.c,71,-,+,,16,	int namelen = strlen(name);
type_conversion,checkout-index.c,82,-,+,,9,	while (pos <the_repository->index->cache_nr) {
type_conversion,checkout-index.c,84,-,+,,25,		if (ce_namelen(ce) != namelen ||
type_conversion,checkout-index.c,85,-,+,,30,"		    memcmp(ce->name, name, namelen))"
type_conversion,checkout-index.c,95,-,+,,23,		if (ce_stage(ce) != checkout_stage
type_conversion,checkout-index.c,143,-,+,,14,	for (i = 0; i < the_repository->index->cache_nr ; i++) {
type_conversion,checkout-index.c,164,-,+,,23,		if (ce_stage(ce) != checkout_stage
type_conversion,checkout-index.c,168,-,+,,26,		    (ce_namelen(ce) <= prefix_length ||
type_conversion,checkout-index.c,169,-,+,,33,"		     memcmp(prefix, ce->name, prefix_length)))"
type_conversion,checkout-index.c,202,-,+,,12,		int ch = arg[0];
type_conversion,checkout-index.c,204,-,+,,13,			*stage = arg[0] - '0';
type_conversion,checkout-index.c,252,-,+,,44,	prefix_length = prefix ? strlen(prefix) : 0;
type_conversion,checkout-index.c,264,-,+,,16,	state.force = force;
type_conversion,checkout-index.c,265,-,+,,16,	state.quiet = quiet;
type_conversion,checkout-index.c,266,-,+,,18,	state.not_new = not_new;
type_conversion,checkout-index.c,270,-,+,,23,	state.base_dir_len = strlen(state.base_dir);
type_conversion,checkout-index.c,282,-,+,,25,		state.refresh_cache = 1;
type_conversion,checkout-index.c,317,-,+,,26,"			if (!nul_term_line && buf.buf[0] == '""') {"
type_conversion,checkout.c,147,-,+,,8,	len = base->len + strlen(pathname);
type_conversion,checkout.c,148,-,+,,53,"	ce = make_empty_cache_entry(the_repository->index, len);"
type_conversion,checkout.c,151,-,+,,41,"	memcpy(ce->name + base->len, pathname, len - base->len);"
type_conversion,checkout.c,152,-,+,,33,	ce->ce_flags = create_ce_flags(0) | CE_UPDATE;
type_conversion,checkout.c,153,-,+,,19,	ce->ce_namelen = len;
type_conversion,checkout.c,161,-,+,,56,"	pos = index_name_pos(the_repository->index, ce->name, ce->ce_namelen);"
type_conversion,checkout.c,192,-,+,,9,	while (++pos < the_repository->index->cache_nr &&
type_conversion,checkout.c,201,-,+,,9,	while (pos < the_repository->index->cache_nr &&
type_conversion,checkout.c,203,-,+,,54,		if (ce_stage(the_repository->index->cache[pos]) == stage)
type_conversion,checkout.c,217,-,+,,18,	unsigned seen = 0;
type_conversion,checkout.c,220,-,+,,9,	while (pos < the_repository->index->cache_nr) {
type_conversion,checkout.c,237,-,+,,9,	while (pos < the_repository->index->cache_nr &&
type_conversion,checkout.c,239,-,+,,54,		if (ce_stage(the_repository->index->cache[pos]) == stage)
type_conversion,checkout.c,266,-,+,,18,	unsigned mode = 0;
type_conversion,checkout.c,271,-,+,,9,	while (pos < the_repository->index->cache_nr) {
type_conversion,checkout.c,290,-,+,,24,	ll_opts.renormalize = renormalize;
type_conversion,checkout.c,298,-,+,,6,	if (merge_status == LL_MERGE_BINARY_CONFLICT)
type_conversion,checkout.c,301,-,+,,6,	if (merge_status < 0 || !result_buf.ptr) {
type_conversion,checkout.c,318,-,+,,40,"	if (write_object_file(result_buf.ptr, result_buf.size, OBJ_BLOB, &oid))"
type_conversion,checkout.c,391,-,+,,16,	state.force = 1;
type_conversion,checkout.c,392,-,+,,24,	state.refresh_cache = 1;
type_conversion,checkout.c,395,-,+,,30,"	mem_pool_init(&ce_mem_pool, 0);"
type_conversion,checkout.c,406,-,+,,16,	for (pos = 0; pos < the_repository->index->cache_nr; pos++) {
type_conversion,checkout.c,439,-,+,,12,"					      nr_unmerged),"
type_conversion,checkout.c,444,-,+,,12,"					      nr_checkouts),"
type_conversion,checkout.c,451,-,+,,12,"					      nr_checkouts),"
type_conversion,checkout.c,471,-,+,,6,	if (opts->track != BRANCH_TRACK_UNSPECIFIED)
type_conversion,checkout.c,567,-,+,,63,"	if (repo_read_index_preload(the_repository, &opts->pathspec, 0) < 0)"
type_conversion,checkout.c,575,-,+,,23,"	ps_matched = xcalloc(opts->pathspec.nr, 1);"
type_conversion,checkout.c,581,-,+,,16,	for (pos = 0; pos < the_repository->index->cache_nr; pos++)
type_conversion,checkout.c,598,-,+,,16,	for (pos = 0; pos < the_repository->index->cache_nr; pos++) {
type_conversion,checkout.c,609,-,+,,26,"				errs |= check_stages((1<<2) | (1<<3), ce, pos);"
type_conversion,checkout.c,664,-,+,,32,	rev.diffopt.flags.recursive = 1;
type_conversion,checkout.c,667,-,+,,23,"	run_diff_index(&rev, 0);"
type_conversion,checkout.c,698,-,+,,16,	opts.update = worktree;
type_conversion,checkout.c,699,-,+,,23,	opts.skip_unmerged = !worktree;
type_conversion,checkout.c,702,-,+,,26,	opts.preserve_ignored = (!o->force && !o->overwrite_ignore);
type_conversion,checkout.c,703,-,+,,15,	opts.merge = 1;
type_conversion,checkout.c,705,-,+,,24,	opts.verbose_update = o->show_progress;
type_conversion,checkout.c,714,-,+,,23,"	switch (unpack_trees(1, &tree_desc, &opts)) {"
type_conversion,checkout.c,739,-,+,,51,"	if (!repo_dwim_ref(the_repository, branch->name, strlen(branch->name),"
type_conversion,checkout.c,748,-,+,,22,"	strbuf_splice(&buf, 0, 0, ""refs/heads/"", 11);"
type_conversion,checkout.c,764,-,+,,28,	topts->initial_checkout = is_index_unborn(the_repository->index);
type_conversion,checkout.c,765,-,+,,18,	topts->update = 1;
type_conversion,checkout.c,766,-,+,,17,	topts->merge = 1;
type_conversion,checkout.c,767,-,+,,17,	topts->quiet = merge && old_commit;
type_conversion,checkout.c,768,-,+,,26,	topts->verbose_update = show_progress;
type_conversion,checkout.c,770,-,+,,28,	topts->preserve_ignored = !overwrite_ignore;
type_conversion,checkout.c,783,-,+,,52,"	if (repo_read_index_preload(the_repository, NULL, 0) < 0)"
type_conversion,checkout.c,841,-,+,,22,"		ret = unpack_trees(2, trees, &topts);"
type_conversion,checkout.c,998,-,+,,26,"		strbuf_insertstr(&msg, 0, reflog_msg);"
type_conversion,checkout.c,1099,-,+,,3,"		lost),"
type_conversion,checkout.c,1116,-,+,,4,"			lost),"
type_conversion,checkout.c,1491,-,+,,6,"			  strlen(branch_info->name), &oid, &to_free, 0) == 1) {"
type_conversion,checkout.c,1599,-,+,,7,		if (opts->track != BRANCH_TRACK_UNSPECIFIED)
type_conversion,checkout.c,1604,-,+,,7,		if (opts->track != BRANCH_TRACK_UNSPECIFIED)
type_conversion,checkout.c,1606,-,+,,13,	} else if (opts->track == BRANCH_TRACK_UNSPECIFIED)
type_conversion,checkout.c,1737,-,+,,25,static char cb_option = 'b';
type_conversion,checkout.c,1762,-,+,,20,		parseopt_flags = PARSE_OPT_KEEP_DASHDASH;
type_conversion,checkout.c,1786,-,+,,4,"			cb_option, toupper(cb_option), ""--orphan"");"
type_conversion,checkout.c,1823,-,+,,6,	if (opts->track != BRANCH_TRACK_UNSPECIFIED && !opts->new_branch) {
type_conversion,checkout.c,1831,-,+,,43,"			die(_(""missing branch name; try -%c""), cb_option);"
type_conversion,checkout.c,1853,-,+,,4,			opts->track == BRANCH_TRACK_UNSPECIFIED &&
type_conversion,checkout.c,1874,-,+,,35,"		parse_pathspec(&opts->pathspec, 0,"
type_conversion,checkout.c,1904,-,+,,40,"		parse_pathspec_file(&opts->pathspec, 0,"
type_conversion,checkout.c,1905,-,+,,9,"				    0,"
type_conversion,checkout.c,1911,-,+,,29,	opts->pathspec.recursive = 1;
type_conversion,checkout.c,2024,-,+,,14,	cb_option = 'c';
type_conversion,chunk-format.c,31,-,+,,33,"	struct chunkfile *cf = xcalloc(1, sizeof(*cf));"
type_conversion,chunk-format.c,46,-,+,,9,	return cf->chunks_nr;
type_conversion,chunk-format.c,65,-,+,,24,	uint64_t cur_offset = hashfile_total(cf->f);
type_conversion,chunk-format.c,70,-,+,,33,	cur_offset += (cf->chunks_nr + 1) * CHUNK_TOC_ENTRY_SIZE;
type_conversion,chunk-format.c,72,-,+,,14,	for (i = 0; i < cf->chunks_nr; i++) {
type_conversion,chunk-format.c,80,-,+,,24,"	hashwrite_be32(cf->f, 0);"
type_conversion,chunk-format.c,83,-,+,,14,	for (i = 0; i < cf->chunks_nr; i++) {
type_conversion,chunk-format.c,90,-,+,,7,		if (hashfile_total(cf->f) - start_offset != cf->chunks[i].size)
type_conversion,chunk-format.c,124,-,+,,22,		if (chunk_offset % expected_alignment != 0) {
type_conversion,chunk-format.c,140,-,+,,15,		for (i = 0; i < cf->chunks_nr; i++) {
type_conversion,chunk-format.c,194,-,+,,14,	for (i = 0; i < cf->chunks_nr; i++) {
type_conversion,chunk-format.c,206,-,+,,10,		return 1;
type_conversion,chunk-format.c,208,-,+,,10,		return 2;
type_conversion,clean.c,168,-,+,,49,"	int res = 0, ret = 0, gone = 1, original_len = path->len, len;"
type_conversion,clean.c,176,-,+,,43,"			quote_path(path->buf, prefix, &quoted, 0);"
type_conversion,clean.c,191,-,+,,43,"			quote_path(path->buf, prefix, &quoted, 0);"
type_conversion,clean.c,200,-,+,,24,"	strbuf_complete(path, '/');"
type_conversion,clean.c,202,-,+,,8,	len = path->len;
type_conversion,clean.c,206,-,+,,23,"		strbuf_setlen(path, len);"
type_conversion,clean.c,214,-,+,,44,"				quote_path(path->buf, prefix, &quoted, 0);"
type_conversion,clean.c,222,-,+,,44,"				quote_path(path->buf, prefix, &quoted, 0);"
type_conversion,clean.c,226,-,+,,44,"				quote_path(path->buf, prefix, &quoted, 0);"
type_conversion,clean.c,242,-,+,,22,"	strbuf_setlen(path, original_len);"
type_conversion,clean.c,269,-,+,,44,"				quote_path(path->buf, prefix, &quoted, 0);"
type_conversion,clean.c,280,-,+,,15,		for (i = 0; i < dels.nr; i++)
type_conversion,clean.c,300,-,+,,48,"		qname = quote_path(item->string, NULL, &buf, 0);"
type_conversion,clean.c,319,-,+,,31,	unsigned int local_colopts = 0;
type_conversion,clean.c,373,-,+,,25,				if (!highlighted && *p == menu_item->hotkey) {
type_conversion,clean.c,375,-,+,,26,"					strbuf_addch(&menu, *p);"
type_conversion,clean.c,379,-,+,,26,"					strbuf_addch(&menu, *p);"
type_conversion,clean.c,412,-,+,,8,	len = strlen(choice);
type_conversion,clean.c,420,-,+,,20,			if (len == 1 && *choice == menu_item->hotkey) {
type_conversion,clean.c,424,-,+,,47,"			if (!strncasecmp(choice, menu_item->title, len)) {"
type_conversion,clean.c,442,-,+,,55,"			if (!strncasecmp(choice, string_list_item->string, len)) {"
type_conversion,clean.c,490,-,+,,8,"			if (*p == ',')"
type_conversion,clean.c,491,-,+,,10,				*p = ' ';
type_conversion,clean.c,507,-,+,,7,		if (*(*ptr)->buf == '-') {
type_conversion,clean.c,509,-,+,,26,"			strbuf_remove((*ptr), 0, 1);"
type_conversion,clean.c,515,-,+,,15,			if ('-' == *p) {
type_conversion,clean.c,717,-,+,,21,				*item->string = '\0';
type_conversion,clean.c,752,-,+,,18,	menu_stuff.nr = del_list.nr;
type_conversion,clean.c,756,-,+,,21,"	for (i = 0, j = 0; i < del_list.nr; i++) {"
type_conversion,clean.c,758,-,+,,25,			*(items[i].string) = '\0';
type_conversion,clean.c,765,-,+,,25,			*(items[i].string) = '\0';
type_conversion,clean.c,786,-,+,,49,"			qname = quote_path(item->string, NULL, &buf, 0);"
type_conversion,clean.c,795,-,+,,20,			*item->string = '\0';
type_conversion,clean.c,837,-,+,,5,"			{'c', ""clean"",			0, clean_cmd},"
type_conversion,clean.c,838,-,+,,5,"			{'f', ""filter by pattern"",	0, filter_by_patterns_cmd},"
type_conversion,clean.c,839,-,+,,5,"			{'s', ""select by numbers"",	0, select_by_numbers_cmd},"
type_conversion,clean.c,840,-,+,,5,"			{'a', ""ask each"",		0, ask_each_cmd},"
type_conversion,clean.c,841,-,+,,5,"			{'q', ""quit"",			0, quit_cmd},"
type_conversion,clean.c,842,-,+,,5,"			{'h', ""help"",			0, help_cmd},"
type_conversion,clean.c,852,-,+,,19,		menu_stuff.nr = sizeof(menus) / sizeof(struct menu_item);
type_conversion,clean.c,958,-,+,,16,		dir.flags |= DIR_SKIP_NESTED_GIT;
type_conversion,clean.c,960,-,+,,15,	dir.flags |= DIR_SHOW_OTHER_DIRECTORIES;
type_conversion,clean.c,967,-,+,,16,		dir.flags |= DIR_SHOW_IGNORED;
type_conversion,clean.c,993,-,+,,16,		dir.flags |= DIR_SHOW_IGNORED_TOO;
type_conversion,clean.c,995,-,+,,17,			dir.flags |= DIR_SHOW_IGNORED_TOO_MODE_MATCHING;
type_conversion,clean.c,1006,-,+,,16,		dir.flags |= DIR_KEEP_UNTRACKED_CONTENTS;
type_conversion,clean.c,1016,-,+,,14,	for (i = 0; i < exclude_list.nr; i++)
type_conversion,clean.c,1019,-,+,,28,"	parse_pathspec(&pathspec, 0,"
type_conversion,clean.c,1031,-,+,,62,"		if (!index_name_is_other(the_repository->index, ent->name, ent->len))"
type_conversion,clean.c,1046,-,+,,35,	if (interactive && del_list.nr > 0)
type_conversion,clean.c,1070,-,+,,50,"				qname = quote_path(item->string, NULL, &buf, 0);"
type_conversion,clean.c,1077,-,+,,50,"				qname = quote_path(item->string, NULL, &buf, 0);"
type_conversion,clean.c,1082,-,+,,50,"				qname = quote_path(item->string, NULL, &buf, 0);"
type_conversion,clone.c,127,-,+,,55,"	  PARSE_OPT_OPTARG, recurse_submodules_cb, (intptr_t)""."" },"
type_conversion,clone.c,186,-,+,,14,	for (i = 0; i < ARRAY_SIZE(suffix); i++) {
type_conversion,clone.c,194,-,+,,50,		} else if (S_ISREG(st.st_mode) && st.st_size > 8) {
type_conversion,clone.c,201,-,+,,38,"			len = read_in_full(fd, signature, 8);"
type_conversion,clone.c,203,-,+,,51,"			if (len != 8 || strncmp(signature, ""gitdir: "", 8))"
type_conversion,clone.c,213,-,+,,14,	for (i = 0; i < ARRAY_SIZE(bundle_suffix); i++) {
type_conversion,clone.c,292,-,+,,20,		if (!line.len || line.buf[0] == '#')
type_conversion,clone.c,346,-,+,,30,"	mkdir_if_missing(dest->buf, 0777);"
type_conversion,clone.c,364,-,+,,12,	src_len = src->len;
type_conversion,clone.c,366,-,+,,13,	dest_len = dest->len;
type_conversion,clone.c,369,-,+,,22,"		strbuf_setlen(src, src_len);"
type_conversion,clone.c,371,-,+,,23,"		strbuf_setlen(dest, dest_len);"
type_conversion,clone.c,379,-,+,,32,"			mkdir_if_missing(dest->buf, 0777);"
type_conversion,clone.c,422,-,+,,22,"		strbuf_setlen(src, src_len);"
type_conversion,clone.c,579,-,+,,9,"					   0, NULL, &err))"
type_conversion,clone.c,603,-,+,,37,"				ref->name, &ref->old_oid, NULL, 0,"
type_conversion,clone.c,640,-,+,,18,		opt.progress = transport->progress;
type_conversion,clone.c,674,-,+,,40,"					msg, ""HEAD"", &our->old_oid, NULL, 0,"
type_conversion,clone.c,718,-,+,,16,	cmd.git_cmd = 1;
type_conversion,clone.c,762,-,+,,16,	opts.update = 1;
type_conversion,clone.c,763,-,+,,15,	opts.merge = 1;
type_conversion,clone.c,764,-,+,,15,	opts.clone = 1;
type_conversion,clone.c,765,-,+,,26,	opts.preserve_ignored = 0;
type_conversion,clone.c,767,-,+,,24,	opts.verbose_update = (option_verbosity >= 0);
type_conversion,clone.c,778,-,+,,19,"	if (unpack_trees(1, &t, &opts) < 0)"
type_conversion,clone.c,789,-,+,,46,	if (!err && (option_recurse_submodules.nr > 0)) {
type_conversion,clone.c,820,-,+,,17,		cmd.git_cmd = 1;
type_conversion,clone.c,859,-,+,,31,"					      CONFIG_REGEX_NONE, 0);"
type_conversion,clone.c,866,-,+,,14,	for (i = 0; i < config->nr; i++) {
type_conversion,clone.c,910,-,+,,54,"			git_config_set_multivar(key.buf, value.buf, ""^$"", 0);"
type_conversion,clone.c,932,-,+,,17,		cmd.git_cmd = 1;
type_conversion,clone.c,933,-,+,,18,		cmd.no_stdin = 1;
type_conversion,clone.c,1086,-,+,,7,		if (safe_create_leading_directories_const(work_tree) < 0)
type_conversion,clone.c,1091,-,+,,29,"		else if (mkdir(work_tree, 0777))"
type_conversion,clone.c,1107,-,+,,6,	if (safe_create_leading_directories_const(git_dir) < 0)
type_conversion,clone.c,1117,-,+,,37,	if (option_recurse_submodules.nr > 0) {
type_conversion,clone.c,1327,-,+,,23,	transport->cloning = 1;
type_conversion,clone.c,1332,-,+,,20,		int has_filter = header.filter.choice != LOFC_DISABLED;
type_conversion,clone.c,1373,-,+,,66,		transport->smart_options->check_self_contained_and_connected = 1;
type_conversion,clone.c,1526,-,+,,23,	submodule_progress = transport->progress;
type_conversion,clone.c,1528,-,+,,35,"	transport_unlock_pack(transport, 0);"
type_conversion,color.c,41,-,+,,69,const int column_colors_ansi_max = ARRAY_SIZE(column_colors_ansi) - 1;
type_conversion,color.c,64,-,+,,35,"	return !strncasecmp(word, match, len) && !match[len];"
type_conversion,color.c,73,-,+,,16,	val = (hexval(in[0]) << 4) | hexval(in[width - 1]);
type_conversion,color.c,74,-,+,,12,	if (val & ~0xff)
type_conversion,color.c,77,-,+,,9,	*out = val;
type_conversion,color.c,93,-,+,,21,	int color_offset = COLOR_FOREGROUND_ANSI;
type_conversion,color.c,112,-,+,,16,		out->value = 9 + color_offset;
type_conversion,color.c,116,-,+,,34,"	if (strncasecmp(name, ""bright"", 6) == 0) {"
type_conversion,color.c,117,-,+,,18,		color_offset = COLOR_FOREGROUND_BRIGHT_ANSI;
type_conversion,color.c,121,-,+,,14,	for (i = 0; i < ARRAY_SIZE(color_names); i++) {
type_conversion,color.c,124,-,+,,17,			out->value = i + color_offset;
type_conversion,color.c,143,-,+,,32,	if ((len == 7 || len == 4) && name[0] == '#') {
type_conversion,color.c,162,-,+,,20,	if (end - name == len) {
type_conversion,color.c,167,-,+,,13,		if (val < -1)
type_conversion,color.c,169,-,+,,18,		else if (val < 0) {
type_conversion,color.c,173,-,+,,20,		} else if (val < 8) {
type_conversion,color.c,175,-,+,,23,			out->value = val + COLOR_FOREGROUND_ANSI;
type_conversion,color.c,178,-,+,,20,		} else if (val < 16) {
type_conversion,color.c,180,-,+,,23,			out->value = val - 8 + COLOR_FOREGROUND_BRIGHT_ANSI;
type_conversion,color.c,182,-,+,,20,		} else if (val < 256) {
type_conversion,color.c,184,-,+,,17,			out->value = val;
type_conversion,color.c,217,-,+,,14,	for (i = 0; i < ARRAY_SIZE(attrs); i++) {
type_conversion,color.c,226,-,+,,32,"	return color_parse_mem(value, strlen(value), dst);"
type_conversion,color.c,239,-,+,,12,		offset = COLOR_BACKGROUND_OFFSET;
type_conversion,color.c,245,-,+,,25,"		out += xsnprintf(out, len, ""%d"", c->value + offset);"
type_conversion,color.c,248,-,+,,25,"		out += xsnprintf(out, len, ""%d;5;%d"", COLOR_FOREGROUND_256 + offset,"
type_conversion,color.c,249,-,+,,6,				 c->value);
type_conversion,color.c,252,-,+,,25,"		out += xsnprintf(out, len, ""%d;2;%d;%d;%d"","
type_conversion,color.c,253,-,+,,6,"				 COLOR_FOREGROUND_RGB + offset,"
type_conversion,color.c,254,-,+,,6,"				 c->red, c->green, c->blue);"
type_conversion,color.c,262,-,+,,9,	return c->type <= COLOR_NORMAL;
type_conversion,color.c,270,-,+,,27,	unsigned int has_reset = 0;
type_conversion,color.c,271,-,+,,22,	unsigned int attr = 0;
type_conversion,color.c,281,-,+,,12,		dst[0] = '\0';
type_conversion,color.c,303,-,+,,16,			has_reset = 1;
type_conversion,color.c,308,-,+,,8,			if (fg.type == COLOR_UNSPECIFIED) {
type_conversion,color.c,312,-,+,,8,			if (bg.type == COLOR_UNSPECIFIED) {
type_conversion,color.c,318,-,+,,26,"		val = parse_attr(word, wordlen);"
type_conversion,color.c,320,-,+,,12,			attr |= (1 << val);
type_conversion,color.c,343,-,+,,19,			unsigned bit = (1 << i);
type_conversion,color.c,349,-,+,,26,"			dst += xsnprintf(dst, end - dst, ""%d"", i);"
type_conversion,color.c,354,-,+,,28,"			dst = color_output(dst, end - dst, &fg, 0);"
type_conversion,color.c,359,-,+,,28,"			dst = color_output(dst, end - dst, &bg, 1);"
type_conversion,color.c,416,-,+,,16,	if (fd < 1 || fd >= ARRAY_SIZE(want_auto))
type_conversion,column.c,39,-,+,,14,	for (i = 0; i < data->list->nr; i++)
type_conversion,column.c,45,-,+,,16,	data->cols = (data->opts.width - strlen(data->opts.indent)) / *width;
type_conversion,column.c,59,-,+,,8,			if (i < data->list->nr &&
type_conversion,column.c,87,-,+,,17,		total_width = strlen(data->opts.indent);
type_conversion,column.c,107,-,+,,14,	for (i = 0; i < list->nr; i++)
type_conversion,column.c,118,-,+,,6,	if (i >= data->list->nr)
type_conversion,column.c,133,-,+,,13,		newline = i + data->rows >= data->list->nr;
type_conversion,column.c,135,-,+,,36,		newline = x == data->cols - 1 || i == data->list->nr - 1;
type_conversion,column.c,159,-,+,,14,	for (i = 0; i < list->nr; i++)
type_conversion,column.c,167,-,+,,24,	empty_cell = xmallocz(initial_width);
type_conversion,column.c,168,-,+,,26,"	memset(empty_cell, ' ', initial_width);"
type_conversion,column.c,244,-,+,,29,"		{ ""dense"",  COL_DENSE,    0 },"
type_conversion,column.c,248,-,+,,14,	for (i = 0; i < ARRAY_SIZE(opts); i++) {
type_conversion,column.c,253,-,+,,47,"			if (arg_len > 2 && !strncmp(arg_str, ""no"", 2)) {"
type_conversion,column.c,260,-,+,,14,		name_len = strlen(opts[i].name);
type_conversion,column.c,262,-,+,,38,"		    strncmp(arg_str, opts[i].name, name_len))"
type_conversion,column.c,294,-,+,,13,"		int len = strcspn(value, sep);"
type_conversion,column.c,386,-,+,,27,	column_process.git_cmd = 1;
type_conversion,combine-diff.c,26,-,+,,57,"	return base_name_compare(one->path, strlen(one->path), one->mode,"
type_conversion,combine-diff.c,27,-,+,,36,"				 two->path, strlen(two->path), two->mode);"
type_conversion,combine-diff.c,32,-,+,,9,	return status == 'R' || status == 'C';
type_conversion,combine-diff.c,52,-,+,,10,			len = strlen(path);
type_conversion,combine-diff.c,55,-,+,,26,"			memcpy(p->path, path, len);"
type_conversion,combine-diff.c,56,-,+,,19,			p->path[len] = 0;
type_conversion,combine-diff.c,59,-,+,,34,			       sizeof(p->parent[0]) * num_parent);
type_conversion,combine-diff.c,62,-,+,,14,			p->mode = q->queue[i]->two->mode;
type_conversion,combine-diff.c,64,-,+,,24,			p->parent[n].mode = q->queue[i]->one->mode;
type_conversion,combine-diff.c,69,-,+,,37,"				strbuf_init(&p->parent[n].path, 0);"
type_conversion,combine-diff.c,106,-,+,,23,		p->parent[n].mode = q->queue[i]->one->mode;
type_conversion,combine-diff.c,160,-,+,,49,"		return (len1 == len2 && !memcmp(line1, line2, len1));"
type_conversion,combine-diff.c,173,-,+,,7,		if (line1[len1] != line2[len2])
type_conversion,combine-diff.c,259,-,+,,7,		if (directions[i][j] == MATCH) {
type_conversion,combine-diff.c,260,-,+,,27,			baseend->parent_map |= 1<<parent;
type_conversion,combine-diff.c,265,-,+,,14,		} else if (directions[i][j] == NEW) {
type_conversion,combine-diff.c,331,-,+,,11,		*size = 0;
type_conversion,combine-diff.c,332,-,+,,18,"		return xcalloc(1, 1);"
type_conversion,combine-diff.c,335,-,+,,29,"		fill_filespec(df, oid, 1, mode);"
type_conversion,combine-diff.c,342,-,+,,7,		if (type != OBJ_BLOB)
type_conversion,combine-diff.c,352,-,+,,6,	if (line[len-1] == '\n')
type_conversion,combine-diff.c,385,-,+,,14,	state->ob = ob;
type_conversion,combine-diff.c,386,-,+,,14,	state->on = on;
type_conversion,combine-diff.c,387,-,+,,14,	state->nb = nb;
type_conversion,combine-diff.c,388,-,+,,14,	state->nn = nn;
type_conversion,combine-diff.c,389,-,+,,15,	state->lno = state->nb;
type_conversion,combine-diff.c,409,-,+,,46,	state->sline[state->nb-1].p_lno[state->n] = state->ob;
type_conversion,combine-diff.c,417,-,+,,10,	switch (line[0]) {
type_conversion,combine-diff.c,419,-,+,,57,"		append_lost(state->lost_bucket, state->n, line+1, len-1);"
type_conversion,combine-diff.c,422,-,+,,27,		state->sline[state->lno-1].flag |= state->nmask;
type_conversion,combine-diff.c,449,-,+,,21,	parent_file.size = sz;
type_conversion,combine-diff.c,451,-,+,,14,	xpp.flags = flags;
type_conversion,combine-diff.c,456,-,+,,14,	state.lno = 1;
type_conversion,combine-diff.c,473,-,+,,13,"	for (lno = 0,  p_lno = 1; lno <= cnt; lno++) {"
type_conversion,combine-diff.c,475,-,+,,25,		sline[lno].p_lno[n] = p_lno;
type_conversion,combine-diff.c,482,-,+,,24,"						  sl->plost.len, n, flags);"
type_conversion,combine-diff.c,497,-,+,,24,	sline[lno].p_lno[n] = p_lno; /* trailer */
type_conversion,combine-diff.c,500,-,+,,32,static unsigned long context = 3;
type_conversion,combine-diff.c,501,-,+,,30,static char combine_marker = '@';
type_conversion,combine-diff.c,523,-,+,,20,	if ((hunk_begin + 1 <= i) && !(sline[i-1].flag & all_mask))
type_conversion,combine-diff.c,543,-,+,,9,		    ? !(sline[i].flag & mark)
type_conversion,combine-diff.c,553,-,+,,47,	unsigned long all_mask = (1UL<<num_parent) - 1;
type_conversion,combine-diff.c,567,-,+,,29,"	i = find_next(sline, mark, 0, cnt, 0);"
type_conversion,combine-diff.c,572,-,+,,53,		unsigned long j = (context < i) ? (i - context) : 0;
type_conversion,combine-diff.c,609,-,+,,26,		k = (j + context < cnt+1) ? j + context : cnt+1;
type_conversion,combine-diff.c,619,-,+,,47,	unsigned long all_mask = (1UL<<num_parent) - 1;
type_conversion,combine-diff.c,624,-,+,,11,	for (i = 0; i <= cnt; i++) {
type_conversion,combine-diff.c,637,-,+,,6,	i = 0;
type_conversion,combine-diff.c,646,-,+,,16,		for (j = i + 1; j <= cnt; j++) {
type_conversion,combine-diff.c,656,-,+,,32,				la = (la + context < cnt + 1) ?
type_conversion,combine-diff.c,657,-,+,,29,					(la + context) : cnt + 1;
type_conversion,combine-diff.c,690,-,+,,15,		same_diff = 0;
type_conversion,combine-diff.c,745,-,+,,7,	ch = *bol & 0xff;
type_conversion,combine-diff.c,753,-,+,,9,		len = strlen(line);
type_conversion,combine-diff.c,754,-,+,,26,	saw_cr_at_eol = (len && line[len-1] == '\r');
type_conversion,combine-diff.c,768,-,+,,22,	unsigned long lno = 0;
type_conversion,combine-diff.c,783,-,+,,32,		unsigned long null_context = 0;
type_conversion,combine-diff.c,793,-,+,,26,			for (hunk_end = lno + 1; hunk_end <= cnt; hunk_end++)
type_conversion,combine-diff.c,813,-,+,,33,				if (!(sline[j].flag & (mark-1)))
type_conversion,combine-diff.c,819,-,+,,45,		for (i = 0; i <= num_parent; i++) putchar(combine_marker);
type_conversion,combine-diff.c,822,-,+,,28,"		printf("" +%lu,%lu "", lno+1, rlines);"
type_conversion,combine-diff.c,823,-,+,,45,		for (i = 0; i <= num_parent; i++) putchar(combine_marker);
type_conversion,combine-diff.c,828,-,+,,14,				int ch = hunk_comment[i] & 0xff;
type_conversion,combine-diff.c,839,-,+,,13,				putchar(hunk_comment[i]);
type_conversion,combine-diff.c,862,-,+,,13,			p_mask = 1;
type_conversion,combine-diff.c,864,-,+,,27,			if (!(sl->flag & (mark-1))) {
type_conversion,combine-diff.c,898,-,+,,13,	for (lno = 0; lno <= cnt; lno++) {
type_conversion,combine-diff.c,926,-,+,,40,"	quote_two_c_style(&buf, prefix, path, 0);"
type_conversion,combine-diff.c,948,-,+,,14,	int dense = rev->dense_combined_merges;
type_conversion,combine-diff.c,970,-,+,,8,			if (elem->parent[i].status !=
type_conversion,combine-diff.c,998,-,+,,8,			if (elem->parent[i].status == DIFF_STATUS_ADDED)
type_conversion,combine-diff.c,1038,-,+,,12,	context = opt->context;
type_conversion,combine-diff.c,1060,-,+,,42,"			if (strbuf_readlink(&buf, elem->path, st.st_size) < 0) {"
type_conversion,combine-diff.c,1078,-,+,,37,"			fill_filespec(df, null_oid(), 0, st.st_mode);"
type_conversion,combine-diff.c,1100,-,+,,15,			if (done < 0)
type_conversion,combine-diff.c,1102,-,+,,13,			else if (done < len)
type_conversion,combine-diff.c,1120,-,+,,18,			result_size = 0;
type_conversion,combine-diff.c,1121,-,+,,17,			elem->mode = 0;
type_conversion,combine-diff.c,1122,-,+,,21,"			result = xcalloc(1, 1);"
type_conversion,combine-diff.c,1162,-,+,,13,"	for (cnt = 0, cp = result; cp < result + result_size; cp++) {"
type_conversion,combine-diff.c,1163,-,+,,7,		if (*cp == '\n')
type_conversion,combine-diff.c,1166,-,+,,40,	if (result_size && result[result_size-1] != '\n')
type_conversion,combine-diff.c,1171,-,+,,13,"	for (lno = 0, cp = result; cp < result + result_size; cp++) {"
type_conversion,combine-diff.c,1172,-,+,,7,		if (*cp == '\n') {
type_conversion,combine-diff.c,1173,-,+,,21,			sline[lno].len = cp - sline[lno].bol;
type_conversion,combine-diff.c,1179,-,+,,40,	if (result_size && result[result_size-1] != '\n')
type_conversion,combine-diff.c,1180,-,+,,13,		sline[cnt-1].len = result_size - (sline[cnt-1].bol - result);
type_conversion,combine-diff.c,1183,-,+,,21,	result_file.size = result_size;
type_conversion,combine-diff.c,1189,-,+,,13,	for (lno = 0; lno <= cnt; lno++)
type_conversion,combine-diff.c,1190,-,+,,13,		sline[lno+1].p_lno = sline[lno].p_lno + num_parent;
type_conversion,combine-diff.c,1206,-,+,,10,"				     cnt, i, num_parent, result_deleted,"
type_conversion,combine-diff.c,1207,-,+,,32,"				     textconv, elem->path, opt->xdl_opts);"
type_conversion,combine-diff.c,1210,-,+,,50,"	show_hunks = make_hunks(sline, cnt, num_parent, rev->dense_combined_merges);"
type_conversion,combine-diff.c,1220,-,+,,13,	for (lno = 0; lno < cnt; lno++) {
type_conversion,combine-diff.c,1270,-,+,,12,			putchar(p->parent[i].status);
type_conversion,combine-diff.c,1335,-,+,,23,		pair->one[i].mode = p->parent[i].mode;
type_conversion,combine-diff.c,1337,-,+,,28,		pair->one[i].oid_valid = !is_null_oid(&p->parent[i].oid);
type_conversion,combine-diff.c,1338,-,+,,35,		pair->one[i].has_more_entries = 1;
type_conversion,combine-diff.c,1340,-,+,,47,	pair->one[num_parent - 1].has_more_entries = 0;
type_conversion,combine-diff.c,1343,-,+,,20,	pair->two->mode = p->mode;
type_conversion,combine-diff.c,1345,-,+,,25,	pair->two->oid_valid = !is_null_oid(&p->oid);
type_conversion,combine-diff.c,1392,-,+,,22,"	int i, num_parent = parents->nr;"
type_conversion,combine-diff.c,1440,-,+,,19,"	int i, nparent = parents->nr;"
type_conversion,combine-diff.c,1504,-,+,,58,"	int i, num_paths, needsep, show_log_first, num_parent = parents->nr;"
type_conversion,combine-diff.c,1532,-,+,,29,	diffopts.flags.recursive = 1;
type_conversion,combine-diff.c,1533,-,+,,34,	diffopts.flags.allow_external = 0;
type_conversion,combine-diff.c,1568,-,+,,9,					   rev->combined_all_paths);
type_conversion,command-list.h,54,-,+,,53,"	{ ""git-add"", N_(""Add file contents to the index""), 0 | CAT_mainporcelain | CAT_worktree },"
type_conversion,command-list.h,55,-,+,,62,"	{ ""git-am"", N_(""Apply a series of patches from a mailbox""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,56,-,+,,71,"	{ ""git-annotate"", N_(""Annotate file lines with commit information""), 0 | CAT_ancillaryinterrogators },"
type_conversion,command-list.h,57,-,+,,67,"	{ ""git-apply"", N_(""Apply a patch to files and/or to the index""), 0 | CAT_plumbingmanipulators | CAT_complete },"
type_conversion,command-list.h,58,-,+,,67,"	{ ""git-archimport"", N_(""Import a GNU Arch repository into Git""), 0 | CAT_foreignscminterface },"
type_conversion,command-list.h,59,-,+,,71,"	{ ""git-archive"", N_(""Create an archive of files from a named tree""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,60,-,+,,84,"	{ ""git-bisect"", N_(""Use binary search to find the commit that introduced a bug""), 0 | CAT_mainporcelain | CAT_info },"
type_conversion,command-list.h,61,-,+,,88,"	{ ""git-blame"", N_(""Show what revision and author last modified each line of a file""), 0 | CAT_ancillaryinterrogators | CAT_complete },"
type_conversion,command-list.h,62,-,+,,58,"	{ ""git-branch"", N_(""List, create, or delete branches""), 0 | CAT_mainporcelain | CAT_history },"
type_conversion,command-list.h,63,-,+,,78,"	{ ""git-bugreport"", N_(""Collect information for user to file a bug report""), 0 | CAT_ancillaryinterrogators },"
type_conversion,command-list.h,64,-,+,,58,"	{ ""git-bundle"", N_(""Move objects and refs by archive""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,65,-,+,,77,"	{ ""git-cat-file"", N_(""Provide contents or details of repository objects""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,66,-,+,,63,"	{ ""git-check-attr"", N_(""Display gitattributes information""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,67,-,+,,63,"	{ ""git-check-ignore"", N_(""Debug gitignore / exclude files""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,68,-,+,,85,"	{ ""git-check-mailmap"", N_(""Show canonical names and email addresses of contacts""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,69,-,+,,80,"	{ ""git-check-ref-format"", N_(""Ensures that a reference name is well formed""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,70,-,+,,73,"	{ ""git-checkout"", N_(""Switch branches or restore working tree files""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,71,-,+,,79,"	{ ""git-checkout-index"", N_(""Copy files from the index to the working tree""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,72,-,+,,68,"	{ ""git-cherry"", N_(""Find commits yet to be applied to upstream""), 0 | CAT_plumbinginterrogators | CAT_complete },"
type_conversion,command-list.h,73,-,+,,84,"	{ ""git-cherry-pick"", N_(""Apply the changes introduced by some existing commits""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,74,-,+,,61,"	{ ""git-citool"", N_(""Graphical alternative to git-commit""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,75,-,+,,69,"	{ ""git-clean"", N_(""Remove untracked files from the working tree""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,76,-,+,,64,"	{ ""git-clone"", N_(""Clone a repository into a new directory""), 0 | CAT_mainporcelain | CAT_init },"
type_conversion,command-list.h,77,-,+,,49,"	{ ""git-column"", N_(""Display data in columns""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,78,-,+,,58,"	{ ""git-commit"", N_(""Record changes to the repository""), 0 | CAT_mainporcelain | CAT_history },"
type_conversion,command-list.h,79,-,+,,71,"	{ ""git-commit-graph"", N_(""Write and verify Git commit-graph files""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,80,-,+,,57,"	{ ""git-commit-tree"", N_(""Create a new commit object""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,81,-,+,,66,"	{ ""git-config"", N_(""Get and set repository or global options""), 0 | CAT_ancillarymanipulators | CAT_complete },"
type_conversion,command-list.h,82,-,+,,92,"	{ ""git-count-objects"", N_(""Count unpacked number of objects and their disk consumption""), 0 | CAT_ancillaryinterrogators },"
type_conversion,command-list.h,83,-,+,,65,"	{ ""git-credential"", N_(""Retrieve and store user credentials""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,84,-,+,,83,"	{ ""git-credential-cache"", N_(""Helper to temporarily store passwords in memory""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,85,-,+,,71,"	{ ""git-credential-store"", N_(""Helper to store credentials on disk""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,86,-,+,,75,"	{ ""git-cvsexportcommit"", N_(""Export a single commit to a CVS checkout""), 0 | CAT_foreignscminterface },"
type_conversion,command-list.h,87,-,+,,85,"	{ ""git-cvsimport"", N_(""Salvage your data out of another SCM people love to hate""), 0 | CAT_foreignscminterface },"
type_conversion,command-list.h,88,-,+,,58,"	{ ""git-cvsserver"", N_(""A CVS server emulator for Git""), 0 | CAT_foreignscminterface },"
type_conversion,command-list.h,89,-,+,,69,"	{ ""git-daemon"", N_(""A really simple server for Git repositories""), 0 | CAT_synchingrepositories },"
type_conversion,command-list.h,90,-,+,,90,"	{ ""git-describe"", N_(""Give an object a human readable name based on an available ref""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,91,-,+,,76,"	{ ""git-diagnose"", N_(""Generate a zip archive of diagnostic information""), 0 | CAT_ancillaryinterrogators },"
type_conversion,command-list.h,92,-,+,,82,"	{ ""git-diff"", N_(""Show changes between commits, commit and working tree, etc""), 0 | CAT_mainporcelain | CAT_info },"
type_conversion,command-list.h,93,-,+,,78,"	{ ""git-diff-files"", N_(""Compares files in the working tree and the index""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,94,-,+,,73,"	{ ""git-diff-index"", N_(""Compare a tree to the working tree or index""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,95,-,+,,94,"	{ ""git-diff-tree"", N_(""Compares the content and mode of blobs found via two tree objects""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,96,-,+,,64,"	{ ""git-difftool"", N_(""Show changes using common diff tools""), 0 | CAT_ancillaryinterrogators | CAT_complete },"
type_conversion,command-list.h,97,-,+,,48,"	{ ""git-fast-export"", N_(""Git data exporter""), 0 | CAT_ancillarymanipulators },"
type_conversion,command-list.h,98,-,+,,66,"	{ ""git-fast-import"", N_(""Backend for fast Git data importers""), 0 | CAT_ancillarymanipulators },"
type_conversion,command-list.h,99,-,+,,74,"	{ ""git-fetch"", N_(""Download objects and refs from another repository""), 0 | CAT_mainporcelain | CAT_remote },"
type_conversion,command-list.h,100,-,+,,77,"	{ ""git-fetch-pack"", N_(""Receive missing objects from another repository""), 0 | CAT_synchingrepositories },"
type_conversion,command-list.h,101,-,+,,49,"	{ ""git-filter-branch"", N_(""Rewrite branches""), 0 | CAT_ancillarymanipulators },"
type_conversion,command-list.h,102,-,+,,63,"	{ ""git-fmt-merge-msg"", N_(""Produce a merge commit message""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,103,-,+,,62,"	{ ""git-for-each-ref"", N_(""Output information on each ref""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,104,-,+,,76,"	{ ""git-for-each-repo"", N_(""Run a Git command on a list of repositories""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,105,-,+,,69,"	{ ""git-format-patch"", N_(""Prepare patches for e-mail submission""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,106,-,+,,93,"	{ ""git-fsck"", N_(""Verifies the connectivity and validity of the objects in the database""), 0 | CAT_ancillaryinterrogators | CAT_complete },"
type_conversion,command-list.h,107,-,+,,81,"	{ ""git-gc"", N_(""Cleanup unnecessary files and optimize the local repository""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,108,-,+,,96,"	{ ""git-get-tar-commit-id"", N_(""Extract commit ID from an archive created using git-archive""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,109,-,+,,54,"	{ ""git-grep"", N_(""Print lines matching a pattern""), 0 | CAT_mainporcelain | CAT_info },"
type_conversion,command-list.h,110,-,+,,60,"	{ ""git-gui"", N_(""A portable graphical interface to Git""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,111,-,+,,92,"	{ ""git-hash-object"", N_(""Compute object ID and optionally create an object from a file""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,112,-,+,,58,"	{ ""git-help"", N_(""Display help information about Git""), 0 | CAT_ancillaryinterrogators | CAT_complete },"
type_conversion,command-list.h,113,-,+,,37,"	{ ""git-hook"", N_(""Run git hooks""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,114,-,+,,75,"	{ ""git-http-backend"", N_(""Server side implementation of Git over HTTP""), 0 | CAT_synchingrepositories },"
type_conversion,command-list.h,115,-,+,,76,"	{ ""git-http-fetch"", N_(""Download from a remote Git repository via HTTP""), 0 | CAT_synchelpers },"
type_conversion,command-list.h,116,-,+,,77,"	{ ""git-http-push"", N_(""Push objects over HTTP/DAV to another repository""), 0 | CAT_synchelpers },"
type_conversion,command-list.h,117,-,+,,86,"	{ ""git-imap-send"", N_(""Send a collection of patches from stdin to an IMAP folder""), 0 | CAT_foreignscminterface },"
type_conversion,command-list.h,118,-,+,,82,"	{ ""git-index-pack"", N_(""Build pack index file for an existing packed archive""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,119,-,+,,86,"	{ ""git-init"", N_(""Create an empty Git repository or reinitialize an existing one""), 0 | CAT_mainporcelain | CAT_init },"
type_conversion,command-list.h,120,-,+,,78,"	{ ""git-instaweb"", N_(""Instantly browse your working repository in gitweb""), 0 | CAT_ancillaryinterrogators | CAT_complete },"
type_conversion,command-list.h,121,-,+,,92,"	{ ""git-interpret-trailers"", N_(""Add or parse structured information in commit messages""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,122,-,+,,39,"	{ ""git-log"", N_(""Show commit logs""), 0 | CAT_mainporcelain | CAT_info },"
type_conversion,command-list.h,123,-,+,,90,"	{ ""git-ls-files"", N_(""Show information about files in the index and the working tree""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,124,-,+,,67,"	{ ""git-ls-remote"", N_(""List references in a remote repository""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,125,-,+,,61,"	{ ""git-ls-tree"", N_(""List the contents of a tree object""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,126,-,+,,86,"	{ ""git-mailinfo"", N_(""Extracts patch and authorship from a single e-mail message""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,127,-,+,,62,"	{ ""git-mailsplit"", N_(""Simple UNIX mbox splitter program""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,128,-,+,,72,"	{ ""git-maintenance"", N_(""Run tasks to optimize Git repository data""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,129,-,+,,72,"	{ ""git-merge"", N_(""Join two or more development histories together""), 0 | CAT_mainporcelain | CAT_history },"
type_conversion,command-list.h,130,-,+,,83,"	{ ""git-merge-base"", N_(""Find as good common ancestors as possible for a merge""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,131,-,+,,56,"	{ ""git-merge-file"", N_(""Run a three-way file merge""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,132,-,+,,68,"	{ ""git-merge-index"", N_(""Run a merge for files needing merging""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,133,-,+,,89,"	{ ""git-merge-one-file"", N_(""The standard helper program to use with git-merge-index""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,134,-,+,,82,"	{ ""git-merge-tree"", N_(""Perform merge without touching index or working tree""), 0 | CAT_ancillaryinterrogators },"
type_conversion,command-list.h,135,-,+,,91,"	{ ""git-mergetool"", N_(""Run merge conflict resolution tools to resolve merge conflicts""), 0 | CAT_ancillarymanipulators | CAT_complete },"
type_conversion,command-list.h,136,-,+,,67,"	{ ""git-mktag"", N_(""Creates a tag object with extra validation""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,137,-,+,,73,"	{ ""git-mktree"", N_(""Build a tree-object from ls-tree formatted text""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,138,-,+,,71,"	{ ""git-multi-pack-index"", N_(""Write and verify multi-pack-indexes""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,139,-,+,,70,"	{ ""git-mv"", N_(""Move or rename a file, a directory, or a symlink""), 0 | CAT_mainporcelain | CAT_worktree },"
type_conversion,command-list.h,140,-,+,,62,"	{ ""git-name-rev"", N_(""Find symbolic names for given revs""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,141,-,+,,52,"	{ ""git-notes"", N_(""Add or inspect object notes""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,142,-,+,,69,"	{ ""git-p4"", N_(""Import from and submit to Perforce repositories""), 0 | CAT_foreignscminterface },"
type_conversion,command-list.h,143,-,+,,66,"	{ ""git-pack-objects"", N_(""Create a packed archive of objects""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,144,-,+,,59,"	{ ""git-pack-redundant"", N_(""Find redundant pack files""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,145,-,+,,80,"	{ ""git-pack-refs"", N_(""Pack heads and tags for efficient repository access""), 0 | CAT_ancillarymanipulators },"
type_conversion,command-list.h,146,-,+,,57,"	{ ""git-patch-id"", N_(""Compute unique ID for a patch""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,147,-,+,,79,"	{ ""git-prune"", N_(""Prune all unreachable objects from the object database""), 0 | CAT_ancillarymanipulators | CAT_complete },"
type_conversion,command-list.h,148,-,+,,83,"	{ ""git-prune-packed"", N_(""Remove extra objects that are already in pack files""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,149,-,+,,90,"	{ ""git-pull"", N_(""Fetch from and integrate with another repository or a local branch""), 0 | CAT_mainporcelain | CAT_remote },"
type_conversion,command-list.h,150,-,+,,72,"	{ ""git-push"", N_(""Update remote refs along with associated objects""), 0 | CAT_mainporcelain | CAT_remote },"
type_conversion,command-list.h,151,-,+,,79,"	{ ""git-quiltimport"", N_(""Applies a quilt patchset onto the current branch""), 0 | CAT_foreignscminterface },"
type_conversion,command-list.h,152,-,+,,87,"	{ ""git-range-diff"", N_(""Compare two commit ranges (e.g. two versions of a branch)""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,153,-,+,,66,"	{ ""git-read-tree"", N_(""Reads tree information into the index""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,154,-,+,,68,"	{ ""git-rebase"", N_(""Reapply commits on top of another base tip""), 0 | CAT_mainporcelain | CAT_history },"
type_conversion,command-list.h,155,-,+,,74,"	{ ""git-receive-pack"", N_(""Receive what is pushed into the repository""), 0 | CAT_synchelpers },"
type_conversion,command-list.h,156,-,+,,51,"	{ ""git-reflog"", N_(""Manage reflog information""), 0 | CAT_ancillarymanipulators | CAT_complete },"
type_conversion,command-list.h,157,-,+,,60,"	{ ""git-remote"", N_(""Manage set of tracked repositories""), 0 | CAT_ancillarymanipulators | CAT_complete },"
type_conversion,command-list.h,158,-,+,,63,"	{ ""git-repack"", N_(""Pack unpacked objects in a repository""), 0 | CAT_ancillarymanipulators | CAT_complete },"
type_conversion,command-list.h,159,-,+,,71,"	{ ""git-replace"", N_(""Create, list, delete refs to replace objects""), 0 | CAT_ancillarymanipulators | CAT_complete },"
type_conversion,command-list.h,160,-,+,,95,"	{ ""git-replay"", N_(""EXPERIMENTAL: Replay commits on a new base, works with bare repos too""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,161,-,+,,70,"	{ ""git-request-pull"", N_(""Generates a summary of pending changes""), 0 | CAT_foreignscminterface | CAT_complete },"
type_conversion,command-list.h,162,-,+,,72,"	{ ""git-rerere"", N_(""Reuse recorded resolution of conflicted merges""), 0 | CAT_ancillaryinterrogators },"
type_conversion,command-list.h,163,-,+,,66,"	{ ""git-reset"", N_(""Reset current HEAD to the specified state""), 0 | CAT_mainporcelain | CAT_history },"
type_conversion,command-list.h,164,-,+,,53,"	{ ""git-restore"", N_(""Restore working tree files""), 0 | CAT_mainporcelain | CAT_worktree },"
type_conversion,command-list.h,165,-,+,,79,"	{ ""git-rev-list"", N_(""Lists commit objects in reverse chronological order""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,166,-,+,,60,"	{ ""git-rev-parse"", N_(""Pick out and massage parameters""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,167,-,+,,54,"	{ ""git-revert"", N_(""Revert some existing commits""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,168,-,+,,75,"	{ ""git-rm"", N_(""Remove files from the working tree and from the index""), 0 | CAT_mainporcelain | CAT_worktree },"
type_conversion,command-list.h,169,-,+,,68,"	{ ""git-send-email"", N_(""Send a collection of patches as emails""), 0 | CAT_foreignscminterface | CAT_complete },"
type_conversion,command-list.h,170,-,+,,81,"	{ ""git-send-pack"", N_(""Push objects over Git protocol to another repository""), 0 | CAT_synchingrepositories },"
type_conversion,command-list.h,171,-,+,,66,"	{ ""git-sh-i18n"", N_(""Git's i18n setup code for shell scripts""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,172,-,+,,62,"	{ ""git-sh-setup"", N_(""Common Git shell script setup code""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,173,-,+,,71,"	{ ""git-shell"", N_(""Restricted login shell for Git-only SSH access""), 0 | CAT_synchelpers },"
type_conversion,command-list.h,174,-,+,,54,"	{ ""git-shortlog"", N_(""Summarize 'git log' output""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,175,-,+,,53,"	{ ""git-show"", N_(""Show various types of objects""), 0 | CAT_mainporcelain | CAT_info },"
type_conversion,command-list.h,176,-,+,,62,"	{ ""git-show-branch"", N_(""Show branches and their commits""), 0 | CAT_ancillaryinterrogators | CAT_complete },"
type_conversion,command-list.h,177,-,+,,55,"	{ ""git-show-index"", N_(""Show packed archive index""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,178,-,+,,65,"	{ ""git-show-ref"", N_(""List references in a local repository""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,179,-,+,,88,"	{ ""git-sparse-checkout"", N_(""Reduce your working tree to a subset of tracked files""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,180,-,+,,62,"	{ ""git-stage"", N_(""Add file contents to the staging area""), 0 | CAT_complete },"
type_conversion,command-list.h,181,-,+,,76,"	{ ""git-stash"", N_(""Stash the changes in a dirty working directory away""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,182,-,+,,54,"	{ ""git-status"", N_(""Show the working tree status""), 0 | CAT_mainporcelain | CAT_info },"
type_conversion,command-list.h,183,-,+,,59,"	{ ""git-stripspace"", N_(""Remove unnecessary whitespace""), 0 | CAT_purehelpers },"
type_conversion,command-list.h,184,-,+,,69,"	{ ""git-submodule"", N_(""Initialize, update or inspect submodules""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,185,-,+,,86,"	{ ""git-svn"", N_(""Bidirectional operation between a Subversion repository and Git""), 0 | CAT_foreignscminterface },"
type_conversion,command-list.h,186,-,+,,41,"	{ ""git-switch"", N_(""Switch branches""), 0 | CAT_mainporcelain | CAT_history },"
type_conversion,command-list.h,187,-,+,,69,"	{ ""git-symbolic-ref"", N_(""Read, modify and delete symbolic refs""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,188,-,+,,82,"	{ ""git-tag"", N_(""Create, list, delete or verify a tag object signed with GPG""), 0 | CAT_mainporcelain | CAT_history },"
type_conversion,command-list.h,189,-,+,,78,"	{ ""git-unpack-file"", N_(""Creates a temporary file with a blob's contents""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,190,-,+,,70,"	{ ""git-unpack-objects"", N_(""Unpack objects from a packed archive""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,191,-,+,,87,"	{ ""git-update-index"", N_(""Register file contents in the working tree to the index""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,192,-,+,,75,"	{ ""git-update-ref"", N_(""Update the object name stored in a ref safely""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,193,-,+,,85,"	{ ""git-update-server-info"", N_(""Update auxiliary info file to help dumb servers""), 0 | CAT_synchingrepositories },"
type_conversion,command-list.h,194,-,+,,66,"	{ ""git-upload-archive"", N_(""Send archive back to git-archive""), 0 | CAT_synchelpers },"
type_conversion,command-list.h,195,-,+,,73,"	{ ""git-upload-pack"", N_(""Send objects packed back to git-fetch-pack""), 0 | CAT_synchelpers },"
type_conversion,command-list.h,196,-,+,,50,"	{ ""git-var"", N_(""Show a Git logical variable""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,197,-,+,,67,"	{ ""git-verify-commit"", N_(""Check the GPG signature of commits""), 0 | CAT_ancillaryinterrogators },"
type_conversion,command-list.h,198,-,+,,64,"	{ ""git-verify-pack"", N_(""Validate packed Git archive files""), 0 | CAT_plumbinginterrogators },"
type_conversion,command-list.h,199,-,+,,61,"	{ ""git-verify-tag"", N_(""Check the GPG signature of tags""), 0 | CAT_ancillaryinterrogators },"
type_conversion,command-list.h,200,-,+,,64,"	{ ""git-version"", N_(""Display version information about Git""), 0 | CAT_ancillaryinterrogators },"
type_conversion,command-list.h,201,-,+,,80,"	{ ""git-whatchanged"", N_(""Show logs with differences each commit introduces""), 0 | CAT_ancillaryinterrogators | CAT_complete },"
type_conversion,command-list.h,202,-,+,,57,"	{ ""git-worktree"", N_(""Manage multiple working trees""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,203,-,+,,73,"	{ ""git-write-tree"", N_(""Create a tree object from the current index""), 0 | CAT_plumbingmanipulators },"
type_conversion,command-list.h,204,-,+,,57,"	{ ""gitattributes"", N_(""Defining attributes per path""), 0 | CAT_userinterfaces },"
type_conversion,command-list.h,205,-,+,,64,"	{ ""gitcli"", N_(""Git command-line interface and conventions""), 0 | CAT_userinterfaces },"
type_conversion,command-list.h,206,-,+,,66,"	{ ""gitcore-tutorial"", N_(""A Git core tutorial for developers""), 0 | CAT_guide },"
type_conversion,command-list.h,207,-,+,,70,"	{ ""gitcredentials"", N_(""Providing usernames and passwords to Git""), 0 | CAT_guide },"
type_conversion,command-list.h,208,-,+,,49,"	{ ""gitcvs-migration"", N_(""Git for CVS users""), 0 | CAT_guide },"
type_conversion,command-list.h,209,-,+,,47,"	{ ""gitdiffcore"", N_(""Tweaking diff output""), 0 | CAT_guide },"
type_conversion,command-list.h,210,-,+,,76,"	{ ""giteveryday"", N_(""A useful minimum set of commands for Everyday Git""), 0 | CAT_guide },"
type_conversion,command-list.h,211,-,+,,64,"	{ ""gitfaq"", N_(""Frequently asked questions about using Git""), 0 | CAT_guide },"
type_conversion,command-list.h,212,-,+,,54,"	{ ""gitformat-bundle"", N_(""The bundle file format""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,213,-,+,,55,"	{ ""gitformat-chunk"", N_(""Chunk-based file formats""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,214,-,+,,61,"	{ ""gitformat-commit-graph"", N_(""Git commit-graph format""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,215,-,+,,47,"	{ ""gitformat-index"", N_(""Git index format""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,216,-,+,,45,"	{ ""gitformat-pack"", N_(""Git pack format""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,217,-,+,,70,"	{ ""gitformat-signature"", N_(""Git cryptographic signature formats""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,218,-,+,,41,"	{ ""gitglossary"", N_(""A Git Glossary""), 0 | CAT_guide },"
type_conversion,command-list.h,219,-,+,,41,"	{ ""githooks"", N_(""Hooks used by Git""), 0 | CAT_userinterfaces },"
type_conversion,command-list.h,220,-,+,,74,"	{ ""gitignore"", N_(""Specifies intentionally untracked files to ignore""), 0 | CAT_userinterfaces },"
type_conversion,command-list.h,221,-,+,,46,"	{ ""gitk"", N_(""The Git repository browser""), 0 | CAT_mainporcelain },"
type_conversion,command-list.h,222,-,+,,76,"	{ ""gitmailmap"", N_(""Map author/committer names and/or E-Mail addresses""), 0 | CAT_userinterfaces },"
type_conversion,command-list.h,223,-,+,,55,"	{ ""gitmodules"", N_(""Defining submodule properties""), 0 | CAT_userinterfaces },"
type_conversion,command-list.h,224,-,+,,43,"	{ ""gitnamespaces"", N_(""Git namespaces""), 0 | CAT_guide },"
type_conversion,command-list.h,225,-,+,,71,"	{ ""gitprotocol-capabilities"", N_(""Protocol v0 and v1 capabilities""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,226,-,+,,68,"	{ ""gitprotocol-common"", N_(""Things common to various protocols""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,227,-,+,,56,"	{ ""gitprotocol-http"", N_(""Git HTTP-based protocols""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,228,-,+,,71,"	{ ""gitprotocol-pack"", N_(""How packs are transferred over-the-wire""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,229,-,+,,58,"	{ ""gitprotocol-v2"", N_(""Git Wire Protocol, Version 2""), 0 | CAT_developerinterfaces },"
type_conversion,command-list.h,230,-,+,,85,"	{ ""gitremote-helpers"", N_(""Helper programs to interact with remote repositories""), 0 | CAT_guide },"
type_conversion,command-list.h,231,-,+,,57,"	{ ""gitrepository-layout"", N_(""Git Repository Layout""), 0 | CAT_userinterfaces },"
type_conversion,command-list.h,232,-,+,,67,"	{ ""gitrevisions"", N_(""Specifying revisions and ranges for Git""), 0 | CAT_userinterfaces },"
type_conversion,command-list.h,233,-,+,,67,"	{ ""gitsubmodules"", N_(""Mounting one repository inside another""), 0 | CAT_guide },"
type_conversion,command-list.h,234,-,+,,57,"	{ ""gittutorial"", N_(""A tutorial introduction to Git""), 0 | CAT_guide },"
type_conversion,command-list.h,235,-,+,,69,"	{ ""gittutorial-2"", N_(""A tutorial introduction to Git: part two""), 0 | CAT_guide },"
type_conversion,command-list.h,236,-,+,,74,"	{ ""gitweb"", N_(""Git web interface (web frontend to Git repositories)""), 0 | CAT_ancillaryinterrogators },"
type_conversion,command-list.h,237,-,+,,73,"	{ ""gitworkflows"", N_(""An overview of recommended workflows with Git""), 0 | CAT_guide },"
type_conversion,command-list.h,238,-,+,,64,
type_conversion,commit-graph.c,36,-,+,,11,		flags = COMMIT_GRAPH_WRITE_BLOOM_FILTERS;
type_conversion,commit-graph.c,96,-,+,,9,"	return commit_pos_at(&commit_pos, a) -
	       commit_pos_at(&commit_pos, b);"
type_conversion,commit-graph.c,102,-,+,,12,		flags |= COMMIT_GRAPH_WRITE_PROGRESS;
type_conversion,commit-graph.c,120,-,+,,6,	if (opened == OPENED_NONE)
type_conversion,commit-graph.c,122,-,+,,11,	else if (opened == OPENED_GRAPH)
type_conversion,commit-graph.c,159,-,+,,11,	for (i = 0; i < commit_graph_data_slab.slab_size; i++) {
type_conversion,commit-graph.c,183,-,+,,29,"	display_progress(progress, oidset_size(commits));"
type_conversion,commit-graph.c,197,-,+,,9,"		*to = strtol(arg, (char **)&s, 10);"
type_conversion,commit-graph.c,211,-,+,,35,"	struct commit_graph *g = xcalloc(1, sizeof(*g));"
type_conversion,commit-graph.c,262,-,+,,27,	write_opts.expire_time = 0;
type_conversion,commit-graph.c,264,-,+,,66,"	graph_map = xmmap(NULL, graph_size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,commit-graph.c,280,-,+,,12,		flags |= COMMIT_GRAPH_WRITE_APPEND;
type_conversion,commit-graph.c,282,-,+,,12,		flags |= COMMIT_GRAPH_WRITE_SPLIT;
type_conversion,commit-graph.c,283,-,+,,20,	if (chunk_size != 256 * sizeof(uint32_t))
type_conversion,commit-graph.c,284,-,+,,12,		flags |= COMMIT_GRAPH_WRITE_PROGRESS;
type_conversion,commit-graph.c,286,-,+,,12,		flags |= COMMIT_GRAPH_NO_WRITE_BLOOM_FILTERS;
type_conversion,commit-graph.c,289,-,+,,12,		flags |= COMMIT_GRAPH_WRITE_BLOOM_FILTERS;
type_conversion,commit-graph.c,304,-,+,,25,"		oidset_init(&commits, 0);"
type_conversion,commit-graph.c,306,-,+,,19,	if (chunk_size / g->hash_len != g->num_commits)
type_conversion,commit-graph.c,307,-,+,,41,"				_(""Collecting commits from input""), 0);"
type_conversion,commit-graph.c,315,-,+,,39,	if (chunk_size / GRAPH_DATA_WIDTH != g->num_commits)
type_conversion,commit-graph.c,325,-,+,,39,	if (chunk_size / sizeof(uint32_t) != g->num_commits)
type_conversion,commit-graph.c,335,-,+,,19,	if (chunk_size / 4 != g->num_commits) {
type_conversion,commit-graph.c,361,-,+,,22,	if (hash_version != 1)
type_conversion,commit-graph.c,398,-,+,,6,	if (graph_version != GRAPH_VERSION) {
type_conversion,commit-graph.c,405,-,+,,6,	if (hash_version != oid_version(the_hash_algo)) {
type_conversion,commit-graph.c,419,-,+,,6,			 (graph->num_chunks + 1) * CHUNK_TOC_ENTRY_SIZE +
type_conversion,commit-graph.c,430,-,+,,27,"				   GRAPH_HEADER_SIZE, graph->num_chunks, 1))"
type_conversion,commit-graph.c,459,-,+,,34,			graph->read_generation_data = 1;
type_conversion,commit-graph.c,531,-,+,,26,		read_generation_data = p->read_generation_data;
type_conversion,commit-graph.c,539,-,+,,29,		g->read_generation_data = 0;
type_conversion,commit-graph.c,558,-,+,,34,	if (g->chunk_base_graphs_size / g->hash_len < n) {
type_conversion,commit-graph.c,568,-,+,,60,"		    !hasheq(oids[n].hash, g->chunk_base_graphs + st_mult(g->hash_len, n))) {"
type_conversion,commit-graph.c,601,-,+,,6,	if (st->st_size < the_hash_algo->hexsz) {
type_conversion,commit-graph.c,625,-,+,,10,	count = st->st_size / (the_hash_algo->hexsz + 1);
type_conversion,commit-graph.c,739,-,+,,39,	r->objects->commit_graph_attempted = 1;
type_conversion,commit-graph.c,793,-,+,,9,	return g->read_generation_data;
type_conversion,commit-graph.c,820,-,+,,29,"			    g->chunk_oid_lookup, g->hash_len, pos);"
type_conversion,commit-graph.c,840,-,+,,45,"	oidread(oid, g->chunk_oid_lookup + st_mult(g->hash_len, lex_index));"
type_conversion,commit-graph.c,876,-,+,,65,"	commit_data = g->chunk_commit_data + st_mult(GRAPH_DATA_WIDTH, lex_index);"
type_conversion,commit-graph.c,881,-,+,,56,	date_high = get_be32(commit_data + g->hash_len + 8) & 0x3;
type_conversion,commit-graph.c,882,-,+,,13,	date_low = get_be32(commit_data + g->hash_len + 12);
type_conversion,commit-graph.c,886,-,+,,87,"		offset = (timestamp_t)get_be32(g->chunk_generation_data + st_mult(sizeof(uint32_t), lex_index));"
type_conversion,commit-graph.c,888,-,+,,7,		if (offset & CORRECTED_COMMIT_DATE_OFFSET_OVERFLOW) {
type_conversion,commit-graph.c,892,-,+,,17,			offset_pos = offset ^ CORRECTED_COMMIT_DATE_OFFSET_OVERFLOW;
type_conversion,commit-graph.c,893,-,+,,69,			if (g->chunk_generation_data_overflow_size / sizeof(uint64_t) <= offset_pos)
type_conversion,commit-graph.c,896,-,+,,69,				get_be64(g->chunk_generation_data_overflow + sizeof(uint64_t) * offset_pos);
type_conversion,commit-graph.c,900,-,+,,28,		graph_data->generation = get_be32(commit_data + g->hash_len + 8) >> 2;
type_conversion,commit-graph.c,927,-,+,,47,"	commit_data = g->chunk_commit_data + st_mult(g->hash_len + 16, lex_index);"
type_conversion,commit-graph.c,929,-,+,,24,	item->object.parsed = 1;
type_conversion,commit-graph.c,950,-,+,,55,		if (g->chunk_extra_edges_size / sizeof(uint32_t) <= parent_data_pos) {
type_conversion,commit-graph.c,954,-,+,,26,			item->object.parsed = 0;
type_conversion,commit-graph.c,958,-,+,,30,				      sizeof(uint32_t) * parent_data_pos);
type_conversion,commit-graph.c,1016,-,+,,53,"	if (commit_graph_paranoia && !has_object(repo, id, 0))"
type_conversion,commit-graph.c,1080,-,+,,30,"			st_mult(GRAPH_DATA_WIDTH, graph_pos - g->num_commits_in_base);"
type_conversion,commit-graph.c,1165,-,+,,10,		while (count < ctx->commits.nr) {
type_conversion,commit-graph.c,1166,-,+,,8,			if ((*list)->object.oid.hash[0] != i)
type_conversion,commit-graph.c,1173,-,+,,21,"		hashwrite_be32(f, count);"
type_conversion,commit-graph.c,1185,-,+,,18,"	for (count = 0; count < ctx->commits.nr; count++, list++) {"
type_conversion,commit-graph.c,1205,-,+,,29,	uint32_t num_extra_edges = 0;
type_conversion,commit-graph.c,1237,-,+,,19,					edge_value = pos;
type_conversion,commit-graph.c,1246,-,+,,21,"		hashwrite_be32(f, edge_value);"
type_conversion,commit-graph.c,1268,-,+,,19,					edge_value = pos;
type_conversion,commit-graph.c,1277,-,+,,21,"		hashwrite_be32(f, edge_value);"
type_conversion,commit-graph.c,1279,+,+,edge_value & GRAPH_EXTRA_EDGES_NEEDED,7,		if (edge_value & GRAPH_EXTRA_EDGES_NEEDED) {
type_conversion,commit-graph.c,1286,-,+,,31,		if (sizeof((*list)->date) > 4)
type_conversion,commit-graph.c,1289,-,+,,20,			packedDate[0] = 0;
type_conversion,commit-graph.c,1294,-,+,,28,"		hashwrite(f, packedDate, 8);"
type_conversion,commit-graph.c,1308,-,+,,14,	for (i = 0; i < ctx->commits.nr; i++) {
type_conversion,commit-graph.c,1315,-,+,,7,		if (offset > GENERATION_NUMBER_V2_OFFSET_MAX) {
type_conversion,commit-graph.c,1316,-,+,,53,			offset = CORRECTED_COMMIT_DATE_OFFSET_OVERFLOW | num_generation_data_overflows;
type_conversion,commit-graph.c,1320,-,+,,21,"		hashwrite_be32(f, offset);"
type_conversion,commit-graph.c,1331,-,+,,14,	for (i = 0; i < ctx->commits.nr; i++) {
type_conversion,commit-graph.c,1336,-,+,,7,		if (offset > GENERATION_NUMBER_V2_OFFSET_MAX) {
type_conversion,commit-graph.c,1337,-,+,,22,"			hashwrite_be32(f, offset >> 32);"
type_conversion,commit-graph.c,1381,-,+,,19,					edge_value = pos;
type_conversion,commit-graph.c,1389,+,-,edge_value |= GRAPH_LAST_EDGE,,
type_conversion,commit-graph.c,1391,-,+,,22,"			hashwrite_be32(f, edge_value);"
type_conversion,commit-graph.c,1406,-,+,,21,	uint32_t cur_pos = 0;
type_conversion,commit-graph.c,1410,-,+,,39,		size_t len = filter ? filter->len : 0;
type_conversion,commit-graph.c,1425,-,+,,40,"	jw_object_intmax(&jw, ""hash_version"", ctx->bloom_settings->hash_version);"
type_conversion,commit-graph.c,1426,-,+,,38,"	jw_object_intmax(&jw, ""num_hashes"", ctx->bloom_settings->num_hashes);"
type_conversion,commit-graph.c,1427,-,+,,42,"	jw_object_intmax(&jw, ""bits_per_entry"", ctx->bloom_settings->bits_per_entry);"
type_conversion,commit-graph.c,1428,-,+,,45,"	jw_object_intmax(&jw, ""max_changed_paths"", ctx->bloom_settings->max_changed_paths);"
type_conversion,commit-graph.c,1451,-,+,,39,		size_t len = filter ? filter->len : 0;
type_conversion,commit-graph.c,1455,-,+,,31,"			hashwrite(f, filter->data, len * sizeof(unsigned char));"
type_conversion,commit-graph.c,1473,-,+,,35,"		display_progress(ctx->progress, ++ctx->progress_done);"
type_conversion,commit-graph.c,1479,-,+,,6,	if (type != OBJ_COMMIT)
type_conversion,commit-graph.c,1510,-,+,,14,	for (i = 0; i < ctx->oids.nr; i++) {
type_conversion,commit-graph.c,1511,-,+,,35,"		display_progress(ctx->progress, i + 1);"
type_conversion,commit-graph.c,1526,-,+,,6,					0);
type_conversion,commit-graph.c,1527,-,+,,14,	for (i = 0; i < ctx->oids.nr; i++) {
type_conversion,commit-graph.c,1528,-,+,,35,"		display_progress(ctx->progress, i + 1);"
type_conversion,commit-graph.c,1536,-,+,,8,			    flags == COMMIT_GRAPH_SPLIT_REPLACE)
type_conversion,commit-graph.c,1547,-,+,,14,	for (i = 0; i < ctx->oids.nr; i++) {
type_conversion,commit-graph.c,1548,-,+,,35,"		display_progress(ctx->progress, i + 1);"
type_conversion,commit-graph.c,1576,-,+,,20,		return max_gen + 1;
type_conversion,commit-graph.c,1580,-,+,,24,			max_gen = c->date - 1;
type_conversion,commit-graph.c,1581,-,+,,20,		return max_gen + 1;
type_conversion,commit-graph.c,1595,-,+,,14,	for (i = 0; i < info->commits->nr; i++) {
type_conversion,commit-graph.c,1600,-,+,,36,"		display_progress(info->progress, info->progress_cnt + 1);"
type_conversion,commit-graph.c,1602,-,+,,40,		if (gen != GENERATION_NUMBER_ZERO && gen != GENERATION_NUMBER_INFINITY)
type_conversion,commit-graph.c,1610,-,+,,23,			uint32_t max_gen = 0;
type_conversion,commit-graph.c,1622,-,+,,15,				if (gen > max_gen)
type_conversion,commit-graph.c,1623,-,+,,16,					max_gen = gen;
type_conversion,commit-graph.c,1629,-,+,,16,"						current, max_gen,"
type_conversion,commit-graph.c,1640,-,+,,9,"	return *topo_level_slab_at(ctx->topo_levels, c);"
type_conversion,commit-graph.c,1700,-,+,,15,		for (i = 0; i < ctx->commits.nr; i++) {
type_conversion,commit-graph.c,1709,-,+,,14,	for (i = 0; i < ctx->commits.nr; i++) {
type_conversion,commit-graph.c,1712,-,+,,7,		if (offset > GENERATION_NUMBER_V2_OFFSET_MAX)
type_conversion,commit-graph.c,1780,-,+,,20,"	max_new_filters = ctx->opts && ctx->opts->max_new_filters >= 0 ?
		ctx->opts->max_new_filters : ctx->commits.nr;"
type_conversion,commit-graph.c,1781,-,+,,3,		ctx->opts->max_new_filters : ctx->commits.nr;
type_conversion,commit-graph.c,1783,-,+,,14,	for (i = 0; i < ctx->commits.nr; i++) {
type_conversion,commit-graph.c,1792,-,+,,7,		if (computed & BLOOM_COMPUTED) {
type_conversion,commit-graph.c,1794,-,+,,8,			if (computed & BLOOM_TRUNC_EMPTY)
type_conversion,commit-graph.c,1796,-,+,,8,			if (computed & BLOOM_TRUNC_LARGE)
type_conversion,commit-graph.c,1798,-,+,,14,		} else if (computed & BLOOM_NOT_COMPUTED)
type_conversion,commit-graph.c,1801,-,+,,44,			? sizeof(unsigned char) * filter->len : 0;
type_conversion,commit-graph.c,1802,-,+,,30,"		display_progress(progress, i + 1);"
type_conversion,commit-graph.c,1826,-,+,,52,"	if (oid_object_info(the_repository, oid, NULL) == OBJ_COMMIT)"
type_conversion,commit-graph.c,1829,-,+,,35,"	display_progress(data->progress, oidset_size(data->commits));"
type_conversion,commit-graph.c,1844,-,+,,6,	if (flags & COMMIT_GRAPH_WRITE_PROGRESS)
type_conversion,commit-graph.c,1846,-,+,,40,"			_(""Collecting referenced commits""), 0);"
type_conversion,commit-graph.c,1870,-,+,,11,	dirlen = packname.len;
type_conversion,commit-graph.c,1877,-,+,,62,"		ctx->progress = start_delayed_progress(progress_title.buf, 0);"
type_conversion,commit-graph.c,1880,-,+,,14,	for (i = 0; i < pack_indexes->nr; i++) {
type_conversion,commit-graph.c,1882,-,+,,28,"		strbuf_setlen(&packname, dirlen);"
type_conversion,commit-graph.c,1932,-,+,,6,	if (ctx->progress_done < ctx->approx_nr_objects)
type_conversion,commit-graph.c,1949,-,+,,14,"	for (i = 0; i < ctx->oids.nr; i = oid_array_next_unique(&ctx->oids, i)) {"
type_conversion,commit-graph.c,1952,-,+,,39,"		display_progress(ctx->progress, i + 1);"
type_conversion,commit-graph.c,1957,-,+,,21,		if (ctx->split && flags != COMMIT_GRAPH_SPLIT_REPLACE &&
type_conversion,commit-graph.c,1961,-,+,,21,		if (ctx->split && flags == COMMIT_GRAPH_SPLIT_REPLACE)
type_conversion,commit-graph.c,1967,-,+,,21,		if (num_parents > 2)
type_conversion,commit-graph.c,1968,-,+,,42,			ctx->num_extra_edges += num_parents - 1;
type_conversion,commit-graph.c,2062,-,+,,49,"	add_chunk(cf, GRAPH_CHUNKID_OIDLOOKUP, st_mult(hashsz, ctx->commits.nr),"
type_conversion,commit-graph.c,2064,-,+,,53,"	add_chunk(cf, GRAPH_CHUNKID_DATA, st_mult(hashsz + 16, ctx->commits.nr),"
type_conversion,commit-graph.c,2073,-,+,,35,"			  st_mult(sizeof(timestamp_t), ctx->num_generation_data_overflows),"
type_conversion,commit-graph.c,2077,-,+,,14,"			  st_mult(4, ctx->num_extra_edges),"
type_conversion,commit-graph.c,2084,-,+,,32,"			  st_add(sizeof(uint32_t) * 3,"
type_conversion,commit-graph.c,2090,-,+,,14,"			  st_mult(hashsz, ctx->num_commit_graphs_after - 1),"
type_conversion,commit-graph.c,2097,-,+,,18,"	hashwrite_u8(f, get_num_chunks(cf));"
type_conversion,commit-graph.c,2098,-,+,,18,"	hashwrite_u8(f, ctx->num_commit_graphs_after - 1);"
type_conversion,commit-graph.c,2104,-,+,,11,"			       get_num_chunks(cf)),"
type_conversion,commit-graph.c,2108,-,+,,12,"			st_mult(get_num_chunks(cf), ctx->commits.nr));"
type_conversion,commit-graph.c,2174,-,+,,19,		for (i = 0; i < ctx->num_commit_graphs_after; i++)
type_conversion,commit-graph.c,2208,-,+,,16,	num_commits = ctx->commits.nr;
type_conversion,commit-graph.c,2209,-,+,,6,	if (flags == COMMIT_GRAPH_SPLIT_REPLACE)
type_conversion,commit-graph.c,2214,-,+,,6,	if (flags != COMMIT_GRAPH_SPLIT_MERGE_PROHIBITED &&
type_conversion,commit-graph.c,2215,-,+,,6,	    flags != COMMIT_GRAPH_SPLIT_REPLACE) {
type_conversion,commit-graph.c,2216,-,+,,16,"		while (g && (g->num_commits <= st_mult(size_mult, num_commits) ||"
type_conversion,commit-graph.c,2217,-,+,,38,			    (max_commits && num_commits > max_commits))) {
type_conversion,commit-graph.c,2233,-,+,,6,	if (flags != COMMIT_GRAPH_SPLIT_REPLACE)
type_conversion,commit-graph.c,2254,-,+,,18,	for (i = 0; i < ctx->num_commit_graphs_after &&
type_conversion,commit-graph.c,2255,-,+,,11,		    i < ctx->num_commit_graphs_before; i++)
type_conversion,commit-graph.c,2258,-,+,,6,	i = ctx->num_commit_graphs_before - 1;
type_conversion,commit-graph.c,2262,-,+,,11,		if (i < ctx->num_commit_graphs_after)
type_conversion,commit-graph.c,2269,-,+,,12,		if (i == ctx->num_commit_graphs_after - 2)
type_conversion,commit-graph.c,2270,-,+,,33,			ctx->write_generation_data = !!g->chunk_generation_data;
type_conversion,commit-graph.c,2286,-,+,,42,"		    (uintmax_t)st_add(ctx->commits.nr, g->num_commits));"
type_conversion,commit-graph.c,2290,-,+,,11,	for (i = 0; i < g->num_commits; i++) {
type_conversion,commit-graph.c,2294,-,+,,39,"		display_progress(ctx->progress, i + 1);"
type_conversion,commit-graph.c,2317,-,+,,24,"	uint32_t i, dedup_i = 0;"
type_conversion,commit-graph.c,2327,-,+,,14,	for (i = 0; i < ctx->commits.nr; i++) {
type_conversion,commit-graph.c,2328,-,+,,39,"		display_progress(ctx->progress, i + 1);"
type_conversion,commit-graph.c,2330,-,+,,41,"		if (i && oideq(&ctx->commits.list[i - 1]->object.oid,"
type_conversion,commit-graph.c,2346,-,+,,22,			if (num_parents > 2)
type_conversion,commit-graph.c,2347,-,+,,43,				ctx->num_extra_edges += num_parents - 1;
type_conversion,commit-graph.c,2351,-,+,,20,	ctx->commits.nr = dedup_i;
type_conversion,commit-graph.c,2359,-,+,,34,	uint32_t current_graph_number = ctx->num_commit_graphs_before;
type_conversion,commit-graph.c,2361,-,+,,38,	while (g && current_graph_number >= ctx->num_commit_graphs_after) {
type_conversion,commit-graph.c,2365,-,+,,70,"			ctx->progress = start_delayed_progress(_(""Merging commit-graph""), 0);"
type_conversion,commit-graph.c,2389,-,+,,49,	for (i = ctx->num_commit_graphs_after - 1; i < ctx->num_commit_graphs_before; i++) {
type_conversion,commit-graph.c,2430,-,+,,23,"		uint32_t i, found = 0;"
type_conversion,commit-graph.c,2440,-,+,,18,"		if (path.len < 6 || strcmp(path.buf + path.len - 6, "".graph""))"
type_conversion,commit-graph.c,2443,-,+,,19,		for (i = 0; i < ctx->num_commit_graphs_after; i++) {
type_conversion,commit-graph.c,2446,-,+,,13,				found = 1;
type_conversion,commit-graph.c,2486,-,+,,16,	ctx->append = flags & COMMIT_GRAPH_WRITE_APPEND ? 1 : 0;
type_conversion,commit-graph.c,2487,-,+,,25,	ctx->report_progress = flags & COMMIT_GRAPH_WRITE_PROGRESS ? 1 : 0;
type_conversion,commit-graph.c,2488,-,+,,15,	ctx->split = flags & COMMIT_GRAPH_WRITE_SPLIT ? 1 : 0;
type_conversion,commit-graph.c,2490,-,+,,38,	ctx->total_bloom_filter_data_size = 0;
type_conversion,commit-graph.c,2491,-,+,,31,	ctx->write_generation_data = (get_configured_generation_version(r) == 2);
type_conversion,commit-graph.c,2494,-,+,,34,"	bloom_settings.bits_per_entry = git_env_ulong(""GIT_TEST_BLOOM_SETTINGS_BITS_PER_ENTRY"",
						      bloom_settings.bits_per_entry);"
type_conversion,commit-graph.c,2495,-,+,,13,						      bloom_settings.bits_per_entry);
type_conversion,commit-graph.c,2496,-,+,,30,"	bloom_settings.num_hashes = git_env_ulong(""GIT_TEST_BLOOM_SETTINGS_NUM_HASHES"",
						  bloom_settings.num_hashes);"
type_conversion,commit-graph.c,2497,-,+,,9,						  bloom_settings.num_hashes);
type_conversion,commit-graph.c,2498,-,+,,37,"	bloom_settings.max_changed_paths = git_env_ulong(""GIT_TEST_BLOOM_SETTINGS_MAX_CHANGED_PATHS"",
							 bloom_settings.max_changed_paths);"
type_conversion,commit-graph.c,2499,-,+,,9,							 bloom_settings.max_changed_paths);
type_conversion,commit-graph.c,2515,-,+,,6,	if (flags & COMMIT_GRAPH_WRITE_BLOOM_FILTERS)
type_conversion,commit-graph.c,2516,-,+,,24,		ctx->changed_paths = 1;
type_conversion,commit-graph.c,2517,-,+,,8,	if (!(flags & COMMIT_GRAPH_NO_WRITE_BLOOM_FILTERS)) {
type_conversion,commit-graph.c,2524,-,+,,25,			ctx->changed_paths = 1;
type_conversion,commit-graph.c,2539,-,+,,8,			i = ctx->num_commit_graphs_before;
type_conversion,commit-graph.c,2549,-,+,,14,			replace = ctx->opts->split_flags & COMMIT_GRAPH_SPLIT_REPLACE;
type_conversion,commit-graph.c,2556,-,+,,12,		for (i = 0; i < g->num_commits; i++) {
type_conversion,commit-graph.c,2558,-,+,,48,"			oidread(&oid, g->chunk_oid_lookup + st_mult(g->hash_len, i));"
type_conversion,commit-graph.c,2564,-,+,,24,		ctx->order_by_pack = 1;
type_conversion,commit-graph.c,2575,-,+,,24,		ctx->order_by_pack = 1;
type_conversion,commit-graph.c,2600,-,+,,34,	ctx->trust_generation_numbers = validate_mixed_generation_chain(ctx->r->objects->commit_graph);
type_conversion,commit-graph.c,2623,-,+,,18,	for (i = 0; i < ctx->num_commit_graphs_before; i++)
type_conversion,commit-graph.c,2627,-,+,,18,	for (i = 0; i < ctx->num_commit_graphs_after; i++) {
type_conversion,commit-graph.c,2664,-,+,,31,"	uint32_t i, cur_fanout_pos = 0;"
type_conversion,commit-graph.c,2674,-,+,,11,	for (i = 0; i < g->num_commits; i++) {
type_conversion,commit-graph.c,2677,-,+,,51,"		oidread(&cur_oid, g->chunk_oid_lookup + st_mult(g->hash_len, i));"
type_conversion,commit-graph.c,2686,-,+,,10,		while (cur_oid.hash[0] > cur_fanout_pos) {
type_conversion,commit-graph.c,2701,-,+,,26,	while (cur_fanout_pos < 256) {
type_conversion,commit-graph.c,2714,-,+,,11,	for (i = 0; i < g->num_commits; i++) {
type_conversion,commit-graph.c,2717,-,+,,32,		timestamp_t max_generation = 0;
type_conversion,commit-graph.c,2721,-,+,,51,"		oidread(&cur_oid, g->chunk_oid_lookup + st_mult(g->hash_len, i));"
type_conversion,commit-graph.c,2787,-,+,,37,		if (generation < max_generation + 1)
type_conversion,commit-graph.c,2791,-,+,,27,				     max_generation + 1);
type_conversion,commit-graph.c,2813,-,+,,18,	uint64_t seen = 0;
type_conversion,commit-graph.c,2820,-,+,,14,	if (flags & COMMIT_GRAPH_WRITE_PROGRESS) {
type_conversion,commit-graph.c,2821,-,+,,20,		uint64_t total = g->num_commits;
type_conversion,commit-graph.c,2823,-,+,,13,			total += g->num_commits_in_base;
type_conversion,commit-reach.c,94,-,+,,7,		if (flags == (PARENT1 | PARENT2)) {
type_conversion,commit-reach.c,106,-,+,,9,			if ((p->object.flags & flags) == flags)
type_conversion,commit-reach.c,165,-,+,,44,"	if (paint_down_to_common(r, one, n, twos, 0, 0, &list)) {"
type_conversion,commit-reach.c,221,-,+,,22,"	redundant = xcalloc(cnt, 1);"
type_conversion,commit-reach.c,254,-,+,,19,			redundant[i] = 1;
type_conversion,commit-reach.c,257,-,+,,34,				redundant[filled_index[j]] = 1;
type_conversion,commit-reach.c,280,-,+,,25,"	size_t walk_start_nr = 0, walk_start_alloc = cnt;"
type_conversion,commit-reach.c,318,-,+,,14,	for (i = 0; i < walk_start_nr; i++)
type_conversion,commit-reach.c,327,-,+,,27,	for (i = walk_start_nr - 1; i >= 0 && count_still_independent > 1; i--) {
type_conversion,commit-reach.c,386,-,+,,26,"	clear_commit_marks_many(walk_start_nr, walk_start, STALE);"
type_conversion,commit-reach.c,409,-,+,,8,			if (commit_graph_generation(array[i]) < GENERATION_NUMBER_INFINITY)
type_conversion,commit-reach.c,443,-,+,,8,	cnt = commit_list_count(*result);
type_conversion,commit-reach.c,635,-,+,,12,	if (!o || o->type != OBJ_COMMIT)
type_conversion,commit-reach.c,641,-,+,,12,	if (!o || o->type != OBJ_COMMIT)
type_conversion,commit-reach.c,736,-,+,,6,	if (result != CONTAINS_UNKNOWN)
type_conversion,commit-reach.c,774,-,+,,10,"		return contains_tag_algo(commit, list, cache) == CONTAINS_YES;"
type_conversion,commit-reach.c,791,-,+,,14,	for (i = 0; i < from->nr; i++) {
type_conversion,commit-reach.c,799,-,+,,20,		if (!from_one || from_one->type != OBJ_COMMIT) {
type_conversion,commit-reach.c,847,-,+,,31,					    parent->item->date < min_commit_date ||
type_conversion,commit-reach.c,870,-,+,,14,	for (i = 0; i < from->nr; i++) {
type_conversion,commit-reach.c,884,-,+,,67,	time_t min_commit_date = cutoff_by_min_date ? from->item->date : 0;
type_conversion,commit-reach.c,894,-,+,,32,			if (from_iter->item->date < min_commit_date)
type_conversion,commit-reach.c,895,-,+,,23,				min_commit_date = from_iter->item->date;
type_conversion,commit-reach.c,908,-,+,,30,			if (to_iter->item->date < min_commit_date)
type_conversion,commit-reach.c,909,-,+,,23,				min_commit_date = to_iter->item->date;
type_conversion,commit-reach.c,1026,-,+,,31,		*bitmap = bitmap_word_alloc(width);
type_conversion,commit-reach.c,1049,-,+,,18,	for (size_t i = 0; i < counts_nr; i++) {
type_conversion,commit-reach.c,1050,-,+,,21,		counts[i].ahead = 0;
type_conversion,commit-reach.c,1051,-,+,,22,		counts[i].behind = 0;
type_conversion,commit-reach.c,1058,-,+,,18,	for (size_t i = 0; i < commits_nr; i++) {
type_conversion,commit-reach.c,1060,-,+,,44,"		struct bitmap *bitmap = get_bit_array(c, width);"
type_conversion,commit-reach.c,1069,-,+,,46,"		struct bitmap *bitmap_c = get_bit_array(c, width);"
type_conversion,commit-reach.c,1071,-,+,,19,		for (size_t i = 0; i < counts_nr; i++) {
type_conversion,commit-reach.c,1088,-,+,,38,"			bitmap_p = get_bit_array(p->item, width);"
type_conversion,commit-reach.c,1137,-,+,,32,	size_t min_generation_index = 0;
type_conversion,commit-reach.c,1153,-,+,,18,	for (size_t i = 0; i < tips_nr; i++) {
type_conversion,commit-reach.c,1155,-,+,,22,		commits[i].index = i;
type_conversion,commit-reach.c,1184,-,+,,27,					unsigned int k = j + 1;
type_conversion,commit-reach.c,1185,-,+,,13,					while (k < tips_nr &&
type_conversion,commit-reach.c,1186,-,+,,14,					       (tips[commits[k].index]->object.flags & mark))
type_conversion,commit-reach.c,1190,-,+,,10,					if (k >= tips_nr)
type_conversion,commit-reach.c,1193,-,+,,29,					min_generation_index = k;
type_conversion,commit-tree.c,85,-,+,,27,"	if (strbuf_read(buf, fd, 0) < 0)"
type_conversion,commit-tree.c,111,-,+,,62,"			N_(""GPG sign commit""), PARSE_OPT_OPTARG, NULL, (intptr_t) """" },"
type_conversion,commit-tree.c,129,-,+,,31,"		if (strbuf_read(&buffer, 0, 0) < 0)"
type_conversion,commit.c,103,-,+,,10,		return 0;
type_conversion,commit.c,104,-,+,,28,"	if (memcmp(buf, ""author"", 6))"
type_conversion,commit.c,105,-,+,,10,		return 0;
type_conversion,commit.c,106,-,+,,23,	while (buf < tail && *buf++ != '\n')
type_conversion,commit.c,109,-,+,,10,		return 0;
type_conversion,commit.c,110,-,+,,31,"	if (memcmp(buf, ""committer"", 9))"
type_conversion,commit.c,111,-,+,,10,		return 0;
type_conversion,commit.c,119,-,+,,26,"	eol = memchr(buf, '\n', tail - buf);"
type_conversion,commit.c,121,-,+,,10,		return 0;
type_conversion,commit.c,123,-,+,,26,	while (dateptr > buf && dateptr[-1] != '>')
type_conversion,commit.c,126,-,+,,10,		return 0;
type_conversion,commit.c,146,-,+,,28,	if (!isdigit(*dateptr) && *dateptr != '-')
type_conversion,commit.c,147,-,+,,10,		return 0;
type_conversion,commit.c,167,-,+,,22,"		strbuf_setlen(buf, 0);"
type_conversion,commit.c,174,-,+,,10,"		       r->parsed_objects->grafts_nr,"
type_conversion,commit.c,184,-,+,,21,	if (arg != NULL && *arg == '=')
type_conversion,commit.c,186,-,+,,21,	c->object.parsed = 0;
type_conversion,commit.c,211,-,+,,4,			(r->parsed_objects->grafts_nr - pos - 1) *
type_conversion,commit.c,227,-,+,,20,	if (!line->len || line->buf[0] == '#')
type_conversion,commit.c,237,-,+,,15,		for (i = 0; *tail != '\0'; i++) {
type_conversion,commit.c,244,-,+,,47,"					       st_mult(sizeof(struct object_id), i)));"
type_conversion,commit.c,257,-,+,,14,"	m = xcalloc(1, pattern->nr);"
type_conversion,commit.c,267,-,+,,14,	for (i = 0; i < the_repository->index->cache_nr; i++) {
type_conversion,commit.c,288,-,+,,14,	for (i = 0; i < list->nr; i++) {
type_conversion,commit.c,317,-,+,,20,	opts.index_only = 1;
type_conversion,commit.c,318,-,+,,15,	opts.merge = 1;
type_conversion,commit.c,329,-,+,,19,"	if (unpack_trees(1, &t, &opts))"
type_conversion,commit.c,353,-,+,,28,"	parse_pathspec(&pathspec, 0,"
type_conversion,commit.c,364,-,+,,13,			*sizep = 0;
type_conversion,commit.c,367,-,+,,34,"		parse_pathspec_file(&pathspec, 0,"
type_conversion,commit.c,378,-,+,,57,"	if (repo_read_index_preload(the_repository, &pathspec, 0) < 0)"
type_conversion,commit.c,384,-,+,,7,		if (type != OBJ_COMMIT)
type_conversion,commit.c,386,-,+,,51,"			    oid_to_hex(&commit->object.oid), type_name(type));"
type_conversion,commit.c,388,-,+,,62,"		if (write_locked_index(the_repository->index, &index_lock, 0))"
type_conversion,commit.c,409,-,+,,13,		v->size = 0;
type_conversion,commit.c,413,-,+,,63,"			if (write_locked_index(the_repository->index, &index_lock, 0))"
type_conversion,commit.c,436,-,+,,30,"		char *ps_matched = xcalloc(pathspec.nr, 1);"
type_conversion,commit.c,440,-,+,,13,	c->index = 0;
type_conversion,commit.c,443,-,+,,21,	c->object.parsed = 0;
type_conversion,commit.c,446,-,+,,62,"		if (write_locked_index(the_repository->index, &index_lock, 0))"
type_conversion,commit.c,454,-,+,,13,			*sizep = 0;
type_conversion,commit.c,462,-,+,,12,	v->size = 0;
type_conversion,commit.c,473,-,+,,52,	const int tree_entry_len = the_hash_algo->hexsz + 5;
type_conversion,commit.c,474,-,+,,54,	const int parent_entry_len = the_hash_algo->hexsz + 7;
type_conversion,commit.c,489,-,+,,69,"	if (tail <= bufptr + tree_entry_len + 1 || memcmp(bufptr, ""tree "", 5) ||"
type_conversion,commit.c,490,-,+,,4,			bufptr[tree_entry_len] != '\n')
type_conversion,commit.c,499,-,+,,6,	if (whence != FROM_COMMIT) {
type_conversion,commit.c,500,-,+,,7,		if (whence == FROM_MERGE)
type_conversion,commit.c,507,-,+,,72,"	while (bufptr + parent_entry_len < tail && !memcmp(bufptr, ""parent "", 7)) {"
type_conversion,commit.c,512,-,+,,7,		    bufptr[parent_entry_len] != '\n')
type_conversion,commit.c,519,-,+,,61,"	if (write_locked_index(the_repository->index, &index_lock, 0))"
type_conversion,commit.c,531,-,+,,61,"	if (write_locked_index(the_repository->index, &false_lock, 0))"
type_conversion,commit.c,546,-,+,,24,	item->object.parsed = 1;
type_conversion,commit.c,579,-,+,,37,"	if (split_ident_line(id, buf->buf, buf->len) || !id->date_begin)"
type_conversion,commit.c,581,-,+,,66,"		if (commit_graph_paranoia && !has_object(r, &item->object.oid, 0)) {"
type_conversion,commit.c,588,-,+,,22,"	strbuf_add(&buf, s, e - s);"
type_conversion,commit.c,591,-,+,,58,"	if (oid_object_info_extended(r, &item->object.oid, &oi, flags) < 0)"
type_conversion,commit.c,595,-,+,,6,	if (type != OBJ_COMMIT) {
type_conversion,commit.c,628,-,+,,16,	while (*p && (*p != '\n' || p[1] != '\n'))
type_conversion,commit.c,631,-,+,,35,"		if (split_ident_line(&ident, a, len) < 0)"
type_conversion,commit.c,634,-,+,,51,"		set_ident_var(&name, xmemdupz(ident.name_begin, ident.name_end - ident.name_begin));"
type_conversion,commit.c,635,-,+,,52,"		set_ident_var(&email, xmemdupz(ident.mail_begin, ident.mail_end - ident.mail_begin));"
type_conversion,commit.c,638,-,+,,9,	return eol - p;
type_conversion,commit.c,640,-,+,,44,"			strbuf_add(&date_buf, ident.date_begin, ident.date_end - ident.date_begin);"
type_conversion,commit.c,642,-,+,,42,"			strbuf_add(&date_buf, ident.tz_begin, ident.tz_end - ident.tz_begin);"
type_conversion,commit.c,650,-,+,,46,"		if (split_ident_line(&ident, force_author, strlen(force_author)) < 0)"
type_conversion,commit.c,652,-,+,,51,"		set_ident_var(&name, xmemdupz(ident.name_begin, ident.name_end - ident.name_begin));"
type_conversion,commit.c,653,-,+,,52,"		set_ident_var(&email, xmemdupz(ident.mail_begin, ident.mail_end - ident.mail_begin));"
type_conversion,commit.c,677,-,+,,15,	unsigned c = 0;
type_conversion,commit.c,685,-,+,,23,"	if (!memchr(sb->buf, candidates[0], sb->len)) {"
type_conversion,commit.c,686,-,+,,36,"		comment_line_str = xstrfmt(""%c"", candidates[0]);"
type_conversion,commit.c,691,-,+,,33,"	candidate = strchr(candidates, *p);"
type_conversion,commit.c,693,-,+,,16,		*candidate = ' ';
type_conversion,commit.c,695,-,+,,8,		if ((p[0] == '\n' || p[0] == '\r') && p[1]) {
type_conversion,commit.c,696,-,+,,35,"			candidate = strchr(candidates, p[1]);"
type_conversion,commit.c,698,-,+,,18,				*candidate = ' ';
type_conversion,commit.c,702,-,+,,23,	for (p = candidates; *p == ' '; p++)
type_conversion,commit.c,707,-,+,,35,"	comment_line_str = xstrfmt(""%c"", *p);"
type_conversion,commit.c,737,-,+,,32,	int clean_message_contents = (cleanup_mode != COMMIT_MSG_CLEANUP_NONE);
type_conversion,commit.c,774,-,+,,27,"		if (strbuf_read(&sb, 0, 0) < 0)"
type_conversion,commit.c,778,-,+,,38,"		if (strbuf_read_file(&sb, logfile, 0) < 0)"
type_conversion,commit.c,828,-,+,,67,"			if (strbuf_read_file(&sb, git_path_squash_msg(the_repository), 0) < 0)"
type_conversion,commit.c,835,-,+,,65,"		if (strbuf_read_file(&sb, git_path_merge_msg(the_repository), 0) < 0)"
type_conversion,commit.c,836,-,+,,43,"	if (split_ident_line(&ident, ident_line, ident_len) ||"
type_conversion,commit.c,838,-,+,,7,		if (cleanup_mode == COMMIT_MSG_CLEANUP_SCISSORS &&
type_conversion,commit.c,842,-,+,,24,			s->added_cut_line = 1;
type_conversion,commit.c,844,-,+,,66,"		if (strbuf_read_file(&sb, git_path_squash_msg(the_repository), 0) < 0)"
type_conversion,commit.c,848,-,+,,44,"		if (strbuf_read_file(&sb, template_file, 0) < 0)"
type_conversion,commit.c,858,-,+,,11,	else if (whence == FROM_MERGE)
type_conversion,commit.c,860,-,+,,42,	else if (is_from_cherry_pick(whence) || whence == FROM_REBASE_PICK) {
type_conversion,commit.c,893,-,+,,66,"		append_signoff(&sb, ignored_log_message_bytes(sb.buf, sb.len), 0);"
type_conversion,commit.c,895,-,+,,21,"	if (fwrite(sb.buf, 1, sb.len, s->fp) < sb.len)"
type_conversion,commit.c,924,-,+,,7,		if (whence != FROM_COMMIT) {
type_conversion,commit.c,925,-,+,,8,			if (cleanup_mode == COMMIT_MSG_CLEANUP_SCISSORS)
type_conversion,commit.c,929,-,+,,5,				whence == FROM_MERGE ?
type_conversion,commit.c,936,-,+,,7,		if (sort_order == REV_SORT_BY_AUTHOR_DATE)
type_conversion,commit.c,943,-,+,,7,		if (cleanup_mode == COMMIT_MSG_CLEANUP_ALL)
type_conversion,commit.c,945,-,+,,12,		else if (cleanup_mode == COMMIT_MSG_CLEANUP_SCISSORS) {
type_conversion,commit.c,946,-,+,,8,			if (whence == FROM_COMMIT)
type_conversion,commit.c,971,-,+,,6,	if (sort_order == REV_SORT_IN_GRAPH_ORDER)
type_conversion,commit.c,1005,-,+,,16,			for (i = 0; i < the_repository->index->cache_nr; i++)
type_conversion,commit.c,1008,-,+,,52,			committable = the_repository->index->cache_nr - ita_nr > 0;
type_conversion,commit.c,1020,-,+,,38,			flags.override_submodule_config = 1;
type_conversion,commit.c,1023,-,+,,31,				flags.ignore_submodules = 1;
type_conversion,commit.c,1043,-,+,,22,	if (!committable && whence != FROM_MERGE && !allow_empty &&
type_conversion,commit.c,1045,-,+,,19,		revs->initial = 0;
type_conversion,commit.c,1051,-,+,,5,			 whence == FROM_REBASE_PICK) {
type_conversion,commit.c,1053,-,+,,8,			if (whence == FROM_CHERRY_PICK_SINGLE)
type_conversion,commit.c,1055,-,+,,13,			else if (whence == FROM_CHERRY_PICK_MULTI)
type_conversion,commit.c,1061,-,+,,49,"	switch (repo_dwim_ref(the_repository, refname, strlen(refname), &oid,"
type_conversion,commit.c,1072,-,+,,17,	revs.initial = 1;
type_conversion,commit.c,1123,-,+,,27,	int gpg_sig_header_len = strlen(gpg_sig_header);
type_conversion,commit.c,1128,-,+,,12,		inspos = buf->len;
type_conversion,commit.c,1130,-,+,,29,		inspos = eoh - buf->buf + 1;
type_conversion,commit.c,1135,-,+,,27,		int len = (eol - bol) + !!*eol;
type_conversion,commit.c,1138,-,+,,23,"			strbuf_insert(buf, inspos, gpg_sig_header, gpg_sig_header_len);"
type_conversion,commit.c,1141,-,+,,25,"		strbuf_insertstr(buf, inspos++, "" "");"
type_conversion,commit.c,1142,-,+,,22,"		strbuf_insert(buf, inspos, bol, len);"
type_conversion,commit.c,1185,-,+,,41,"		const char *next = memchr(line, '\n', tail - line);"
type_conversion,commit.c,1186,-,+,,6,	if (u == SHOW_UNTRACKED_FILES_ERROR)
type_conversion,commit.c,1188,-,+,,23,		if (in_signature && line[0] == ' ')
type_conversion,commit.c,1191,-,+,,5,			 *p == ' ') {
type_conversion,commit.c,1197,-,+,,31,		else if (other_signature && line[0] != ' ')
type_conversion,commit.c,1200,-,+,,31,"			strbuf_add(signature, sig, next - sig);"
type_conversion,commit.c,1204,-,+,,8,			if (*line == '\n')
type_conversion,commit.c,1208,-,+,,31,"				strbuf_add(payload, line, next - line);"
type_conversion,commit.c,1220,-,+,,29,	int use_deferred_config = (status_format != STATUS_FORMAT_PORCELAIN &&
type_conversion,commit.c,1221,-,+,,8,				   status_format != STATUS_FORMAT_PORCELAIN_V2 &&
type_conversion,commit.c,1225,-,+,,7,		if (status_format == STATUS_FORMAT_NONE ||
type_conversion,commit.c,1226,-,+,,7,		    status_format == STATUS_FORMAT_UNSPECIFIED)
type_conversion,commit.c,1228,-,+,,12,		else if (status_format == STATUS_FORMAT_LONG)
type_conversion,commit.c,1231,-,+,,41,"		const char *next = memchr(line, '\n', tail - line);"
type_conversion,commit.c,1232,-,+,,29,	if (use_deferred_config && status_format == STATUS_FORMAT_UNSPECIFIED)
type_conversion,commit.c,1234,-,+,,6,	if (status_format == STATUS_FORMAT_UNSPECIFIED)
type_conversion,commit.c,1241,-,+,,9,				    *p == ' ') {
type_conversion,commit.c,1248,-,+,,8,			if (*line == '\n')
type_conversion,commit.c,1250,-,+,,6,	    s->ahead_behind_flags == AHEAD_BEHIND_UNSPECIFIED)
type_conversion,commit.c,1251,-,+,,24,			if (in_signature && sigp - sigs != ARRAY_SIZE(sigs))
type_conversion,commit.c,1253,-,+,,6,	if (s->ahead_behind_flags == AHEAD_BEHIND_UNSPECIFIED)
type_conversion,commit.c,1258,-,+,,6,	if (whence != FROM_COMMIT) {
type_conversion,commit.c,1259,-,+,,7,		if (whence == FROM_MERGE)
type_conversion,commit.c,1260,-,+,,23,"			strbuf_remove(buf, sigs[i].start - orig_buf, sigs[i].end - sigs[i].start);"
type_conversion,commit.c,1280,-,+,,14,	if (!buf || type != OBJ_TAG)
type_conversion,commit.c,1293,-,+,,15,	if (amend && whence != FROM_COMMIT) {
type_conversion,commit.c,1294,-,+,,7,		if (whence == FROM_MERGE)
type_conversion,commit.c,1298,-,+,,12,		else if (whence == FROM_REBASE_PICK)
type_conversion,commit.c,1315,-,+,,17,	sigc->result = 'N';
type_conversion,commit.c,1327,-,+,,38,	if ((is_from_cherry_pick(whence) || whence == FROM_REBASE_PICK) &&
type_conversion,commit.c,1343,-,+,,10,	switch (signature_check.result) {
type_conversion,commit.c,1345,-,+,,30,		if (ret || (check_trust && signature_check.trust_level < TRUST_MARGINAL))
type_conversion,commit.c,1354,-,+,,28,		if (p > fixup_message && *p == ':') {
type_conversion,commit.c,1355,-,+,,9,			*p = '\0';
type_conversion,commit.c,1361,-,+,,9,				if (*fixup_message == 'r') {
type_conversion,commit.c,1386,-,+,,6,	if (status_format != STATUS_FORMAT_NONE)
type_conversion,commit.c,1410,-,+,,10,		return WT_STATUS_UPDATED;
type_conversion,commit.c,1444,-,+,,18,"	return ((len == 4 && !memcmp(field, ""tree"", 4)) ||"
type_conversion,commit.c,1445,-,+,,11,"		(len == 6 && !memcmp(field, ""parent"", 6)) ||"
type_conversion,commit.c,1446,-,+,,11,"		(len == 6 && !memcmp(field, ""author"", 6)) ||"
type_conversion,commit.c,1447,-,+,,11,"		(len == 9 && !memcmp(field, ""committer"", 9)) ||"
type_conversion,commit.c,1448,-,+,,11,"		(len == 8 && !memcmp(field, ""encoding"", 8)));"
type_conversion,commit.c,1474,-,+,,21,	     line < eob && *line != '\n';
type_conversion,commit.c,1475,-,+,,7,		if (u == SHOW_UNTRACKED_FILES_ERROR)
type_conversion,commit.c,1476,-,+,,29,"		next = memchr(line, '\n', eob - line);"
type_conversion,commit.c,1478,-,+,,7,		if (*line == ' ') {
type_conversion,commit.c,1481,-,+,,32,"				strbuf_add(&buf, line + 1, next - (line + 1));"
type_conversion,commit.c,1489,-,+,,27,"		eof = memchr(line, ' ', next - line);"
type_conversion,commit.c,1492,-,+,,40,"		else if (standard_header_field(line, eof - line) ||"
type_conversion,commit.c,1493,-,+,,33,"			 excluded_header_field(line, eof - line, exclude))"
type_conversion,commit.c,1497,-,+,,28,"		it->key = xmemdupz(line, eof-line);"
type_conversion,commit.c,1501,-,+,,30,"			strbuf_add(&buf, eof + 1, next - (eof + 1));"
type_conversion,commit.c,1506,-,+,,31,	unsigned int progress_flag = 0;
type_conversion,commit.c,1530,-,+,,39,"		  PARSE_OPT_OPTARG, NULL, (intptr_t)""all"" },"
type_conversion,commit.c,1534,-,+,,39,"		  PARSE_OPT_OPTARG, NULL, (intptr_t)""traditional"" },"
type_conversion,commit.c,1537,-,+,,39,"		  PARSE_OPT_OPTARG, NULL, (intptr_t)""all"" },"
type_conversion,commit.c,1541,-,+,,21,		unsigned char c = *buf++;
type_conversion,commit.c,1550,-,+,,7,		if (c < 0x80)
type_conversion,commit.c,1560,-,+,,10,		while (c & 0x40) {
type_conversion,commit.c,1562,-,+,,6,	if (s.show_ignored_mode == SHOW_MATCHING_IGNORED &&
type_conversion,commit.c,1563,-,+,,6,	    s.show_untracked_files == SHOW_NO_UNTRACKED_FILES)
type_conversion,commit.c,1566,-,+,,30,"	parse_pathspec(&s.pathspec, 0,"
type_conversion,commit.c,1570,-,+,,6,	if (status_format != STATUS_FORMAT_PORCELAIN &&
type_conversion,commit.c,1571,-,+,,6,	    status_format != STATUS_FORMAT_PORCELAIN_V2)
type_conversion,commit.c,1580,-,+,,16,		codepoint = (c & 0x7f) >> bytes;
type_conversion,commit.c,1581,-,+,,38,		min_val = max_codepoint[bytes-1] + 1;
type_conversion,commit.c,1590,-,+,,17,			codepoint |= *buf & 0x3f;
type_conversion,commit.c,1591,-,+,,9,			if ((*buf++ & 0xc0) != 0x80)
type_conversion,commit.c,1592,-,+,,36,	if ((intptr_t)rename_score_arg != -1) {
type_conversion,commit.c,1599,-,+,,20,		if ((codepoint & 0x1ff800) == 0xd800)
type_conversion,commit.c,1602,-,+,,20,		if ((codepoint & 0xfffe) == 0xfffe)
type_conversion,commit.c,1605,-,+,,20,		if (codepoint >= 0xfdd0 && codepoint <= 0xfdef)
type_conversion,commit.c,1620,-,+,,13,	long pos = 0;
type_conversion,commit.c,1627,-,+,,54,"		bad = find_invalid_utf8(buf->buf + pos, buf->len - pos);"
type_conversion,commit.c,1630,-,+,,10,		pos += bad;
type_conversion,commit.c,1632,-,+,,7,		c = buf->buf[pos];
type_conversion,commit.c,1633,-,+,,22,"		strbuf_remove(buf, pos, 1);"
type_conversion,commit.c,1636,-,+,,24,		replace[0] = 0xc0 + (c >> 6);
type_conversion,commit.c,1637,-,+,,24,		replace[1] = 0x80 + (c & 0x3f);
type_conversion,commit.c,1638,-,+,,22,"		strbuf_insert(buf, pos, replace, 2);"
type_conversion,commit.c,1639,-,+,,10,		pos += 2;
type_conversion,commit.c,1660,-,+,,22,"	strbuf_grow(buffer, 8192); /* should avoid reallocs for the headers */"
type_conversion,commit.c,1668,-,+,,63,"		  N_(""GPG sign commit""), PARSE_OPT_OPTARG, NULL, (intptr_t) """" },"
type_conversion,commit.c,1693,-,+,,189,"		{ OPTION_STRING, 'u', ""untracked-files"", &untracked_files_arg, N_(""mode""), N_(""show untracked files, optional modes: all, normal, no. (Default: all)""), PARSE_OPT_OPTARG, NULL, (intptr_t)""all"" },"
type_conversion,commit.c,1715,-,+,,13,	nparents = commit_list_count(parents);
type_conversion,commit.c,1717,-,+,,6,	i = 0;
type_conversion,commit.c,1726,-,+,,14,	s.colopts = 0;
type_conversion,commit.c,1740,-,+,,12,		for (i = 0; i < nparents; i++)
type_conversion,commit.c,1764,-,+,,13,	} else if (whence == FROM_MERGE) {
type_conversion,commit.c,1784,-,+,,15,		for (i = 0; i < ARRAY_SIZE(bufs); i++) {
type_conversion,commit.c,1785,-,+,,67,"			if (strbuf_read_file(&sb, git_path_merge_mode(the_repository), 0) < 0)"
type_conversion,commit.c,1804,-,+,,55,"	if (strbuf_read_file(&sb, git_path_commit_editmsg(), 0) < 0) {"
type_conversion,commit.c,1876,-,+,,16,	int key_len = strlen(key);
type_conversion,commit.c,1879,-,+,,24,		unsigned int flags = 0;
type_conversion,commit.c,1892,-,+,,20,		if (eol - line > key_len &&
type_conversion,commit.c,1893,-,+,,27,"		    !strncmp(line, key, key_len) &&"
type_conversion,commit.c,1894,-,+,,7,		    line[key_len] == ' ') {
type_conversion,commit.c,1895,-,+,,28,			*out_len = eol - line - key_len - 1;
type_conversion,commit.c,1919,-,+,,15,	size_t boc = 0;
type_conversion,commit.c,1920,-,+,,15,	size_t bol = 0;
type_conversion,commit.c,1933,-,+,,7,		    buf[bol] == '\n') {
type_conversion,commit.c,1942,-,+,,40,		} else if (in_old_conflicts_block && buf[bol] == '\t') {
type_conversion,commit.c,1946,-,+,,10,			boc = 0;
type_conversion,commit.c,1949,-,+,,9,		bol = next_line - buf;
type_conversion,compiler.h,12,-,+,,12,	int len = info->len;
type_conversion,compiler.h,24,-,+,,6,	if (len == info->len)
type_conversion,compiler.h,30,-,+,,12,	int len = info->len;
type_conversion,compiler.h,36,-,+,,6,	if (len == info->len)
type_conversion,config.c,101,-,+,,10,		return conf->u.buf.buf[conf->u.buf.pos++];
type_conversion,config.c,108,-,+,,24,	if (conf->u.buf.pos > 0) {
type_conversion,config.c,110,-,+,,7,		if (conf->u.buf.buf[conf->u.buf.pos] != c)
type_conversion,config.c,120,-,+,,9,	return conf->u.buf.pos;
type_conversion,config.c,152,-,+,,13,	new_type = opt->defval;
type_conversion,config.c,178,-,+,,52,"			strbuf_add(&buf, kvi->path, slash - kvi->path + 1);"
type_conversion,config.c,183,-,+,,33,"	if (!access_or_die(path, R_OK, 0)) {"
type_conversion,config.c,201,-,+,,49,	if (pat->len && is_dir_sep(pat->buf[pat->len - 1]))
type_conversion,config.c,205,-,+,,20,	const char term = opts->end_nul ? '\0' : '\t';
type_conversion,config.c,212,-,+,,64,"		quote_c_style(kvi->filename ? kvi->filename : """", buf, NULL, 0);"
type_conversion,config.c,213,-,+,,20,"	strbuf_addch(buf, term);"
type_conversion,config.c,219,-,+,,6,	if (pat->buf[0] == '.' && is_dir_sep(pat->buf[1])) {
type_conversion,config.c,220,-,+,,20,	const char term = opts->end_nul ? '\0' : '\t';
type_conversion,config.c,224,-,+,,20,"	strbuf_addch(buf, term);"
type_conversion,config.c,230,-,+,,22,"		strbuf_splice(pat, 0, 1, path.buf, slash - path.buf);"
type_conversion,config.c,231,-,+,,31,		prefix = slash - path.buf + 1 /* slash */;
type_conversion,config.c,233,-,+,,25,"		strbuf_insertstr(pat, 0, ""**/"");"
type_conversion,config.c,241,-,+,,19,"		fwrite(buf.buf, 1, buf.len, stdout);"
type_conversion,config.c,269,-,+,,18,		if (text.len < prefix)
type_conversion,config.c,271,-,+,,48,"		if (!icase && strncmp(pattern.buf, text.buf, prefix))"
type_conversion,config.c,273,-,+,,51,"		if (icase && strncasecmp(pattern.buf, text.buf, prefix))"
type_conversion,config.c,312,-,+,,35,"				strbuf_setlen(buf, buf->len - 1);"
type_conversion,config.c,342,-,+,,34,	opts.unconditional_remote_url = 1;
type_conversion,config.c,345,-,+,,38,"	    regexec(data->key_regexp, key_, 0, NULL, 0))"
type_conversion,config.c,351,-,+,,72,"	    (data->do_not_match ^ !!regexec(data->regexp, (value_?value_:""""), 0, NULL, 0)))"
type_conversion,config.c,355,-,+,,42,"	strbuf_init(&values->items[values->nr], 0);"
type_conversion,config.c,373,-,+,,29,"	strbuf_add(&pattern, glob, glob_len);"
type_conversion,config.c,388,-,+,,21,		     tl >= key && *tl != '.';
type_conversion,config.c,391,-,+,,25,		for (tl = key; *tl && *tl != '.'; tl++)
type_conversion,config.c,413,-,+,,7,		if (regex_[0] == '!') {
type_conversion,config.c,438,-,+,,21,"		strbuf_init(item, 0);"
type_conversion,config.c,450,-,+,,21,"			fwrite(buf->buf, 1, buf->len, stdout);"
type_conversion,config.c,493,-,+,,30,"		char *key = xmemdupz(text, value - text);"
type_conversion,config.c,510,-,+,,23,"	key = xmemdupz(spec, env_name - spec);"
type_conversion,config.c,514,-,+,,31,"		    (int)(env_name - spec - 1), spec);"
type_conversion,config.c,519,-,+,,41,"		    env_name, (int)(env_name - spec - 1), spec);"
type_conversion,config.c,548,-,+,,22,"		.parsed_color[0] = '\0',"
type_conversion,config.c,563,-,+,,12,	baselen = last_dot - key;
type_conversion,config.c,573,-,+,,11,	for (i = 0; key[i]; i++) {
type_conversion,config.c,574,-,+,,21,		unsigned char c = key[i];
type_conversion,config.c,575,-,+,,7,		if (c == '.')
type_conversion,config.c,579,-,+,,19,			if (!iskeychar(c) ||
type_conversion,config.c,580,-,+,,24,			    (i == baselen + 1 && !isalpha(c))) {
type_conversion,config.c,585,-,+,,14,		} else if (c == '\n') {
type_conversion,config.c,589,-,+,,21,		(*store_key)[i] = c;
type_conversion,config.c,644,-,+,,50,	if (pair[0]->len && pair[0]->buf[pair[0]->len - 1] == '=') {
type_conversion,config.c,645,-,+,,41,"		strbuf_setlen(pair[0], pair[0]->len - 1);"
type_conversion,config.c,648,-,+,,32,"		strbuf_init(&matched->value, 0);"
type_conversion,config.c,657,-,+,,28,		matched->value_is_null = 0;
type_conversion,config.c,659,-,+,,28,		matched->value_is_null = 1;
type_conversion,config.c,677,-,+,,12,		else if (*cur == '=') {
type_conversion,config.c,682,-,+,,8,			if (*cur == '\'') {
type_conversion,config.c,685,-,+,,19,		*section_tail = '\0';
type_conversion,config.c,706,-,+,,19,"		fwrite(buf.buf, 1, buf.len, stdout);"
type_conversion,config.c,740,-,+,,15,		for (i = 0; i < count; i++) {
type_conversion,config.c,759,-,+,,28,		opts->source.use_stdin = 1;
type_conversion,config.c,806,-,+,,36,		opts->options.respect_includes = !opts->source.file;
type_conversion,config.c,808,-,+,,36,		opts->options.respect_includes = opts->respect_includes_opt;
type_conversion,config.c,822,-,+,,20,	size_t trim_len = 0;
type_conversion,config.c,852,-,+,,15,			trim_len = 0;
type_conversion,config.c,870,-,+,,29,	unsigned get_value_flags = 0;
type_conversion,config.c,912,-,+,,22,"				get_value_flags, flags);"
type_conversion,config.c,932,-,+,,34,	cs->subsection_case_sensitive = 0;
type_conversion,config.c,961,-,+,,22,"							     comment, flags);"
type_conversion,config.c,969,-,+,,34,	cs->subsection_case_sensitive = 1;
type_conversion,config.c,998,-,+,,6,	if (type == CONFIG_EVENT_WHITESPACE &&
type_conversion,config.c,999,-,+,,6,	    data->previous_type == type)
type_conversion,config.c,1002,-,+,,11,	offset = cs->do_ftell(cs);
type_conversion,config.c,1004,-,+,,19,"							     NULL, flags);"
type_conversion,config.c,1008,-,+,,6,	if (type != CONFIG_EVENT_EOF)
type_conversion,config.c,1011,-,+,,6,	if (data->previous_type != CONFIG_EVENT_EOF &&
type_conversion,config.c,1038,-,+,,19,	size_t baselen = 0;
type_conversion,config.c,1048,-,+,,21,"		CONFIG_EVENT_EOF, 0, opts"
type_conversion,config.c,1059,-,+,,14,			if (c == (*bomptr & 0377)) {
type_conversion,config.c,1100,-,+,,48,"			if (get_base_var(cs, var) < 0 || var->len < 1)"
type_conversion,config.c,1146,-,+,,19,	unsigned flags = 0;
type_conversion,config.c,1185,-,+,,18,	if ((actions & (ACTION_GET_COLOR|ACTION_GET_COLORBOOL)) && display_opts.type) {
type_conversion,config.c,1192,-,+,,21,		case 1: actions = ACTION_GET; break;
type_conversion,config.c,1193,-,+,,21,		case 2: actions = ACTION_SET; break;
type_conversion,config.c,1194,-,+,,21,		case 3: actions = ACTION_SET_ALL; break;
type_conversion,config.c,1200,-,+,,19,	    !(actions == ACTION_LIST || actions == ACTION_GET_REGEXP)) {
type_conversion,config.c,1206,-,+,,4,		(ACTION_GET|ACTION_GET_ALL|ACTION_GET_REGEXP|ACTION_LIST))) {
type_conversion,config.c,1212,-,+,,48,	if (display_opts.default_value && !(actions & ACTION_GET)) {
type_conversion,config.c,1218,-,+,,19,	    !(actions & (ACTION_ADD|ACTION_SET|ACTION_SET_ALL|ACTION_REPLACE_ALL))) {
type_conversion,config.c,1229,-,+,,8,		case ACTION_GET:
type_conversion,config.c,1231,-,+,,8,		case ACTION_GET_ALL:
type_conversion,config.c,1233,-,+,,8,		case ACTION_GET_REGEXP:
type_conversion,config.c,1235,-,+,,8,		case ACTION_UNSET:
type_conversion,config.c,1237,-,+,,8,		case ACTION_UNSET_ALL:
type_conversion,config.c,1242,-,+,,8,		case ACTION_SET_ALL:
type_conversion,config.c,1244,-,+,,8,		case ACTION_REPLACE_ALL:
type_conversion,config.c,1263,-,+,,17,	if (actions & (ACTION_LIST | ACTION_GET_ALL | ACTION_GET_REGEXP | ACTION_GET_URLMATCH))
type_conversion,config.c,1266,-,+,,17,	if (actions == ACTION_LIST) {
type_conversion,config.c,1278,-,+,,22,	else if (actions == ACTION_EDIT) {
type_conversion,config.c,1281,-,+,,22,	else if (actions == ACTION_SET) {
type_conversion,config.c,1284,-,+,,7,		if (*string == '-') {
type_conversion,config.c,1290,-,+,,22,	else if (actions == ACTION_SET_ALL) {
type_conversion,config.c,1295,-,+,,15,		for (i = 0; i < ARRAY_SIZE(fsync_component_names); ++i) {
type_conversion,config.c,1298,-,+,,22,	else if (actions == ACTION_ADD) {
type_conversion,config.c,1303,-,+,,17,				negative |= n->component_bits;
type_conversion,config.c,1305,-,+,,17,				positive |= n->component_bits;
type_conversion,config.c,1307,-,+,,22,	else if (actions == ACTION_REPLACE_ALL) {
type_conversion,config.c,1315,-,+,,22,	else if (actions == ACTION_GET) {
type_conversion,config.c,1318,-,+,,5,"				0, flags);"
type_conversion,config.c,1320,-,+,,22,	else if (actions == ACTION_GET_ALL) {
type_conversion,config.c,1325,-,+,,22,	else if (actions == ACTION_GET_REGEXP) {
type_conversion,config.c,1331,-,+,,22,	else if (actions == ACTION_GET_URLMATCH) {
type_conversion,config.c,1335,-,+,,22,	else if (actions == ACTION_UNSET) {
type_conversion,config.c,1346,-,+,,22,	else if (actions == ACTION_UNSET_ALL) {
type_conversion,config.c,1353,-,+,,22,	else if (actions == ACTION_RENAME_SECTION) {
type_conversion,config.c,1365,-,+,,22,	else if (actions == ACTION_REMOVE_SECTION) {
type_conversion,config.c,1377,-,+,,22,	else if (actions == ACTION_GET_COLOR) {
type_conversion,config.c,1381,-,+,,22,	else if (actions == ACTION_GET_COLORBOOL) {
type_conversion,config.c,1418,-,+,,9,			     PARSE_OPT_SUBCOMMAND_OPTIONAL|PARSE_OPT_KEEP_ARGV0|PARSE_OPT_KEEP_UNKNOWN_OPT);
type_conversion,config.c,1421,-,+,,10,		       PARSE_OPT_SUBCOMMAND_OPTIONAL|PARSE_OPT_KEEP_UNKNOWN_OPT);
type_conversion,config.c,1473,-,+,,35,			if (abbrev < minimum_abbrev || abbrev > the_hash_algo->hexsz)
type_conversion,config.c,1512,-,+,,29,		packed_git_window_size /= pgsz_x2;
type_conversion,config.c,1513,-,+,,32,		if (packed_git_window_size < 1)
type_conversion,config.c,1514,-,+,,29,			packed_git_window_size = 1;
type_conversion,config.c,1515,-,+,,29,		packed_git_window_size *= pgsz_x2;
type_conversion,config.c,1873,-,+,,19,	top->total_len = 0;
type_conversion,config.c,1874,-,+,,27,"	strbuf_init(&top->value, 1024);"
type_conversion,config.c,1875,-,+,,25,"	strbuf_init(&top->var, 1024);"
type_conversion,config.c,1951,-,+,,18,	top.u.buf.pos = 0;
type_conversion,config.c,1978,-,+,,6,	if (type != OBJ_BLOB) {
type_conversion,config.c,2022,-,+,,40,"	if (access_or_warn(user_config, R_OK, 0) && xdg_config &&"
type_conversion,config.c,2023,-,+,,40,"	    !access_or_warn(xdg_config, R_OK, 0)) {"
type_conversion,config.c,2080,-,+,,48,			   opts->system_gently ? ACCESS_EACCES_OK : 0))
type_conversion,config.c,2096,-,+,,40,"	    !access_or_die(repo_config, R_OK, 0))"
type_conversion,config.c,2102,-,+,,44,"	    !access_or_die(worktree_config, R_OK, 0)) {"
type_conversion,config.c,2169,-,+,,14,	for (i = 0; i < list->nr; i++) {
type_conversion,config.c,2184,-,+,,32,	struct config_options opts = {0};
type_conversion,config.c,2188,-,+,,26,	opts.respect_includes = 1;
type_conversion,config.c,2218,-,+,,33,	struct config_options opts = { 0 };
type_conversion,config.c,2220,-,+,,26,	opts.respect_includes = 1;
type_conversion,config.c,2221,-,+,,21,	opts.ignore_repo = 1;
type_conversion,config.c,2222,-,+,,25,	opts.ignore_worktree = 1;
type_conversion,config.c,2223,-,+,,24,	opts.ignore_cmdline = 1;
type_conversion,config.c,2224,-,+,,23,	opts.system_gently = 1;
type_conversion,config.c,2283,-,+,,43,	l_item->value_index = e->value_list.nr - 1;
type_conversion,config.c,2306,-,+,,64,"	hashmap_init(&set->config_hash, config_set_element_cmp, NULL, 0);"
type_conversion,config.c,2308,-,+,,17,	set->list.nr = 0;
type_conversion,config.c,2309,-,+,,20,	set->list.alloc = 0;
type_conversion,config.c,2328,-,+,,17,	set->list.nr = 0;
type_conversion,config.c,2329,-,+,,20,	set->list.alloc = 0;
type_conversion,config.c,2362,-,+,,36,	item = values->items[values->nr - 1];
type_conversion,config.c,2509,-,+,,33,	struct config_options opts = { 0 };
type_conversion,config.c,2511,-,+,,26,	opts.respect_includes = 1;
type_conversion,config.c,2656,-,+,,23,"		.respect_includes = 1,"
type_conversion,config.c,2657,-,+,,18,"		.ignore_repo = 1,"
type_conversion,config.c,2658,-,+,,22,"		.ignore_worktree = 1,"
type_conversion,config.c,2659,-,+,,20,"		.system_gently = 1,"
type_conversion,config.c,2770,-,+,,26,		*expiry = now - days * scale;
type_conversion,config.c,2810,-,+,,48,"	val = git_env_ulong(""GIT_TEST_INDEX_THREADS"", 0);"
type_conversion,config.c,2852,-,+,,39,	kv_info = values->items[values->nr - 1].util;
type_conversion,config.c,2903,-,+,,51,"		(value && !regexec(store->value_pattern, value, 0, NULL, 0));"
type_conversion,config.c,2916,-,+,,6,	if (type == CONFIG_EVENT_SECTION) {
type_conversion,config.c,2919,-,+,,21,		if (cs->var.len < 2 || cs->var.buf[cs->var.len - 1] != '.')
type_conversion,config.c,2929,-,+,,4,"			store->parsed[store->parsed_nr].is_keys_section =
			cs->var.len - 1 == store->baselen &&
			!cmpfn(cs->var.buf, store->key, store->baselen);"
type_conversion,config.c,2930,-,+,,18,			cs->var.len - 1 == store->baselen &&
type_conversion,config.c,2933,-,+,,26,			store->section_seen = 1;
type_conversion,config.c,2952,-,+,,26,			if (store->seen_nr == 1 && store->multi_replace == 0) {
type_conversion,config.c,2969,-,+,,25,		store->section_seen = 1;
type_conversion,config.c,2973,-,+,,22,			store->key_seen = 1;
type_conversion,config.c,2998,-,+,,24,		for (i = dot - key + 1; i < store->baselen; i++) {
type_conversion,config.c,2999,-,+,,8,"			if (key[i] == '""' || key[i] == '\\')"
type_conversion,config.c,3001,-,+,,22,"			strbuf_addch(&sb, key[i]);"
type_conversion,config.c,3041,-,+,,6,	if (value[0] == ' ')
type_conversion,config.c,3044,-,+,,7,		if (value[i] == ';' || value[i] == '#')
type_conversion,config.c,3046,-,+,,11,	if (i && value[i - 1] == ' ')
type_conversion,config.c,3052,-,+,,11,		switch (value[i]) {
type_conversion,config.c,3064,-,+,,22,"			strbuf_addch(&sb, value[i]);"
type_conversion,config.c,3100,-,+,,11,	for (i = store->seen[seen]; i > 0; i--) {
type_conversion,config.c,3103,-,+,,7,		if (type == CONFIG_EVENT_COMMENT)
type_conversion,config.c,3106,-,+,,7,		if (type == CONFIG_EVENT_ENTRY) {
type_conversion,config.c,3113,-,+,,7,		if (type == CONFIG_EVENT_SECTION) {
type_conversion,config.c,3126,-,+,,34,	for (i = store->seen[seen] + 1; i < store->parsed_nr; i++) {
type_conversion,config.c,3129,-,+,,7,		if (type == CONFIG_EVENT_COMMENT)
type_conversion,config.c,3131,-,+,,7,		if (type == CONFIG_EVENT_SECTION) {
type_conversion,config.c,3136,-,+,,7,		if (type == CONFIG_EVENT_ENTRY) {
type_conversion,config.c,3137,-,+,,8,			if (++seen < store->seen_nr &&
type_conversion,config.c,3138,-,+,,8,			    i == store->seen[seen])
type_conversion,config.c,3153,-,+,,6,	if (i < store->parsed_nr)
type_conversion,config.c,3156,-,+,,50,		*end_offset = store->parsed[store->parsed_nr - 1].end;
type_conversion,config.c,3162,-,+,,92,"	return git_config_set_multivar_in_file_gently(config_filename, key, value, NULL, comment, 0);"
type_conversion,config.c,3168,-,+,,69,"	git_config_set_multivar_in_file(config_filename, key, value, NULL, 0);"
type_conversion,config.c,3173,-,+,,58,"	return git_config_set_multivar_gently(key, value, NULL, 0);"
type_conversion,config.c,3183,-,+,,36,"					file, key, value, NULL, NULL, 0);"
type_conversion,config.c,3187,-,+,,62,"	return repo_config_set_multivar_gently(r, key, value, NULL, 0);"
type_conversion,config.c,3192,-,+,,44,"	git_config_set_multivar(key, value, NULL, 0);"
type_conversion,config.c,3220,-,+,,24,	if (leading_blanks && comment[leading_blanks] == '#')
type_conversion,config.c,3222,-,+,,11,	else if (comment[0] == '#')
type_conversion,config.c,3244,-,+,,25,	if (!leading_blanks || comment[leading_blanks] != '#')
type_conversion,config.c,3295,-,+,,64,	store.multi_replace = (flags & CONFIG_FLAGS_MULTI_REPLACE) != 0;
type_conversion,config.c,3329,-,+,,40,"		if (write_section(fd, key, &store) < 0 ||"
type_conversion,config.c,3330,-,+,,53,"		    write_pair(fd, key, value, comment, &store) < 0)"
type_conversion,config.c,3345,-,+,,8,			if (value_pattern[0] == '!') {
type_conversion,config.c,3362,-,+,,25,		store.parsed[0].end = 0;
type_conversion,config.c,3386,-,+,,25,		if ((store.seen_nr == 0 && value == NULL) ||
type_conversion,config.c,3387,-,+,,24,		    (store.seen_nr > 1 && !store.multi_replace)) {
type_conversion,config.c,3400,-,+,,26,"					MAP_PRIVATE, in_fd, 0);"
type_conversion,config.c,3413,-,+,,53,"		if (chmod(get_lock_file_path(&lock), st.st_mode & 07777) < 0) {"
type_conversion,config.c,3419,-,+,,24,		if (store.seen_nr == 0) {
type_conversion,config.c,3424,-,+,,8,					- !!store.parsed_nr;
type_conversion,config.c,3426,-,+,,20,			store.seen_nr = 1;
type_conversion,config.c,3429,-,+,,31,"		for (i = 0, copy_begin = 0; i < store.seen_nr; i++) {"
type_conversion,config.c,3431,-,+,,12,			int j = store.seen[i];
type_conversion,config.c,3437,-,+,,20,				if (copy_end > 0 && copy_end < contents_sz &&
type_conversion,config.c,3438,-,+,,29,				    contents[copy_end - 1] != '\n' &&
type_conversion,config.c,3439,-,+,,9,				    contents[copy_end] == '\n')
type_conversion,config.c,3453,-,+,,23,				while (copy_end > 0 ) {
type_conversion,config.c,3454,-,+,,35,					char c = contents[copy_end - 1];
type_conversion,config.c,3456,-,+,,24,					if (isspace(c) && c != '\n')
type_conversion,config.c,3463,-,+,,19,			if (copy_end > 0 && contents[copy_end-1] != '\n')
type_conversion,config.c,3469,-,+,,34,						  copy_end - copy_begin) < 0)
type_conversion,config.c,3472,-,+,,39,"				    write_str_in_full(fd, ""\n"") < 0)"
type_conversion,config.c,3481,-,+,,42,"				if (write_section(fd, key, &store) < 0)"
type_conversion,config.c,3484,-,+,,54,"			if (write_pair(fd, key, value, comment, &store) < 0)"
type_conversion,config.c,3491,-,+,,36,					  contents_sz - copy_begin) < 0)
type_conversion,config.c,3567,-,+,,13,"	size_t i = 0, j = 0;"
type_conversion,config.c,3569,-,+,,6,	if (buf[i] != '[')
type_conversion,config.c,3570,-,+,,10,		return 0;
type_conversion,config.c,3571,-,+,,24,	for (i = 1; buf[i] && buf[i] != ']'; i++) {
type_conversion,config.c,3574,-,+,,8,			if (name[j++] != '.')
type_conversion,config.c,3578,-,+,,8,"			if (buf[i] != '""')"
type_conversion,config.c,3582,-,+,,7,		if (buf[i] == '\\' && dot)
type_conversion,config.c,3584,-,+,,12,"		else if (buf[i] == '""' && dot) {"
type_conversion,config.c,3589,-,+,,7,		if (buf[i] != name[j++])
type_conversion,config.c,3592,-,+,,6,	if (buf[i] == ']' && name[j] == 0) {
type_conversion,config.c,3602,-,+,,9,	return 0;
type_conversion,config.c,3615,-,+,,18,	for (; *name && *name != '.'; name++)
type_conversion,config.c,3616,-,+,,7,		if (*name != '-' && !isalnum(*name))
type_conversion,config.c,3637,-,+,,21,	uint32_t line_nr = 0;
type_conversion,config.c,3668,-,+,,52,"	if (chmod(get_lock_file_path(&lock), st.st_mode & 07777) < 0) {"
type_conversion,config.c,3688,-,+,,12,		for (i = 0; buf.buf[i] && isspace(buf.buf[i]); i++)
type_conversion,config.c,3690,-,+,,7,		if (buf.buf[i] == '[') {
type_conversion,config.c,3701,-,+,,22,			if (copystr.len > 0) {
type_conversion,config.c,3702,-,+,,59,"				if (write_in_full(out_fd, copystr.buf, copystr.len) < 0) {"
type_conversion,config.c,3710,-,+,,17,			if (offset > 0) {
type_conversion,config.c,3718,-,+,,52,"					if (write_section(out_fd, new_name, &store) < 0) {"
type_conversion,config.c,3728,-,+,,27,					if (strlen(output) > 0) {
type_conversion,config.c,3736,-,+,,19,						output[0] = '\t';
type_conversion,config.c,3749,-,+,,36,		if (!is_section && copystr.len > 0) {
type_conversion,config.c,3753,-,+,,47,"		if (write_in_full(out_fd, output, length) < 0) {"
type_conversion,config.c,3764,-,+,,20,	if (copystr.len > 0) {
type_conversion,config.c,3765,-,+,,57,"		if (write_in_full(out_fd, copystr.buf, copystr.len) < 0) {"
type_conversion,config.c,3832,-,+,,42,"	if (!skip_prefix(var, section, &var) || *var != '.')"
type_conversion,config.c,3847,-,+,,22,			*subsection_len = 0;
type_conversion,config.c,3854,-,+,,21,		*subsection_len = dot - *subsection;
type_conversion,connect.c,55,-,+,,30,"	return check_ref(ref->name, flags);"
type_conversion,connect.c,79,-,+,,14,	for (i = 0; i < server_capabilities_v2.nr; i++) {
type_conversion,connect.c,82,-,+,,17,		    (!*out || *out == '='))
type_conversion,connect.c,98,-,+,,14,	for (i = 0; i < server_capabilities_v2.nr; i++) {
type_conversion,connect.c,101,-,+,,8,		    (*out == '=')) {
type_conversion,connect.c,114,-,+,,14,	for (i = 0; i < server_capabilities_v2.nr; i++) {
type_conversion,connect.c,117,-,+,,17,		    (!*out || *(out++) == '=')) {
type_conversion,connect.c,133,-,+,,9,	while (packet_reader_read(reader) == PACKET_READ_NORMAL)
type_conversion,connect.c,136,-,+,,6,	if (reader->status != PACKET_READ_FLUSH)
type_conversion,connect.c,188,-,+,,22,"	sym = xmemdupz(val, len);"
type_conversion,connect.c,193,-,+,,16,	*(target++) = '\0';
type_conversion,connect.c,209,-,+,,18,	size_t offset = 0;
type_conversion,connect.c,218,-,+,,39,"		parse_one_symref_info(&symref, val, len);"
type_conversion,connect.c,237,-,+,,21,	int nul_location = strlen(line);
type_conversion,connect.c,263,-,+,,6,	if (*name != ' ')
type_conversion,connect.c,273,-,+,,22,	if (strlen(line) != len)
type_conversion,connect.c,288,-,+,,6,	if (*name != ' ')
type_conversion,connect.c,346,-,+,,9,	while (state != EXPECTING_DONE) {
type_conversion,connect.c,420,-,+,,11,			for (; i < line_sections.nr; i++) {
type_conversion,connect.c,443,-,+,,9,	for (; i < line_sections.nr; i++) {
type_conversion,connect.c,481,-,+,,6,	if (packet_reader_read(reader) != PACKET_READ_RESPONSE_END)
type_conversion,connect.c,521,-,+,,9,	while (packet_reader_read(reader) == PACKET_READ_NORMAL) {
type_conversion,connect.c,532,-,+,,6,	if (reader->status != PACKET_READ_FLUSH)
type_conversion,connect.c,567,-,+,,15,		for (i = 0; i < server_options->nr; i++)
type_conversion,connect.c,579,-,+,,30,	for (i = 0; ref_prefixes && i < ref_prefixes->nr; i++) {
type_conversion,connect.c,586,-,+,,9,	while (packet_reader_read(reader) == PACKET_READ_NORMAL) {
type_conversion,connect.c,591,-,+,,6,	if (reader->status != PACKET_READ_FLUSH)
type_conversion,connect.c,620,-,+,,14,					*lenp = 0;
type_conversion,connect.c,622,-,+,,16,					*offset = found + len - orig_start;
type_conversion,connect.c,626,-,+,,13,			else if (*value == '=') {
type_conversion,connect.c,634,-,+,,16,					*offset = value + end - orig_start;
type_conversion,connect.c,649,-,+,,18,	size_t offset = 0;
type_conversion,connect.c,743,-,+,,6,	if (start[0] == '[') {
type_conversion,connect.c,747,-,+,,12,				*end = 0;
type_conversion,connect.c,748,-,+,,31,"				memmove(start, start + 1, end - start);"
type_conversion,connect.c,768,-,+,,27,		if (end != colon + 1 && *end == '\0' && 0 <= portnr && portnr < 65536) {
type_conversion,connect.c,769,-,+,,13,			*colon = 0;
type_conversion,connect.c,772,-,+,,13,			*colon = 0;
type_conversion,connect.c,781,-,+,,56,"	if (setsockopt(sockfd, SOL_SOCKET, SO_KEEPALIVE, &ka, sizeof(ka)) < 0)"
type_conversion,connect.c,790,-,+,,53,"	if (getnameinfo(ai->ai_addr, ai->ai_addrlen, addr, sizeof(addr), NULL, 0,"
type_conversion,connect.c,814,-,+,,6,	if (flags & CONNECT_IPV4)
type_conversion,connect.c,816,-,+,,11,	else if (flags & CONNECT_IPV6)
type_conversion,connect.c,821,-,+,,6,	if (flags & CONNECT_VERBOSE)
type_conversion,connect.c,828,-,+,,6,	if (flags & CONNECT_VERBOSE)
type_conversion,connect.c,844,-,+,,7,		if (flags & CONNECT_VERBOSE)
type_conversion,connect.c,856,-,+,,6,	if (flags & CONNECT_VERBOSE)
type_conversion,connect.c,975,-,+,,19,		int rhost_len = strlen(rhost_name);
type_conversion,connect.c,990,-,+,,15,			matchlen = strlen(value);
type_conversion,connect.c,992,-,+,,14,			hostlen = strlen(for_pos + 5);
type_conversion,connect.c,997,-,+,,8,					  hostlen) &&
type_conversion,connect.c,999,-,+,,7,				  rhost_name[rhost_len - hostlen -1] == '.'))
type_conversion,connect.c,1000,-,+,,16,				matchlen = for_pos - value;
type_conversion,connect.c,1007,-,+,,31,"			    !memcmp(value, ""none"", 4))"
type_conversion,connect.c,1009,-,+,,40,"			git_proxy_command = xmemdupz(value, matchlen);"
type_conversion,connect.c,1057,-,+,,23,		if (end != p + 1 && *end == '\0' && 0 <= port && port < 65536) {
type_conversion,connect.c,1058,-,+,,9,			*p = '\0';
type_conversion,connect.c,1086,-,+,,11,		*host = '\0';
type_conversion,connect.c,1103,-,+,,6,	if (protocol == PROTO_LOCAL)
type_conversion,connect.c,1105,-,+,,11,	else if (protocol == PROTO_FILE && *host != '/' &&
type_conversion,connect.c,1109,-,+,,11,	else if (protocol == PROTO_FILE && has_dos_drive_prefix(end))
type_conversion,connect.c,1125,-,+,,6,	if (protocol == PROTO_GIT || protocol == PROTO_SSH) {
type_conversion,connect.c,1126,-,+,,7,		if (path[1] == '~')
type_conversion,connect.c,1131,-,+,,9,	*end = '\0';
type_conversion,connect.c,1191,-,+,,6,	if (ssh_variant != VARIANT_AUTO)
type_conversion,connect.c,1278,-,+,,6,	if (version > 0) {
type_conversion,connect.c,1299,-,+,,6,	if (variant == VARIANT_SSH &&
type_conversion,connect.c,1300,-,+,,6,	    version > 0) {
type_conversion,connect.c,1307,-,+,,6,	if (flags & CONNECT_IPV4) {
type_conversion,connect.c,1319,-,+,,13,	} else if (flags & CONNECT_IPV6) {
type_conversion,connect.c,1333,-,+,,6,	if (variant == VARIANT_TORTOISEPLINK)
type_conversion,connect.c,1375,-,+,,21,		conn->use_shell = 0;
type_conversion,connect.c,1383,-,+,,6,	if (variant == VARIANT_AUTO) {
type_conversion,connect.c,1386,-,+,,22,		detect.use_shell = conn->use_shell;
type_conversion,connect.c,1387,-,+,,59,		detect.no_stdin = detect.no_stdout = detect.no_stderr = 1;
type_conversion,connect.c,1430,-,+,,6,"	if (version == protocol_v2 && strcmp(""git-upload-pack"", name))"
type_conversion,connect.c,1439,-,+,,7,	if ((flags & CONNECT_DIAG_URL) && (protocol != PROTO_SSH)) {
type_conversion,connect.c,1445,-,+,,13,	} else if (protocol == PROTO_GIT) {
type_conversion,connect.c,1466,-,+,,21,		conn->use_shell = 1;
type_conversion,connect.c,1468,-,+,,7,		if (protocol == PROTO_SSH) {
type_conversion,connect.c,1477,-,+,,8,			if (flags & CONNECT_DIAG_URL) {
type_conversion,connect.c,1495,-,+,,8,			if (version > 0) {
type_conversion,connected.c,48,-,+,,38,	    transport->pack_lockfiles.nr == 1 &&
type_conversion,connected.c,117,-,+,,21,	rev_list.git_cmd = 1;
type_conversion,connected.c,121,-,+,,23,	rev_list.no_stdout = 1;
type_conversion,connected.c,125,-,+,,24,		rev_list.no_stderr = opt->quiet;
type_conversion,convert.c,48,-,+,,11,	for (i = 0; i < size; i++) {
type_conversion,convert.c,49,-,+,,21,		unsigned char c = buf[i];
type_conversion,convert.c,50,-,+,,7,		if (c == '\r') {
type_conversion,convert.c,51,-,+,,10,			if (i+1 < size && buf[i+1] == '\n') {
type_conversion,convert.c,58,-,+,,7,		if (c == '\n') {
type_conversion,convert.c,62,-,+,,7,		if (c == 127)
type_conversion,convert.c,65,-,+,,12,		else if (c < 32) {
type_conversion,convert.c,66,-,+,,12,			switch (c) {
type_conversion,convert.c,83,-,+,,14,	if (size >= 1 && buf[size-1] == '\032')
type_conversion,convert.c,107,-,+,,10,		return 0;
type_conversion,convert.c,116,-,+,,9,	return ret;
type_conversion,convert.c,152,-,+,,34,"	if (strbuf_read_file(&sb, path, 0) >= 0)"
type_conversion,convert.c,160,-,+,,6,	if (auto_crlf == AUTO_CRLF_TRUE)
type_conversion,convert.c,162,-,+,,11,	else if (auto_crlf == AUTO_CRLF_INPUT)
type_conversion,convert.c,164,-,+,,6,	if (core_eol == EOL_CRLF)
type_conversion,convert.c,166,-,+,,6,	if (core_eol == EOL_UNSET && EOL_NATIVE == EOL_CRLF)
type_conversion,convert.c,247,-,+,,6,	if (output_eol(crlf_action) != EOL_CRLF)
type_conversion,convert.c,253,-,+,,6,	if (crlf_action == CRLF_AUTO || crlf_action == CRLF_AUTO_INPUT || crlf_action == CRLF_AUTO_CRLF) {
type_conversion,convert.c,290,-,+,,23,"			int stripped_len = strlen(stripped) - strlen(""BE"");"
type_conversion,convert.c,326,-,+,,14,	for (i = 0; i < len && buf; ++i) {
type_conversion,convert.c,330,-,+,,4,"			(unsigned char) buf[i],"
type_conversion,convert.c,331,-,+,,5,"			(buf[i] > 32 && buf[i] < 127 ? buf[i] : ' '),"
type_conversion,convert.c,332,-,+,,18,			((i+1) % 8 && (i+1) < len ? ' ' : '\n')
type_conversion,convert.c,335,-,+,,32,"	strbuf_addchars(&trace, '\n', 1);"
type_conversion,convert.c,354,-,+,,8,	len = strlen(check_roundtrip_encoding);
type_conversion,convert.c,362,-,+,,28,"				(isspace(found[-1]) || found[-1] == ',')"
type_conversion,convert.c,372,-,+,,26,"				(isspace(next[0]) || next[0] == ',')"
type_conversion,convert.c,466,-,+,,45,"	strbuf_attach(buf, dst, dst_len, dst_len + 1);"
type_conversion,convert.c,491,-,+,,45,"	strbuf_attach(buf, dst, dst_len, dst_len + 1);"
type_conversion,convert.c,504,-,+,,6,	if (crlf_action == CRLF_BINARY ||
type_conversion,convert.c,519,-,+,,6,	if (crlf_action == CRLF_AUTO || crlf_action == CRLF_AUTO_INPUT || crlf_action == CRLF_AUTO_CRLF) {
type_conversion,convert.c,539,-,+,,21,			new_stats.crlf = 0;
type_conversion,convert.c,544,-,+,,23,			new_stats.lonelf = 0;
type_conversion,convert.c,562,-,+,,6,	if (crlf_action == CRLF_AUTO || crlf_action == CRLF_AUTO_INPUT || crlf_action == CRLF_AUTO_CRLF) {
type_conversion,convert.c,569,-,+,,22,			unsigned char c = *src++;
type_conversion,convert.c,570,-,+,,8,			if (c != '\r')
type_conversion,convert.c,571,-,+,,14,				*dst++ = c;
type_conversion,convert.c,575,-,+,,22,			unsigned char c = *src++;
type_conversion,convert.c,576,-,+,,11,			if (! (c == '\r' && (1 < len && *src == '\n')))
type_conversion,convert.c,577,-,+,,14,				*dst++ = c;
type_conversion,convert.c,580,-,+,,21,"	strbuf_setlen(buf, dst - buf->buf);"
type_conversion,convert.c,590,-,+,,14,	if (!len || output_eol(crlf_action) != EOL_CRLF)
type_conversion,convert.c,601,-,+,,25,"	strbuf_grow(buf, len + stats.lonelf);"
type_conversion,convert.c,606,-,+,,19,		if (nl > src && nl[-1] == '\r') {
type_conversion,convert.c,607,-,+,,25,"			strbuf_add(buf, src, nl + 1 - src);"
type_conversion,convert.c,609,-,+,,25,"			strbuf_add(buf, src, nl - src);"
type_conversion,convert.c,612,-,+,,10,		len -= nl + 1 - src;
type_conversion,convert.c,653,-,+,,28,	child_process.use_shell = 1;
type_conversion,convert.c,667,-,+,,38,"					   params->src, params->size) < 0);"
type_conversion,convert.c,720,-,+,,36,"	if (strbuf_read(&nbuf, async.out, 0) < 0) {"
type_conversion,convert.c,756,-,+,,11,"		{ NULL, 0 }"
type_conversion,convert.c,804,-,+,,56,"		hashmap_init(&subprocess_map, cmd2process_cmp, NULL, 0);"
type_conversion,convert.c,814,-,+,,35,		entry->supported_capabilities = 0;
type_conversion,convert.c,869,-,+,,13,	    dco && dco->state == CE_CAN_DELAY) {
type_conversion,convert.c,905,-,+,,36,						PACKET_READ_GENTLE_ON_EOF) < 0;
type_conversion,convert.c,974,-,+,,46,"		handle_filter_error(&filter_status, entry, 0);"
type_conversion,convert.c,1077,-,+,,7,		if (ch != '$')
type_conversion,convert.c,1079,-,+,,14,		if (size < 3)
type_conversion,convert.c,1081,-,+,,24,"		if (memcmp(""Id"", cp, 2))"
type_conversion,convert.c,1085,-,+,,11,		size -= 3;
type_conversion,convert.c,1086,-,+,,7,		if (ch == '$')
type_conversion,convert.c,1088,-,+,,7,		if (ch != ':')
type_conversion,convert.c,1097,-,+,,8,			if (ch == '$') {
type_conversion,convert.c,1101,-,+,,8,			if (ch == '\n')
type_conversion,convert.c,1127,-,+,,21,"		memmove(dst, src, dollar + 1 - src);"
type_conversion,convert.c,1129,-,+,,10,		len -= dollar + 1 - src;
type_conversion,convert.c,1132,-,+,,13,"		if (len > 3 && !memcmp(src, ""Id:"", 3)) {"
type_conversion,convert.c,1133,-,+,,40,"			dollar = memchr(src + 3, '$', len - 3);"
type_conversion,convert.c,1136,-,+,,45,"			if (memchr(src + 3, '\n', dollar - src - 3)) {"
type_conversion,convert.c,1141,-,+,,23,"			memcpy(dst, ""Id$"", 3);"
type_conversion,convert.c,1143,-,+,,11,			len -= dollar + 1 - src;
type_conversion,convert.c,1148,-,+,,21,"	strbuf_setlen(buf, dst + len - buf->buf);"
type_conversion,convert.c,1171,-,+,,25,"	strbuf_grow(buf, len + cnt * (the_hash_algo->hexsz + 3));"
type_conversion,convert.c,1177,-,+,,24,"		strbuf_add(buf, src, dollar + 1 - src);"
type_conversion,convert.c,1178,-,+,,10,		len -= dollar + 1 - src;
type_conversion,convert.c,1182,-,+,,13,"		if (len < 3 || memcmp(""Id"", src, 2))"
type_conversion,convert.c,1186,-,+,,7,		if (src[2] == '$') {
type_conversion,convert.c,1188,-,+,,11,			len -= 3;
type_conversion,convert.c,1189,-,+,,14,		} else if (src[2] == ':') {
type_conversion,convert.c,1197,-,+,,40,"			dollar = memchr(src + 3, '$', len - 3);"
type_conversion,convert.c,1203,-,+,,45,"			if (memchr(src + 3, '\n', dollar - src - 3)) {"
type_conversion,convert.c,1208,-,+,,46,"			spc = memchr(src + 4, ' ', dollar - src - 4);"
type_conversion,convert.c,1217,-,+,,11,			len -= dollar + 1 - src;
type_conversion,convert.c,1321,-,+,,6,	if (ca->crlf_action == CRLF_UNDEFINED)
type_conversion,convert.c,1325,-,+,,6,	if (ca->crlf_action != CRLF_BINARY) {
type_conversion,convert.c,1327,-,+,,7,		if (ca->crlf_action == CRLF_AUTO && eol_attr == EOL_LF)
type_conversion,convert.c,1329,-,+,,12,		else if (ca->crlf_action == CRLF_AUTO && eol_attr == EOL_CRLF)
type_conversion,convert.c,1331,-,+,,12,		else if (eol_attr == EOL_LF)
type_conversion,convert.c,1333,-,+,,12,		else if (eol_attr == EOL_CRLF)
type_conversion,convert.c,1340,-,+,,6,	if (ca->crlf_action == CRLF_TEXT)
type_conversion,convert.c,1342,-,+,,6,	if (ca->crlf_action == CRLF_UNDEFINED && auto_crlf == AUTO_CRLF_FALSE)
type_conversion,convert.c,1344,-,+,,6,	if (ca->crlf_action == CRLF_UNDEFINED && auto_crlf == AUTO_CRLF_TRUE)
type_conversion,convert.c,1346,-,+,,6,	if (ca->crlf_action == CRLF_UNDEFINED && auto_crlf == AUTO_CRLF_INPUT)
type_conversion,convert.c,1383,-,+,,34,"	return apply_filter(path, NULL, 0, -1, NULL, ca.drv, CAP_CLEAN, NULL, NULL);"
type_conversion,convert.c,1455,-,+,,32,"	if (!apply_filter(path, NULL, 0, fd, dst, ca.drv, CAP_CLEAN, NULL, NULL))"
type_conversion,convert.c,1612,-,+,,20,"	size_t count, o = 0;"
type_conversion,convert.c,1620,-,+,,31,	if (lf_to_crlf->has_held && (lf_to_crlf->held != '\r' || !input)) {
type_conversion,convert.c,1622,-,+,,26,		lf_to_crlf->has_held = 0;
type_conversion,convert.c,1638,-,+,,27,			lf_to_crlf->has_held = 0;
type_conversion,convert.c,1641,-,+,,12,		for (i = 0; o < *osize_p && i < count; i++) {
type_conversion,convert.c,1644,-,+,,8,			if (ch == '\n') {
type_conversion,convert.c,1645,-,+,,19,				output[o++] = '\r';
type_conversion,convert.c,1652,-,+,,19,				output[o++] = '\r';
type_conversion,convert.c,1662,-,+,,28,				lf_to_crlf->has_held = 1;
type_conversion,convert.c,1667,-,+,,8,			if (ch == '\r') {
type_conversion,convert.c,1680,-,+,,27,			lf_to_crlf->has_held = 1;
type_conversion,convert.c,1681,-,+,,23,			lf_to_crlf->held = '\r';
type_conversion,convert.c,1699,-,+,,49,"	struct lf_to_crlf_filter *lf_to_crlf = xcalloc(1, sizeof(*lf_to_crlf));"
type_conversion,convert.c,1722,-,+,,18,	size_t filled = 0;
type_conversion,convert.c,1734,-,+,,14,			to_feed = cas->end - cas->ptr;
type_conversion,convert.c,1739,-,+,,16,			cas->ptr += (cas->end - cas->ptr) - to_feed;
type_conversion,convert.c,1745,-,+,,32,		to_feed = input ? *isize_p : 0;
type_conversion,convert.c,1753,-,+,,14,		cas->end = sizeof(cas->buf) - remaining;
type_conversion,convert.c,1766,-,+,,13,		to_feed = 0;
type_conversion,convert.c,1830,-,+,,26,		if (isspace(str[i]) && str[i+1] != '$')
type_conversion,convert.c,1844,-,+,,31,"		strbuf_remove(&ident->left, 0, to_drain);"
type_conversion,convert.c,1863,-,+,,35,"			strbuf_add(&ident->left, head, ident->state);"
type_conversion,convert.c,1883,-,+,,8,		ch = *(input++);
type_conversion,convert.c,1895,-,+,,48,"				strbuf_setlen(&ident->left, sizeof(head) - 1);"
type_conversion,convert.c,1902,-,+,,7,		if (ident->state < sizeof(head) &&
type_conversion,convert.c,1903,-,+,,7,		    head[ident->state] == ch) {
type_conversion,convert.c,1909,-,+,,35,"			strbuf_add(&ident->left, head, ident->state);"
type_conversion,convert.c,1910,-,+,,7,		if (ident->state == sizeof(head) - 1) {
type_conversion,convert.c,1951,-,+,,28,"	strbuf_init(&ident->left, 0);"
type_conversion,convert.c,1970,-,+,,6,	if (classify_conv_attrs(ca) != CA_CLASS_STREAMABLE)
type_conversion,convert.c,1976,-,+,,6,	if (output_eol(ca->crlf_action) == EOL_CRLF)
type_conversion,convert.c,2039,-,+,,6,	if (ca->crlf_action == CRLF_AUTO || ca->crlf_action == CRLF_AUTO_CRLF)
type_conversion,convert.h,142,-,+,,44,"	return convert_to_git(istate, path, NULL, 0, NULL, 0);"
type_conversion,copy.c,15,-,+,,13,		if (len < 0)
type_conversion,copy.c,17,-,+,,34,"		if (write_in_full(ofd, buffer, len) < 0)"
type_conversion,copy.c,79,-,+,,37,"	if (!strbuf_readlink(&buf1, path1, 0) &&"
type_conversion,copy.c,80,-,+,,37,"	    !strbuf_readlink(&buf2, path2, 0))"
type_conversion,copy.c,107,-,+,,25,		ret = !(st1.st_mode & 0111) == !(st2.st_mode & 0111);
type_conversion,copy.c,116,-,+,,14,		if (len1 < 0 || len2 < 0 || len1 != len2)
type_conversion,copy.c,121,-,+,,30,"			ret = !memcmp(buf1, buf2, len1);"
type_conversion,count-objects.c,28,-,+,,7,	case 0:
type_conversion,count-objects.c,88,-,+,,41,"	quote_c_style(odb->path, NULL, stdout, 0);"
type_conversion,count-objects.c,124,-,+,,28,		unsigned long num_pack = 0;
type_conversion,count-objects.c,125,-,+,,21,		off_t size_pack = 0;
type_conversion,count-objects.c,135,-,+,,14,			packed += p->num_objects;
type_conversion,count-objects.c,136,-,+,,17,			size_pack += p->pack_size + p->index_size;
type_conversion,count-objects.c,146,-,+,,38,				    (unsigned long)(loose_size / 1024));
type_conversion,count-objects.c,148,-,+,,37,				    (unsigned long)(size_pack / 1024));
type_conversion,count-objects.c,150,-,+,,40,				    (unsigned long)(size_garbage / 1024));
type_conversion,count-objects.c,171,-,+,,38,				    (unsigned long)(loose_size / 1024));
type_conversion,credential-cache--daemon.c,32,-,+,,31,	e->expiration = time(NULL) + timeout;
type_conversion,credential-cache--daemon.c,54,-,+,,20,			e->expiration = 0;
type_conversion,credential-cache--daemon.c,71,-,+,,32,		wait_for_entry_until = now + 30;
type_conversion,credential-cache--daemon.c,84,-,+,,33,			wait_for_entry_until = now + 30;
type_conversion,credential-cache--daemon.c,95,-,+,,11,			return 0;
type_conversion,credential-cache--daemon.c,136,-,+,,44,			e->item.capa_authtype.request_initial = 1;
type_conversion,credential-cache--daemon.c,137,-,+,,43,			e->item.capa_authtype.request_helper = 1;
type_conversion,credential-cache--daemon.c,199,-,+,,17,"	if (poll(&pfd, 1, 1000 * wakeup) < 0) {"
type_conversion,credential-cache--daemon.c,205,-,+,,6,	if (pfd.revents & POLLIN) {
type_conversion,credential-cache--daemon.c,264,-,+,,20,		if (st.st_mode & 077)
type_conversion,credential-cache--daemon.c,273,-,+,,7,		if (safe_create_leading_directories_const(dir) < 0)
type_conversion,credential-cache--daemon.c,275,-,+,,18,"		if (mkdir(dir, 0700) < 0)"
type_conversion,credential-cache.c,51,-,+,,46,"	if (write_in_full(fd, out->buf, out->len) < 0)"
type_conversion,credential-cache.c,59,-,+,,7,"		r = read_in_full(fd, in, sizeof(in));"
type_conversion,credential-cache.c,64,-,+,,23,"		write_or_die(1, in, r);"
type_conversion,credential-cache.c,80,-,+,,19,	daemon.git_cmd = 1;
type_conversion,credential-cache.c,81,-,+,,20,	daemon.no_stdin = 1;
type_conversion,credential-cache.c,86,-,+,,6,"	r = read_in_full(daemon.out, buf, sizeof(buf));"
type_conversion,credential-cache.c,89,-,+,,36,"	if (r != 3 || memcmp(buf, ""ok\n"", 3))"
type_conversion,credential-cache.c,102,-,+,,28,"		if (strbuf_read(&buf, 0, 0) < 0)"
type_conversion,credential-cache.c,134,-,+,,36,	c.capa_authtype.request_initial = 1;
type_conversion,credential-store.c,69,-,+,,65,"	if (hold_lock_file_for_update_timeout(&credential_lock, fn, 0, timeout_ms) < 0)"
type_conversion,credential-store.c,81,-,+,,3,		ch == '-' || ch == '_' || ch == '.' || ch == '~';
type_conversion,credential-store.c,88,-,+,,10,	switch (ch) {
type_conversion,credential-store.c,189,-,+,,8,	umask(077);
type_conversion,credential.c,56,-,+,,27,		capa->request_initial = 1;
type_conversion,credential.c,59,-,+,,26,		capa->request_helper = 1;
type_conversion,credential.c,62,-,+,,20,		capa->response = 1;
type_conversion,credential.c,128,-,+,,22,"		c->use_http_path = git_config_bool(var, value);"
type_conversion,credential.c,196,-,+,,18,	c->configured = 1;
type_conversion,credential.c,273,-,+,,10,		return capa->request_initial;
type_conversion,credential.c,298,-,+,,14,		*value++ = '\0';
type_conversion,credential.c,303,-,+,,29,			c->username_from_proto = 1;
type_conversion,credential.c,320,-,+,,19,"			c->ephemeral = !!git_config_bool(""ephemeral"", value);"
type_conversion,credential.c,331,-,+,,20,"			c->multistage = !!git_config_bool(""continue"", value);"
type_conversion,credential.c,335,-,+,,34,			if (c->password_expiry_utc == 0 || errno == ERANGE)
type_conversion,credential.c,346,-,+,,14,"			c->quit = !!git_config_bool(""quit"", value);"
type_conversion,credential.c,396,-,+,,18,	for (size_t i = 0; i < c->wwwauth_headers.nr; i++)
type_conversion,credential.c,401,-,+,,19,		for (size_t i = 0; i < c->state_headers_to_send.nr; i++)
type_conversion,credential.c,414,-,+,,21,	helper.use_shell = 1;
type_conversion,credential.c,419,-,+,,22,		helper.no_stdout = 1;
type_conversion,credential.c,452,-,+,,6,	if (helper[0] == '!')
type_conversion,credential.c,474,-,+,,18,	c->multistage = 0;
type_conversion,credential.c,480,-,+,,14,	for (i = 0; i < c->helpers.nr; i++) {
type_conversion,credential.c,515,-,+,,14,	for (i = 0; i < c->helpers.nr; i++)
type_conversion,credential.c,517,-,+,,16,	c->approved = 1;
type_conversion,credential.c,528,-,+,,14,	for (i = 0; i < c->helpers.nr; i++)
type_conversion,credential.c,536,-,+,,16,	c->approved = 0;
type_conversion,credential.c,613,-,+,,36,"		c->username = url_decode_mem(cp, at - cp);"
type_conversion,credential.c,615,-,+,,29,			c->username_from_proto = 1;
type_conversion,credential.c,619,-,+,,36,"		c->username = url_decode_mem(cp, colon - cp);"
type_conversion,credential.c,621,-,+,,29,			c->username_from_proto = 1;
type_conversion,credential.c,622,-,+,,43,"		c->password = url_decode_mem(colon + 1, at - (colon + 1));"
type_conversion,credential.c,626,-,+,,37,	if (proto_end && proto_end - url > 0)
type_conversion,credential.c,627,-,+,,31,"		c->protocol = xmemdupz(url, proto_end - url);"
type_conversion,credential.c,628,-,+,,43,	if (!allow_partial_url || slash - host > 0)
type_conversion,credential.c,629,-,+,,34,"		c->host = url_decode_mem(host, slash - host);"
type_conversion,credential.c,631,-,+,,9,	while (*slash == '/')
type_conversion,credential.c,637,-,+,,25,		while (p > c->path && *p == '/')
type_conversion,credential.c,638,-,+,,11,			*p-- = '\0';
type_conversion,csum-file.c,19,-,+,,59,"	ssize_t ret = read_in_full(f->check_fd, f->check_buffer, count);"
type_conversion,csum-file.c,21,-,+,,12,	if (ret < 0)
type_conversion,csum-file.c,23,-,+,,13,	if (ret != count)
type_conversion,csum-file.c,25,-,+,,35,"	if (memcmp(buf, f->check_buffer, count))"
type_conversion,csum-file.c,34,-,+,,32,"	if (write_in_full(f->fd, buf, count) < 0) {"
type_conversion,csum-file.c,40,-,+,,14,	f->total += count;
type_conversion,csum-file.c,41,-,+,,28,"	display_throughput(f->tp, f->total);"
type_conversion,csum-file.c,50,-,+,,49,"			the_hash_algo->update_fn(&f->ctx, f->buffer, offset);"
type_conversion,csum-file.c,52,-,+,,15,		f->offset = 0;
type_conversion,csum-file.c,89,-,+,,49,"		int cnt = read_in_full(f->check_fd, &discard, 1);"
type_conversion,csum-file.c,105,-,+,,35,		unsigned left = f->buffer_len - f->offset;
type_conversion,csum-file.c,109,-,+,,21,"			f->crc32 = crc32(f->crc32, buf, nr);"
type_conversion,csum-file.c,111,-,+,,7,		if (nr == f->buffer_len) {
type_conversion,csum-file.c,119,-,+,,44,"				the_hash_algo->update_fn(&f->ctx, buf, nr);"
type_conversion,csum-file.c,126,-,+,,39,"			memcpy(f->buffer + f->offset, buf, nr);"
type_conversion,csum-file.c,159,-,+,,14,	f->offset = 0;
type_conversion,csum-file.c,160,-,+,,13,	f->total = 0;
type_conversion,csum-file.c,181,-,+,,41,"	return hashfd_internal(fd, name, NULL, 128 * 1024);"
type_conversion,csum-file.c,192,-,+,,39,"	return hashfd_internal(fd, name, tp, 8 * 1024);"
type_conversion,csum-file.c,211,-,+,,14,	f->offset = 0; /* hashflush() was called in checkpoint */
type_conversion,csum-file.c,217,-,+,,19,"	f->crc32 = crc32(0, NULL, 0);"
type_conversion,csum-file.h,64,-,+,,20,	return f->total + f->offset;
type_conversion,csum-file.h,69,-,+,,22,"	hashwrite(f, &data, sizeof(data));"
type_conversion,csum-file.h,75,-,+,,22,"	hashwrite(f, &data, sizeof(data));"
type_conversion,csum-file.h,81,-,+,,22,"	hashwrite(f, &data, sizeof(data));"
type_conversion,daemon.c,160,-,+,,6,	if (*dir == '~') {
type_conversion,daemon.c,170,-,+,,26,"			int namlen, restlen = strlen(dir);"
type_conversion,daemon.c,174,-,+,,13,			namlen = slash - dir;
type_conversion,daemon.c,177,-,+,,11,"			rlen = snprintf(rpath, sizeof(rpath), ""%.*s/%s%.*s"",
					namlen, dir, user_path, restlen, slash);"
type_conversion,daemon.c,190,-,+,,7,		if (*dir != '/') {
type_conversion,daemon.c,229,-,+,,7,		if (*dir != '/') {
type_conversion,daemon.c,234,-,+,,10,"		rlen = snprintf(rpath, sizeof(rpath), ""%s%s"", base_path, dir);"
type_conversion,daemon.c,259,-,+,,17,		int pathlen = strlen(path);
type_conversion,daemon.c,269,-,+,,14,			int len = strlen(*pp);
type_conversion,daemon.c,271,-,+,,27,"			    !memcmp(*pp, path, len) &&"
type_conversion,daemon.c,272,-,+,,9,			    (path[len] == '\0' ||
type_conversion,daemon.c,273,-,+,,27,			     (!strict_paths && path[len] == '/')))
type_conversion,daemon.c,322,-,+,,20,	child.use_shell = 1;
type_conversion,daemon.c,323,-,+,,19,	child.no_stdin = 1;
type_conversion,daemon.c,324,-,+,,20,	child.no_stderr = 1;
type_conversion,daemon.c,331,-,+,,35,"	if (strbuf_read(&buf, child.out, 0) < 0) {"
type_conversion,daemon.c,356,-,+,,10,		*eol = '\0';
type_conversion,daemon.c,440,-,+,,24,"		strbuf_setlen(&line, 0);"
type_conversion,daemon.c,450,-,+,,17,	cld->git_cmd = 1;
type_conversion,daemon.c,503,-,+,,14,	for (i = 0; i < ARRAY_SIZE(daemon_service); i++) {
type_conversion,daemon.c,515,-,+,,14,	for (i = 0; i < ARRAY_SIZE(daemon_service); i++) {
type_conversion,daemon.c,527,-,+,,6,	if (*hostport == '[') {
type_conversion,daemon.c,533,-,+,,10,		*end = '\0';
type_conversion,daemon.c,537,-,+,,12,		else if (end[1] == ':')
type_conversion,daemon.c,545,-,+,,13,			**port = '\0';
type_conversion,daemon.c,560,-,+,,18,		if (is_dir_sep(*in))
type_conversion,daemon.c,562,-,+,,7,		if (*in == '.' && (!out->len || out->buf[out->len - 1] == '.'))
type_conversion,daemon.c,564,-,+,,21,"		strbuf_addch(out, *in);"
type_conversion,daemon.c,567,-,+,,41,	while (out->len && out->buf[out->len - 1] == '.')
type_conversion,daemon.c,568,-,+,,33,"		strbuf_setlen(out, out->len - 1);"
type_conversion,daemon.c,594,-,+,,27,		hi->saw_extended_args = 1;
type_conversion,daemon.c,595,-,+,,40,"		if (strncasecmp(""host="", extra_args, 5) == 0) {"
type_conversion,daemon.c,597,-,+,,27,			vallen = strlen(val) + 1;
type_conversion,daemon.c,607,-,+,,32,				hi->hostname_lookup_done = 0;
type_conversion,daemon.c,630,-,+,,62,	for (; extra_args < end; extra_args += strlen(extra_args) + 1) {
type_conversion,daemon.c,643,-,+,,27,			if (git_protocol.len > 0)
type_conversion,daemon.c,649,-,+,,25,	if (git_protocol.len > 0) {
type_conversion,daemon.c,677,-,+,,16,"				  addrbuf, sizeof(addrbuf));"
type_conversion,daemon.c,710,-,+,,30,		hi->hostname_lookup_done = 1;
type_conversion,daemon.c,726,-,+,,56,"	if (setsockopt(sockfd, SOL_SOCKET, SO_KEEPALIVE, &ka, sizeof(ka)) < 0) {"
type_conversion,daemon.c,746,-,+,,41,"	pktlen = packet_read(0, packet_buffer, sizeof(packet_buffer), 0);"
type_conversion,daemon.c,747,-,+,,8,	alarm(0);
type_conversion,daemon.c,749,-,+,,8,	len = strlen(line);
type_conversion,daemon.c,750,-,+,,13,	if (len && line[len-1] == '\n')
type_conversion,daemon.c,751,-,+,,17,		line[len-1] = 0;
type_conversion,daemon.c,757,-,+,,14,	for (i = 0; i < ARRAY_SIZE(daemon_service); i++) {
type_conversion,daemon.c,763,-,+,,7,		    *arg++ == ' ') {
type_conversion,daemon.c,787,-,+,,6,	if (sa1->sa_family != sa2->sa_family)
type_conversion,daemon.c,788,-,+,,10,		return sa1->sa_family - sa2->sa_family;
type_conversion,daemon.c,789,-,+,,6,	if (sa1->sa_family == AF_INET)
type_conversion,daemon.c,794,-,+,,6,	if (sa1->sa_family == AF_INET6)
type_conversion,daemon.c,819,-,+,,34,"	memcpy(&newborn->address, addr, addrlen);"
type_conversion,daemon.c,874,-,+,,42,	if (max_connections && live_children >= max_connections) {
type_conversion,daemon.c,876,-,+,,9,		sleep(1);  /* give it some time to die */
type_conversion,daemon.c,878,-,+,,24,		if (live_children >= max_connections) {
type_conversion,daemon.c,885,-,+,,6,	if (addr->sa_family == AF_INET) {
type_conversion,daemon.c,888,-,+,,13,"		inet_ntop(addr->sa_family, &sin_addr->sin_addr, buf, sizeof(buf));"
type_conversion,daemon.c,893,-,+,,13,	} else if (addr->sa_family == AF_INET6) {
type_conversion,daemon.c,896,-,+,,51,"		inet_ntop(AF_INET6, &sin6_addr->sin6_addr, buf, sizeof(buf));"
type_conversion,daemon.c,930,-,+,,11,"			  &on, sizeof(on));"
type_conversion,daemon.c,1001,-,+,,13,"				   &on, sizeof(on));"
type_conversion,daemon.c,1030,-,+,,16,		if (flags >= 0)
type_conversion,daemon.c,1108,-,+,,15,		for (i = 0; i < listen_addr->nr; i++) {
type_conversion,daemon.c,1126,-,+,,14,	for (i = 0; i < socklist->nr; i++) {
type_conversion,daemon.c,1142,-,+,,11,				sleep(1);
type_conversion,daemon.c,1147,-,+,,15,		for (i = 0; i < socklist->nr; i++) {
type_conversion,daemon.c,1148,-,+,,8,			if (pfd[i].revents & POLLIN) {
type_conversion,daemon.c,1156,-,+,,23,				socklen_t sslen = sizeof(ss);
type_conversion,daemon.c,1229,-,+,,39,"	struct socketlist socklist = { NULL, 0, 0 };"
type_conversion,daemon.c,1232,-,+,,21,	if (socklist.nr == 0)
type_conversion,daemon.c,1267,-,+,,19,				listen_port = n;
type_conversion,daemon.c,1309,-,+,,14,			timeout = atoi(v);
type_conversion,daemon.c,1313,-,+,,19,			init_timeout = atoi(v);
type_conversion,daemon.c,1393,-,+,,14,		} else if (arg[0] != '-') {
type_conversion,daemon.c,1401,-,+,,6,	if (log_destination == LOG_DESTINATION_UNSET) {
type_conversion,daemon.c,1408,-,+,,6,	if (log_destination == LOG_DESTINATION_SYSLOG) {
type_conversion,daemon.c,1413,-,+,,33,"		setvbuf(stderr, NULL, _IOFBF, 4096);"
type_conversion,daemon.c,1418,-,+,,54,	if (inetd_mode && (listen_port || (listen_addr.nr > 0)))
type_conversion,daemon.c,1436,-,+,,6,	if (log_destination != LOG_DESTINATION_STDERR) {
type_conversion,date.c,26,-,+,,10,		return -1;
type_conversion,date.c,28,-,+,,10,		return -1;
type_conversion,date.c,32,-,+,,10,		return -1;
type_conversion,date.c,33,-,+,,9,	return (year * 365 + (year + 1) / 4 + mdays[month] + day) * 24*60*60UL +
type_conversion,date.c,34,-,+,,3,		tm->tm_hour * 60*60 + tm->tm_min * 60 + tm->tm_sec;
type_conversion,date.c,58,-,+,,20,	} else if (time < -minutes * 60)
type_conversion,date.c,60,-,+,,10,	time += minutes * 60;
type_conversion,date.c,94,-,+,,17,	if (t_local == -1)
type_conversion,date.c,98,-,+,,12,		offset = t - t_local;
type_conversion,date.c,101,-,+,,12,		offset = t_local - t;
type_conversion,date.c,128,-,+,,17,		now->tv_sec = atoi(x);
type_conversion,date.c,129,-,+,,18,		now->tv_usec = 0;
type_conversion,date.c,141,-,+,,6,	if (now.tv_sec < time) {
type_conversion,date.c,145,-,+,,9,	diff = now.tv_sec - time;
type_conversion,date.c,146,-,+,,13,	if (diff < 90) {
type_conversion,date.c,152,-,+,,17,	diff = (diff + 30) / 60;
type_conversion,date.c,153,-,+,,13,	if (diff < 90) {
type_conversion,date.c,159,-,+,,17,	diff = (diff + 30) / 60;
type_conversion,date.c,160,-,+,,13,	if (diff < 36) {
type_conversion,date.c,166,-,+,,17,	diff = (diff + 12) / 24;
type_conversion,date.c,167,-,+,,13,	if (diff < 14) {
type_conversion,date.c,173,-,+,,13,	if (diff < 70) {
type_conversion,date.c,175,-,+,,63,"			 Q_(""%""PRItime"" week ago"", ""%""PRItime"" weeks ago"", (diff + 3) / 7),"
type_conversion,date.c,176,-,+,,13,			 (diff + 3) / 7);
type_conversion,date.c,180,-,+,,13,	if (diff < 365) {
type_conversion,date.c,182,-,+,,65,"			 Q_(""%""PRItime"" month ago"", ""%""PRItime"" months ago"", (diff + 15) / 30),"
type_conversion,date.c,183,-,+,,13,			 (diff + 15) / 30);
type_conversion,date.c,187,-,+,,13,	if (diff < 1825) {
type_conversion,date.c,188,-,+,,37,		timestamp_t totalmonths = (diff * 12 * 2 + 365) / (365 * 2);
type_conversion,date.c,189,-,+,,37,		timestamp_t years = totalmonths / 12;
type_conversion,date.c,190,-,+,,38,		timestamp_t months = totalmonths % 12;
type_conversion,date.c,206,-,+,,62,"		 Q_(""%""PRItime"" year ago"", ""%""PRItime"" years ago"", (diff + 183) / 365),"
type_conversion,date.c,207,-,+,,12,		 (diff + 183) / 365);
type_conversion,date.c,213,-,+,,6,	if (type == DATE_STRFTIME)
type_conversion,date.c,228,-,+,,13,	} hide = { 0 };
type_conversion,date.c,230,-,+,,12,	hide.tz = local || tz == human_tz;
type_conversion,date.c,231,-,+,,14,	hide.year = tm->tm_year == human_tm->tm_year;
type_conversion,date.c,237,-,+,,29,				hide.date = hide.wday = 1;
type_conversion,date.c,240,-,+,,17,				hide.date = 1;
type_conversion,date.c,261,-,+,,18,		hide.seconds = 1;
type_conversion,date.c,263,-,+,,27,		hide.wday = hide.time = !hide.year;
type_conversion,date.c,294,-,+,,6,	if (mode.type == DATE_UNIX) {
type_conversion,date.c,300,-,+,,6,	if (mode.type == DATE_HUMAN) {
type_conversion,date.c,312,-,+,,6,	if (mode.type == DATE_RAW) {
type_conversion,date.c,318,-,+,,6,	if (mode.type == DATE_RELATIVE) {
type_conversion,date.c,329,-,+,,19,"		tm = time_to_tm(0, 0, &tmbuf);"
type_conversion,date.c,334,-,+,,6,	if (mode.type == DATE_SHORT)
type_conversion,date.c,337,-,+,,11,	else if (mode.type == DATE_ISO8601)
type_conversion,date.c,344,-,+,,11,	else if (mode.type == DATE_ISO8601_STRICT) {
type_conversion,date.c,357,-,+,,13,	} else if (mode.type == DATE_RFC2822)
type_conversion,date.c,362,-,+,,11,	else if (mode.type == DATE_STRFTIME)
type_conversion,date.c,434,-,+,,7,		if (*date == *str)
type_conversion,date.c,477,-,+,,14,	for (i = 0; i < ARRAY_SIZE(timezone_names); i++) {
type_conversion,date.c,479,-,+,,21,		if (match >= 3 || match == strlen(timezone_names[i].name)) {
type_conversion,date.c,504,-,+,,6,	if (*date == 'T' && isdigit(date[1]) && tm->tm_hour == -1) {
type_conversion,date.c,544,-,+,,21,		if ((specified != -1) && (now + 10*24*3600 < specified))
type_conversion,date.c,558,-,+,,6,	if (0 <= hour && hour <= 24 &&
type_conversion,date.c,559,-,+,,6,	    0 <= minute && minute < 60 &&
type_conversion,date.c,560,-,+,,6,	    0 <= second && second <= 60) {
type_conversion,date.c,561,-,+,,17,		tm->tm_hour = hour;
type_conversion,date.c,562,-,+,,16,		tm->tm_min = minute;
type_conversion,date.c,563,-,+,,16,		tm->tm_sec = second;
type_conversion,date.c,582,-,+,,9,	num3 = -1;
type_conversion,date.c,583,-,+,,6,	if (*end == c && isdigit(end[1]))
type_conversion,date.c,587,-,+,,10,	switch (c) {
type_conversion,date.c,589,-,+,,14,		if (num3 < 0)
type_conversion,date.c,590,-,+,,11,			num3 = 0;
type_conversion,date.c,591,-,+,,16,"		if (set_time(num, num2, num3, tm) == 0) {"
type_conversion,date.c,597,-,+,,8,			if (*end == '.' && isdigit(end[1]) && is_date_known(tm))
type_conversion,date.c,612,-,+,,13,		if (num > 70) {
type_conversion,date.c,614,-,+,,17,"			if (set_date(num, num2, num3, NULL, now, tm) == 0)"
type_conversion,date.c,617,-,+,,17,"			if (set_date(num, num3, num2, NULL, now, tm) == 0)"
type_conversion,date.c,624,-,+,,7,		if (c != '.' &&
type_conversion,date.c,625,-,+,,16,"		    set_date(num3, num, num2, refuse_future, now, tm) == 0)"
type_conversion,date.c,628,-,+,,16,"		if (set_date(num3, num2, num, refuse_future, now, tm) == 0)"
type_conversion,date.c,631,-,+,,7,		if (c == '.' &&
type_conversion,date.c,632,-,+,,16,"		    set_date(num3, num, num2, refuse_future, now, tm) == 0)"
type_conversion,date.c,636,-,+,,9,	return end - date;
type_conversion,date.c,682,-,+,,13,	if (num >= 100000000 && nodate(tm)) {
type_conversion,date.c,683,-,+,,17,		time_t time = num;
type_conversion,date.c,686,-,+,,11,			return end - date;
type_conversion,date.c,693,-,+,,10,	switch (*end) {
type_conversion,date.c,699,-,+,,61,"			int match = match_multi_number(num, *end, date, end, tm, 0);"
type_conversion,date.c,718,-,+,,29,		unsigned int num1 = num / 10000;
type_conversion,date.c,719,-,+,,30,		unsigned int num2 = (num % 10000) / 100;
type_conversion,date.c,720,-,+,,29,		unsigned int num3 = num % 100;
type_conversion,date.c,722,-,+,,13,"			set_date(num1, num2, num3, NULL, time(NULL), tm);"
type_conversion,date.c,723,-,+,,31,"		else if (n == 6 && set_time(num1, num2, num3, tm) == 0 &&"
type_conversion,date.c,724,-,+,,5,			 *end == '.' && isdigit(end[1]))
type_conversion,date.c,726,-,+,,10,		return end - date;
type_conversion,date.c,731,-,+,,23,		unsigned int num1 = num;
type_conversion,date.c,732,-,+,,23,		unsigned int num2 = 0;
type_conversion,date.c,734,-,+,,17,			num1 = num / 100;
type_conversion,date.c,735,-,+,,17,			num2 = num % 100;
type_conversion,date.c,738,-,+,,16,"		    set_time(num1, num2, 0, tm) == 0)"
type_conversion,date.c,750,-,+,,14,		if (num <= 1400 && *offset == -1) {
type_conversion,date.c,751,-,+,,33,			unsigned int minutes = num % 100;
type_conversion,date.c,752,-,+,,31,			unsigned int hours = num / 100;
type_conversion,date.c,753,-,+,,20,			*offset = hours*60 + minutes;
type_conversion,date.c,754,-,+,,20,		} else if (num > 1900 && num < 2100)
type_conversion,date.c,755,-,+,,24,			tm->tm_year = num - 1900;
type_conversion,date.c,773,-,+,,12,	if (num > 0 && num < 32 && tm->tm_mday < 0) {
type_conversion,date.c,774,-,+,,17,		tm->tm_mday = num;
type_conversion,date.c,780,-,+,,13,		if (num < 10 && tm->tm_mday >= 0) {
type_conversion,date.c,781,-,+,,24,			tm->tm_year = num + 100;
type_conversion,date.c,784,-,+,,14,		if (num >= 70) {
type_conversion,date.c,785,-,+,,18,			tm->tm_year = num;
type_conversion,date.c,790,-,+,,12,	if (num > 0 && num < 13 && tm->tm_mon < 0)
type_conversion,date.c,791,-,+,,20,		tm->tm_mon = num-1;
type_conversion,date.c,799,-,+,,13,"	int hour = strtoul(date + 1, &end, 10);"
type_conversion,date.c,800,-,+,,10,	int n = end - (date + 1);
type_conversion,date.c,809,-,+,,13,	} else if (*end == ':') {
type_conversion,date.c,811,-,+,,9,"		min = strtoul(end + 1, &end, 10);"
type_conversion,date.c,812,-,+,,27,		if (end - (date + 1) != 5)
type_conversion,date.c,826,-,+,,7,		if (*date == '-')
type_conversion,date.c,830,-,+,,9,	return end - date;
type_conversion,date.c,854,-,+,,6,	if (*date < '0' || '9' < *date)
type_conversion,date.c,857,-,+,,6,	if (*end != ' ' || stamp == TIME_MAX || (end[1] != '+' && end[1] != '-'))
type_conversion,date.c,860,-,+,,8,"	ofs = strtol(date, &end, 10);"
type_conversion,date.c,861,-,+,,7,	if ((*end != '\0' && (*end != '\n')) || end != date + 4)
type_conversion,date.c,864,-,+,,6,	if (date[-1] == '-')
type_conversion,date.c,896,-,+,,6,	if (*date == '@' &&
type_conversion,date.c,901,-,+,,21,		unsigned char c = *date;
type_conversion,date.c,904,-,+,,13,		if (!c || c == '\n')
type_conversion,date.c,911,-,+,,13,		else if ((c == '-' || c == '+') && isdigit(date[1]))
type_conversion,date.c,923,-,+,,15,	*timestamp = tm_to_time_t(&tm);
type_conversion,date.c,924,-,+,,20,	if (*timestamp == -1)
type_conversion,date.c,934,-,+,,49,			*offset = ((time_t)*timestamp - temp_time) / 60;
type_conversion,date.c,936,-,+,,56,			*offset = -(int)((temp_time - (time_t)*timestamp) / 60);
type_conversion,date.c,941,-,+,,17,		*timestamp -= *offset * 60;
type_conversion,date.c,950,-,+,,16,		*timestamp = 0;
type_conversion,date.c,1032,-,+,,6,	if (mode->type == DATE_STRFTIME) {
type_conversion,date.c,1053,-,+,,11,"	offset = tm_to_time_t(localtime_r(&now, &tm)) - now;"
type_conversion,date.c,1056,-,+,,14,"	date_string(now, offset, out);"
type_conversion,date.c,1112,-,+,,21,"	update_tm(tm, now, 0);"
type_conversion,date.c,1118,-,+,,21,"	update_tm(tm, now, 24*60*60);"
type_conversion,date.c,1124,-,+,,22,"		update_tm(tm, now, 24*60*60);"
type_conversion,date.c,1178,-,+,,13,	time_t n = 0;
type_conversion,date.c,1235,-,+,,13,		int len = strlen(s->name);
type_conversion,date.c,1245,-,+,,14,			int len = strlen(number_name[i]);
type_conversion,date.c,1261,-,+,,13,		int len = strlen(tl->type);
type_conversion,date.c,1263,-,+,,23,"			update_tm(tm, now, tl->length * *num);"
type_conversion,date.c,1282,-,+,,23,"			update_tm(tm, now, diff * 24 * 60 * 60);"
type_conversion,date.c,1290,-,+,,22,"		update_tm(tm, now, 0); /* fill in date fields if needed */"
type_conversion,date.c,1303,-,+,,22,"		update_tm(tm, now, 0); /* fill in date fields if needed */"
type_conversion,date.c,1319,-,+,,10,	switch (*end) {
type_conversion,date.c,1333,-,+,,6,	if (date[0] != '0' || end - date <= 2)
type_conversion,date.c,1334,-,+,,10,		*num = number;
type_conversion,date.c,1356,-,+,,21,		unsigned char c = *date;
type_conversion,date.c,1372,-,+,,43,"	return (timestamp_t)update_tm(&tm, &now, 0);"
type_conversion,date.c,1406,-,+,,8,	sys = t;
type_conversion,date.c,1407,-,+,,14,
type_conversion,debug.c,70,-,+,,10,	type &= 0xf; /* see refs.h REF_* */
type_conversion,debug.c,81,-,+,,14,	for (i = 0; i < transaction->nr; i++) {
type_conversion,debug.c,211,-,+,,45,"	struct debug_ref_iterator *diter = xcalloc(1, sizeof(*diter));"
type_conversion,decorate.c,16,-,+,,13,	int size = n->size;
type_conversion,decorate.c,18,-,+,,34,"	unsigned int j = hash_obj(base, size);"
type_conversion,decorate.c,26,-,+,,14,		if (++j >= size)
type_conversion,decorate.c,27,-,+,,8,			j = 0;
type_conversion,decorate.c,38,-,+,,17,	int old_size = n->size;
type_conversion,decorate.c,41,-,+,,12,	n->size = (old_size + 1000) * 3 / 2;
type_conversion,decorate.c,43,-,+,,10,	n->nr = 0;
type_conversion,decorate.c,59,-,+,,19,	int nr = n->nr + 1;
type_conversion,decorate.c,61,-,+,,6,	if (nr > n->size * 2 / 3)
type_conversion,decorate.c,81,-,+,,8,			j = 0;
type_conversion,decorate.c,89,-,+,,12,		for (i = 0; i < n->size; i++) {
type_conversion,decorate.c,97,-,+,,20,
type_conversion,default.c,26,-,+,,8,	if (!(commit->object.flags & mark)) {
type_conversion,default.c,45,-,+,,11,	if (o && o->type == OBJ_COMMIT)
type_conversion,default.c,139,-,+,,38,"				rev_list_push(ns, parents->item, mark);"
type_conversion,delta-islands.c,44,-,+,,69,	size_t size = sizeof(struct island_bitmap) + (island_bitmap_size * 4);
type_conversion,delta-islands.c,45,-,+,,36,"	struct island_bitmap *b = xcalloc(1, size);"
type_conversion,delta-islands.c,50,-,+,,16,	b->refcount = 1;
type_conversion,delta-islands.c,58,-,+,,11,	for (i = 0; i < island_bitmap_size; ++i)
type_conversion,delta-islands.c,70,-,+,,11,	for (i = 0; i < island_bitmap_size; ++i) {
type_conversion,delta-islands.c,88,-,+,,73,	return (self->bits[ISLAND_BITMAP_BLOCK(i)] & ISLAND_BITMAP_MASK(i)) != 0;
type_conversion,delta-islands.c,181,-,+,,20,	if (b->refcount > 1) {
type_conversion,delta-islands.c,194,-,+,,14,	for (i = 0; i < rl->oids.nr; ++i) {
type_conversion,delta-islands.c,204,-,+,,25,		if (is_core_island && obj->type == OBJ_COMMIT)
type_conversion,delta-islands.c,208,-,+,,17,		while (obj && obj->type == OBJ_TAG) {
type_conversion,delta-islands.c,234,-,+,,9,	return todo_a->depth - todo_b->depth;
type_conversion,delta-islands.c,257,-,+,,14,	for (i = 0; i < to_pack->nr_objects; i++) {
type_conversion,delta-islands.c,258,-,+,,7,		if (oe_type(&to_pack->objects[i]) == OBJ_TREE) {
type_conversion,delta-islands.c,267,-,+,,66,"		progress_state = start_progress(_(""Propagating island marks""), nr);"
type_conversion,delta-islands.c,303,-,+,,36,"		display_progress(progress_state, i+1);"
type_conversion,delta-islands.c,320,-,+,,18,	for (size_t i = 0; i < ild->nr; i++)
type_conversion,delta-islands.c,352,-,+,,7,		if (*v != '^')
type_conversion,delta-islands.c,381,-,+,,43,"		kh_value(remote_islands, pos) = xcalloc(1, sizeof(struct remote_island));"
type_conversion,delta-islands.c,406,-,+,,21,	for (i = ild->nr - 1; i >= 0; i--) {
type_conversion,delta-islands.c,415,-,+,,36,	if (matches[ARRAY_SIZE(matches) - 1].rm_so != -1)
type_conversion,delta-islands.c,420,-,+,,14,	for (m = 1; m < ARRAY_SIZE(matches); m++) {
type_conversion,delta-islands.c,429,-,+,,52,"		strbuf_add(&island_name, refname + match->rm_so, match->rm_eo - match->rm_so);"
type_conversion,delta-islands.c,451,-,+,,48,"	unsigned int island_count, dst, src, ref, i = 0;"
type_conversion,delta-islands.c,460,-,+,,22,	for (ref = 0; ref + 1 < island_count; ref++) {
type_conversion,delta-islands.c,461,-,+,,20,"		for (src = ref + 1, dst = src; src < island_count; src++) {"
type_conversion,delta-islands.c,473,-,+,,39,	island_bitmap_size = (island_count / 32) + 1;
type_conversion,delta-islands.c,476,-,+,,11,	for (i = 0; i < island_count; ++i) {
type_conversion,delta-islands.c,540,-,+,,11,	for (i = 0; i < to_pack->nr_objects; ++i) {
type_conversion,delta-islands.c,544,-,+,,32,"		oe_set_layer(to_pack, entry, 1);"
type_conversion,delta-islands.c,550,-,+,,34,"				oe_set_layer(to_pack, entry, 0);"
type_conversion,delta.h,93,-,+,,21,"	size_t cmd, size = 0;"
type_conversion,delta.h,96,-,+,,9,		cmd = *data++;
type_conversion,delta.h,97,-,+,,31,"		size |= st_left_shift(cmd & 0x7f, i);"
type_conversion,delta.h,99,-,+,,17,	} while (cmd & 0x80 && data < top);
type_conversion,describe.c,95,-,+,,12,	if (!e || e->prio < prio)
type_conversion,describe.c,98,-,+,,6,	if (e->prio == 2 && prio == 2) {
type_conversion,describe.c,139,-,+,,13,		e->prio = prio;
type_conversion,describe.c,140,-,+,,21,		e->name_checked = 0;
type_conversion,describe.c,141,-,+,,17,		e->misnamed = 0;
type_conversion,describe.c,178,-,+,,48,"			if (!wildmatch(item->string, path_to_match, 0))"
type_conversion,describe.c,192,-,+,,48,"			if (!wildmatch(item->string, path_to_match, 0)) {"
type_conversion,describe.c,249,-,+,,31,	unsigned long seen_commits = 0;
type_conversion,describe.c,271,-,+,,23,			p->object.flags |= c->object.flags;
type_conversion,describe.c,280,-,+,,6,	if (n->prio == 2 && !n->tag) {
type_conversion,describe.c,289,-,+,,18,			n->misnamed = 1;
type_conversion,describe.c,291,-,+,,21,		n->name_checked = 1;
type_conversion,describe.c,315,-,+,,27,"	unsigned int match_cnt = 0, annotated_cnt = 0, cur_match;"
type_conversion,describe.c,316,-,+,,31,	unsigned long seen_commits = 0;
type_conversion,describe.c,317,-,+,,33,	unsigned int unannotated_cnt = 0;
type_conversion,describe.c,322,-,+,,27,	if (n && (tags || all || n->prio == 2)) {
type_conversion,describe.c,367,-,+,,25,			if (!tags && !all && n->prio < 2) {
type_conversion,describe.c,369,-,+,,27,			} else if (match_cnt < max_candidates) {
type_conversion,describe.c,372,-,+,,31,				t->depth = seen_commits - 1;
type_conversion,describe.c,374,-,+,,22,				t->found_order = match_cnt;
type_conversion,describe.c,376,-,+,,9,				if (n->prio == 2)
type_conversion,describe.c,384,-,+,,20,		for (cur_match = 0; cur_match < match_cnt; cur_match++) {
type_conversion,describe.c,392,-,+,,27,			unsigned best_within = 0;
type_conversion,describe.c,393,-,+,,21,			for (cur_match = 0; cur_match < match_cnt; cur_match++) {
type_conversion,describe.c,414,-,+,,23,			p->object.flags |= c->object.flags;
type_conversion,describe.c,453,-,+,,16,			for (i = 0; i < ARRAY_SIZE(prio_names); i++) {
type_conversion,describe.c,454,-,+,,9,				w = strlen(_(prio_names[i]));
type_conversion,describe.c,459,-,+,,20,		for (cur_match = 0; cur_match < match_cnt; cur_match++) {
type_conversion,describe.c,519,-,+,,22,"	if (setup_revisions(args.nr, args.v, &revs, NULL) > 1)"
type_conversion,describe.c,545,-,+,,58,"	else if (oid_object_info(the_repository, &oid, NULL) == OBJ_BLOB)"
type_conversion,describe.c,553,-,+,,28,"		clear_commit_marks(cmit, -1);"
type_conversion,describe.c,593,-,+,,39,"			PARSE_OPT_OPTARG, NULL, (intptr_t) ""-dirty""},"
type_conversion,describe.c,596,-,+,,39,"			PARSE_OPT_OPTARG, NULL, (intptr_t) ""-broken""},"
type_conversion,describe.c,636,-,+,,23,"		return cmd_name_rev(args.nr, args.v, prefix);"
type_conversion,describe.c,639,-,+,,46,"	hashmap_init(&names, commit_name_neq, NULL, 0);"
type_conversion,describe.c,649,-,+,,17,			cp.git_cmd = 1;
type_conversion,describe.c,650,-,+,,18,			cp.no_stdin = 1;
type_conversion,describe.c,651,-,+,,19,			cp.no_stdout = 1;
type_conversion,describe.c,686,-,+,,24,"			if (setup_revisions(args.nr, args.v, &revs, NULL) != 1)"
type_conversion,describe.c,688,-,+,,26,"			run_diff_index(&revs, 0);"
type_conversion,diagnose.c,40,-,+,,14,	for (i = 0; i < ARRAY_SIZE(diagnose_options); i++) {
type_conversion,diagnose.c,42,-,+,,29,"	strbuf_complete(&zip_path, '/');"
type_conversion,diagnose.c,84,-,+,,7,"		if (get_dtype(e, path, 0) == DT_REG)"
type_conversion,diagnose.c,113,-,+,,7,"		if (get_dtype(e, &count_path, 0) == DT_DIR &&"
type_conversion,diagnose.c,114,-,+,,28,		    strlen(e->d_name) == 2 &&
type_conversion,diagnose.c,115,-,+,,36,"		    !hex_to_bytes(&c, e->d_name, 1)) {"
type_conversion,diagnose.c,163,-,+,,7,		if (dtype == DT_REG)
type_conversion,diagnose.c,165,-,+,,12,		else if (dtype != DT_DIR)
type_conversion,diagnose.c,196,-,+,,6,	if (mode == DIAGNOSE_NONE) {
type_conversion,diagnose.c,239,-,+,,6,	if (mode == DIAGNOSE_ALL) {
type_conversion,diagnose.c,240,-,+,,15,		for (i = 0; i < ARRAY_SIZE(archive_dirs); i++) {
type_conversion,diagnose.c,257,-,+,,22,"	res = write_archive(archiver_args.nr, (const char **)argv_copy, NULL,"
type_conversion,diff-delta.c,149,-,+,,23,	entries = (bufsize - 1) / RABIN_WINDOW;
type_conversion,diff-delta.c,157,-,+,,20,	hsize = entries / 4;
type_conversion,diff-delta.c,158,-,+,,11,	for (i = 4; (1u << i) < hsize; i++);
type_conversion,diff-delta.c,159,-,+,,10,	hsize = 1 << i;
type_conversion,diff-delta.c,160,-,+,,18,	hmask = hsize - 1;
type_conversion,diff-delta.c,163,-,+,,28,	memsize = sizeof(*hash) * hsize +
type_conversion,diff-delta.c,164,-,+,,22,		  sizeof(*entry) * entries;
type_conversion,diff-delta.c,172,-,+,,18,"	memset(hash, 0, hsize * sizeof(*hash));"
type_conversion,diff-delta.c,175,-,+,,22,"	hash_count = calloc(hsize, sizeof(*hash_count));"
type_conversion,diff-delta.c,182,-,+,,13,	prev_val = ~0;
type_conversion,diff-delta.c,186,-,+,,22,		unsigned int val = 0;
type_conversion,diff-delta.c,187,-,+,,12,		for (i = 1; i <= RABIN_WINDOW; i++)
type_conversion,diff-delta.c,188,-,+,,24,			val = ((val << 8) | data[i]) ^ T[val >> RABIN_SHIFT];
type_conversion,diff-delta.c,216,-,+,,11,	for (i = 0; i < hsize; i++) {
type_conversion,diff-delta.c,260,-,+,,35,		+ sizeof(*packed_hash) * (hsize+1)
type_conversion,diff-delta.c,261,-,+,,29,		+ sizeof(*packed_entry) * entries;
type_conversion,diff-delta.c,276,-,+,,29,	mem = packed_hash + (hsize+1);
type_conversion,diff-delta.c,279,-,+,,11,	for (i = 0; i < hsize; i++) {
type_conversion,diff-delta.c,308,-,+,,10,		return 0;
type_conversion,diff-delta.c,329,-,+,,16,	*delta_size = 0;
type_conversion,diff-delta.c,334,-,+,,11,	outpos = 0;
type_conversion,diff-delta.c,335,-,+,,12,	outsize = 8192;
type_conversion,diff-delta.c,337,-,+,,38,		outsize = max_size + MAX_OP_SIZE + 1;
type_conversion,diff-delta.c,344,-,+,,14,	while (l >= 0x80) {
type_conversion,diff-delta.c,345,-,+,,23,		out[outpos++] = l | 0x80;
type_conversion,diff-delta.c,348,-,+,,18,	out[outpos++] = l;
type_conversion,diff-delta.c,352,-,+,,14,	while (l >= 0x80) {
type_conversion,diff-delta.c,353,-,+,,23,		out[outpos++] = l | 0x80;
type_conversion,diff-delta.c,356,-,+,,18,	out[outpos++] = l;
type_conversion,diff-delta.c,364,-,+,,8,	val = 0;
type_conversion,diff-delta.c,365,-,+,,11,"	for (i = 0; i < RABIN_WINDOW && data < top; i++, data++) {"
type_conversion,diff-delta.c,367,-,+,,23,		val = ((val << 8) | *data) ^ T[val >> RABIN_SHIFT];
type_conversion,diff-delta.c,369,-,+,,11,	inscnt = i;
type_conversion,diff-delta.c,371,-,+,,9,	moff = 0;
type_conversion,diff-delta.c,372,-,+,,10,	msize = 0;
type_conversion,diff-delta.c,374,-,+,,15,		if (msize < 4096) {
type_conversion,diff-delta.c,377,-,+,,24,			val = ((val << 8) | *data) ^ T[val >> RABIN_SHIFT];
type_conversion,diff-delta.c,379,-,+,,55,			for (entry = index->hash[i]; entry < index->hash[i+1]; entry++) {
type_conversion,diff-delta.c,382,-,+,,29,				unsigned int ref_size = ref_top - ref;
type_conversion,diff-delta.c,385,-,+,,9,				if (ref_size > top - src)
type_conversion,diff-delta.c,386,-,+,,17,					ref_size = top - src;
type_conversion,diff-delta.c,387,-,+,,9,				if (ref_size <= msize)
type_conversion,diff-delta.c,389,-,+,,26,				while (ref_size-- && *src++ == *ref)
type_conversion,diff-delta.c,391,-,+,,17,				if (msize < ref - entry->ptr) {
type_conversion,diff-delta.c,393,-,+,,14,					msize = ref - entry->ptr;
type_conversion,diff-delta.c,395,-,+,,19,					if (msize >= 4096) /* good enough */
type_conversion,diff-delta.c,401,-,+,,15,		if (msize < 4) {
type_conversion,diff-delta.c,407,-,+,,18,				out[outpos - inscnt - 1] = inscnt;
type_conversion,diff-delta.c,410,-,+,,12,			msize = 0;
type_conversion,diff-delta.c,416,-,+,,34,				while (moff && ref_data[moff-1] == data[-1]) {
type_conversion,diff-delta.c,428,-,+,,18,				out[outpos - inscnt - 1] = inscnt;
type_conversion,diff-delta.c,433,-,+,,20,			left = (msize < 0x10000) ? 0 : (msize - 0x10000);
type_conversion,diff-delta.c,434,-,+,,13,			msize -= left;
type_conversion,diff-delta.c,437,-,+,,8,			i = 0x80;
type_conversion,diff-delta.c,439,-,+,,15,			if (moff & 0x000000ff)
type_conversion,diff-delta.c,440,-,+,,21,"				out[outpos++] = moff >> 0,  i |= 0x01;"
type_conversion,diff-delta.c,441,-,+,,15,			if (moff & 0x0000ff00)
type_conversion,diff-delta.c,442,-,+,,21,"				out[outpos++] = moff >> 8,  i |= 0x02;"
type_conversion,diff-delta.c,443,-,+,,15,			if (moff & 0x00ff0000)
type_conversion,diff-delta.c,444,-,+,,21,"				out[outpos++] = moff >> 16, i |= 0x04;"
type_conversion,diff-delta.c,445,-,+,,15,			if (moff & 0xff000000)
type_conversion,diff-delta.c,446,-,+,,21,"				out[outpos++] = moff >> 24, i |= 0x08;"
type_conversion,diff-delta.c,448,-,+,,16,			if (msize & 0x00ff)
type_conversion,diff-delta.c,449,-,+,,21,"				out[outpos++] = msize >> 0, i |= 0x10;"
type_conversion,diff-delta.c,450,-,+,,16,			if (msize & 0xff00)
type_conversion,diff-delta.c,451,-,+,,21,"				out[outpos++] = msize >> 8, i |= 0x20;"
type_conversion,diff-delta.c,453,-,+,,10,			*op = i;
type_conversion,diff-delta.c,457,-,+,,12,			msize = left;
type_conversion,diff-delta.c,459,-,+,,15,			if (moff > 0xffffffff)
type_conversion,diff-delta.c,460,-,+,,13,				msize = 0;
type_conversion,diff-delta.c,462,-,+,,16,			if (msize < 4096) {
type_conversion,diff-delta.c,464,-,+,,11,				val = 0;
type_conversion,diff-delta.c,466,-,+,,26,					val = ((val << 8) | data[j])
type_conversion,diff-delta.c,471,-,+,,7,		if (outpos >= outsize - MAX_OP_SIZE) {
type_conversion,diff-delta.c,473,-,+,,24,			outsize = outsize * 3 / 2;
type_conversion,diff-delta.c,475,-,+,,40,				outsize = max_size + MAX_OP_SIZE + 1;
type_conversion,diff-delta.c,476,-,+,,20,			if (max_size && outpos > max_size)
type_conversion,diff-delta.c,487,-,+,,16,		out[outpos - inscnt - 1] = inscnt;
type_conversion,diff-delta.c,489,-,+,,18,	if (max_size && outpos > max_size) {
type_conversion,diff-delta.c,494,-,+,,16,	*delta_size = outpos;
type_conversion,diff-files.c,24,-,+,,21,	unsigned options = 0;
type_conversion,diff-files.c,35,-,+,,15,	rev.abbrev = 0;
type_conversion,diff-files.c,46,-,+,,21,	while (1 < argc && argv[1][0] == '-') {
type_conversion,diff-files.c,69,-,+,,21,	    rev.min_age != -1 || rev.max_age != -1 ||
type_conversion,diff-files.c,82,-,+,,69,"	if (repo_read_index_preload(the_repository, &rev.diffopt.pathspec, 0) < 0)"
type_conversion,diff-index.c,20,-,+,,24,	unsigned int option = 0;
type_conversion,diff-index.c,29,-,+,,15,	rev.abbrev = 0;
type_conversion,diff-index.c,47,-,+,,24,			rev.match_missing = 1;
type_conversion,diff-index.c,60,-,+,,24,	if (rev.pending.nr != 1 ||
type_conversion,diff-index.c,61,-,+,,44,	    rev.max_count != -1 || rev.min_age != -1 || rev.max_age != -1)
type_conversion,diff-index.c,65,-,+,,70,"		if (repo_read_index_preload(the_repository, &rev.diffopt.pathspec, 0) < 0) {"
type_conversion,diff-lib.c,98,-,+,,10,								 diffopt->flags.ignore_untracked_in_submodules);
type_conversion,diff-lib.c,119,-,+,,12,	entries = istate->cache_nr;
type_conversion,diff-lib.c,124,-,+,,30,		unsigned dirty_submodule = 0;
type_conversion,diff-lib.c,143,-,+,,47,"		    strncmp(ce->name, revs->diffopt.prefix, revs->diffopt.prefix_length))"
type_conversion,diff-lib.c,149,-,+,,27,			unsigned int wt_mode = 0;
type_conversion,diff-lib.c,161,-,+,,28,			dpath->path[path_len] = '\0';
type_conversion,diff-lib.c,164,-,+,,46,			       sizeof(struct combine_diff_parent)*5);
type_conversion,diff-lib.c,174,-,+,,15,				wt_mode = 0;
type_conversion,diff-lib.c,190,-,+,,17,					int mode = nce->ce_mode;
type_conversion,diff-lib.c,194,-,+,,59,"					dpath->parent[stage-2].mode = ce_mode_from_stat(nce, mode);"
type_conversion,diff-lib.c,222,-,+,,23,				pair->two->mode = wt_mode;
type_conversion,diff-lib.c,223,-,+,,24,			if (ce_stage(ce) != diff_unmerged_stage)
type_conversion,diff-lib.c,255,-,+,,23,"					       ce->name, 0);"
type_conversion,diff-lib.c,261,-,+,,38,"					       null_oid(), 0, ce->name, 0);"
type_conversion,diff-lib.c,283,-,+,,18,"			    ce->name, 0, dirty_submodule);"
type_conversion,diff-lib.c,303,-,+,,33,"	diff_addremove(&revs->diffopt, prefix[0], mode,"
type_conversion,diff-lib.c,332,-,+,,11,"						    0, dirty_submodule);"
type_conversion,diff-lib.c,350,-,+,,29,	unsigned dirty_submodule = 0;
type_conversion,diff-lib.c,377,-,+,,29,	unsigned dirty_submodule = 0;
type_conversion,diff-lib.c,399,-,+,,11,					     0);
type_conversion,diff-lib.c,411,-,+,,36,"		memcpy(p->path, new_entry->name, pathlen);"
type_conversion,diff-lib.c,412,-,+,,22,		p->path[pathlen] = 0;
type_conversion,diff-lib.c,415,-,+,,24,"		memset(p->parent, 0, 2 * sizeof(struct combine_diff_parent));"
type_conversion,diff-lib.c,434,-,+,,24,"		    old_entry->name, 0, dirty_submodule);"
type_conversion,diff-lib.c,467,-,+,,18,	match_missing = revs->match_missing;
type_conversion,diff-lib.c,474,-,+,,11,				      tree->ce_mode);
type_conversion,diff-lib.c,496,-,+,,25,"				     tree->ce_mode, 0);"
type_conversion,diff-lib.c,540,-,+,,23,			o->exiting_early = 1;
type_conversion,diff-lib.c,563,-,+,,20,	opts.index_only = cached;
type_conversion,diff-lib.c,564,-,+,,27,"	opts.diff_index_cached = (cached &&
				  !revs->diffopt.flags.find_copies_harder);"
type_conversion,diff-lib.c,566,-,+,,15,	opts.merge = 1;
type_conversion,diff-lib.c,572,-,+,,29,	opts.pathspec->recursive = 1;
type_conversion,diff-lib.c,575,-,+,,22,"	return unpack_trees(1, &t, &opts);"
type_conversion,diff-lib.c,584,-,+,,14,	for (i = 0; i < revs->pending.nr; i++) {
type_conversion,diff-lib.c,595,-,+,,25,	if (revs->pending.nr < 1 || revs->pending.nr > 2)
type_conversion,diff-lib.c,598,-,+,,14,	for (i = 0; i < revs->pending.nr; i++)
type_conversion,diff-lib.c,600,-,+,,26,	if (revs->pending.nr == 1) {
type_conversion,diff-lib.c,631,-,+,,26,	if (revs->pending.nr != 1)
type_conversion,diff-lib.c,683,-,+,,28,	rev.diffopt.flags.quick = 1;
type_conversion,diff-lib.c,684,-,+,,39,	rev.diffopt.flags.exit_with_status = 1;
type_conversion,diff-lib.c,698,-,+,,25,	return (has_changes != 0);
type_conversion,diff-lib.c,715,-,+,,32,"	strbuf_addchars(&prefix, ' ', indent);"
type_conversion,diff-merges.c,15,-,+,,26,	revs->separate_merges = 0;
type_conversion,diff-merges.c,16,-,+,,30,	revs->first_parent_merges = 0;
type_conversion,diff-merges.c,17,-,+,,25,	revs->combine_merges = 0;
type_conversion,diff-merges.c,18,-,+,,32,	revs->dense_combined_merges = 0;
type_conversion,diff-merges.c,19,-,+,,29,	revs->combined_all_paths = 0;
type_conversion,diff-merges.c,20,-,+,,29,	revs->merges_imply_patch = 0;
type_conversion,diff-merges.c,21,-,+,,27,	revs->merges_need_diff = 0;
type_conversion,diff-merges.c,22,-,+,,23,	revs->remerge_diff = 0;
type_conversion,diff-merges.c,28,-,+,,27,	revs->merges_need_diff = 1;
type_conversion,diff-merges.c,39,-,+,,26,	revs->separate_merges = 1;
type_conversion,diff-merges.c,40,-,+,,27,	revs->simplify_history = 0;
type_conversion,diff-merges.c,46,-,+,,30,	revs->first_parent_merges = 1;
type_conversion,diff-merges.c,52,-,+,,25,	revs->combine_merges = 1;
type_conversion,diff-merges.c,53,-,+,,32,	revs->dense_combined_merges = 0;
type_conversion,diff-merges.c,59,-,+,,25,	revs->combine_merges = 1;
type_conversion,diff-merges.c,60,-,+,,32,	revs->dense_combined_merges = 1;
type_conversion,diff-merges.c,66,-,+,,23,	revs->remerge_diff = 1;
type_conversion,diff-merges.c,67,-,+,,27,	revs->simplify_history = 0;
type_conversion,diff-merges.c,127,-,+,,28,		revs->merges_need_diff = 0;
type_conversion,diff-merges.c,130,-,+,,30,		revs->merges_imply_patch = 1;
type_conversion,diff-merges.c,133,-,+,,30,		revs->merges_imply_patch = 1;
type_conversion,diff-merges.c,136,-,+,,30,		revs->merges_imply_patch = 1;
type_conversion,diff-merges.c,139,-,+,,30,		revs->merges_imply_patch = 1;
type_conversion,diff-merges.c,143,-,+,,30,		revs->combined_all_paths = 1;
type_conversion,diff-merges.c,149,-,+,,31,	revs->explicit_diff_merges = 1;
type_conversion,diff-merges.c,161,-,+,,27,		revs->separate_merges = 1;
type_conversion,diff-merges.c,163,-,+,,31,		revs->first_parent_merges = 1;
type_conversion,diff-merges.c,180,-,+,,6,	if (revs->combine_merges == 0)
type_conversion,diff-merges.c,181,-,+,,33,		revs->dense_combined_merges = 0;
type_conversion,diff-merges.c,182,-,+,,6,	if (revs->separate_merges == 0)
type_conversion,diff-merges.c,183,-,+,,31,		revs->first_parent_merges = 0;
type_conversion,diff-merges.c,187,-,+,,16,		revs->diff = 1;
type_conversion,diff-no-index.c,62,-,+,,26,		*mode = create_ce_mode(0666);
type_conversion,diff-no-index.c,67,-,+,,11,		*mode = st.st_mode;
type_conversion,diff-no-index.c,76,-,+,,26,		*mode = create_ce_mode(0666);
type_conversion,diff-no-index.c,85,-,+,,16,	size_t size = 0;
type_conversion,diff-no-index.c,87,-,+,,21,	s->should_munmap = 0;
type_conversion,diff-no-index.c,90,-,+,,19,	s->should_free = 1;
type_conversion,diff-no-index.c,91,-,+,,16,	s->is_stdin = 1;
type_conversion,diff-no-index.c,99,-,+,,28,"	if (strbuf_read(&buf, fd, 0) < 0)"
type_conversion,diff-no-index.c,109,-,+,,27,"	if (strbuf_read(&buf, 0, 0) < 0)"
type_conversion,diff-no-index.c,122,-,+,,34,"	fill_filespec(s, null_oid(), 0, mode);"
type_conversion,diff-no-index.c,123,-,+,,6,	if (special == SPECIAL_STDIN)
type_conversion,diff-no-index.c,125,-,+,,11,	else if (special == SPECIAL_PIPE)
type_conversion,diff-no-index.c,169,-,+,,17,"		size_t len1 = 0, len2 = 0;"
type_conversion,diff-no-index.c,180,-,+,,30,"			strbuf_complete(&buffer1, '/');"
type_conversion,diff-no-index.c,186,-,+,,30,"			strbuf_complete(&buffer2, '/');"
type_conversion,diff-no-index.c,190,-,+,,30,		for (i1 = i2 = 0; !ret && (i1 < p1.nr || i2 < p2.nr); ) {
type_conversion,diff-no-index.c,197,-,+,,8,			if (i1 == p1.nr)
type_conversion,diff-no-index.c,199,-,+,,13,			else if (i2 == p2.nr)
type_conversion,diff-no-index.c,248,-,+,,44,	while (path->len && path->buf[path->len - 1] == '/')
type_conversion,diff-no-index.c,262,-,+,,24,"	unsigned int isdir0 = 0, isdir1 = 0;"
type_conversion,diff-no-index.c,263,-,+,,25,"	unsigned int ispipe0 = 0, ispipe1 = 0;"
type_conversion,diff-no-index.c,344,-,+,,33,	revs->diffopt.flags.no_index = 1;
type_conversion,diff-no-index.c,346,-,+,,38,	revs->diffopt.flags.relative_name = 1;
type_conversion,diff-no-index.c,353,-,+,,41,	revs->diffopt.flags.exit_with_status = 1;
type_conversion,diff-no-index.c,368,-,+,,14,	for (i = 0; i < ARRAY_SIZE(to_free); i++)
type_conversion,diff-tree.c,65,-,+,,12,	int len = strlen(line);
type_conversion,diff-tree.c,70,-,+,,14,	if (!len || line[len-1] != '\n')
type_conversion,diff-tree.c,72,-,+,,16,	line[len-1] = 0;
type_conversion,diff-tree.c,78,-,+,,6,	if (obj->type == OBJ_COMMIT)
type_conversion,diff-tree.c,80,-,+,,6,	if (obj->type == OBJ_TREE)
type_conversion,diff-tree.c,131,-,+,,16,	opt->abbrev = 0;
type_conversion,diff-tree.c,132,-,+,,14,	opt->diff = 1;
type_conversion,diff-tree.c,133,-,+,,23,	opt->disable_stdin = 1;
type_conversion,diff-tree.c,164,-,+,,39,	if (merge_base && opt->pending.nr != 2)
type_conversion,diff-tree.c,177,-,+,,7,	case 0:
type_conversion,diff-tree.c,181,-,+,,7,	case 1:
type_conversion,diff-tree.c,185,-,+,,7,	case 2:
type_conversion,diff-tree.c,212,-,+,,22,"		while (fgets(line, sizeof(line), stdin)) {"
type_conversion,diff.c,66,-,+,,38,"	    (strncmp(old_path, opt->prefix, opt->prefix_length) ||"
type_conversion,diff.c,67,-,+,,38,"	     strncmp(new_path, opt->prefix, opt->prefix_length)))"
type_conversion,diff.c,72,-,+,,45,"	fill_filespec(one, old_oid, old_oid_valid, old_mode);"
type_conversion,diff.c,73,-,+,,45,"	fill_filespec(two, new_oid, new_oid_valid, new_mode);"
type_conversion,diff.c,131,-,+,,10,		return DIFF_CONTEXT;
type_conversion,diff.c,139,-,+,,24,	unsigned int option = 0;
type_conversion,diff.c,145,-,+,,14,	for (i = 0; i < params.nr; i++) {
type_conversion,diff.c,148,-,+,,37,			options->flags.dirstat_by_line = 0;
type_conversion,diff.c,149,-,+,,37,			options->flags.dirstat_by_file = 0;
type_conversion,diff.c,151,-,+,,37,			options->flags.dirstat_by_line = 1;
type_conversion,diff.c,152,-,+,,37,			options->flags.dirstat_by_file = 0;
type_conversion,diff.c,154,-,+,,26,	if (revs->pending.nr != 1 ||
type_conversion,diff.c,155,-,+,,48,	    revs->max_count != -1 || revs->min_age != -1 ||
type_conversion,diff.c,156,-,+,,23,	    revs->max_age != -1)
type_conversion,diff.c,157,-,+,,40,			options->flags.dirstat_cumulative = 0;
type_conversion,diff.c,159,-,+,,40,			options->flags.dirstat_cumulative = 1;
type_conversion,diff.c,161,-,+,,35,"					    &revs->diffopt.pathspec, 0) < 0) {"
type_conversion,diff.c,162,-,+,,42,"			int permille = strtoul(p, &end, 10) * 10;"
type_conversion,diff.c,163,-,+,,8,			if (*end == '.' && isdigit(*++end)) {
type_conversion,diff.c,165,-,+,,17,				permille += *end - '0';
type_conversion,diff.c,217,-,+,,10,		return -1;
type_conversion,diff.c,219,-,+,,10,		return 0;
type_conversion,diff.c,230,-,+,,9,	return -1;
type_conversion,diff.c,236,-,+,,52,"	if (skip_prefix(*arg, token, &rest) && (!*rest || *rest == ',')) {"
type_conversion,diff.c,246,-,+,,17,	unsigned val = 0;
type_conversion,diff.c,250,-,+,,10,			val = 0;
type_conversion,diff.c,251,-,+,,25,	unsigned int options = 0;
type_conversion,diff.c,253,-,+,,21,	while (1 < argc && argv[1][0] == '-') {
type_conversion,diff.c,267,-,+,,9,	return val;
type_conversion,diff.c,283,-,+,,9,				    0) < 0) {
type_conversion,diff.c,293,-,+,,10,		return COLOR_MOVED_NO;
type_conversion,diff.c,301,-,+,,10,		return COLOR_MOVED_NO;
type_conversion,diff.c,303,-,+,,10,		return COLOR_MOVED_PLAIN;
type_conversion,diff.c,305,-,+,,10,		return COLOR_MOVED_BLOCKS;
type_conversion,diff.c,307,-,+,,10,		return COLOR_MOVED_ZEBRA;
type_conversion,diff.c,311,-,+,,10,		return COLOR_MOVED_ZEBRA_DIM;
type_conversion,diff.c,313,-,+,,10,		return COLOR_MOVED_ZEBRA_DIM;
type_conversion,diff.c,335,-,+,,14,	for (i = 0; i < rev->cmdline.nr; i++) {
type_conversion,diff.c,357,-,+,,9,	return ret;
type_conversion,diff.c,365,-,+,,19,"		bitmap_set(map, i);"
type_conversion,diff.c,381,-,+,,33,		diff_color_moved_ws_default = cm;
type_conversion,diff.c,386,-,+,,20,"	bitmap_unset(map, basepos);	/* unmark the base we want */"
type_conversion,diff.c,443,-,+,,7,		if (argv[i][0] != '-')
type_conversion,diff.c,457,-,+,,24,		if (diff_algorithm < 0)
type_conversion,diff.c,476,-,+,,37,	rev.diffopt.flags.allow_external = 1;
type_conversion,diff.c,477,-,+,,37,	rev.diffopt.flags.allow_textconv = 1;
type_conversion,diff.c,500,-,+,,32,		ws_error_highlight_default = val;
type_conversion,diff.c,506,-,+,,32,	rev.diffopt.flags.recursive = 1;
type_conversion,diff.c,536,-,+,,14,	for (i = 0; i < rev.pending.nr; i++) {
type_conversion,diff.c,546,-,+,,7,		if (obj->type == OBJ_COMMIT)
type_conversion,diff.c,550,-,+,,7,		if (obj->type == OBJ_TREE) {
type_conversion,diff.c,551,-,+,,45,"			if (sdiff.skip && bitmap_get(sdiff.skip, i))"
type_conversion,diff.c,556,-,+,,9,			    (i >= rev.cmdline.nr || /* HEAD by hand. */
type_conversion,diff.c,557,-,+,,9,			     rev.cmdline.rev[i].whence != REV_CMD_PARENTS_ONLY))
type_conversion,diff.c,558,-,+,,33,				first_non_parent = ent.nr - 1;
type_conversion,diff.c,559,-,+,,14,		} else if (obj->type == OBJ_BLOB) {
type_conversion,diff.c,596,-,+,,21,	else if (ent.nr == 1)
type_conversion,diff.c,598,-,+,,21,	else if (ent.nr == 2) {
type_conversion,diff.c,603,-,+,,8,		ch = *data++;
type_conversion,diff.c,606,-,+,,24,"				      ent.objects, ent.nr,"
type_conversion,diff.c,626,-,+,,14,		mf->size = 0;
type_conversion,diff.c,633,-,+,,13,	mf->size = one->size;
type_conversion,diff.c,642,-,+,,22,"		.check_size_only = 1,"
type_conversion,diff.c,646,-,+,,10,		return 0;
type_conversion,diff.c,659,-,+,,16,	ptr += size - 1; /* pointing at the very end */
type_conversion,diff.c,660,-,+,,6,	if (*ptr != '\n')
type_conversion,diff.c,667,-,+,,8,			if (*prev_eol == '\n')
type_conversion,diff.c,669,-,+,,36,"		if (!ws_blank_line(prev_eol + 1, ptr - prev_eol))"
type_conversion,diff.c,688,-,+,,29,"	at = count_lines(mf1->ptr, mf1->size);"
type_conversion,diff.c,691,-,+,,29,"	at = count_lines(mf2->ptr, mf2->size);"
type_conversion,diff.c,705,-,+,,37,	has_trailing_newline = (len > 0 && line[len-1] == '\n');
type_conversion,diff.c,709,-,+,,45,	has_trailing_carriage_return = (len > 0 && line[len-1] == '\r');
type_conversion,diff.c,738,-,+,,15,"	fwrite(line, len, 1, file);"
type_conversion,diff.c,753,-,+,,28,"	emit_line_0(o, set, NULL, 0, reset, 0, line, len);"
type_conversion,diff.c,844,-,+,,40,"	f->line = e->line ? xmemdupz(e->line, e->len) : NULL;"
type_conversion,diff.c,870,-,+,,21,"	unsigned int off = 0, i;"
type_conversion,diff.c,876,-,+,,9,	while (s[off] == '\f' || s[off] == '\v' ||
type_conversion,diff.c,877,-,+,,10,	       (s[off] == '\r' && off < len - 1))
type_conversion,diff.c,882,-,+,,7,		if (s[off] == ' ') {
type_conversion,diff.c,885,-,+,,14,		} else if (s[off] == '\t') {
type_conversion,diff.c,887,-,+,,11,			while (s[++off] == '\t')
type_conversion,diff.c,895,-,+,,20,	for (i = off; i < len; i++)
type_conversion,diff.c,899,-,+,,11,	if (i == len) {
type_conversion,diff.c,903,-,+,,20,		es->indent_off = off;
type_conversion,diff.c,974,-,+,,9,"				    a->len - a->indent_off,"
type_conversion,diff.c,976,-,+,,9,"				    b->len - b->indent_off, flags);"
type_conversion,diff.c,983,-,+,,22,"	unsigned int hash = xdiff_hash_string(l->line + l->indent_off,
					      l->len - l->indent_off, flags);"
type_conversion,diff.c,984,-,+,,12,"					      l->len - l->indent_off, flags);"
type_conversion,diff.c,1001,-,+,,28,	size_t entry_list_alloc = 0;
type_conversion,diff.c,1002,-,+,,16,	unsigned id = 0;
type_conversion,diff.c,1005,-,+,,59,"	hashmap_init(&interned_map, interned_diff_symbol_cmp, o, 8096);"
type_conversion,diff.c,1006,-,+,,32,"	mem_pool_init(&interned_pool, 1024 * 1024);"
type_conversion,diff.c,1014,-,+,,7,		if (l->s != DIFF_SYMBOL_PLUS && l->s != DIFF_SYMBOL_MINUS) {
type_conversion,diff.c,1038,-,+,,20,		if (prev_line && prev_line->es->s == l->s)
type_conversion,diff.c,1041,-,+,,7,		if (l->s == DIFF_SYMBOL_PLUS) {
type_conversion,diff.c,1134,-,+,,6,	if (o->color_moved == COLOR_MOVED_PLAIN)
type_conversion,diff.c,1176,-,+,,28,		if (pmb_nr && (!match || l->s != moved_symbol)) {
type_conversion,diff.c,1195,-,+,,7,		if (o->color_moved == COLOR_MOVED_PLAIN) {
type_conversion,diff.c,1216,-,+,,32,			if (contiguous && pmb_nr && moved_symbol == l->s)
type_conversion,diff.c,1232,-,+,,25,			if (flipped_block && o->color_moved != COLOR_MOVED_BLOCKS)
type_conversion,diff.c,1253,-,+,,7,		if (l->s != DIFF_SYMBOL_PLUS && l->s != DIFF_SYMBOL_MINUS)
type_conversion,diff.c,1264,-,+,,15,		if (prev && prev->s != DIFF_SYMBOL_PLUS &&
type_conversion,diff.c,1265,-,+,,8,			    prev->s != DIFF_SYMBOL_MINUS)
type_conversion,diff.c,1267,-,+,,15,		if (next && next->s != DIFF_SYMBOL_PLUS &&
type_conversion,diff.c,1268,-,+,,8,			    next->s != DIFF_SYMBOL_MINUS)
type_conversion,diff.c,1307,-,+,,13,	int sign = o->output_indicators[sign_index];
type_conversion,diff.c,1316,-,+,,29,"		emit_line_0(o, set, NULL, 0, reset, sign, line, len);"
type_conversion,diff.c,1318,-,+,,33,"		emit_line_0(o, set_sign, set, !!set_sign, reset, sign, line, len);"
type_conversion,diff.c,1321,-,+,,28,"		emit_line_0(o, ws, NULL, 0, reset, sign, line, len);"
type_conversion,diff.c,1324,-,+,,51,"		emit_line_0(o, set_sign ? set_sign : set, NULL, !!set_sign, reset,"
type_conversion,diff.c,1340,-,+,,19,	unsigned flags = eds->flags;
type_conversion,diff.c,1347,-,+,,33,"		emit_line_0(o, context, NULL, 0, reset, '\\',"
type_conversion,diff.c,1348,-,+,,15,"			    nneof, strlen(nneof));"
type_conversion,diff.c,1376,-,+,,24,			char c = !len ? 0 : line[0];
type_conversion,diff.c,1378,-,+,,8,			if (c == '+')
type_conversion,diff.c,1380,-,+,,13,			else if (c == '@')
type_conversion,diff.c,1382,-,+,,13,			else if (c == '-')
type_conversion,diff.c,1416,-,+,,24,			char c = !len ? 0 : line[0];
type_conversion,diff.c,1419,-,+,,8,			if (c == '-')
type_conversion,diff.c,1421,-,+,,13,			else if (c == '@')
type_conversion,diff.c,1423,-,+,,13,			else if (c == '+')
type_conversion,diff.c,1461,-,+,,24,			char c = !len ? 0 : line[0];
type_conversion,diff.c,1464,-,+,,8,			if (c == '+')
type_conversion,diff.c,1466,-,+,,13,			else if (c == '@')
type_conversion,diff.c,1468,-,+,,13,			else if (c == '-')
type_conversion,diff.c,1491,-,+,,7,		if (line[0] != '\n') {
type_conversion,diff.c,1553,-,+,,6,"			  strlen("" 0 files changed\n""));"
type_conversion,diff.c,1556,-,+,,34,"		emit_line(o, """", """", "" ...\n"", strlen("" ...\n""));"
type_conversion,diff.c,1573,-,+,,38,"		.line = line, .len = len, .flags = flags, .s = s"
type_conversion,diff.c,1584,-,+,,55,"	emit_diff_symbol(o, DIFF_SYMBOL_SUBMODULE_DEL, line, strlen(line), 0);"
type_conversion,diff.c,1589,-,+,,55,"	emit_diff_symbol(o, DIFF_SYMBOL_SUBMODULE_ADD, line, strlen(line), 0);"
type_conversion,diff.c,1595,-,+,,11,"			 path, strlen(path), 0);"
type_conversion,diff.c,1601,-,+,,11,"			 path, strlen(path), 0);"
type_conversion,diff.c,1607,-,+,,13,"			 header, strlen(header), 0);"
type_conversion,diff.c,1612,-,+,,56,"	emit_diff_symbol(o, DIFF_SYMBOL_SUBMODULE_ERROR, err, strlen(err), 0);"
type_conversion,diff.c,1618,-,+,,68,"	emit_diff_symbol(o, DIFF_SYMBOL_SUBMODULE_PIPETHROUGH, line, len, 0);"
type_conversion,diff.c,1664,-,+,,32,"	static const char atat[2] = { '@', '@' };"
type_conversion,diff.c,1675,-,+,,25,"	    memcmp(line, atat, 2) ||"
type_conversion,diff.c,1676,-,+,,30,"	    !(ep = memmem(line + 2, len - 2, atat, 2))) {"
type_conversion,diff.c,1678,-,+,,45,"				 DIFF_SYMBOL_CONTEXT_MARKER, line, len, 0);"
type_conversion,diff.c,1690,-,+,,29,"		strbuf_add(&msgbuf, line, ep - line);"
type_conversion,diff.c,1697,-,+,,7,		if (line[len - i] == '\r' || line[len - i] == '\n')
type_conversion,diff.c,1701,-,+,,28,	for (cp = ep; ep - line < len; ep++)
type_conversion,diff.c,1702,-,+,,7,		if (*ep != ' ' && *ep != '\t')
type_conversion,diff.c,1706,-,+,,27,"		strbuf_add(&msgbuf, cp, ep - cp);"
type_conversion,diff.c,1712,-,+,,27,"		strbuf_add(&msgbuf, ep, line + len - ep);"
type_conversion,diff.c,1716,-,+,,34,"	strbuf_add(&msgbuf, line + len, org_len - len);"
type_conversion,diff.c,1719,-,+,,47,"			 DIFF_SYMBOL_CONTEXT_FRAGINFO, msgbuf.buf, msgbuf.len, 0);"
type_conversion,diff.c,1726,-,+,,14,	for (i = 0; i < ARRAY_SIZE(diff_temp); i++)
type_conversion,diff.c,1735,-,+,,14,	for (i = 0; i < ARRAY_SIZE(diff_temp); i++) {
type_conversion,diff.c,1765,-,+,,29,"		endp = memchr(data, '\n', size);"
type_conversion,diff.c,1766,-,+,,31,		len = endp ? (endp - data + 1) : size;
type_conversion,diff.c,1778,-,+,,62,"		emit_diff_symbol(ecb->opt, DIFF_SYMBOL_NO_LF_EOF, NULL, 0, 0);"
type_conversion,diff.c,1805,-,+,,13,	name_a += (*name_a == '/');
type_conversion,diff.c,1806,-,+,,13,	name_b += (*name_b == '/');
type_conversion,diff.c,1810,-,+,,47,"	quote_two_c_style(&a_name, a_prefix, name_a, 0);"
type_conversion,diff.c,1811,-,+,,47,"	quote_two_c_style(&b_name, b_prefix, name_b, 0);"
type_conversion,diff.c,1824,-,+,,14,		mf1.size = size_one;
type_conversion,diff.c,1825,-,+,,14,		mf2.size = size_two;
type_conversion,diff.c,1831,-,+,,31,"	lc_a = count_lines(data_one, size_one);"
type_conversion,diff.c,1832,-,+,,31,"	lc_b = count_lines(data_two, size_two);"
type_conversion,diff.c,1835,-,+,,17,"			 a_name.buf, a_name.len, 0);"
type_conversion,diff.c,1837,-,+,,17,"			 b_name.buf, b_name.len, 0);"
type_conversion,diff.c,1847,-,+,,57,"	emit_diff_symbol(o, DIFF_SYMBOL_REWRITE_DIFF, out.buf, out.len, 0);"
type_conversion,diff.c,1851,-,+,,47,"		emit_rewrite_lines(&ecbdata, '-', data_one, size_one);"
type_conversion,diff.c,1853,-,+,,47,"		emit_rewrite_lines(&ecbdata, '+', data_two, size_two);"
type_conversion,diff.c,1877,-,+,,40,	buffer->text.ptr[buffer->text.size] = '\0';
type_conversion,diff.c,1928,-,+,,29,"			strbuf_add(&sb, buf, p ? p - buf : count);"
type_conversion,diff.c,1937,-,+,,12,		count -= p + 1 - buf;
type_conversion,diff.c,1942,-,+,,15,"					 sb.buf, sb.len, 0);"
type_conversion,diff.c,1950,-,+,,14,"				 sb.buf, sb.len, 0);"
type_conversion,diff.c,1991,-,+,,3,		*(diff_words->current_plus - 1) == '\n')) {
type_conversion,diff.c,2016,-,+,,53,			diff_words->minus.orig[minus_first + minus_len - 1].end;
type_conversion,diff.c,2023,-,+,,60,		plus_end = diff_words->plus.orig[plus_first + plus_len - 1].end;
type_conversion,diff.c,2033,-,+,,5,"				plus_begin - diff_words->current_plus,"
type_conversion,diff.c,2039,-,+,,5,"				minus_end - minus_begin, minus_begin);"
type_conversion,diff.c,2044,-,+,,5,"				plus_end - plus_begin, plus_begin);"
type_conversion,diff.c,2048,-,+,,27,	diff_words->last_minus = minus_first;
type_conversion,diff.c,2055,-,+,,23,	while (word_regex && *begin < buffer->size) {
type_conversion,diff.c,2058,-,+,,21,"				 buffer->size - *begin, 1, match, 0)) {"
type_conversion,diff.c,2060,-,+,,12,"					'\n', match[0].rm_eo - match[0].rm_so);"
type_conversion,diff.c,2061,-,+,,33,			*end = p ? p - buffer->ptr : match[0].rm_eo + *begin;
type_conversion,diff.c,2073,-,+,,9,	while (*begin < buffer->size && isspace(buffer->ptr[*begin]))
type_conversion,diff.c,2075,-,+,,6,	if (*begin >= buffer->size)
type_conversion,diff.c,2080,-,+,,9,	while (*end < buffer->size && !isspace(buffer->ptr[*end]))
type_conversion,diff.c,2095,-,+,,15,	long alloc = 0;
type_conversion,diff.c,2097,-,+,,14,	out->size = 0;
type_conversion,diff.c,2105,-,+,,14,	for (i = 0; i < buffer->text.size; i++) {
type_conversion,diff.c,2118,-,+,,54,"		memcpy(out->ptr + out->size, buffer->text.ptr + i, j - i);"
type_conversion,diff.c,2119,-,+,,24,		out->ptr[out->size + j - i] = '\n';
type_conversion,diff.c,2120,-,+,,16,		out->size += j - i + 1;
type_conversion,diff.c,2143,-,+,,19,"				 line_prefix, strlen(line_prefix), 0);"
type_conversion,diff.c,2146,-,+,,4,"			diff_words->minus.text.size,"
type_conversion,diff.c,2148,-,+,,33,		diff_words->minus.text.size = 0;
type_conversion,diff.c,2159,-,+,,14,	xpp.flags = 0;
type_conversion,diff.c,2161,-,+,,17,	xecfg.ctxlen = 0;
type_conversion,diff.c,2171,-,+,,20,"					 line_prefix, strlen(line_prefix), 0);"
type_conversion,diff.c,2174,-,+,,4,"			diff_words->plus.text.ptr + diff_words->plus.text.size
			- diff_words->current_plus, diff_words->current_plus);"
type_conversion,diff.c,2177,-,+,,61,	diff_words->minus.text.size = diff_words->plus.text.size = 0;
type_conversion,diff.c,2261,-,+,,14,	for (i = 0; i < ARRAY_SIZE(diff_words_styles); i++) {
type_conversion,diff.c,2262,-,+,,7,		if (o->word_diff == diff_words_styles[i].type) {
type_conversion,diff.c,2319,-,+,,9,	while (0 < l) {
type_conversion,diff.c,2351,-,+,,28,"				 ecbdata->header->buf, ecbdata->header->len, 0);"
type_conversion,diff.c,2359,-,+,,6,"				 strlen(ecbdata->label_path[0]), 0);"
type_conversion,diff.c,2362,-,+,,6,"				 strlen(ecbdata->label_path[1]), 0);"
type_conversion,diff.c,2367,-,+,,16,	    && len == 2 && line[0] == ' ' && line[1] == '\n') {
type_conversion,diff.c,2368,-,+,,13,		line[0] = '\n';
type_conversion,diff.c,2369,-,+,,9,		len = 1;
type_conversion,diff.c,2372,-,+,,6,	if (line[0] == '@') {
type_conversion,diff.c,2377,-,+,,35,"		emit_hunk_header(ecbdata, line, len);"
type_conversion,diff.c,2383,-,+,,4,			ecbdata->diff_words->type == DIFF_WORDS_PORCELAIN ?
type_conversion,diff.c,2385,-,+,,7,		if (line[0] == '-') {
type_conversion,diff.c,2389,-,+,,14,		} else if (line[0] == '+') {
type_conversion,diff.c,2404,-,+,,32,"		emit_diff_symbol(o, s, line, len, 0);"
type_conversion,diff.c,2408,-,+,,10,	switch (line[0]) {
type_conversion,diff.c,2411,-,+,,42,"		emit_add_line(ecbdata, line + 1, len - 1);"
type_conversion,diff.c,2415,-,+,,42,"		emit_del_line(ecbdata, line + 1, len - 1);"
type_conversion,diff.c,2420,-,+,,46,"		emit_context_line(ecbdata, line + 1, len - 1);"
type_conversion,diff.c,2426,-,+,,12,"				 line, len, 0);"
type_conversion,diff.c,2438,-,+,,14,	int len_a = strlen(a);
type_conversion,diff.c,2439,-,+,,14,	int len_b = strlen(b);
type_conversion,diff.c,2441,-,+,,44,"	int qlen_a = quote_c_style(a, NULL, NULL, 0);"
type_conversion,diff.c,2442,-,+,,44,"	int qlen_b = quote_c_style(b, NULL, NULL, 0);"
type_conversion,diff.c,2445,-,+,,32,"		quote_c_style(a, name, NULL, 0);"
type_conversion,diff.c,2447,-,+,,32,"		quote_c_style(b, name, NULL, 0);"
type_conversion,diff.c,2453,-,+,,35,	while (*old_name && *new_name && *old_name == *new_name) {
type_conversion,diff.c,2454,-,+,,7,		if (*old_name == '/')
type_conversion,diff.c,2455,-,+,,32,			pfx_length = old_name - a + 1;
type_conversion,diff.c,2475,-,+,,9,	       *old_name == *new_name) {
type_conversion,diff.c,2476,-,+,,7,		if (*old_name == '/')
type_conversion,diff.c,2477,-,+,,17,			sfx_length = len_a - (old_name - a);
type_conversion,diff.c,2495,-,+,,20,"	strbuf_grow(name, pfx_length + a_midlen + b_midlen + sfx_length + 7);"
type_conversion,diff.c,2497,-,+,,23,"		strbuf_add(name, a, pfx_length);"
type_conversion,diff.c,2500,-,+,,35,"	strbuf_add(name, a + pfx_length, a_midlen);"
type_conversion,diff.c,2502,-,+,,35,"	strbuf_add(name, b + pfx_length, b_midlen);"
type_conversion,diff.c,2505,-,+,,44,"		strbuf_add(name, a + len_a - sfx_length, sfx_length);"
type_conversion,diff.c,2520,-,+,,19,		x->is_renamed = 1;
type_conversion,diff.c,2537,-,+,,6,	if (line[0] == '+')
type_conversion,diff.c,2539,-,+,,11,	else if (line[0] == '-')
type_conversion,diff.c,2565,-,+,,23,"	strbuf_addchars(out, ch, cnt);"
type_conversion,diff.c,2579,-,+,,43,"		quote_c_style(file->name, &pname, NULL, 0);"
type_conversion,diff.c,2595,-,+,,15,"				 NULL, 0, 0);"
type_conversion,diff.c,2624,-,+,,13,"			 sb.buf, sb.len, 0);"
type_conversion,diff.c,2641,-,+,,25,"	uintmax_t max_change = 0, max_len = 0;"
type_conversion,diff.c,2665,-,+,,43,		if (!file->is_interesting && (change == 0)) {
type_conversion,diff.c,2671,-,+,,17,		if (max_len < len)
type_conversion,diff.c,2672,-,+,,14,			max_len = len;
type_conversion,diff.c,2729,-,+,,11,		width = term_columns() - strlen(line_prefix);
type_conversion,diff.c,2752,-,+,,29,	graph_width = max_change + 4 > bin_width ? max_change : bin_width - 4;
type_conversion,diff.c,2757,-,+,,15,"	name_width = (options->stat_name_width > 0 &&
		      options->stat_name_width < max_len) ?
		options->stat_name_width : max_len;"
type_conversion,diff.c,2758,-,+,,9,		      options->stat_name_width < max_len) ?
type_conversion,diff.c,2759,-,+,,3,		options->stat_name_width : max_len;
type_conversion,diff.c,2793,-,+,,52,		if (!file->is_interesting && (added + deleted == 0))
type_conversion,diff.c,2831,-,+,,17,"						 out.buf, out.len, 0);"
type_conversion,diff.c,2842,-,+,,16,"					 out.buf, out.len, 0);"
type_conversion,diff.c,2851,-,+,,16,"					 out.buf, out.len, 0);"
type_conversion,diff.c,2859,-,+,,9,		add = added;
type_conversion,diff.c,2860,-,+,,9,		del = deleted;
type_conversion,diff.c,2862,-,+,,7,		if (graph_width <= max_change) {
type_conversion,diff.c,2863,-,+,,53,"			int total = scale_linear(add + del, graph_width, max_change);"
type_conversion,diff.c,2868,-,+,,42,"				add = scale_linear(add, graph_width, max_change);"
type_conversion,diff.c,2871,-,+,,42,"				del = scale_linear(del, graph_width, max_change);"
type_conversion,diff.c,2879,-,+,,20,"		show_graph(&out, '+', add, add_c, reset);"
type_conversion,diff.c,2880,-,+,,20,"		show_graph(&out, '-', del, del_c, reset);"
type_conversion,diff.c,2883,-,+,,15,"				 out.buf, out.len, 0);"
type_conversion,diff.c,2893,-,+,,53,		    (!file->is_interesting && (added + deleted == 0))) {
type_conversion,diff.c,2907,-,+,,16,"					 NULL, 0, 0);"
type_conversion,diff.c,2923,-,+,,15,		int added = data->files[i]->added;
type_conversion,diff.c,2924,-,+,,17,		int deleted = data->files[i]->deleted;
type_conversion,diff.c,2987,-,+,,30,	unsigned long sum_changes = 0;
type_conversion,diff.c,2988,-,+,,25,	unsigned int sources = 0;
type_conversion,diff.c,2993,-,+,,17,		int namelen = strlen(f->name);
type_conversion,diff.c,2999,-,+,,29,"		if (memcmp(f->name, base, baselen))"
type_conversion,diff.c,3003,-,+,,21,			int newbaselen = slash + 1 - f->name;
type_conversion,diff.c,3004,-,+,,14,"			changes = gather_dirstat(opt, dir, changed, f->name, newbaselen);"
type_conversion,diff.c,3010,-,+,,15,			sources += 2;
type_conversion,diff.c,3021,-,+,,28,	if (baselen && sources != 1) {
type_conversion,diff.c,3023,-,+,,33,			int permille = sum_changes * 1000 / changed;
type_conversion,diff.c,3028,-,+,,13,					return 0;
type_conversion,diff.c,3032,-,+,,9,	return sum_changes;
type_conversion,diff.c,3071,-,+,,19,	dir.cumulative = options->flags.dirstat_cumulative;
type_conversion,diff.c,3073,-,+,,12,	changed = 0;
type_conversion,diff.c,3079,-,+,,23,"			.check_size_only = 1,"
type_conversion,diff.c,3091,-,+,,13,			damage = 0;
type_conversion,diff.c,3103,-,+,,13,			damage = 1;
type_conversion,diff.c,3117,-,+,,21,			copied = added = 0;
type_conversion,diff.c,3121,-,+,,13,			copied = 0;
type_conversion,diff.c,3139,-,+,,13,			damage = 1;
type_conversion,diff.c,3165,-,+,,19,	dir.cumulative = options->flags.dirstat_cumulative;
type_conversion,diff.c,3167,-,+,,12,	changed = 0;
type_conversion,diff.c,3220,-,+,,12,	if (len < marker_size + 1)
type_conversion,diff.c,3223,-,+,,10,	switch (firstchar) {
type_conversion,diff.c,3230,-,+,,7,		if (line[cnt] != firstchar)
type_conversion,diff.c,3233,-,+,,12,	if (len < marker_size + 1 || !isspace(line[marker_size]))
type_conversion,diff.c,3245,-,+,,22,	data->lineno = nb - 1;
type_conversion,diff.c,3261,-,+,,6,	if (line[0] == '+') {
type_conversion,diff.c,3264,-,+,,55,"		if (is_conflict_marker(line + 1, marker_size, len - 1)) {"
type_conversion,diff.c,3265,-,+,,20,			data->status |= 1;
type_conversion,diff.c,3270,-,+,,34,"		bad = ws_check(line + 1, len - 1, data->ws_rule);"
type_conversion,diff.c,3279,-,+,,33,"		ws_check_emit(line + 1, len - 1, data->ws_rule,"
type_conversion,diff.c,3281,-,+,,13,	} else if (line[0] == ' ') {
type_conversion,diff.c,3296,-,+,,10,"	bound = git_deflate_bound(&stream, size);"
type_conversion,diff.c,3297,-,+,,21,	deflated = xmalloc(bound);
type_conversion,diff.c,3299,-,+,,21,	stream.avail_out = bound;
type_conversion,diff.c,3326,-,+,,34,"	deflated = deflate_it(two->ptr, two->size, &deflate_size);"
type_conversion,diff.c,3328,-,+,,32,"		delta = diff_delta(one->ptr, one->size,"
type_conversion,diff.c,3329,-,+,,18,"				   two->ptr, two->size,"
type_conversion,diff.c,3342,-,+,,9,"				 s, strlen(s), 0);"
type_conversion,diff.c,3350,-,+,,9,"				 s, strlen(s), 0);"
type_conversion,diff.c,3361,-,+,,16,		int bytes = (52 < data_size) ? 52 : data_size;
type_conversion,diff.c,3363,-,+,,16,		data_size -= bytes;
type_conversion,diff.c,3365,-,+,,14,			line[0] = bytes + 'A' - 1;
type_conversion,diff.c,3367,-,+,,14,			line[0] = bytes - 26 + 'a' - 1;
type_conversion,diff.c,3371,-,+,,9,		len = strlen(line);
type_conversion,diff.c,3372,-,+,,17,		line[len++] = '\n';
type_conversion,diff.c,3373,-,+,,15,		line[len] = '\0';
type_conversion,diff.c,3376,-,+,,17,"				 line, len, 0);"
type_conversion,diff.c,3378,-,+,,63,"	emit_diff_symbol(o, DIFF_SYMBOL_BINARY_DIFF_FOOTER, NULL, 0, 0);"
type_conversion,diff.c,3385,-,+,,63,"	emit_diff_symbol(o, DIFF_SYMBOL_BINARY_DIFF_HEADER, NULL, 0, 0);"
type_conversion,diff.c,3394,-,+,,19,"		.check_binary = 1,"
type_conversion,diff.c,3397,-,+,,6,	if (one->is_binary == -1) {
type_conversion,diff.c,3404,-,+,,8,			if (one->is_binary == -1 && one->data)
type_conversion,diff.c,3407,-,+,,8,			if (one->is_binary == -1)
type_conversion,diff.c,3411,-,+,,9,	return one->is_binary;
type_conversion,diff.c,3483,-,+,,14,	for (i = 0; i < more_headers->nr; i++)
type_conversion,diff.c,3508,-,+,,14,	if (value < 0)
type_conversion,diff.c,3548,-,+,,6,	if (o->submodule_format == DIFF_SUBMODULE_LOG &&
type_conversion,diff.c,3554,-,+,,5,				two->dirty_submodule);
type_conversion,diff.c,3556,-,+,,13,	} else if (o->submodule_format == DIFF_SUBMODULE_INLINE_DIFF &&
type_conversion,diff.c,3562,-,+,,5,				two->dirty_submodule);
type_conversion,diff.c,3575,-,+,,40,"	a_one = quote_two(a_prefix, name_a + (*name_a == '/'));"
type_conversion,diff.c,3576,-,+,,40,"	b_two = quote_two(b_prefix, name_b + (*name_b == '/'));"
type_conversion,diff.c,3591,-,+,,6,	if (lbl[0][0] == '/') {
type_conversion,diff.c,3593,-,+,,73,"		strbuf_addf(&header, ""%s%snew file mode %06o%s\n"", line_prefix, meta, two->mode, reset);"
type_conversion,diff.c,3599,-,+,,11,	else if (lbl[1][0] == '/') {
type_conversion,diff.c,3600,-,+,,77,"		strbuf_addf(&header, ""%s%sdeleted file mode %06o%s\n"", line_prefix, meta, one->mode, reset);"
type_conversion,diff.c,3607,-,+,,7,		if (one->mode != two->mode) {
type_conversion,diff.c,3608,-,+,,69,"			strbuf_addf(&header, ""%s%sold mode %06o%s\n"", line_prefix, meta, one->mode, reset);"
type_conversion,diff.c,3609,-,+,,69,"			strbuf_addf(&header, ""%s%snew mode %06o%s\n"", line_prefix, meta, two->mode, reset);"
type_conversion,diff.c,3620,-,+,,8,		if ((one->mode ^ two->mode) & S_IFMT)
type_conversion,diff.c,3626,-,+,,19,"					 header.buf, header.len, 0);"
type_conversion,diff.c,3635,-,+,,32,	if (o->irreversible_delete && lbl[1][0] == '/') {
type_conversion,diff.c,3637,-,+,,6,"				 header.len, 0);"
type_conversion,diff.c,3650,-,+,,21,"							 header.buf, header.len,"
type_conversion,diff.c,3651,-,+,,9,							 0);
type_conversion,diff.c,3655,-,+,,19,"					 header.buf, header.len, 0);"
type_conversion,diff.c,3659,-,+,,15,"					 sb.buf, sb.len, 0);"
type_conversion,diff.c,3668,-,+,,33,"		    !memcmp(mf1.ptr, mf2.ptr, mf1.size)) {"
type_conversion,diff.c,3671,-,+,,20,"						 header.buf, header.len, 0);"
type_conversion,diff.c,3674,-,+,,55,"		emit_diff_symbol(o, DIFF_SYMBOL_HEADER, header.buf, header.len, 0);"
type_conversion,diff.c,3682,-,+,,15,"					 sb.buf, sb.len, 0);"
type_conversion,diff.c,3697,-,+,,19,"					 header.buf, header.len, 0);"
type_conversion,diff.c,3701,-,+,,14,"		mf1.size = fill_textconv(o->repo, textconv_one, one, &mf1.ptr);"
type_conversion,diff.c,3702,-,+,,14,"		mf2.size = fill_textconv(o->repo, textconv_two, two, &mf2.ptr);"
type_conversion,diff.c,3721,-,+,,15,		xpp.flags = o->xdl_opts;
type_conversion,diff.c,3726,-,+,,18,		xecfg.ctxlen = o->context;
type_conversion,diff.c,3727,-,+,,27,		xecfg.interhunkctxlen = o->interhunkcontext;
type_conversion,diff.c,3768,-,+,,7,		if (p->status == DIFF_STATUS_ADDED) {
type_conversion,diff.c,3771,-,+,,14,			else if ((p->two->mode & 0777) == 0755)
type_conversion,diff.c,3775,-,+,,14,		} else if (p->status == DIFF_STATUS_DELETED)
type_conversion,diff.c,3782,-,+,,12,	else if ((p->one->mode & 0777) == 0644 &&
type_conversion,diff.c,3783,-,+,,5,		 (p->two->mode & 0777) == 0755)
type_conversion,diff.c,3785,-,+,,12,	else if ((p->one->mode & 0777) == 0755 &&
type_conversion,diff.c,3786,-,+,,5,		 (p->two->mode & 0777) == 0644)
type_conversion,diff.c,3804,-,+,,7,		if (p->status == DIFF_STATUS_MODIFIED && p->score)
type_conversion,diff.c,3809,-,+,,25,	data->is_interesting = p->status != DIFF_STATUS_UNKNOWN;
type_conversion,diff.c,3811,-,+,,43,"		data->comments = get_compact_summary(p, data->is_renamed);"
type_conversion,diff.c,3814,-,+,,23,		data->is_unmerged = 1;
type_conversion,diff.c,3824,-,+,,21,		data->is_binary = 1;
type_conversion,diff.c,3826,-,+,,18,			data->added = 0;
type_conversion,diff.c,3827,-,+,,20,			data->deleted = 0;
type_conversion,diff.c,3837,-,+,,42,"		data->deleted = count_lines(one->data, one->size);"
type_conversion,diff.c,3838,-,+,,40,"		data->added = count_lines(two->data, two->size);"
type_conversion,diff.c,3852,-,+,,15,		xpp.flags = o->xdl_opts;
type_conversion,diff.c,3857,-,+,,18,		xecfg.ctxlen = o->context;
type_conversion,diff.c,3858,-,+,,27,		xecfg.interhunkctxlen = o->interhunkcontext;
type_conversion,diff.c,3876,-,+,,9,			if ((p->status == DIFF_STATUS_MODIFIED)
type_conversion,diff.c,3879,-,+,,8,				&& one->mode == two->mode) {
type_conversion,diff.c,3928,-,+,,18,		xecfg.ctxlen = 1; /* at least one context line */
type_conversion,diff.c,3929,-,+,,15,		xpp.flags = 0;
type_conversion,diff.c,3949,-,+,,19,				data.status = 1; /* report errors */
type_conversion,diff.c,3957,-,+,,27,		o->flags.check_failed = 1;
type_conversion,diff.c,3982,-,+,,27,		spec->mode = canon_mode(mode);
type_conversion,diff.c,3984,-,+,,21,		spec->oid_valid = oid_valid;
type_conversion,diff.c,4044,-,+,,8,	len = strlen(name);
type_conversion,diff.c,4068,-,+,,60,"	    (!lstat(name, &st) && !ie_match_stat(istate, ce, &st, 0)))"
type_conversion,diff.c,4091,-,+,,20,		s->should_free = 1;
type_conversion,diff.c,4105,-,+,,28,	int size_only = options ? options->check_size_only : 0;
type_conversion,diff.c,4106,-,+,,31,	int check_binary = options ? options->check_binary : 0;
type_conversion,diff.c,4124,-,+,,19,	if (size_only && 0 < s->size)
type_conversion,diff.c,4141,-,+,,14,			s->size = 0;
type_conversion,diff.c,4154,-,+,,21,			s->should_free = 1;
type_conversion,diff.c,4177,-,+,,39,		    s->size > big_file_threshold && s->is_binary == -1) {
type_conversion,diff.c,4184,-,+,,62,"		s->data = xmmap(NULL, s->size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,diff.c,4186,-,+,,22,		s->should_munmap = 1;
type_conversion,diff.c,4192,-,+,,18,			size_t size = 0;
type_conversion,diff.c,4194,-,+,,23,			s->should_munmap = 0;
type_conversion,diff.c,4197,-,+,,21,			s->should_free = 1;
type_conversion,diff.c,4227,-,+,,40,			if (s->size > big_file_threshold && s->is_binary == -1) {
type_conversion,diff.c,4238,-,+,,20,		s->should_free = 1;
type_conversion,diff.c,4251,-,+,,39,		s->should_free = s->should_munmap = 0;
type_conversion,diff.c,4287,-,+,,54,"	if (write_in_full(temp->tempfile->fd, blob, size) < 0 ||"
type_conversion,diff.c,4324,-,+,,40,"			if (strbuf_readlink(&sb, one->path, st.st_size) < 0)"
type_conversion,diff.c,4330,-,+,,6,					one->mode : S_IFLNK));
type_conversion,diff.c,4346,-,+,,54,"			xsnprintf(temp->mode, sizeof(temp->mode), ""%06o"", one->mode);"
type_conversion,diff.c,4355,-,+,,22,"			       &one->oid, one->mode);"
type_conversion,diff.c,4406,-,+,,18,	cmd.use_shell = 1;
type_conversion,diff.c,4415,-,+,,9,	return p->score * 100 / MAX_SCORE;
type_conversion,diff.c,4426,-,+,,7,		if (abbrev > the_hash_algo->hexsz)
type_conversion,diff.c,4429,-,+,,18,			hex[abbrev] = '\0';
type_conversion,diff.c,4451,-,+,,10,	switch (p->status) {
type_conversion,diff.c,4457,-,+,,34,"		quote_c_style(name, msg, NULL, 0);"
type_conversion,diff.c,4459,-,+,,35,"		quote_c_style(other, msg, NULL, 0);"
type_conversion,diff.c,4467,-,+,,34,"		quote_c_style(name, msg, NULL, 0);"
type_conversion,diff.c,4470,-,+,,35,"		quote_c_style(other, msg, NULL, 0);"
type_conversion,diff.c,4494,-,+,,13,			abbrev = hexsz;
type_conversion,diff.c,4502,-,+,,14,				abbrev = hexsz;
type_conversion,diff.c,4507,-,+,,7,		if (one->mode == two->mode)
type_conversion,diff.c,4508,-,+,,30,"			strbuf_addf(msg, "" %06o"", one->mode);"
type_conversion,diff.c,4524,-,+,,26,	int complete_rewrite = (p->status == DIFF_STATUS_MODIFIED) && p->score;
type_conversion,diff.c,4573,-,+,,54,"			if (index_path(istate, &one->oid, one->path, &st, 0))"
type_conversion,diff.c,4586,-,+,,7,		if (**namep == '/')
type_conversion,diff.c,4591,-,+,,7,		if (**otherp == '/')
type_conversion,diff.c,4626,-,+,,16,	    (S_IFMT & one->mode) != (S_IFMT & two->mode)) {
type_conversion,diff.c,4715,-,+,,53,	options->output_indicators[OUTPUT_INDICATOR_NEW] = '+';
type_conversion,diff.c,4716,-,+,,53,	options->output_indicators[OUTPUT_INDICATOR_OLD] = '-';
type_conversion,diff.c,4717,-,+,,57,	options->output_indicators[OUTPUT_INDICATOR_CONTEXT] = ' ';
type_conversion,diff.c,4726,-,+,,32,	options->flags.rename_empty = 1;
type_conversion,diff.c,4727,-,+,,33,	options->flags.relative_name = diff_relative;
type_conversion,diff.c,4742,-,+,,51,		options->flags.ignore_untracked_in_submodules = 1;
type_conversion,diff.c,4751,-,+,,37,	options->color_moved_ws_handling = diff_color_moved_ws_default;
type_conversion,diff.c,4765,-,+,,2,"	'\0',"
type_conversion,diff.c,4776,-,+,,47,			filter_bit[(int) diff_status_letters[i]] = (1 << i);
type_conversion,diff.c,4856,-,+,,39,		options->flags.diff_from_contents = 1;
type_conversion,diff.c,4858,-,+,,39,		options->flags.diff_from_contents = 0;
type_conversion,diff.c,4866,-,+,,28,		options->prefix_length = strlen(options->prefix);
type_conversion,diff.c,4897,-,+,,30,		options->flags.recursive = 1;
type_conversion,diff.c,4902,-,+,,30,		options->flags.recursive = 1;
type_conversion,diff.c,4908,-,+,,37,		options->flags.dirty_submodules = 1;
type_conversion,diff.c,4922,-,+,,37,		options->flags.exit_with_status = 1;
type_conversion,diff.c,4948,-,+,,6,	if (*arg == '=') { /* stuck form: --option=value */
type_conversion,diff.c,4952,-,+,,6,	if (*arg != '\0')
type_conversion,diff.c,4974,-,+,,12,"			width = strtoul(value, &end, 10);"
type_conversion,diff.c,4975,-,+,,8,"			if (*end == ',')"
type_conversion,diff.c,4976,-,+,,18,"				name_width = strtoul(end+1, &end, 10);"
type_conversion,diff.c,4977,-,+,,8,"			if (*end == ',')"
type_conversion,diff.c,4978,-,+,,13,"				count = strtoul(end+1, &end, 10);"
type_conversion,diff.c,4983,-,+,,11,"		width = strtoul(value, &end, 10);"
type_conversion,diff.c,4988,-,+,,16,"		name_width = strtoul(value, &end, 10);"
type_conversion,diff.c,4993,-,+,,17,"		graph_width = strtoul(value, &end, 10);"
type_conversion,diff.c,4998,-,+,,11,"		count = strtoul(value, &end, 10);"
type_conversion,diff.c,5039,-,+,,23,	for (i = 0; (optch = optarg[i]) != '\0'; i++) {
type_conversion,diff.c,5050,-,+,,60,		bit = (0 <= optch && optch <= 'Z') ? filter_bit[optch] : 0;
type_conversion,diff.c,5078,-,+,,28,	opt->ws_error_highlight = val;
type_conversion,diff.c,5096,-,+,,25,	opt->flags.recursive = 1;
type_conversion,diff.c,5097,-,+,,33,	opt->flags.tree_in_recursive = 1;
type_conversion,diff.c,5123,-,+,,26,	options->flags.binary = 1;
type_conversion,diff.c,5137,-,+,,6,	if (*arg == 0)
type_conversion,diff.c,5139,-,+,,11,	else if (*arg != '/')
type_conversion,diff.c,5145,-,+,,6,	if (*arg != 0)
type_conversion,diff.c,5174,-,+,,7,		if (options->color_moved == COLOR_MOVED_NO)
type_conversion,diff.c,5192,-,+,,38,		options->color_moved_ws_handling = 0;
type_conversion,diff.c,5222,-,+,,38,		options->flags.stat_with_summary = 0;
type_conversion,diff.c,5224,-,+,,38,		options->flags.stat_with_summary = 1;
type_conversion,diff.c,5289,-,+,,6,	if (*arg != 0)
type_conversion,diff.c,5293,-,+,,39,		options->flags.find_copies_harder = 1;
type_conversion,diff.c,5309,-,+,,6,	if (*arg != 0)
type_conversion,diff.c,5323,-,+,,35,		options->flags.follow_renames = 0;
type_conversion,diff.c,5324,-,+,,43,		options->flags.default_follow_renames = 0;
type_conversion,diff.c,5326,-,+,,35,		options->flags.follow_renames = 1;
type_conversion,diff.c,5339,-,+,,45,	options->flags.override_submodule_config = 1;
type_conversion,diff.c,5410,-,+,,14,	for (i = 0; i < options->anchors_nr; i++)
type_conversion,diff.c,5412,-,+,,24,	options->anchors_nr = 0;
type_conversion,diff.c,5461,-,+,,33,	options->flags.relative_name = !unset;
type_conversion,diff.c,5488,-,+,,35,		options->flags.allow_textconv = 0;
type_conversion,diff.c,5490,-,+,,35,		options->flags.allow_textconv = 1;
type_conversion,diff.c,5491,-,+,,45,		options->flags.textconv_set_via_cmdline = 1;
type_conversion,diff.c,5505,-,+,,22,"		options->context = strtol(arg, &s, 10);"
type_conversion,diff.c,5534,-,+,,7,		if (options->word_diff == DIFF_WORDS_NONE)
type_conversion,diff.c,5546,-,+,,6,	if (options->word_diff == DIFF_WORDS_NONE)
type_conversion,diff.c,5839,-,+,,28,"		  PARSE_OPT_NONEG, NULL, 0, diff_opt_output },"
type_conversion,diff.c,5857,-,+,,7,			   PARSE_OPT_KEEP_DASHDASH |
type_conversion,diff.c,5858,-,+,,7,			   PARSE_OPT_KEEP_UNKNOWN_OPT |
type_conversion,diff.c,5859,-,+,,7,			   PARSE_OPT_NO_INTERNAL_HELP |
type_conversion,diff.c,5860,-,+,,7,			   PARSE_OPT_ONE_SHOT |
type_conversion,diff.c,5861,-,+,,7,			   PARSE_OPT_STOP_AT_NON_OPTION);
type_conversion,diff.c,5873,-,+,,8,	num = 0;
type_conversion,diff.c,5874,-,+,,10,	scale = 1;
type_conversion,diff.c,5877,-,+,,8,		ch = *cp;
type_conversion,diff.c,5879,-,+,,12,			scale = 1;
type_conversion,diff.c,5882,-,+,,24,			scale = dot ? scale*100 : 100;
type_conversion,diff.c,5886,-,+,,17,			if ( scale < 100000 ) {
type_conversion,diff.c,5887,-,+,,14,				scale *= 10;
type_conversion,diff.c,5888,-,+,,16,				num = (num*10) + (ch-'0');
type_conversion,diff.c,5900,-,+,,57,	return (int)((num >= scale) ? MAX_SCORE : (MAX_SCORE * num / scale));
type_conversion,diff.c,5915,-,+,,37,"	struct diff_filepair *dp = xcalloc(1, sizeof(*dp));"
type_conversion,diff.c,5943,-,+,,6,	if (len == the_hash_algo->hexsz)
type_conversion,diff.c,5952,-,+,,11,	abblen = strlen(abbrev);
type_conversion,diff.c,5973,-,+,,6,	if (abblen < the_hash_algo->hexsz - 3) {
type_conversion,diff.c,5992,-,+,,40,"		fprintf(opt->file, "":%06o %06o %s "", p->one->mode, p->two->mode,"
type_conversion,diff.c,5998,-,+,,34,"		fprintf(opt->file, ""%c%03d%c"", p->status, similarity_index(p),"
type_conversion,diff.c,6001,-,+,,30,"		fprintf(opt->file, ""%c%c"", p->status, inter_name_termination);"
type_conversion,diff.c,6004,-,+,,6,	if (p->status == DIFF_STATUS_COPIED ||
type_conversion,diff.c,6005,-,+,,6,	    p->status == DIFF_STATUS_RENAMED) {
type_conversion,diff.c,6172,-,+,,15,		p->status = 0; /* undecided */
type_conversion,diff.c,6205,-,+,,5,			 p->one->mode != p->two->mode ||
type_conversion,diff.c,6224,-,+,,10,	switch (p->status) {
type_conversion,diff.c,6258,-,+,,49,"		strbuf_addf(&sb, "" %s mode %06o "", newdelete, fs->mode);"
type_conversion,diff.c,6262,-,+,,37,"	quote_c_style(fs->path, &sb, NULL, 0);"
type_conversion,diff.c,6265,-,+,,13,"			 sb.buf, sb.len, 0);"
type_conversion,diff.c,6272,-,+,,38,	if (p->one->mode && p->two->mode && p->one->mode != p->two->mode) {
type_conversion,diff.c,6275,-,+,,8,"			    p->one->mode, p->two->mode);"
type_conversion,diff.c,6278,-,+,,43,"			quote_c_style(p->two->path, &sb, NULL, 0);"
type_conversion,diff.c,6282,-,+,,14,"				 sb.buf, sb.len, 0);"
type_conversion,diff.c,6298,-,+,,14,"				 sb.buf, sb.len, 0);"
type_conversion,diff.c,6305,-,+,,9,	switch(p->status) {
type_conversion,diff.c,6322,-,+,,43,"			quote_c_style(p->two->path, &sb, NULL, 0);"
type_conversion,diff.c,6325,-,+,,15,"					 sb.buf, sb.len, 0);"
type_conversion,diff.c,6346,-,+,,13,			*dst++ = c;
type_conversion,diff.c,6348,-,+,,9,	return dst - line;
type_conversion,diff.c,6354,-,+,,25,	unsigned short carry = 0;
type_conversion,diff.c,6360,-,+,,14,	for (i = 0; i < the_hash_algo->rawsz; ++i) {
type_conversion,diff.c,6361,-,+,,12,		carry += result->hash[i] + hash[i];
type_conversion,diff.c,6362,-,+,,21,		result->hash[i] = carry;
type_conversion,diff.c,6372,-,+,,12,"	if (len > 12 && starts_with(line, ""\\ ""))"
type_conversion,diff.c,6374,-,+,,31,"	new_len = remove_space(line, len);"
type_conversion,diff.c,6376,-,+,,44,"	the_hash_algo->update_fn(data->ctx, line, new_len);"
type_conversion,diff.c,6391,-,+,,37,"	the_hash_algo->update_fn(ctx, buf, len);"
type_conversion,diff.c,6416,-,+,,7,		if (p->status == 0)
type_conversion,diff.c,6418,-,+,,7,		if (p->status == DIFF_STATUS_UNKNOWN)
type_conversion,diff.c,6431,-,+,,37,"		len1 = remove_space(p->one->path, strlen(p->one->path));"
type_conversion,diff.c,6432,-,+,,37,"		len2 = remove_space(p->two->path, strlen(p->two->path));"
type_conversion,diff.c,6435,-,+,,48,"		the_hash_algo->update_fn(&ctx, p->one->path, len1);"
type_conversion,diff.c,6437,-,+,,48,"		the_hash_algo->update_fn(&ctx, p->two->path, len2);"
type_conversion,diff.c,6439,-,+,,7,		if (p->one->mode == 0) {
type_conversion,diff.c,6441,-,+,,28,"			patch_id_add_mode(&ctx, p->two->mode);"
type_conversion,diff.c,6442,-,+,,14,		} else if (p->two->mode == 0) {
type_conversion,diff.c,6444,-,+,,28,"			patch_id_add_mode(&ctx, p->one->mode);"
type_conversion,diff.c,6445,-,+,,14,		} else if (p->one->mode != p->two->mode) {
type_conversion,diff.c,6447,-,+,,28,"			patch_id_add_mode(&ctx, p->one->mode);"
type_conversion,diff.c,6449,-,+,,28,"			patch_id_add_mode(&ctx, p->two->mode);"
type_conversion,diff.c,6461,-,+,,8,			if (p->one->mode == 0) {
type_conversion,diff.c,6464,-,+,,50,"				the_hash_algo->update_fn(&ctx, p->two->path, len2);"
type_conversion,diff.c,6465,-,+,,15,			} else if (p->two->mode == 0) {
type_conversion,diff.c,6467,-,+,,50,"				the_hash_algo->update_fn(&ctx, p->one->path, len1);"
type_conversion,diff.c,6471,-,+,,50,"				the_hash_algo->update_fn(&ctx, p->one->path, len1);"
type_conversion,diff.c,6473,-,+,,50,"				the_hash_algo->update_fn(&ctx, p->two->path, len2);"
type_conversion,diff.c,6479,-,+,,16,			xpp.flags = 0;
type_conversion,diff.c,6480,-,+,,19,			xecfg.ctxlen = 3;
type_conversion,diff.c,6511,-,+,,11,		switch (p->status) {
type_conversion,diff.c,6521,-,+,,8,			    p->one->mode != p->two->mode)
type_conversion,diff.c,6586,-,+,,38,"			fill_filespec(one, null_oid(), 0, 0);"
type_conversion,diff.c,6587,-,+,,38,"			fill_filespec(two, null_oid(), 0, 0);"
type_conversion,diff.c,6626,-,+,,31,"			mem_pool_init(&entry_pool, 1024 * 1024);"
type_conversion,diff.c,6630,-,+,,8,			if (o->color_moved == COLOR_MOVED_ZEBRA_DIM)
type_conversion,diff.c,6658,-,+,,14,	for (i = 0; i < options->ignore_regex_nr; i++) {
type_conversion,diff.c,6732,-,+,,62,"			emit_diff_symbol(options, DIFF_SYMBOL_SEPARATOR, NULL, 0, 0);"
type_conversion,diff.c,6736,-,+,,17,"						 NULL, 0, 0);"
type_conversion,diff.c,6778,-,+,,33,			options->flags.has_changes = 1;
type_conversion,diff.c,6780,-,+,,33,			options->flags.has_changes = 0;
type_conversion,diff.c,6786,-,+,,12,	return (((p->status == DIFF_STATUS_MODIFIED) &&
type_conversion,diff.c,6791,-,+,,5,		((p->status != DIFF_STATUS_MODIFIED) &&
type_conversion,diff.c,6855,-,+,,22,"		.check_size_only = 1,"
type_conversion,diff.c,6861,-,+,,10,		return p->skip_stat_unmatch_result;
type_conversion,diff.c,6863,-,+,,30,	p->done_skip_stat_unmatch = 1;
type_conversion,diff.c,6864,-,+,,32,	p->skip_stat_unmatch_result = 0;
type_conversion,diff.c,6881,-,+,,7,	    (p->one->mode != p->two->mode) ||
type_conversion,diff.c,6886,-,+,,33,		p->skip_stat_unmatch_result = 1;
type_conversion,diff.c,6887,-,+,,9,	return p->skip_stat_unmatch_result;
type_conversion,diff.c,6961,-,+,,49,"	promisor_remote_get_direct(repo, to_fetch.oid, to_fetch.nr);"
type_conversion,diff.c,7019,-,+,,32,		options->flags.has_changes = 1;
type_conversion,diff.c,7021,-,+,,32,		options->flags.has_changes = 0;
type_conversion,diff.c,7111,-,+,,43,"	    strncmp(concatpath, options->prefix, options->prefix_length))"
type_conversion,diff.c,7118,-,+,,38,"		fill_filespec(one, oid, oid_valid, mode);"
type_conversion,diff.c,7120,-,+,,38,"		fill_filespec(two, oid, oid_valid, mode);"
type_conversion,diff.c,7126,-,+,,32,		options->flags.has_changes = 1;
type_conversion,diff.c,7152,-,+,,43,"	    strncmp(concatpath, options->prefix, options->prefix_length))"
type_conversion,diff.c,7157,-,+,,45,"	fill_filespec(one, old_oid, old_oid_valid, old_mode);"
type_conversion,diff.c,7158,-,+,,45,"	fill_filespec(two, new_oid, new_oid_valid, new_mode);"
type_conversion,diff.c,7173,-,+,,31,	options->flags.has_changes = 1;
type_conversion,diff.c,7182,-,+,,37,"	    strncmp(path, options->prefix, options->prefix_length))"
type_conversion,diff.c,7188,-,+,,22,	pair->is_unmerged = 1;
type_conversion,diff.c,7206,-,+,,20,	child.use_shell = 1;
type_conversion,diff.c,7213,-,+,,35,"	if (strbuf_read(&buf, child.out, 0) < 0)"
type_conversion,diff.c,7237,-,+,,11,			return 0;
type_conversion,diff.c,7288,-,+,,36,"	fill_filespec(df, oid, oid_valid, mode);"
type_conversion,diff.h,210,-,+,,14,	for (i = 0; i < sizeof(struct diff_flags); i++)
type_conversion,diff.h,211,-,+,,15,		tmp_a[i] |= tmp_b[i];
type_conversion,diffcore-break.c,54,-,+,,52,	struct diff_populate_filespec_options options = { 0 };
type_conversion,diffcore-break.c,97,-,+,,20,			literal_added = 0;
type_conversion,diffcore-break.c,106,-,+,,25,	*merge_score_p = (int)(src_removed * MAX_SCORE / src->size);
type_conversion,diffcore-break.c,114,-,+,,6,	if (delta_size * MAX_SCORE / max_size < break_score)
type_conversion,diffcore-break.c,120,-,+,,19,	if ((src->size * break_score < src_removed * MAX_SCORE) &&
type_conversion,diffcore-break.c,121,-,+,,23,	    (literal_added * 20 < src_removed) &&
type_conversion,diffcore-break.c,122,-,+,,23,	    (literal_added * 20 < src_copied))
type_conversion,diffcore-break.c,189,-,+,,19,		    object_type(p->one->mode) == OBJ_BLOB &&
type_conversion,diffcore-break.c,190,-,+,,19,		    object_type(p->two->mode) == OBJ_BLOB &&
type_conversion,diffcore-break.c,210,-,+,,17,				dp->score = score;
type_conversion,diffcore-break.c,211,-,+,,23,				dp->broken_pair = 1;
type_conversion,diffcore-break.c,216,-,+,,17,				dp->score = score;
type_conversion,diffcore-break.c,217,-,+,,23,				dp->broken_pair = 1;
type_conversion,diffcore-delta.c,56,-,+,,42,"			     st_mult(sizeof(struct spanhash), sz)));"
type_conversion,diffcore-delta.c,59,-,+,,58,"	memset(new_spanhash->data, 0, sizeof(struct spanhash) * sz);"
type_conversion,diffcore-delta.c,65,-,+,,25,		bucket = o->hashval & (sz - 1);
type_conversion,diffcore-delta.c,89,-,+,,21,	bucket = hashval & (lim - 1);
type_conversion,diffcore-delta.c,94,-,+,,13,			h->cnt = cnt;
type_conversion,diffcore-delta.c,101,-,+,,14,			h->cnt += cnt;
type_conversion,diffcore-delta.c,130,-,+,,20,	unsigned int sz = one->size;
type_conversion,diffcore-delta.c,141,-,+,,20,	accum1 = accum2 = 0;
type_conversion,diffcore-delta.c,143,-,+,,20,		unsigned int c = *buf++;
type_conversion,diffcore-delta.c,148,-,+,,23,		if (is_text && c == '\r' && sz && *buf == '\n')
type_conversion,diffcore-delta.c,154,-,+,,24,		if (++n < 64 && c != '\n')
type_conversion,diffcore-delta.c,156,-,+,,32,		hashval = (accum1 + accum2 * 0x61) % HASHBASE;
type_conversion,diffcore-delta.c,159,-,+,,21,		accum1 = accum2 = 0;
type_conversion,diffcore-delta.c,162,-,+,,32,		hashval = (accum1 + accum2 * 0x61) % HASHBASE;
type_conversion,diffcore-delta.c,196,-,+,,12,	sc = la = 0;
type_conversion,diffcore-delta.c,207,-,+,,10,			la += d->cnt;
type_conversion,diffcore-delta.c,211,-,+,,13,		dst_cnt = 0;
type_conversion,diffcore-delta.c,217,-,+,,10,			la += dst_cnt - src_cnt;
type_conversion,diffcore-delta.c,218,-,+,,10,			sc += src_cnt;
type_conversion,diffcore-delta.c,221,-,+,,10,			sc += dst_cnt;
type_conversion,diffcore-delta.c,225,-,+,,9,		la += d->cnt;
type_conversion,diffcore-order.c,24,-,+,,40,"	sz = strbuf_read_file(&sb, orderfile, 0);"
type_conversion,diffcore-order.c,25,-,+,,11,	if (sz < 0)
type_conversion,diffcore-order.c,35,-,+,,31,			for (ep = cp; ep < endp && *ep != '\n'; ep++)
type_conversion,diffcore-order.c,38,-,+,,8,			if (*cp == '\n' || *cp == '#')
type_conversion,diffcore-order.c,43,-,+,,9,				if (*ep == '\n') {
type_conversion,diffcore-order.c,44,-,+,,12,					*ep = 0;
type_conversion,diffcore-order.c,47,-,+,,32,"					order[cnt] = xmemdupz(cp, ep - cp);"
type_conversion,diffcore-order.c,72,-,+,,36,"			if (!wildmatch(order[i], p.buf, 0))"
type_conversion,diffcore-order.c,77,-,+,,10,			*cp = 0;
type_conversion,diffcore-pickaxe.c,28,-,+,,6,	if (line[0] != '+' && line[0] != '-')
type_conversion,diffcore-pickaxe.c,32,-,+,,49,"	if (!regexec_buf(data->regexp, line + 1, len - 1, 1,"
type_conversion,diffcore-pickaxe.c,58,-,+,,17,	xecfg.ctxlen = o->context;
type_conversion,diffcore-pickaxe.c,59,-,+,,26,	xecfg.interhunkctxlen = o->interhunkcontext;
type_conversion,diffcore-pickaxe.c,77,-,+,,21,	unsigned int cnt = 0;
type_conversion,diffcore-pickaxe.c,78,-,+,,21,	unsigned long sz = mf->size;
type_conversion,diffcore-pickaxe.c,86,-,+,,41,"		       !regexec_buf(regexp, data, sz, 1, &regmatch, flags)) {"
type_conversion,diffcore-pickaxe.c,89,-,+,,10,			sz -= regmatch.rm_eo;
type_conversion,diffcore-pickaxe.c,104,-,+,,18,			if (offset == -1)
type_conversion,diffcore-pickaxe.c,121,-,+,,53,"	unsigned int c1 = one ? contains(one, regexp, kws, 0) : 0;"
type_conversion,diffcore-pickaxe.c,122,-,+,,58,"	unsigned int c2 = two ? contains(two, regexp, kws, c1 + 1) : 0;"
type_conversion,diffcore-pickaxe.c,166,-,+,,13,"	mf1.size = fill_textconv(o->repo, textconv_one, p->one, &mf1.ptr);"
type_conversion,diffcore-pickaxe.c,167,-,+,,13,"	mf2.size = fill_textconv(o->repo, textconv_two, p->two, &mf2.ptr);"
type_conversion,diffcore-pickaxe.c,225,-,+,,32,"		regerror(err, regex, errbuf, 1024);"
type_conversion,diffcore-pickaxe.c,233,-,+,,13,	int opts = o->pickaxe_opts;
type_conversion,diffcore-rename.c,63,-,+,,42,"		strintmap_set(break_idx, p->one->path, rename_dst_nr);"
type_conversion,diffcore-rename.c,74,-,+,,16,"	int src_len = strlen(src->path), dst_len = strlen(dst->path);"
type_conversion,diffcore-rename.c,78,-,+,,7,		if (c1 != c2)
type_conversion,diffcore-rename.c,80,-,+,,7,		if (c1 == '/')
type_conversion,diffcore-rename.c,83,-,+,,22,	return (!src_len || src->path[src_len - 1] == '/') &&
type_conversion,diffcore-rename.c,84,-,+,,16,		(!dst_len || dst->path[dst_len - 1] == '/');
type_conversion,diffcore-rename.c,125,-,+,,58,"	promisor_remote_get_direct(options->repo, to_fetch.oid, to_fetch.nr);"
type_conversion,diffcore-rename.c,167,-,+,,29,	dpf_opt->check_size_only = 1;
type_conversion,diffcore-rename.c,188,-,+,,6,	if (max_size * (MAX_SCORE-minimum_score) < delta_size * MAX_SCORE)
type_conversion,diffcore-rename.c,191,-,+,,29,	dpf_opt->check_size_only = 0;
type_conversion,diffcore-rename.c,209,-,+,,17,		score = (int)(src_copied * MAX_SCORE / max_size);
type_conversion,diffcore-rename.c,228,-,+,,22,	dst->renamed_pair = 1;
type_conversion,diffcore-rename.c,232,-,+,,16,		dst->score = score;
type_conversion,diffcore-rename.c,249,-,+,,6,	if (a->score == b->score)
type_conversion,diffcore-rename.c,250,-,+,,10,		return b->name_score - a->name_score;
type_conversion,diffcore-rename.c,252,-,+,,9,	return b->score - a->score;
type_conversion,diffcore-rename.c,266,-,+,,11,			return 0;
type_conversion,diffcore-rename.c,297,-,+,,8,			if (source->mode != target->mode)
type_conversion,diffcore-rename.c,353,-,+,,40,"	hashmap_init(&file_table, NULL, NULL, rename_src_nr);"
type_conversion,diffcore-rename.c,380,-,+,,36,"	return slash ? xstrndup(filename, slash - filename) : xstrdup("""");"
type_conversion,diffcore-rename.c,388,-,+,,11,	*slash = '\0';
type_conversion,diffcore-rename.c,401,-,+,,15,		if (count > highest_count) {
type_conversion,diffcore-rename.c,402,-,+,,20,			highest_count = count;
type_conversion,diffcore-rename.c,420,-,+,,14,			unknown = count;
type_conversion,diffcore-rename.c,421,-,+,,23,		} else if (count >= first) {
type_conversion,diffcore-rename.c,423,-,+,,12,			first = count;
type_conversion,diffcore-rename.c,424,-,+,,23,		} else if (count >= second) {
type_conversion,diffcore-rename.c,425,-,+,,13,			second = count;
type_conversion,diffcore-rename.c,449,-,+,,34,"	strintmap_incr(counts, new_dir, 1);"
type_conversion,diffcore-rename.c,489,-,+,,18,		int drd_flag = NOT_RELEVANT;
type_conversion,diffcore-rename.c,530,-,+,,9,				if (new_dir_first_char != old_sub_dir[0] ||
type_conversion,diffcore-rename.c,555,-,+,,19,		if (drd_flag == RELEVANT_FOR_SELF || first_time_in_loop)
type_conversion,diffcore-rename.c,559,-,+,,19,		if (drd_flag == NOT_RELEVANT)
type_conversion,diffcore-rename.c,582,-,+,,17,		info->setup = 0;
type_conversion,diffcore-rename.c,585,-,+,,16,	info->setup = 1;
type_conversion,diffcore-rename.c,607,-,+,,21,"					      dirname, 0 /* value irrelevant */);"
type_conversion,diffcore-rename.c,623,-,+,,44,"			strintmap_set(&info->idx_map, filename, i);"
type_conversion,diffcore-rename.c,734,-,+,,14,	for (i = 0; i < to_remove.nr; ++i)
type_conversion,diffcore-rename.c,869,-,+,,15,"		src_index = strintmap_get(sources, base);"
type_conversion,diffcore-rename.c,876,-,+,,16,"			dst_index = strintmap_get(dests, base);"
type_conversion,diffcore-rename.c,877,-,+,,21,			if (src_index == -1 || dst_index == -1) {
type_conversion,diffcore-rename.c,878,-,+,,17,				src_index = i;
type_conversion,diffcore-rename.c,879,-,+,,17,"				dst_index = idx_possible_rename(filename, info);"
type_conversion,diffcore-rename.c,881,-,+,,21,			if (dst_index == -1)
type_conversion,diffcore-rename.c,897,-,+,,58,"	promisor_remote_get_direct(options->repo, to_fetch.oid, to_fetch.nr);"
type_conversion,diffcore-rename.c,941,-,+,,19,"		.check_binary = 0,"
type_conversion,diffcore-rename.c,969,-,+,,34,"			strintmap_set(&sources, base, -1);"
type_conversion,diffcore-rename.c,971,-,+,,34,"			strintmap_set(&sources, base, i);"
type_conversion,diffcore-rename.c,983,-,+,,32,"			strintmap_set(&dests, base, -1);"
type_conversion,diffcore-rename.c,985,-,+,,32,"			strintmap_set(&dests, base, i);"
type_conversion,diffcore-rename.c,1012,-,+,,15,"		src_index = strintmap_get(&sources, base);"
type_conversion,diffcore-rename.c,1020,-,+,,16,"			dst_index = strintmap_get(&dests, base);"
type_conversion,diffcore-rename.c,1021,-,+,,21,			if (src_index == -1 || dst_index == -1) {
type_conversion,diffcore-rename.c,1022,-,+,,17,				src_index = i;
type_conversion,diffcore-rename.c,1023,-,+,,17,"				dst_index = idx_possible_rename(filename, info);"
type_conversion,diffcore-rename.c,1025,-,+,,21,			if (dst_index == -1)
type_conversion,diffcore-rename.c,1041,-,+,,23,"			record_rename_pair(dst_index, src_index, score);"
type_conversion,diffcore-rename.c,1105,-,+,,14,"	if (st_mult(num_destinations, num_sources)"
type_conversion,diffcore-rename.c,1106,-,+,,17,"	    <= st_mult(rename_limit, rename_limit))"
type_conversion,diffcore-rename.c,1122,-,+,,14,"	if (st_mult(num_destinations, limited_sources)"
type_conversion,diffcore-rename.c,1123,-,+,,17,"	    <= st_mult(rename_limit, rename_limit))"
type_conversion,diffcore-rename.c,1141,-,+,,8,		    (mx[i].score < minimum_score))
type_conversion,diffcore-rename.c,1148,-,+,,44,"		record_rename_pair(mx[i].dst, mx[i].src, mx[i].score);"
type_conversion,diffcore-rename.c,1248,-,+,,10,		while (*old_dir != '\0' &&
type_conversion,diffcore-rename.c,1249,-,+,,10,"		       NOT_RELEVANT != strintmap_get(dirs_removed, old_dir)) {"
type_conversion,diffcore-rename.c,1282,-,+,,7,		    RELEVANT_FOR_SELF &&
type_conversion,diffcore-rename.c,1285,-,+,,11,				      RELEVANT_FOR_ANCESTOR);
type_conversion,diffcore-rename.c,1302,-,+,,14,		if (val == RELEVANT_LOCATION) {
type_conversion,diffcore-rename.c,1310,-,+,,16,				if (res == NOT_RELEVANT)
type_conversion,diffcore-rename.c,1313,-,+,,16,				if (res == RELEVANT_FOR_SELF) {
type_conversion,diffcore-rename.c,1325,-,+,,12,					      RELEVANT_NO_MORE);
type_conversion,diffcore-rename.c,1397,-,+,,19,"		.check_binary = 0,"
type_conversion,diffcore-rename.c,1406,-,+,,15,	info.setup = 0;
type_conversion,diffcore-rename.c,1463,-,+,,29,"	mem_pool_init(&local_pool, 32*1024);"
type_conversion,diffcore-rename.c,1478,-,+,,6,	if (minimum_score == MAX_SCORE)
type_conversion,diffcore-rename.c,1502,-,+,,32,			(int)(factor * (MAX_SCORE - minimum_score));
type_conversion,diffcore-rename.c,1601,-,+,,21,"			this_src.score = estimate_similarity(options->repo,
							     one, two,
							     minimum_score,
							     &dpf_options);"
type_conversion,diffcore-rename.c,1605,-,+,,26,"			this_src.name_score = basename_same(one, two);"
type_conversion,difftool.c,57,-,+,,16,	cmd.git_cmd = 1;
type_conversion,difftool.c,66,-,+,,6,	if (*p != ':')
type_conversion,difftool.c,69,-,+,,6,	if (*p != ' ')
type_conversion,difftool.c,72,-,+,,6,	if (*p != ' ')
type_conversion,difftool.c,76,-,+,,6,	if (*p != ' ')
type_conversion,difftool.c,80,-,+,,6,	if (*p != ' ')
type_conversion,difftool.c,97,-,+,,38,	if (buf->len && buf->buf[buf->len - 1] != '/')
type_conversion,difftool.c,120,-,+,,74,"		    !index_fd(the_repository->index, &wt_oid, fd, &st, OBJ_BLOB, name, 0)) {"
type_conversion,difftool.c,187,-,+,,30,		e->left[0] = e->right[0] = '\0';
type_conversion,difftool.c,224,-,+,,26,	update_index.no_stdin = 1;
type_conversion,difftool.c,225,-,+,,27,	update_index.no_stdout = 1;
type_conversion,difftool.c,226,-,+,,27,	update_index.no_stderr = 1;
type_conversion,difftool.c,227,-,+,,25,	update_index.git_cmd = 1;
type_conversion,difftool.c,228,-,+,,27,	update_index.use_shell = 0;
type_conversion,difftool.c,229,-,+,,31,	update_index.clean_on_exit = 1;
type_conversion,difftool.c,238,-,+,,24,	diff_files.no_stdin = 1;
type_conversion,difftool.c,239,-,+,,23,	diff_files.git_cmd = 1;
type_conversion,difftool.c,240,-,+,,25,	diff_files.use_shell = 0;
type_conversion,difftool.c,241,-,+,,29,	diff_files.clean_on_exit = 1;
type_conversion,difftool.c,299,-,+,,44,"		} else if (strbuf_read_file(&link, path, 128))"
type_conversion,difftool.c,394,-,+,,54,	if (!wtdir.len || !is_dir_sep(wtdir.buf[wtdir.len - 1]))
type_conversion,difftool.c,396,-,+,,18,"	mkdir(ldir.buf, 0700);"
type_conversion,difftool.c,397,-,+,,18,"	mkdir(rdir.buf, 0700);"
type_conversion,difftool.c,401,-,+,,24,	lstate.base_dir_len = ldir.len;
type_conversion,difftool.c,402,-,+,,17,	lstate.force = 1;
type_conversion,difftool.c,405,-,+,,24,	rstate.base_dir_len = rdir.len;
type_conversion,difftool.c,406,-,+,,17,	rstate.force = 1;
type_conversion,difftool.c,412,-,+,,20,	child->no_stdin = 1;
type_conversion,difftool.c,413,-,+,,19,	child->git_cmd = 1;
type_conversion,difftool.c,414,-,+,,21,	child->use_shell = 0;
type_conversion,difftool.c,415,-,+,,25,	child->clean_on_exit = 1;
type_conversion,difftool.c,443,-,+,,7,		if (status != 'C' && status != 'R') {
type_conversion,difftool.c,477,-,+,,16,		if (lmode && status != 'C') {
type_conversion,difftool.c,478,-,+,,22,"			if (checkout_path(lmode, &loid, src_path, &lstate)) {"
type_conversion,difftool.c,498,-,+,,23,"				if (checkout_path(rmode, &roid, dst_path,"
type_conversion,difftool.c,511,-,+,,33,"					make_cache_entry(&wtindex, rmode, &roid,"
type_conversion,difftool.c,512,-,+,,22,"							 dst_path, 0, 0);"
type_conversion,difftool.c,533,-,+,,20,						st.st_mode = 0644;
type_conversion,difftool.c,535,-,+,,13,						      st.st_mode)) {
type_conversion,difftool.c,582,-,+,,17,		cmd.git_cmd = 1;
type_conversion,difftool.c,602,-,+,,51,"	hashmap_init(&wt_modified, path_entry_cmp, NULL, wtindex.cache_nr);"
type_conversion,difftool.c,603,-,+,,52,"	hashmap_init(&tmp_modified, path_entry_cmp, NULL, wtindex.cache_nr);"
type_conversion,difftool.c,605,-,+,,14,	for (i = 0; i < wtindex.cache_nr; i++) {
type_conversion,difftool.c,643,-,+,,39,"				   copy_file(wtdir.buf, rdir.buf, st.st_mode))"
type_conversion,difftool.c,687,-,+,,19,	child->git_cmd = 1;
type_conversion,difftool.c,730,-,+,,33,"			     builtin_difftool_usage, PARSE_OPT_KEEP_UNKNOWN_OPT |"
type_conversion,difftool.c,731,-,+,,9,			     PARSE_OPT_KEEP_DASHDASH);
type_conversion,dir-iterator.c,93,-,+,,60,	if (!is_dir_sep(iter->base.path.buf[iter->base.path.len - 1]))
type_conversion,dir-iterator.c,110,-,+,,23,	level->entries_idx = 0;
type_conversion,dir-iterator.c,148,-,+,,35,		&iter->levels[iter->levels_nr - 1];
type_conversion,dir-iterator.c,156,-,+,,9,	return --iter->levels_nr;
type_conversion,dir-iterator.c,177,-,+,,41,			      iter->levels[iter->levels_nr - 1].prefix_len;
type_conversion,dir-iterator.c,197,-,+,,26,		if (iter->levels_nr == 0)
type_conversion,dir-iterator.c,205,-,+,,36,			&iter->levels[iter->levels_nr - 1];
type_conversion,dir-iterator.c,253,-,+,,36,			&iter->levels[iter->levels_nr - 1];
type_conversion,dir-iterator.c,274,-,+,,42,"	struct dir_iterator_int *iter = xcalloc(1, sizeof(*iter));"
type_conversion,dir-iterator.c,282,-,+,,20,	iter->levels_nr = 0;
type_conversion,dir.c,83,-,+,,7,		if (*s++ == '/')
type_conversion,dir.c,111,-,+,,21,"		return is_dir_sep(b[len_a]) && !fspathncmp(a, b, len_a);"
type_conversion,dir.c,112,-,+,,20,"	return is_dir_sep(a[len_b]) && !fspathncmp(a, b, len_b);"
type_conversion,dir.c,125,-,+,,41,"		if (ps_strncmp(item, pattern, string, prefix))"
type_conversion,dir.c,131,-,+,,21,		int pattern_len = strlen(++pattern);
type_conversion,dir.c,132,-,+,,20,		int string_len = strlen(string);
type_conversion,dir.c,158,-,+,,33,"		strbuf_add(&pat_buf, pattern, patternlen);"
type_conversion,dir.c,162,-,+,,32,"		strbuf_add(&str_buf, string, stringlen);"
type_conversion,dir.c,168,-,+,,45,"	match_status = wildmatch(use_pat, use_str, flags);"
type_conversion,dir.c,179,-,+,,15,	size_t max = 0;
type_conversion,dir.c,198,-,+,,14,"		size_t i = 0, len = 0, item_len;"
type_conversion,dir.c,202,-,+,,15,			item_len = pathspec->items[n].prefix;
type_conversion,dir.c,204,-,+,,15,			item_len = pathspec->items[n].nowildcard_len;
type_conversion,dir.c,207,-,+,,8,			if (c != pathspec->items[0].match[i])
type_conversion,dir.c,209,-,+,,8,			if (c == '/')
type_conversion,dir.c,210,-,+,,15,				len = i + 1;
type_conversion,dir.c,240,-,+,,29,	unsigned exclusive_flags = DIR_SHOW_IGNORED | DIR_SHOW_IGNORED_TOO;
type_conversion,dir.c,241,-,+,,7,	if ((dir->flags & exclusive_flags) == exclusive_flags)
type_conversion,dir.c,252,-,+,,38,"	read_directory(dir, istate, prefix, prefix_len, pathspec);"
type_conversion,dir.c,254,-,+,,9,	return prefix_len;
type_conversion,dir.c,263,-,+,,7,		if (*cp++ != '/')
type_conversion,dir.c,291,-,+,,14,	*size_out = 0;
type_conversion,dir.c,295,-,+,,15,	if (!data || type != OBJ_BLOB) {
type_conversion,dir.c,305,-,+,,12,	if (sz == 0) {
type_conversion,dir.c,310,-,+,,16,	if (data[sz - 1] != '\n') {
type_conversion,dir.c,311,-,+,,36,"		data = xrealloc(data, st_add(sz, 1));"
type_conversion,dir.c,312,-,+,,16,		data[sz++] = '\n';
type_conversion,dir.c,315,-,+,,22,	*size_out = xsize_t(sz);
type_conversion,dir.c,386,-,+,,42,"	    strncmp(item->match, name - prefix, item->prefix))"
type_conversion,dir.c,397,-,+,,60,"	if (matchlen <= namelen && !ps_strncmp(item, match, name, matchlen)) {"
type_conversion,dir.c,401,-,+,,7,		if (match[matchlen-1] == '/' || name[matchlen] == '/')
type_conversion,dir.c,404,-,+,,6,		   match[matchlen - 1] == '/' &&
type_conversion,dir.c,406,-,+,,37,"		   !ps_strncmp(item, match, name, namelen))"
type_conversion,dir.c,418,-,+,,16,		int offset = name[namelen-1] == '/' ? 1 : 0;
type_conversion,dir.c,420,-,+,,8,		    (match[namelen-offset] == '/') &&
type_conversion,dir.c,421,-,+,,38,"		    !ps_strncmp(item, match, name, namelen))"
type_conversion,dir.c,427,-,+,,11,			       item->nowildcard_len - prefix))
type_conversion,dir.c,510,-,+,,15,		if (seen && seen[i] == MATCHED_EXACTLY)
type_conversion,dir.c,525,-,+,,8,			if (name[len] == '/')
type_conversion,dir.c,535,-,+,,16,			if (seen && seen[i] < how)
type_conversion,dir.c,536,-,+,,15,				seen[i] = how;
type_conversion,dir.c,577,-,+,,7,"						strlen(submodule_name),"
type_conversion,dir.c,632,-,+,,21,		unsigned char c = *match++;
type_conversion,dir.c,634,-,+,,7,		if (c == '\0' || is_glob_special(c))
type_conversion,dir.c,641,-,+,,9,	return string[simple_length(string)] == '\0';
type_conversion,dir.c,652,-,+,,11,	*flags = 0;
type_conversion,dir.c,653,-,+,,6,	if (*p == '!') {
type_conversion,dir.c,658,-,+,,21,	if (len && p[len - 1] == '/') {
type_conversion,dir.c,662,-,+,,11,	for (i = 0; i < len; i++) {
type_conversion,dir.c,663,-,+,,7,		if (p[i] == '/')
type_conversion,dir.c,674,-,+,,6,	if (*nowildcardlen > len)
type_conversion,dir.c,675,-,+,,20,		*nowildcardlen = len;
type_conversion,dir.c,676,-,+,,6,	if (*p == '*' && no_wildcard(p + 1))
type_conversion,dir.c,679,-,+,,16,	*patternlen = len;
type_conversion,dir.c,702,-,+,,18,	size_t count  = 0;
type_conversion,dir.c,710,-,+,,7,		if (*read == '\\')
type_conversion,dir.c,719,-,+,,9,	*set = 0;
type_conversion,dir.c,721,-,+,,14,	if (count > 2 &&
type_conversion,dir.c,722,-,+,,6,	    *(set - 1) == '*' &&
type_conversion,dir.c,723,-,+,,6,	    *(set - 2) == '/')
type_conversion,dir.c,724,-,+,,16,		*(set - 2) = 0;
type_conversion,dir.c,742,-,+,,19,		pl->full_cone = 0;
type_conversion,dir.c,747,-,+,,19,		pl->full_cone = 1;
type_conversion,dir.c,752,-,+,,6,	    *given->pattern != '/' ||
type_conversion,dir.c,776,-,+,,7,		if (*prev == '\\')
type_conversion,dir.c,780,-,+,,7,		if (*cur == '\\' &&
type_conversion,dir.c,785,-,+,,7,		if (*prev == '/' &&
type_conversion,dir.c,786,-,+,,7,		    *cur == '*' &&
type_conversion,dir.c,787,-,+,,7,		    *next == 0)
type_conversion,dir.c,812,-,+,,28,		translated->patternlen = given->patternlen - 2;
type_conversion,dir.c,841,-,+,,27,	translated->patternlen = given->patternlen;
type_conversion,dir.c,860,-,+,,26,	pl->use_cone_patterns = 0;
type_conversion,dir.c,881,-,+,,24,"	strbuf_setlen(buffer, 0);"
type_conversion,dir.c,883,-,+,,6,	if (path[0] != '/')
type_conversion,dir.c,891,-,+,,25,"		strbuf_setlen(buffer, slash_pos - buffer->buf);"
type_conversion,dir.c,937,-,+,,8,	len = strlen(path);
type_conversion,dir.c,970,-,+,,11,		switch (*p) {
type_conversion,dir.c,985,-,+,,17,		*last_space = '\0';
type_conversion,dir.c,1003,-,+,,13,	if (len && name[len - 1] == '/')
type_conversion,dir.c,1006,-,+,,9,	last = dir->dirs_nr;
type_conversion,dir.c,1010,-,+,,32,"		cmp = strncmp(name, d->name, len);"
type_conversion,dir.c,1011,-,+,,33,		if (!cmp && strlen(d->name) > len)
type_conversion,dir.c,1036,-,+,,15,	dir->valid = 0;
type_conversion,dir.c,1037,-,+,,22,	dir->untracked_nr = 0;
type_conversion,dir.c,1038,-,+,,14,	for (i = 0; i < dir->dirs_nr; i++)
type_conversion,dir.c,1063,-,+,,15,	dir->valid = 0;
type_conversion,dir.c,1064,-,+,,22,	dir->untracked_nr = 0;
type_conversion,dir.c,1065,-,+,,14,	for (i = 0; i < dir->dirs_nr; i++)
type_conversion,dir.c,1066,-,+,,27,		dir->dirs[i]->recurse = 0;
type_conversion,dir.c,1092,-,+,,16,	size_t size = 0;
type_conversion,dir.c,1114,-,+,,15,		if (size == 0) {
type_conversion,dir.c,1124,-,+,,7,"		if (read_in_full(fd, buf, size) != size) {"
type_conversion,dir.c,1129,-,+,,17,		buf[size++] = '\n';
type_conversion,dir.c,1137,-,+,,43,"				 (pos = index_name_pos(istate, fname, strlen(fname))) >= 0 &&"
type_conversion,dir.c,1162,-,+,,61,"	hashmap_init(&pl->recursive_hashmap, pl_hashmap_cmp, NULL, 0);"
type_conversion,dir.c,1163,-,+,,58,"	hashmap_init(&pl->parent_hashmap, pl_hashmap_cmp, NULL, 0);"
type_conversion,dir.c,1168,-,+,,11,		size -= buf - pl->filebuf;
type_conversion,dir.c,1172,-,+,,14,	for (i = 0; i < size; i++) {
type_conversion,dir.c,1173,-,+,,7,		if (buf[i] == '\n') {
type_conversion,dir.c,1174,-,+,,28,			if (entry != buf + i && entry[0] != '#') {
type_conversion,dir.c,1175,-,+,,19,				buf[i - (i && buf[i-1] == '\r')] = 0;
type_conversion,dir.c,1240,-,+,,43,"	if (add_patterns(fname, """", 0, pl, NULL, 0, oid_stat) < 0)"
type_conversion,dir.c,1256,-,+,,38,"		    !fspathncmp(pattern, basename, basenamelen))"
type_conversion,dir.c,1263,-,+,,8,				   patternlen - 1))
type_conversion,dir.c,1285,-,+,,6,	if (*pattern == '/') {
type_conversion,dir.c,1296,-,+,,18,	    (baselen && pathname[baselen] != '/') ||
type_conversion,dir.c,1297,-,+,,33,"	    fspathncmp(pathname, base, baselen))"
type_conversion,dir.c,1311,-,+,,33,"		if (fspathncmp(pattern, name, prefix))"
type_conversion,dir.c,1364,-,+,,9,"					   pathlen - (basename - pathname),"
type_conversion,dir.c,1400,-,+,,15,	int result = NOT_MATCHED;
type_conversion,dir.c,1420,-,+,,41,"	strbuf_add(&parent_pathname, pathname, pathlen);"
type_conversion,dir.c,1429,-,+,,28,	if (parent_pathname.len > 0 &&
type_conversion,dir.c,1430,-,+,,48,	    parent_pathname.buf[parent_pathname.len - 1] == '/') {
type_conversion,dir.c,1431,-,+,,37,		slash_pos = parent_pathname.len - 1;
type_conversion,dir.c,1432,-,+,,37,"		strbuf_add(&parent_pathname, ""-"", 1);"
type_conversion,dir.c,1435,-,+,,61,		slash_pos = slash_ptr ? slash_ptr - parent_pathname.buf : 0;
type_conversion,dir.c,1440,-,+,,12,		result = MATCHED_RECURSIVE;
type_conversion,dir.c,1446,-,+,,12,		result = MATCHED;
type_conversion,dir.c,1453,-,+,,12,		result = MATCHED;
type_conversion,dir.c,1460,-,+,,12,		result = MATCHED_RECURSIVE;
type_conversion,dir.c,1509,-,+,,21,	     end > path && match == UNDECIDED;
type_conversion,dir.c,1512,-,+,,41,		for (slash = end - 1; slash > path && *slash != '/'; slash--)
type_conversion,dir.c,1515,-,+,,43,"		match = path_matches_pattern_list(path, end - path,"
type_conversion,dir.c,1522,-,+,,9,	return match > 0;
type_conversion,dir.c,1581,-,+,,49,"		    !strncmp(dir->internal.basebuf.buf, base, stk->baselen))"
type_conversion,dir.c,1606,-,+,,40,"	strbuf_setlen(&dir->internal.basebuf, current < 0 ? 0 : current);"
type_conversion,dir.c,1629,-,+,,20,						 cp - base - current);
type_conversion,dir.c,1632,-,+,,18,		stk->baselen = cp - base;
type_conversion,dir.c,1636,-,+,,54,"		strbuf_add(&dir->internal.basebuf, base + current, stk->baselen - current);"
type_conversion,dir.c,1642,-,+,,50,			dir->internal.basebuf.buf[stk->baselen - 1] = 0;
type_conversion,dir.c,1647,-,+,,50,			dir->internal.basebuf.buf[stk->baselen - 1] = '/';
type_conversion,dir.c,1712,-,+,,40,"	strbuf_setlen(&dir->internal.basebuf, baselen);"
type_conversion,dir.c,1726,-,+,,16,	int pathlen = strlen(pathname);
type_conversion,dir.c,1759,-,+,,13,	ent->len = len;
type_conversion,dir.c,1829,-,+,,9,	while (pos < istate->cache_nr) {
type_conversion,dir.c,1833,-,+,,34,"		if (strncmp(ce->name, dirname, len))"
type_conversion,dir.c,1835,-,+,,13,		endchar = ce->name[len];
type_conversion,dir.c,1836,-,+,,7,		if (endchar > '/')
type_conversion,dir.c,1838,-,+,,7,		if (endchar == '/')
type_conversion,dir.c,1897,-,+,,6,	if (status == index_directory)
type_conversion,dir.c,1899,-,+,,6,	if (status == index_gitdir)
type_conversion,dir.c,1901,-,+,,6,	if (status != index_nonexistent)
type_conversion,dir.c,1922,-,+,,7,	if ((dir->flags & DIR_SKIP_NESTED_GIT) ||
type_conversion,dir.c,1923,-,+,,5,		!(dir->flags & DIR_NO_GITLINKS)) {
type_conversion,dir.c,1950,-,+,,9,			if ((dir->flags & DIR_SKIP_NESTED_GIT) ||
type_conversion,dir.c,1957,-,+,,8,	if (!(dir->flags & DIR_SHOW_OTHER_DIRECTORIES)) {
type_conversion,dir.c,1959,-,+,,8,		    (dir->flags & DIR_SHOW_IGNORED_TOO) &&
type_conversion,dir.c,1960,-,+,,8,		    (dir->flags & DIR_SHOW_IGNORED_TOO_MODE_MATCHING)) {
type_conversion,dir.c,1973,-,+,,10,			if (!(dir->flags & DIR_HIDE_EMPTY_DIRECTORIES))
type_conversion,dir.c,1976,-,+,,8,"			if (read_directory_recursive(dir, istate, dirname, len,
						     untracked, 1, 1, pathspec) == path_excluded)"
type_conversion,dir.c,1977,-,+,,42,"						     untracked, 1, 1, pathspec) == path_excluded)"
type_conversion,dir.c,2003,-,+,,9,		if (!(dir->flags & DIR_HIDE_EMPTY_DIRECTORIES))
type_conversion,dir.c,2011,-,+,,8,		if ((dir->flags & DIR_SHOW_IGNORED_TOO) &&
type_conversion,dir.c,2012,-,+,,8,		    (dir->flags & DIR_SHOW_IGNORED_TOO_MODE_MATCHING))
type_conversion,dir.c,2027,-,+,,8,	    !(dir->flags & (DIR_SHOW_IGNORED |
type_conversion,dir.c,2028,-,+,,8,			    DIR_SHOW_IGNORED_TOO |
type_conversion,dir.c,2029,-,+,,8,			    DIR_HIDE_EMPTY_DIRECTORIES))) {
type_conversion,dir.c,2040,-,+,,17,	check_only = ((dir->flags & DIR_HIDE_EMPTY_DIRECTORIES) &&
type_conversion,dir.c,2041,-,+,,11,		      !(dir->flags & DIR_SHOW_IGNORED_TOO));
type_conversion,dir.c,2081,-,+,,6,	if (state == path_excluded) {
type_conversion,dir.c,2093,-,+,,6,			((dir->flags & DIR_SHOW_IGNORED_TOO) &&
type_conversion,dir.c,2094,-,+,,6,			 (dir->flags & DIR_SHOW_IGNORED_TOO_MODE_MATCHING));
type_conversion,dir.c,2114,-,+,,7,	if ((dir->flags & DIR_SHOW_IGNORED_TOO) &&
type_conversion,dir.c,2115,-,+,,8,	    !(dir->flags & DIR_KEEP_UNTRACKED_CONTENTS)) {
type_conversion,dir.c,2127,-,+,,6,	if (state == path_none && !(dir->flags & DIR_HIDE_EMPTY_DIRECTORIES))
type_conversion,dir.c,2161,-,+,,44,"		if (!ps_strncmp(item, item->match, path, len))"
type_conversion,dir.c,2201,-,+,,44,"		    !ps_strncmp(item, item->match, path, pathlen))"
type_conversion,dir.c,2204,-,+,,7,		    item->match[pathlen] == '/' &&
type_conversion,dir.c,2205,-,+,,44,"		    !ps_strncmp(item, item->match, path, pathlen))"
type_conversion,dir.c,2235,-,+,,9,	while (pos < istate->cache_nr) {
type_conversion,dir.c,2237,-,+,,31,"		if (strncmp(ce->name, path, len))"
type_conversion,dir.c,2239,-,+,,7,		if (ce->name[len] > '/')
type_conversion,dir.c,2241,-,+,,7,		if (ce->name[len] < '/')
type_conversion,dir.c,2257,-,+,,6,	if (dtype != DT_UNKNOWN && !(follow_symlink && dtype == DT_LNK))
type_conversion,dir.c,2316,-,+,,22,"	strbuf_setlen(path, baselen);"
type_conversion,dir.c,2323,-,+,,24,"	strbuf_complete(path, '/');"
type_conversion,dir.c,2330,-,+,,59,"		return read_directory_recursive(dir, istate, path->buf, path->len,"
type_conversion,dir.c,2356,-,+,,22,"	strbuf_setlen(path, baselen);"
type_conversion,dir.c,2358,-,+,,31,"	if (simplify_away(path->buf, path->len, pathspec))"
type_conversion,dir.c,2361,-,+,,57,"	dtype = resolve_dtype(cdir->d_type, istate, path->buf, path->len);"
type_conversion,dir.c,2364,-,+,,61,"	has_path_in_index = !!index_file_exists(istate, path->buf, path->len,"
type_conversion,dir.c,2387,-,+,,7,	if ((dir->flags & DIR_COLLECT_KILLED_ONLY) &&
type_conversion,dir.c,2390,-,+,,52,"	    (directory_exists_in_index(istate, path->buf, path->len) == index_nonexistent))"
type_conversion,dir.c,2399,-,+,,20,	if (excluded && !(dir->flags & (DIR_SHOW_IGNORED|DIR_SHOW_IGNORED_TOO)))
type_conversion,dir.c,2414,-,+,,23,"				       path->buf, path->len,"
type_conversion,dir.c,2419,-,+,,52,"		    !match_pathspec(istate, pathspec, path->buf, path->len,"
type_conversion,dir.c,2465,-,+,,6,	if (untracked->check_only != !!check_only)
type_conversion,dir.c,2475,-,+,,41,	if (path->len && path->buf[path->len - 1] != '/') {
type_conversion,dir.c,2477,-,+,,40,"		prep_exclude(dir, istate, path->buf, path->len);"
type_conversion,dir.c,2478,-,+,,35,"		strbuf_setlen(path, path->len - 1);"
type_conversion,dir.c,2480,-,+,,40,"		prep_exclude(dir, istate, path->buf, path->len);"
type_conversion,dir.c,2483,-,+,,9,	return untracked->valid;
type_conversion,dir.c,2527,-,+,,9,	while (cdir->nr_dirs < cdir->untracked->dirs_nr) {
type_conversion,dir.c,2538,-,+,,6,	if (cdir->nr_files < cdir->untracked->untracked_nr) {
type_conversion,dir.c,2555,-,+,,28,		cdir->untracked->valid = 1;
type_conversion,dir.c,2556,-,+,,30,		cdir->untracked->recurse = 1;
type_conversion,dir.c,2572,-,+,,7,		if (dir->flags & DIR_SHOW_IGNORED)
type_conversion,dir.c,2573,-,+,,41,"			dir_add_name(dir, istate, path->buf, path->len);"
type_conversion,dir.c,2574,-,+,,13,		else if ((dir->flags & DIR_SHOW_IGNORED_TOO) ||
type_conversion,dir.c,2575,-,+,,6,			((dir->flags & DIR_COLLECT_IGNORED) &&
type_conversion,dir.c,2576,-,+,,40,"			exclude_matches_pathspec(path->buf, path->len,"
type_conversion,dir.c,2578,-,+,,44,"			dir_add_ignored(dir, istate, path->buf, path->len);"
type_conversion,dir.c,2582,-,+,,7,		if (dir->flags & DIR_SHOW_IGNORED)
type_conversion,dir.c,2584,-,+,,40,"		dir_add_name(dir, istate, path->buf, path->len);"
type_conversion,dir.c,2627,-,+,,26,"	strbuf_add(&path, base, baselen);"
type_conversion,dir.c,2634,-,+,,27,		untracked->check_only = !!check_only;
type_conversion,dir.c,2642,-,+,,7,		if (state > dir_state)
type_conversion,dir.c,2646,-,+,,7,		if (state == path_recurse) {
type_conversion,dir.c,2651,-,+,,23,					      path.len - baselen);
type_conversion,dir.c,2654,-,+,,9,"							 path.len, ud,"
type_conversion,dir.c,2656,-,+,,8,			if (subdir_state > dir_state)
type_conversion,dir.c,2660,-,+,,52,"			    !match_pathspec(istate, pathspec, path.buf, path.len,"
type_conversion,dir.c,2683,-,+,,9,				if (dir_state >= path_excluded) {
type_conversion,dir.c,2690,-,+,,8,			if (dir_state == path_untracked) {
type_conversion,dir.c,2715,-,+,,32,"	return name_compare(e1->name, e1->len, e2->name, e2->len);"
type_conversion,dir.c,2722,-,+,,25,		(out->name[out->len - 1] == '/') &&
type_conversion,dir.c,2723,-,+,,32,"		!memcmp(out->name, in->name, out->len);"
type_conversion,dir.c,2755,-,+,,16,	while (len && path[len - 1] == '/')
type_conversion,dir.c,2767,-,+,,24,"		cp = memchr(cp, '/', path + len - cp);"
type_conversion,dir.c,2771,-,+,,14,			baselen = cp - path;
type_conversion,dir.c,2773,-,+,,25,"		strbuf_add(&sb, path, baselen);"
type_conversion,dir.c,2777,-,+,,25,"		strbuf_add(&sb, path, prevlen);"
type_conversion,dir.c,2779,-,+,,37,"		strbuf_add(&subdir, path+prevlen, baselen-prevlen);"
type_conversion,dir.c,2783,-,+,,7,		if (state != path_recurse)
type_conversion,dir.c,2794,-,+,,9,	return state == path_recurse;
type_conversion,dir.c,2846,-,+,,10,		return 0;
type_conversion,dir.c,2852,-,+,,9,	return DIR_SHOW_OTHER_DIRECTORIES | DIR_HIDE_EMPTY_DIRECTORIES;
type_conversion,dir.c,2857,-,+,,39,"	struct untracked_cache *uc = xcalloc(1, sizeof(*uc));"
type_conversion,dir.c,2858,-,+,,26,"	strbuf_init(&uc->ident, 100);"
type_conversion,dir.c,2860,-,+,,31,	uc->dir_flags = flags >= 0 ? flags : new_untracked_cache_flags(istate);
type_conversion,dir.c,2922,-,+,,6,	if (dir->flags & (DIR_SHOW_IGNORED | DIR_SHOW_IGNORED_TOO |
type_conversion,dir.c,2923,-,+,,4,			DIR_COLLECT_IGNORED))
type_conversion,dir.c,2952,-,+,,6,	if (dir->flags != dir->untracked->dir_flags) {
type_conversion,dir.c,2978,-,+,,32,"			new_untracked_cache(istate, dir->flags);"
type_conversion,dir.c,3010,-,+,,18,	root->recurse = 1;
type_conversion,dir.c,3026,-,+,,26,"		strbuf_add(&tmp, path, path_len);"
type_conversion,dir.c,3056,-,+,,32,	dir->internal.visited_paths = 0;
type_conversion,dir.c,3057,-,+,,38,	dir->internal.visited_directories = 0;
type_conversion,dir.c,3086,-,+,,29,			force_untracked_cache = (istate->repo->settings.core_untracked_cache == UNTRACKED_CACHE_WRITE);
type_conversion,dir.c,3117,-,+,,6,	if (a == b)
type_conversion,dir.c,3121,-,+,,9,	return a - b;
type_conversion,dir.c,3149,-,+,,17,	if (is_dir_sep(dir[-1]))
type_conversion,dir.c,3150,-,+,,21,		return is_dir_sep(subdir[-1]) ? offset : -1;
type_conversion,dir.c,3153,-,+,,20,	return is_dir_sep(*subdir) ? offset + 1 : -1;
type_conversion,dir.c,3207,-,+,,45,	for (ptr = start; ptr < end && !is_dir_sep(*ptr); ptr++) {
type_conversion,dir.c,3208,-,+,,7,		if (*ptr == '@')
type_conversion,dir.c,3215,-,+,,36,	while (start < end && (is_dir_sep(end[-1]) || isspace(end[-1])))
type_conversion,dir.c,3217,-,+,,20,	if (end - start > 5 && is_dir_sep(end[-5]) &&
type_conversion,dir.c,3218,-,+,,32,"	    !strncmp(end - 4, "".git"", 4)) {"
type_conversion,dir.c,3220,-,+,,36,		while (start < end && is_dir_sep(end[-1]))
type_conversion,dir.c,3229,-,+,,20,	if (end - start < 0)
type_conversion,dir.c,3241,-,+,,25,"	if (memchr(start, '/', end - start) == NULL"
type_conversion,dir.c,3242,-,+,,28,"	    && memchr(start, ':', end - start) != NULL) {"
type_conversion,dir.c,3244,-,+,,45,		while (start < ptr && isdigit(ptr[-1]) && ptr[-1] != ':')
type_conversion,dir.c,3246,-,+,,22,		if (start < ptr && ptr[-1] == ':')
type_conversion,dir.c,3257,-,+,,36,	while (start < ptr && !is_dir_sep(ptr[-1]) && ptr[-1] != ':')
type_conversion,dir.c,3264,-,+,,8,	len = end - start;
type_conversion,dir.c,3267,-,+,,22,	if (!len || (len == 1 && *start == '/'))
type_conversion,dir.c,3284,-,+,,8,			if ((unsigned char)ch < '\x20')
type_conversion,dir.c,3285,-,+,,10,				ch = '\x20';
type_conversion,dir.c,3294,-,+,,10,		*out = '\0';
type_conversion,dir.c,3296,-,+,,14,			out[-1] = '\0';
type_conversion,dir.c,3305,-,+,,37,	while (dir < end - 1 && is_dir_sep(end[-1]))
type_conversion,dir.c,3307,-,+,,9,	*end = '\0';
type_conversion,dir.c,3314,-,+,,30,"	int ret = 0, original_len = path->len, len, kept_down = 0;"
type_conversion,dir.c,3342,-,+,,24,"	strbuf_complete(path, '/');"
type_conversion,dir.c,3344,-,+,,8,	len = path->len;
type_conversion,dir.c,3348,-,+,,23,"		strbuf_setlen(path, len);"
type_conversion,dir.c,3372,-,+,,22,"	strbuf_setlen(path, original_len);"
type_conversion,dir.c,3403,-,+,,60,"	if (excludes_file && !access_or_warn(excludes_file, R_OK, 0))"
type_conversion,dir.c,3410,-,+,,35,"		if (!access_or_warn(path, R_OK, 0))"
type_conversion,dir.c,3426,-,+,,26,	pl->use_cone_patterns = core_sparse_checkout_cone;
type_conversion,dir.c,3427,-,+,,73,"	res = add_patterns_from_file_to_list(sparse_filename, """", 0, pl, NULL, 0);"
type_conversion,dir.c,3445,-,+,,13,			*slash = '\0';
type_conversion,dir.c,3541,-,+,,29,		untracked->untracked_nr = 0;
type_conversion,dir.c,3542,-,+,,27,		untracked->check_only = 0;
type_conversion,dir.c,3546,-,+,,28,"		ewah_set(wd->check_only, i);"
type_conversion,dir.c,3548,-,+,,23,"		ewah_set(wd->valid, i);"
type_conversion,dir.c,3553,-,+,,28,"		ewah_set(wd->sha1_valid, i);"
type_conversion,dir.c,3558,-,+,,25,"	intlen = encode_varint(untracked->untracked_nr, intbuf);"
type_conversion,dir.c,3559,-,+,,26,"	strbuf_add(out, intbuf, intlen);"
type_conversion,dir.c,3562,-,+,,25,"	for (i = 0, value = 0; i < untracked->dirs_nr; i++)"
type_conversion,dir.c,3565,-,+,,25,"	intlen = encode_varint(value, intbuf);"
type_conversion,dir.c,3566,-,+,,26,"	strbuf_add(out, intbuf, intlen);"
type_conversion,dir.c,3568,-,+,,61,"	strbuf_add(out, untracked->name, strlen(untracked->name) + 1);"
type_conversion,dir.c,3570,-,+,,14,	for (i = 0; i < untracked->untracked_nr; i++)
type_conversion,dir.c,3572,-,+,,41,			   strlen(untracked->untracked[i]) + 1);
type_conversion,dir.c,3574,-,+,,14,	for (i = 0; i < untracked->dirs_nr; i++)
type_conversion,dir.c,3593,-,+,,26,"	strbuf_add(out, varbuf, varint_len);"
type_conversion,dir.c,3597,-,+,,55,"	strbuf_add(out, untracked->ss_info_exclude.oid.hash, hashsz);"
type_conversion,dir.c,3598,-,+,,56,"	strbuf_add(out, untracked->ss_excludes_file.oid.hash, hashsz);"
type_conversion,dir.c,3599,-,+,,83,"	strbuf_add(out, untracked->exclude_per_dir, strlen(untracked->exclude_per_dir) + 1);"
type_conversion,dir.c,3603,-,+,,30,"		varint_len = encode_varint(0, varbuf);"
type_conversion,dir.c,3604,-,+,,27,"		strbuf_add(out, varbuf, varint_len);"
type_conversion,dir.c,3612,-,+,,23,"	strbuf_init(&wd.out, 1024);"
type_conversion,dir.c,3613,-,+,,27,"	strbuf_init(&wd.sb_stat, 1024);"
type_conversion,dir.c,3614,-,+,,27,"	strbuf_init(&wd.sb_sha1, 1024);"
type_conversion,dir.c,3617,-,+,,29,"	varint_len = encode_varint(wd.index, varbuf);"
type_conversion,dir.c,3618,-,+,,26,"	strbuf_add(out, varbuf, varint_len);"
type_conversion,dir.c,3640,-,+,,14,	for (i = 0; i < ucd->dirs_nr; i++)
type_conversion,dir.c,3642,-,+,,14,	for (i = 0; i < ucd->untracked_nr; i++)
type_conversion,dir.c,3695,-,+,,10,	value = decode_varint(&data);
type_conversion,dir.c,3698,-,+,,18,	ud.recurse	   = 1;
type_conversion,dir.c,3704,-,+,,31,	ud.dirs_alloc = ud.dirs_nr = decode_varint(&data);
type_conversion,dir.c,3709,-,+,,27,"	eos = memchr(data, '\0', end - data);"
type_conversion,dir.c,3715,-,+,,45,"	memcpy(untracked->name, data, eos - data + 1);"
type_conversion,dir.c,3718,-,+,,14,	for (i = 0; i < untracked->untracked_nr; i++) {
type_conversion,dir.c,3719,-,+,,28,"		eos = memchr(data, '\0', end - data);"
type_conversion,dir.c,3722,-,+,,44,"		untracked->untracked[i] = xmemdupz(data, eos - data);"
type_conversion,dir.c,3729,-,+,,14,	for (i = 0; i < untracked->dirs_nr; i++) {
type_conversion,dir.c,3740,-,+,,19,	ud->check_only = 1;
type_conversion,dir.c,3753,-,+,,14,	ud->valid = 1;
type_conversion,dir.c,3786,-,+,,26,	const unsigned offset = sizeof(struct ondisk_untracked_cache);
type_conversion,dir.c,3787,-,+,,51,	const unsigned exclude_per_dir_offset = offset + 2 * hashsz;
type_conversion,dir.c,3789,-,+,,12,	if (sz <= 1 || end[-1] != '\0')
type_conversion,dir.c,3793,-,+,,14,	ident_len = decode_varint(&next);
type_conversion,dir.c,3803,-,+,,26,"	strbuf_init(&uc->ident, ident_len);"
type_conversion,dir.c,3804,-,+,,32,"	strbuf_add(&uc->ident, ident, ident_len);"
type_conversion,dir.c,3815,-,+,,10,	next += exclude_per_dir_offset + strlen(exclude_per_dir) + 1;
type_conversion,dir.c,3819,-,+,,8,	len = decode_varint(&next);
type_conversion,dir.c,3820,-,+,,27,	if (next > end || len == 0)
type_conversion,dir.c,3831,-,+,,38,"	if (read_one_dir(&uc->root, &rd) || rd.index != len)"
type_conversion,dir.c,3835,-,+,,39,"	len = ewah_read_mmap(rd.valid, next, end - next);"
type_conversion,dir.c,3836,-,+,,12,	if (len < 0)
type_conversion,dir.c,3840,-,+,,44,"	len = ewah_read_mmap(rd.check_only, next, end - next);"
type_conversion,dir.c,3841,-,+,,12,	if (len < 0)
type_conversion,dir.c,3845,-,+,,44,"	len = ewah_read_mmap(rd.sha1_valid, next, end - next);"
type_conversion,dir.c,3846,-,+,,12,	if (len < 0)
type_conversion,dir.c,3872,-,+,,15,	ucd->valid = 0;
type_conversion,dir.c,3873,-,+,,22,	ucd->untracked_nr = 0;
type_conversion,dir.c,3907,-,+,,23,		int component_len = rest - path;
type_conversion,dir.c,3919,-,+,,25,	return uc->dir_flags & DIR_SHOW_OTHER_DIRECTORIES;
type_conversion,dir.c,3927,-,+,,39,"	if (!safe_path && !verify_path(path, 0))"
type_conversion,dir.c,3930,-,+,,12,"				 path, strlen(path));"
type_conversion,dir.c,3942,-,+,,17,	if (path[len - 1] != '/') {
type_conversion,dir.c,3947,-,+,,32,"		strbuf_add(&tmp, path, len - 1);"
type_conversion,dir.c,3984,-,+,,14,	for (i = 0; i < subrepo.index->cache_nr; i++) {
type_conversion,dir.c,3990,-,+,,10,		while (i + 1 < subrepo.index->cache_nr &&
type_conversion,dir.c,4071,-,+,,6,	if (flags & PATH_MATCH_NATIVE &&
type_conversion,dir.c,4072,-,+,,6,	    flags & PATH_MATCH_XPLATFORM)
type_conversion,dir.c,4074,-,+,,13,	else if (!(flags & PATH_MATCH_KINDS_MASK))
type_conversion,dir.c,4077,-,+,,6,	if (flags & PATH_MATCH_STARTS_WITH_DOT_SLASH &&
type_conversion,dir.c,4078,-,+,,6,	    flags & PATH_MATCH_STARTS_WITH_DOT_DOT_SLASH)
type_conversion,dir.c,4080,-,+,,13,	else if (!(flags & PATH_MATCH_PLATFORM_MASK))
type_conversion,dir.c,4083,-,+,,6,	if (*p++ != '.')
type_conversion,dir.c,4085,-,+,,6,	if (flags & PATH_MATCH_STARTS_WITH_DOT_DOT_SLASH &&
type_conversion,dir.c,4086,-,+,,6,	    *p++ != '.')
type_conversion,dir.c,4089,-,+,,6,	if (flags & PATH_MATCH_NATIVE)
type_conversion,dir.c,4090,-,+,,21,		return is_dir_sep(*p);
type_conversion,dir.c,4091,-,+,,11,	else if (flags & PATH_MATCH_XPLATFORM)
type_conversion,dir.c,4092,-,+,,31,		return is_xplatform_dir_sep(*p);
type_conversion,dir.h,486,-,+,,10,	return (name[0] == '.' &&
type_conversion,dir.h,487,-,+,,4,		(name[1] == '\0' ||
type_conversion,dir.h,488,-,+,,5,		 (name[1] == '.' && name[2] == '\0')));
type_conversion,dir.h,576,-,+,,58,	int has_trailing_dir = ent->len && ent->name[ent->len - 1] == '/';
type_conversion,dir.h,577,-,+,,42,	int len = has_trailing_dir ? ent->len - 1 : ent->len;
type_conversion,dir.h,664,-,+,,32,"	return path_match_flags(path, what | PATH_MATCH_NATIVE);"
type_conversion,dir.h,676,-,+,,32,"	return path_match_flags(path, what | PATH_MATCH_NATIVE);"
type_conversion,dump.c,30,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,dump.c,68,-,+,,7,		if (*argv[1] != '-')
type_conversion,editor.c,78,-,+,,22,			const char term = is_terminal_dumb() ? '\n' : ' ';
type_conversion,editor.c,82,-,+,,5,				term);
type_conversion,editor.c,91,-,+,,17,		p.use_shell = 1;
type_conversion,editor.c,120,-,+,,37,"	if (strbuf_read_file(buffer, path, 0) < 0)"
type_conversion,editor.c,148,-,+,,57,"	else if (write_in_full(fd, buffer->buf, buffer->len) < 0) {"
type_conversion,entry.c,20,-,+,,23,	char *buf = xmallocz(path_len);
type_conversion,entry.c,27,-,+,,30,		} while (len < path_len && path[len] != '/');
type_conversion,entry.c,30,-,+,,14,		buf[len] = 0;
type_conversion,entry.c,48,-,+,,18,"		if (mkdir(buf, 0777)) {"
type_conversion,entry.c,50,-,+,,44,"			    !unlink_or_warn(buf) && !mkdir(buf, 0777))"
type_conversion,entry.c,62,-,+,,16,	int origlen = path->len;
type_conversion,entry.c,77,-,+,,23,"		strbuf_setlen(path, origlen);"
type_conversion,entry.c,86,-,+,,17,	mode = (mode & 0100) ? 0777 : 0666;
type_conversion,entry.c,99,-,+,,7,		if (type == OBJ_BLOB)
type_conversion,entry.c,114,-,+,,53,"		return create_file(path, !symlink ? ce->ce_mode : 0666);"
type_conversion,entry.c,173,-,+,,29,	unsigned processed_paths = 0;
type_conversion,entry.c,174,-,+,,25,	off_t filtered_bytes = 0;
type_conversion,entry.c,185,-,+,,27,	while (dco->filters.nr > 0) {
type_conversion,entry.c,195,-,+,,30,			if (available_paths.nr <= 0) {
type_conversion,entry.c,232,-,+,,14,"						       strlen(path->string), 0);"
type_conversion,entry.c,234,-,+,,33,"					display_progress(progress, ++processed_paths);"
type_conversion,entry.c,236,-,+,,24,					filtered_bytes += ce->ce_stat_data.sd_size;
type_conversion,entry.c,237,-,+,,35,"					display_throughput(progress, filtered_bytes);"
type_conversion,entry.c,284,-,+,,19,	size_t newsize = 0;
type_conversion,entry.c,326,-,+,,14,		if (dco && dco->state == CE_RETRY) {
type_conversion,entry.c,328,-,+,,11,			size = 0;
type_conversion,entry.c,339,-,+,,14,		if (dco && dco->state != CE_NO_DELAY) {
type_conversion,entry.c,381,-,+,,15,		if (wrote < 0)
type_conversion,entry.c,388,-,+,,19,"		if (mkdir(path, 0777) < 0)"
type_conversion,entry.c,422,-,+,,25,	while (path < slash && *slash != '/')
type_conversion,entry.c,424,-,+,,32,"	if (!has_dirs_only_path(path, slash - path, skiplen)) {"
type_conversion,entry.c,444,-,+,,14,	for (i = 0; i < state->istate->cache_nr; i++) {
type_conversion,entry.c,453,-,+,,8,			if (parallel_checkout_status() == PC_RUNNING)
type_conversion,entry.c,498,-,+,,37,"	strbuf_add(&path, state->base_dir, state->base_dir_len);"
type_conversion,entry.c,501,-,+,,28,"	if (!check_path(path.buf, path.len, &st, state->base_dir_len)) {"
type_conversion,entry.c,520,-,+,,34,"					NULL, oid_to_hex(&ce->oid), 0);"
type_conversion,entry.c,570,-,+,,31,"	create_directories(path.buf, path.len, state);"
type_conversion,environment.c,59,-,+,,33,size_t delta_base_cache_limit = 96 * 1024 * 1024;
type_conversion,environment.c,60,-,+,,36,unsigned long big_file_threshold = 512 * 1024 * 1024;
type_conversion,environment.c,175,-,+,,28,	return argv->v[argv->nr - 1];
type_conversion,environment.c,390,-,+,,36,static int the_shared_repository = PERM_UMASK;
type_conversion,error.c,18,-,+,,7,	case REFTABLE_IO_ERROR:
type_conversion,error.c,20,-,+,,7,	case REFTABLE_FORMAT_ERROR:
type_conversion,error.c,22,-,+,,7,	case REFTABLE_NOT_EXIST_ERROR:
type_conversion,error.c,24,-,+,,7,	case REFTABLE_LOCK_ERROR:
type_conversion,error.c,26,-,+,,7,	case REFTABLE_API_ERROR:
type_conversion,error.c,28,-,+,,7,	case REFTABLE_ZLIB_ERROR:
type_conversion,error.c,30,-,+,,7,	case REFTABLE_EMPTY_TABLE_ERROR:
type_conversion,error.c,32,-,+,,7,	case REFTABLE_REFNAME_ERROR:
type_conversion,error.c,34,-,+,,7,	case REFTABLE_ENTRY_TOO_BIG_ERROR:
type_conversion,error.c,36,-,+,,7,	case REFTABLE_OUTDATED_ERROR:
type_conversion,ewah_bitmap.c,35,-,+,,22,	size_t rlw_offset = (uint8_t *)self->rlw - (uint8_t *)self->buffer;
type_conversion,ewah_bitmap.c,42,-,+,,40,"	buffer_grow(self, self->buffer_size + 1);"
type_conversion,ewah_bitmap.c,54,-,+,,17,	size_t added = 0;
type_conversion,ewah_bitmap.c,57,-,+,,64,	if (rlw_get_run_bit(self->rlw) != v && rlw_size(self->rlw) == 0) {
type_conversion,ewah_bitmap.c,59,-,+,,49,	} else if (rlw_get_literal_words(self->rlw) != 0 ||
type_conversion,ewah_bitmap.c,61,-,+,,25,"		buffer_push_rlw(self, 0);"
type_conversion,ewah_bitmap.c,73,-,+,,25,"		buffer_push_rlw(self, 0);"
type_conversion,ewah_bitmap.c,80,-,+,,15,	if (number > 0) {
type_conversion,ewah_bitmap.c,81,-,+,,25,"		buffer_push_rlw(self, 0);"
type_conversion,ewah_bitmap.c,93,-,+,,16,	if (number == 0)
type_conversion,ewah_bitmap.c,94,-,+,,10,		return 0;
type_conversion,ewah_bitmap.c,105,-,+,,25,"		buffer_push_rlw(self, 0);"
type_conversion,ewah_bitmap.c,107,-,+,,36,"		rlw_set_literal_words(self->rlw, 1);"
type_conversion,ewah_bitmap.c,109,-,+,,10,		return 2;
type_conversion,ewah_bitmap.c,112,-,+,,49,"	rlw_set_literal_words(self->rlw, current_num + 1);"
type_conversion,ewah_bitmap.c,118,-,+,,9,	return 1;
type_conversion,ewah_bitmap.c,137,-,+,,13,			for (i = 0; i < can_add; ++i)
type_conversion,ewah_bitmap.c,147,-,+,,27,		if (number - can_add == 0)
type_conversion,ewah_bitmap.c,150,-,+,,25,"		buffer_push_rlw(self, 0);"
type_conversion,ewah_bitmap.c,158,-,+,,56,	int no_literal = (rlw_get_literal_words(self->rlw) == 0);
type_conversion,ewah_bitmap.c,161,-,+,,31,	if (no_literal && run_len == 0) {
type_conversion,ewah_bitmap.c,168,-,+,,44,"		rlw_set_running_len(self->rlw, run_len + 1);"
type_conversion,ewah_bitmap.c,170,-,+,,10,		return 0;
type_conversion,ewah_bitmap.c,172,-,+,,25,"		buffer_push_rlw(self, 0);"
type_conversion,ewah_bitmap.c,181,-,+,,34,"		rlw_set_running_len(self->rlw, 1);"
type_conversion,ewah_bitmap.c,184,-,+,,10,		return 1;
type_conversion,ewah_bitmap.c,192,-,+,,14,	if (word == 0)
type_conversion,ewah_bitmap.c,209,-,+,,23,	self->bit_size = i + 1;
type_conversion,ewah_bitmap.c,211,-,+,,13,	if (dist > 0) {
type_conversion,ewah_bitmap.c,212,-,+,,14,		if (dist > 1)
type_conversion,ewah_bitmap.c,213,-,+,,36,"			add_empty_words(self, 0, dist - 1);"
type_conversion,ewah_bitmap.c,219,-,+,,42,	if (rlw_get_literal_words(self->rlw) == 0) {
type_conversion,ewah_bitmap.c,221,-,+,,37,			rlw_get_running_len(self->rlw) - 1);
type_conversion,ewah_bitmap.c,226,-,+,,35,	self->buffer[self->buffer_size - 1] |=
type_conversion,ewah_bitmap.c,230,-,+,,39,	if (self->buffer[self->buffer_size - 1] == (eword_t)(~0)) {
type_conversion,ewah_bitmap.c,231,-,+,,39,		self->buffer[--self->buffer_size] = 0;
type_conversion,ewah_bitmap.c,233,-,+,,39,			rlw_get_literal_words(self->rlw) - 1);
type_conversion,ewah_bitmap.c,240,-,+,,15,	size_t pos = 0;
type_conversion,ewah_bitmap.c,241,-,+,,19,	size_t pointer = 0;
type_conversion,ewah_bitmap.c,249,-,+,,13,"			for (k = 0; k < len; ++k, ++pos)"
type_conversion,ewah_bitmap.c,257,-,+,,12,		for (k = 0; k < rlw_get_literal_words(word); ++k) {
type_conversion,ewah_bitmap.c,261,-,+,,16,"			for (c = 0; c < BITS_IN_EWORD; ++c, ++pos) {"
type_conversion,ewah_bitmap.c,262,-,+,,56,				if ((self->buffer[pointer] & ((eword_t)1 << c)) != 0)
type_conversion,ewah_bitmap.c,277,-,+,,22,	self->buffer_size = 1;
type_conversion,ewah_bitmap.c,278,-,+,,20,	self->buffer[0] = 0;
type_conversion,ewah_bitmap.c,279,-,+,,19,	self->bit_size = 0;
type_conversion,ewah_bitmap.c,288,-,+,,21,	self->alloc_size = 32;
type_conversion,ewah_bitmap.c,310,-,+,,17,	it->literals = 0;
type_conversion,ewah_bitmap.c,311,-,+,,19,	it->compressed = 0;
type_conversion,ewah_bitmap.c,323,-,+,,39,		if (it->pointer < it->buffer_size - 1) {
type_conversion,ewah_bitmap.c,339,-,+,,35,		*next = it->b ? (eword_t)(~0) : 0;
type_conversion,ewah_bitmap.c,363,-,+,,16,	it->pointer = 0;
type_conversion,ewah_bitmap.c,365,-,+,,11,	it->lw = 0;
type_conversion,ewah_bitmap.c,366,-,+,,11,	it->rl = 0;
type_conversion,ewah_bitmap.c,367,-,+,,19,	it->compressed = 0;
type_conversion,ewah_bitmap.c,368,-,+,,17,	it->literals = 0;
type_conversion,ewah_bitmap.c,387,-,+,,35,	while (rlwit_word_size(&rlw_i) > 0 && rlwit_word_size(&rlw_j) > 0) {
type_conversion,ewah_bitmap.c,403,-,+,,5,"				predator->rlw.running_len, negate_words);"
type_conversion,ewah_bitmap.c,406,-,+,,5,				predator->rlw.running_len - index);
type_conversion,ewah_bitmap.c,409,-,+,,5,				predator->rlw.running_len);
type_conversion,ewah_bitmap.c,413,-,+,,4,"			rlw_i.rlw.literal_words,"
type_conversion,ewah_bitmap.c,414,-,+,,4,			rlw_j.rlw.literal_words);
type_conversion,ewah_bitmap.c,419,-,+,,13,			for (k = 0; k < literals; ++k) {
type_conversion,ewah_bitmap.c,431,-,+,,32,	if (rlwit_word_size(&rlw_i) > 0)
type_conversion,ewah_bitmap.c,432,-,+,,32,"		rlwit_discharge(&rlw_i, out, ~0, 0);"
type_conversion,ewah_bitmap.c,434,-,+,,32,"		rlwit_discharge(&rlw_j, out, ~0, 0);"
type_conversion,ewah_bitmap.c,457,-,+,,23,		self->alloc_size == 0) {
type_conversion,ewah_io.c,37,-,+,,32,"	if (write_fun(data, &bitsize, 4) != 4)"
type_conversion,ewah_io.c,42,-,+,,35,"	if (write_fun(data, &word_count, 4) != 4)"
type_conversion,ewah_io.c,50,-,+,,12,"		for (i = 0; i < words_per_dump; ++i, ++buffer)"
type_conversion,ewah_io.c,53,-,+,,7,"		if (write_fun(data, dump, sizeof(dump)) != sizeof(dump))"
type_conversion,ewah_io.c,60,-,+,,12,"		for (i = 0; i < words_left; ++i, ++buffer)"
type_conversion,ewah_io.c,63,-,+,,42,"		if (write_fun(data, dump, words_left * 8) != words_left * 8)"
type_conversion,ewah_io.c,68,-,+,,12,	rlw_pos = (uint8_t*)self->rlw - (uint8_t *)self->buffer;
type_conversion,ewah_io.c,71,-,+,,32,"	if (write_fun(data, &rlw_pos, 4) != 4)"
type_conversion,ewah_io.c,74,-,+,,9,	return (3 * 4) + (self->buffer_size * 8);
type_conversion,ewah_io.c,81,-,+,,9,	return len;
type_conversion,ewah_io.c,97,-,+,,19,	self->bit_size = get_be32(ptr);
type_conversion,ewah_io.c,103,-,+,,41,	self->buffer_size = self->alloc_size = get_be32(ptr);
type_conversion,ewah_io.c,124,-,+,,11,	for (i = 0; i < self->buffer_size; ++i)
type_conversion,ewah_rlw.c,29,-,+,,55,	it->pointer += rlw_get_literal_words(it->rlw.word) + 1;
type_conversion,ewah_rlw.c,31,-,+,,26,	it->rlw.literal_words = rlw_get_literal_words(it->rlw.word);
type_conversion,ewah_rlw.c,32,-,+,,24,	it->rlw.running_len = rlw_get_running_len(it->rlw.word);
type_conversion,ewah_rlw.c,43,-,+,,16,	it->pointer = 0;
type_conversion,ewah_rlw.c,48,-,+,,3,		it->rlw.literal_word_offset;
type_conversion,ewah_rlw.c,53,-,+,,13,	while (x > 0) {
type_conversion,ewah_rlw.c,56,-,+,,7,		if (it->rlw.running_len > x) {
type_conversion,ewah_rlw.c,61,-,+,,8,		x -= it->rlw.running_len;
type_conversion,ewah_rlw.c,64,-,+,,18,		discard = (x > it->rlw.literal_words) ? it->rlw.literal_words : x;
type_conversion,ewah_rlw.c,70,-,+,,11,		if (x > 0 || rlwit_word_size(it) == 0) {
type_conversion,ewah_rlw.c,75,-,+,,31,				rlwit_literal_words(it) + it->rlw.literal_word_offset;
type_conversion,ewah_rlw.c,83,-,+,,17,	size_t index = 0;
type_conversion,ewah_rlw.c,85,-,+,,46,	while (index < max && rlwit_word_size(it) > 0) {
type_conversion,ewah_rlw.c,86,-,+,,19,"		size_t pd, pl = it->rlw.running_len;"
type_conversion,ewah_rlw.c,94,-,+,,8,		pd = it->rlw.literal_words;
type_conversion,ewok.h,34,-,+,,7,	x = (x & 0x5555555555555555ULL) + ((x >>  1) & 0x5555555555555555ULL);
type_conversion,ewok.h,35,-,+,,7,	x = (x & 0x3333333333333333ULL) + ((x >>  2) & 0x3333333333333333ULL);
type_conversion,ewok.h,36,-,+,,7,	x = (x & 0x0F0F0F0F0F0F0F0FULL) + ((x >>  4) & 0x0F0F0F0F0F0F0F0FULL);
type_conversion,ewok.h,37,-,+,,10,	return (x * 0x0101010101010101ULL) >> 56;
type_conversion,ewok_rlw.h,36,-,+,,9,	return *word & (eword_t)1;
type_conversion,ewok_rlw.h,50,-,+,,14,	if (*word & 1) {
type_conversion,ewok_rlw.h,70,-,+,,19,	return *word >> (1 + RLW_RUNNING_BITS);
type_conversion,ewok_rlw.h,76,-,+,,37,	*word &= (l << (RLW_RUNNING_BITS + 1)) | RLW_RUNNING_LEN_PLUS_BIT;
type_conversion,ewok_rlw.h,106,-,+,,9,	return it->rlw.running_len + it->rlw.literal_words;
type_conversion,ewok_rlw.h,111,-,+,,23,	return it->pointer - it->rlw.literal_words;
type_conversion,fast-export.c,155,-,+,,49,"		hashmap_init(map, anonymized_entry_cmp, NULL, 0);"
type_conversion,fast-export.c,213,-,+,,16,		size_t len = end_of_component - path;
type_conversion,fast-export.c,218,-,+,,22,"			strbuf_addch(out, *path++);"
type_conversion,fast-export.c,247,-,+,,9,	return ptr_to_mark(decoration);
type_conversion,fast-export.c,337,-,+,,32,"	if (size && fwrite(buf, size, 1, stdout) != 1)"
type_conversion,fast-export.c,359,-,+,,10,	len_a = strlen(name_a);
type_conversion,fast-export.c,360,-,+,,10,	len_b = strlen(name_b);
type_conversion,fast-export.c,364,-,+,,31,"	cmp = memcmp(name_a, name_b, len);"
type_conversion,fast-export.c,375,-,+,,10,	return (a->status == 'R') - (b->status == 'R');
type_conversion,fast-export.c,380,-,+,,51,"	int need_quote = quote_c_style(path, NULL, NULL, 0);"
type_conversion,fast-export.c,382,-,+,,37,"		quote_c_style(path, NULL, stdout, 0);"
type_conversion,fast-export.c,413,-,+,,28,	static uint32_t counter = 1; /* avoid null oid */
type_conversion,fast-export.c,446,-,+,,11,		switch (q->queue[i]->status) {
type_conversion,fast-export.c,464,-,+,,19,"				printf(""%c "", q->queue[i]->status);"
type_conversion,fast-export.c,472,-,+,,9,				    ospec->mode == spec->mode)
type_conversion,fast-export.c,485,-,+,,26,"				printf(""M %06o %s "", spec->mode,"
type_conversion,fast-export.c,492,-,+,,27,"				printf(""M %06o :%d "", spec->mode,"
type_conversion,fast-export.c,502,-,+,,5,"				q->queue[i]->status,"
type_conversion,fast-export.c,514,-,+,,28,"	bol = memmem(begin, end ? end - begin : strlen(begin),"
type_conversion,fast-export.c,520,-,+,,9,	*eol = '\0';
type_conversion,fast-export.c,549,-,+,,14,	for (i = 0; i < ARRAY_SIZE(prefixes); i++) {
type_conversion,fast-export.c,604,-,+,,24,"	strbuf_add(out, *beg, end_of_header - *beg);"
type_conversion,fast-export.c,606,-,+,,47,"	if (!split_ident_line(&split, end_of_header, *end - end_of_header) &&"
type_conversion,fast-export.c,611,-,+,,9,		len = split.mail_end - split.name_begin;
type_conversion,fast-export.c,616,-,+,,37,"		strbuf_add(out, split.date_begin, split.tz_end - split.date_begin);"
type_conversion,fast-export.c,718,-,+,,26,"			  ? strlen(message) : 0),"
type_conversion,fast-export.c,769,-,+,,24,	size_t message_size = 0;
type_conversion,fast-export.c,779,-,+,,9,	while (tagged->type == OBJ_TAG) {
type_conversion,fast-export.c,782,-,+,,6,	if (tagged->type == OBJ_TREE) {
type_conversion,fast-export.c,792,-,+,,38,"	message = memmem(buf, size, ""\n\n"", 2);"
type_conversion,fast-export.c,797,-,+,,33,"	tagger = memmem(buf, message ? message - buf : size, ""\ntagger "", 8);"
type_conversion,fast-export.c,843,-,+,,20,				message_size = signature + 1 - message;
type_conversion,fast-export.c,862,-,+,,8,			if (tagged->type == OBJ_TAG && !mark_tags) {
type_conversion,fast-export.c,864,-,+,,15,			} else if (tagged->type == OBJ_COMMIT) {
type_conversion,fast-export.c,880,-,+,,6,	if (tagged->type == OBJ_TAG) {
type_conversion,fast-export.c,906,-,+,,10,	switch (e->item->type) {
type_conversion,fast-export.c,907,-,+,,7,	case OBJ_COMMIT:
type_conversion,fast-export.c,909,-,+,,7,	case OBJ_TAG: {
type_conversion,fast-export.c,913,-,+,,17,		while (tag && tag->object.type == OBJ_TAG) {
type_conversion,fast-export.c,931,-,+,,14,	for (i = 0; i < info->nr; i++) {
type_conversion,fast-export.c,940,-,+,,46,"		if (repo_dwim_ref(the_repository, e->name, strlen(e->name),"
type_conversion,fast-export.c,957,-,+,,15,				type_name(e->item->type));
type_conversion,fast-export.c,961,-,+,,10,		switch(commit->object.type) {
type_conversion,fast-export.c,962,-,+,,8,		case OBJ_COMMIT:
type_conversion,fast-export.c,964,-,+,,8,		case OBJ_BLOB:
type_conversion,fast-export.c,969,-,+,,15,				type_name(commit->object.type));
type_conversion,fast-export.c,977,-,+,,7,		if (e->item->type != OBJ_TAG)
type_conversion,fast-export.c,993,-,+,,24,	for (i = extras->nr - 1; i >= 0; i--) {
type_conversion,fast-export.c,998,-,+,,11,		switch (object->type) {
type_conversion,fast-export.c,999,-,+,,8,		case OBJ_TAG:
type_conversion,fast-export.c,1002,-,+,,8,		case OBJ_COMMIT:
type_conversion,fast-export.c,1063,-,+,,11,	for (i = 0; i < idnums.size; i++) {
type_conversion,fast-export.c,1064,-,+,,21,		if (deco->base && deco->base->type == 1) {
type_conversion,fast-export.c,1091,-,+,,21,"	while (fgets(line, sizeof(line), f)) {"
type_conversion,fast-export.c,1100,-,+,,7,		if (line[0] != ':' || !line_end)
type_conversion,fast-export.c,1102,-,+,,15,		*line_end = '\0';
type_conversion,fast-export.c,1104,-,+,,10,"		mark = strtoumax(line + 1, &mark_end, 10);"
type_conversion,fast-export.c,1106,-,+,,7,"			|| *mark_end != ' ' || get_oid_hex(mark_end + 1, &oid))"
type_conversion,fast-export.c,1113,-,+,,7,		if (type < 0)
type_conversion,fast-export.c,1116,-,+,,7,		if (type != OBJ_COMMIT)
type_conversion,fast-export.c,1160,-,+,,12,		keylen = delim - arg;
type_conversion,fast-export.c,1237,-,+,,20,	revs.topo_order = 1;
type_conversion,fast-export.c,1239,-,+,,25,	revs.rewrite_parents = 1;
type_conversion,fast-export.c,1241,-,+,,4,			PARSE_OPT_KEEP_ARGV0 | PARSE_OPT_KEEP_UNKNOWN_OPT);
type_conversion,fast-export.c,1252,-,+,,15,		for (i = 0; i < refspecs_list.nr; i++)
type_conversion,fast-export.c,1277,-,+,,17,	revs.reverse = 1;
type_conversion,fast-export.c,1280,-,+,,33,	revs.diffopt.flags.recursive = 1;
type_conversion,fast-import.c,164,-,+,,34,static unsigned long max_depth = 50;
type_conversion,fast-import.c,181,-,+,,34,static unsigned int show_stats = 1;
type_conversion,fast-import.c,188,-,+,,17,"	.block_alloc = 2*1024*1024 - sizeof(struct mp_block),"
type_conversion,fast-import.c,192,-,+,,37,static unsigned int atom_table_sz = 4451;
type_conversion,fast-import.c,205,-,+,,42,static unsigned int object_entry_alloc = 5000;
type_conversion,fast-import.c,222,-,+,,40,static unsigned int tree_entry_alloc = 1000;
type_conversion,fast-import.c,224,-,+,,43,static unsigned int avail_tree_table_sz = 100;
type_conversion,fast-import.c,231,-,+,,44,static unsigned long max_active_branches = 5;
type_conversion,fast-import.c,233,-,+,,40,static unsigned long branch_table_sz = 1039;
type_conversion,fast-import.c,251,-,+,,32,static unsigned int cmd_save = 100;
type_conversion,fast-import.c,278,-,+,,19,		for (k = 0; k < 1024; k++) {
type_conversion,fast-import.c,283,-,+,,19,		for (k = 0; k < 1024; k++) {
type_conversion,fast-import.c,318,-,+,,6,	if (b->pack_id < MAX_PACK_ID)
type_conversion,fast-import.c,319,-,+,,22,"		fprintf(rpt, ""%u"", b->pack_id);"
type_conversion,fast-import.c,372,-,+,,33,"	for (b = active_branches, lu = 0; b; b = b->active_next_branch)"
type_conversion,fast-import.c,379,-,+,,12,	for (lu = 0; lu < branch_table_sz; lu++) {
type_conversion,fast-import.c,403,-,+,,24,"		for_each_mark(marks, 0, dump_marks_fn, rpt);"
type_conversion,fast-import.c,469,-,+,,5,		+ cnt * sizeof(struct object_entry));
type_conversion,fast-import.c,474,-,+,,17,	alloc_count += cnt;
type_conversion,fast-import.c,504,-,+,,19,		e->idx.offset = 0;
type_conversion,fast-import.c,520,-,+,,7,		if (e->pack_id == id)
type_conversion,fast-import.c,524,-,+,,12,	for (lu = 0; lu < branch_table_sz; lu++) {
type_conversion,fast-import.c,528,-,+,,8,			if (b->pack_id == id)
type_conversion,fast-import.c,539,-,+,,19,	unsigned int r = 0;
type_conversion,fast-import.c,540,-,+,,17,	while (len-- > 0)
type_conversion,fast-import.c,541,-,+,,11,		r = r * 31 + *s++;
type_conversion,fast-import.c,549,-,+,,32,	while ((idnum >> s->shift) >= 1024) {
type_conversion,fast-import.c,550,-,+,,37,"		s = mem_pool_calloc(&fi_mem_pool, 1, sizeof(struct mark_set));"
type_conversion,fast-import.c,551,-,+,,30,		s->shift = (*top)->shift + 10;
type_conversion,fast-import.c,559,-,+,,52,"			s->data.sets[i] = mem_pool_calloc(&fi_mem_pool, 1, sizeof(struct mark_set));"
type_conversion,fast-import.c,560,-,+,,40,			s->data.sets[i]->shift = s->shift - 10;
type_conversion,fast-import.c,573,-,+,,28,	if ((idnum >> s->shift) < 1024) {
type_conversion,fast-import.c,589,-,+,,30,"	unsigned int hc = hc_str(s, len) % atom_table_sz;"
type_conversion,fast-import.c,593,-,+,,7,"		if (c->str_len == len && !strncmp(s, c->str_dat, len))"
type_conversion,fast-import.c,596,-,+,,61,"	c = mem_pool_alloc(&fi_mem_pool, sizeof(struct atom_str) + len + 1);"
type_conversion,fast-import.c,598,-,+,,24,"	memcpy(c->str_dat, s, len);"
type_conversion,fast-import.c,599,-,+,,20,	c->str_dat[len] = 0;
type_conversion,fast-import.c,608,-,+,,20,"	unsigned int hc = hc_str(name, strlen(name)) % branch_table_sz;"
type_conversion,fast-import.c,619,-,+,,20,"	unsigned int hc = hc_str(name, strlen(name)) % branch_table_sz;"
type_conversion,fast-import.c,627,-,+,,36,"	b = mem_pool_calloc(&fi_mem_pool, 1, sizeof(struct branch));"
type_conversion,fast-import.c,632,-,+,,17,	b->num_notes = 0;
type_conversion,fast-import.c,633,-,+,,14,	b->active = 0;
type_conversion,fast-import.c,642,-,+,,14,	cnt = cnt & 7 ? (cnt / 8) + 1 : cnt / 8;
type_conversion,fast-import.c,643,-,+,,65,	return cnt < avail_tree_table_sz ? cnt : avail_tree_table_sz - 1;
type_conversion,fast-import.c,662,-,+,,15,		cnt = cnt & 7 ? ((cnt / 8) + 1) * 8 : cnt;
type_conversion,fast-import.c,663,-,+,,73,"		f = mem_pool_alloc(&fi_mem_pool, sizeof(*t) + sizeof(t->entries[0]) * cnt);"
type_conversion,fast-import.c,668,-,+,,19,	t->entry_count = 0;
type_conversion,fast-import.c,669,-,+,,19,	t->delta_depth = 0;
type_conversion,fast-import.c,685,-,+,,11,	for (i = 0; i < t->entry_count; i++)
type_conversion,fast-import.c,694,-,+,,61,	struct tree_content *r = new_tree_content(t->entry_count + amt);
type_conversion,fast-import.c,708,-,+,,24,		tree_entry_allocd += n * sizeof(struct tree_entry);
type_conversion,fast-import.c,711,-,+,,16,		while (n-- > 1) {
type_conversion,fast-import.c,740,-,+,,11,	for (i = 0; i < s->entry_count; i++) {
type_conversion,fast-import.c,767,-,+,,20,	p->do_not_close = 1;
type_conversion,fast-import.c,771,-,+,,43,"	pack_size = write_pack_header(pack_file, 0);"
type_conversion,fast-import.c,772,-,+,,17,	object_count = 0;
type_conversion,fast-import.c,790,-,+,,19,			if (pack_id == e->pack_id)
type_conversion,fast-import.c,796,-,+,,38,"	tmpfile = write_idx_file(NULL, idx, object_count, &pack_idx_opts,"
type_conversion,fast-import.c,832,-,+,,14,	for (k = 0; k < pack_id; k++) {
type_conversion,fast-import.c,844,-,+,,24,"	if (lseek(p->pack_fd, 0, SEEK_SET) < 0)"
type_conversion,fast-import.c,848,-,+,,19,	unpack.git_cmd = 1;
type_conversion,fast-import.c,849,-,+,,28,	unpack.stdout_to_stderr = 1;
type_conversion,fast-import.c,875,-,+,,73,"		finalize_hashfile(pack_file, cur_pack_oid.hash, FSYNC_COMPONENT_PACK, 0);"
type_conversion,fast-import.c,877,-,+,,29,"					 pack_data->pack_name, object_count,"
type_conversion,fast-import.c,880,-,+,,23,		if (object_count <= unpack_limit) {
type_conversion,fast-import.c,901,-,+,,16,			for (i = 0; i < branch_table_sz; i++) {
type_conversion,fast-import.c,903,-,+,,10,					if (b->pack_id == pack_id)
type_conversion,fast-import.c,929,-,+,,21,	last_blob.offset = 0;
type_conversion,fast-import.c,930,-,+,,20,	last_blob.depth = 0;
type_conversion,fast-import.c,954,-,+,,11,"	hdrlen = format_object_header((char *)hdr, sizeof(hdr), type,
				      dat->len);"
type_conversion,fast-import.c,971,-,+,,13,		e->type = type;
type_conversion,fast-import.c,973,-,+,,19,		e->idx.offset = 1; /* just not zero! */
type_conversion,fast-import.c,978,-,+,,50,	if (last && last->data.len && last->data.buf && last->depth < max_depth
type_conversion,fast-import.c,1004,-,+,,7,		&& (pack_size + PACK_SIZE_THRESHOLD + s.total_out) > max_packsize)
type_conversion,fast-import.c,1005,-,+,,7,		|| (pack_size + PACK_SIZE_THRESHOLD + s.total_out) < pack_size) {
type_conversion,fast-import.c,1008,-,+,,26,		e->pack_id = pack_id + 1;
type_conversion,fast-import.c,1026,-,+,,12,	e->type = type;
type_conversion,fast-import.c,1027,-,+,,15,	e->pack_id = pack_id;
type_conversion,fast-import.c,1036,-,+,,32,		unsigned pos = sizeof(hdr) - 1;
type_conversion,fast-import.c,1039,-,+,,28,		e->depth = last->depth + 1;
type_conversion,fast-import.c,1041,-,+,,46,"		hdrlen = encode_in_pack_object_header(hdr, sizeof(hdr),"
type_conversion,fast-import.c,1043,-,+,,29,"		hashwrite(pack_file, hdr, hdrlen);"
type_conversion,fast-import.c,1046,-,+,,20,		hdr[pos] = ofs & 127;
type_conversion,fast-import.c,1048,-,+,,17,			hdr[--pos] = 128 | (--ofs & 127);
type_conversion,fast-import.c,1049,-,+,,49,"		hashwrite(pack_file, hdr + pos, sizeof(hdr) - pos);"
type_conversion,fast-import.c,1050,-,+,,30,		pack_size += sizeof(hdr) - pos;
type_conversion,fast-import.c,1052,-,+,,14,		e->depth = 0;
type_conversion,fast-import.c,1053,-,+,,46,"		hdrlen = encode_in_pack_object_header(hdr, sizeof(hdr),"
type_conversion,fast-import.c,1055,-,+,,29,"		hashwrite(pack_file, hdr, hdrlen);"
type_conversion,fast-import.c,1059,-,+,,28,"	hashwrite(pack_file, out, s.total_out);"
type_conversion,fast-import.c,1073,-,+,,17,		last->depth = e->depth;
type_conversion,fast-import.c,1087,-,+,,17,"	size_t in_sz = 64 * 1024, out_sz = 64 * 1024;"
type_conversion,fast-import.c,1101,-,+,,7,		&& (pack_size + PACK_SIZE_THRESHOLD + len) > max_packsize)
type_conversion,fast-import.c,1102,-,+,,7,		|| (pack_size + PACK_SIZE_THRESHOLD + len) < pack_size)
type_conversion,fast-import.c,1109,-,+,,11,"	hdrlen = format_object_header((char *)out_buf, out_sz, OBJ_BLOB, len);"
type_conversion,fast-import.c,1118,-,+,,49,"	hdrlen = encode_in_pack_object_header(out_buf, out_sz, OBJ_BLOB, len);"
type_conversion,fast-import.c,1124,-,+,,7,		if (0 < len && !s.avail_in) {
type_conversion,fast-import.c,1126,-,+,,29,"			size_t n = fread(in_buf, 1, cnt, stdin);"
type_conversion,fast-import.c,1139,-,+,,15,			size_t n = s.next_out - out_buf;
type_conversion,fast-import.c,1140,-,+,,34,"			hashwrite(pack_file, out_buf, n);"
type_conversion,fast-import.c,1172,-,+,,13,		e->type = OBJ_BLOB;
type_conversion,fast-import.c,1174,-,+,,19,		e->idx.offset = 1; /* just not zero! */
type_conversion,fast-import.c,1179,-,+,,14,		e->depth = 0;
type_conversion,fast-import.c,1180,-,+,,13,		e->type = OBJ_BLOB;
type_conversion,fast-import.c,1181,-,+,,16,		e->pack_id = pack_id;
type_conversion,fast-import.c,1216,-,+,,24,	if (p == pack_data && p->pack_size < (pack_size + the_hash_algo->rawsz)) {
type_conversion,fast-import.c,1234,-,+,,18,		p->pack_size = pack_size + the_hash_algo->rawsz;
type_conversion,fast-import.c,1248,-,+,,36,	root->tree = t = new_tree_content(8);
type_conversion,fast-import.c,1253,-,+,,14,	if (myoe && myoe->pack_id != MAX_PACK_ID) {
type_conversion,fast-import.c,1254,-,+,,7,		if (myoe->type != OBJ_TREE)
type_conversion,fast-import.c,1256,-,+,,20,		t->delta_depth = myoe->depth;
type_conversion,fast-import.c,1263,-,+,,15,		if (!buf || type != OBJ_TREE)
type_conversion,fast-import.c,1272,-,+,,42,"			root->tree = t = grow_tree_content(t, t->entry_count);"
type_conversion,fast-import.c,1280,-,+,,24,"		e->name = to_atom(c, strlen(c));"
type_conversion,fast-import.c,1281,-,+,,8,		c += e->name->str_len + 1;
type_conversion,fast-import.c,1294,-,+,,21,"		a->name->str_dat, a->name->str_len, a->versions[0].mode,"
type_conversion,fast-import.c,1295,-,+,,21,"		b->name->str_dat, b->name->str_len, b->versions[0].mode);"
type_conversion,fast-import.c,1303,-,+,,21,"		a->name->str_dat, a->name->str_len, a->versions[1].mode,"
type_conversion,fast-import.c,1304,-,+,,21,"		b->name->str_dat, b->name->str_len, b->versions[1].mode);"
type_conversion,fast-import.c,1309,-,+,,18,	size_t maxlen = 0;
type_conversion,fast-import.c,1317,-,+,,11,	for (i = 0; i < t->entry_count; i++) {
type_conversion,fast-import.c,1319,-,+,,14,			maxlen += t->entries[i]->name->str_len + 34;
type_conversion,fast-import.c,1324,-,+,,11,	for (i = 0; i < t->entry_count; i++) {
type_conversion,fast-import.c,1329,-,+,,19,"			(unsigned int)(e->versions[v].mode & ~NO_DELTA),"
type_conversion,fast-import.c,1339,-,+,,41,"	struct last_object lo = { STRBUF_INIT, 0, 0, /* no_swap */ 1 };"
type_conversion,fast-import.c,1349,-,+,,11,	for (i = 0; i < t->entry_count; i++) {
type_conversion,fast-import.c,1354,-,+,,8,	if (!(root->versions[0].mode & NO_DELTA))
type_conversion,fast-import.c,1356,-,+,,47,	if (S_ISDIR(root->versions[0].mode) && le && le->pack_id == pack_id) {
type_conversion,fast-import.c,1364,-,+,,65,"	store_object(OBJ_TREE, &new_tree, &lo, &root->versions[1].oid, 0);"
type_conversion,fast-import.c,1367,-,+,,11,"	for (i = 0, j = 0, del = 0; i < t->entry_count; i++) {"
type_conversion,fast-import.c,1409,-,+,,6,	n = slash1 - p;
type_conversion,fast-import.c,1418,-,+,,11,	for (i = 0; i < t->entry_count; i++) {
type_conversion,fast-import.c,1420,-,+,,7,"		if (e->name->str_len == n && !fspathncmp(p, e->name->str_dat, n)) {"
type_conversion,fast-import.c,1423,-,+,,10,						&& e->versions[1].mode == mode
type_conversion,fast-import.c,1452,-,+,,32,				e->tree = new_tree_content(8);
type_conversion,fast-import.c,1466,-,+,,41,"		root->tree = t = grow_tree_content(t, t->entry_count);"
type_conversion,fast-import.c,1468,-,+,,23,"	e->name = to_atom(p, n);"
type_conversion,fast-import.c,1469,-,+,,24,	e->versions[0].mode = 0;
type_conversion,fast-import.c,1473,-,+,,30,		e->tree = new_tree_content(8);
type_conversion,fast-import.c,1497,-,+,,6,	n = slash1 - p;
type_conversion,fast-import.c,1508,-,+,,11,	for (i = 0; i < t->entry_count; i++) {
type_conversion,fast-import.c,1510,-,+,,7,"		if (e->name->str_len == n && !fspathncmp(p, e->name->str_dat, n)) {"
type_conversion,fast-import.c,1524,-,+,,14,				for (n = 0; n < e->tree->entry_count; n++) {
type_conversion,fast-import.c,1544,-,+,,24,	e->versions[1].mode = 0;
type_conversion,fast-import.c,1562,-,+,,6,	n = slash1 - p;
type_conversion,fast-import.c,1575,-,+,,11,	for (i = 0; i < t->entry_count; i++) {
type_conversion,fast-import.c,1577,-,+,,7,"		if (e->name->str_len == n && !fspathncmp(p, e->name->str_dat, n)) {"
type_conversion,fast-import.c,1608,-,+,,27,"					NULL, b->name, NULL, 0);"
type_conversion,fast-import.c,1639,-,+,,20,"				   NULL, NULL, 0, msg, &err) ||"
type_conversion,fast-import.c,1656,-,+,,14,	for (i = 0; i < branch_table_sz; i++) {
type_conversion,fast-import.c,1682,-,+,,9,"					   0, msg, &err)) {"
type_conversion,fast-import.c,1725,-,+,,23,"	for_each_mark(marks, 0, dump_marks_fn, f);"
type_conversion,fast-import.c,1740,-,+,,7,		if (type < 0)
type_conversion,fast-import.c,1743,-,+,,13,		e->type = type;
type_conversion,fast-import.c,1745,-,+,,19,		e->idx.offset = 1; /* just not zero! */
type_conversion,fast-import.c,1758,-,+,,21,"	while (fgets(line, sizeof(line), f)) {"
type_conversion,fast-import.c,1767,-,+,,7,		if (line[0] != ':' || !end)
type_conversion,fast-import.c,1769,-,+,,10,		*end = 0;
type_conversion,fast-import.c,1772,-,+,,7,			|| *end != ' '
type_conversion,fast-import.c,1836,-,+,,7,		if (command_buf.buf[0] == '#')
type_conversion,fast-import.c,1857,-,+,,15,		next_mark = 0;
type_conversion,fast-import.c,1877,-,+,,39,		size_t term_len = command_buf.len - (data - command_buf.buf);
type_conversion,fast-import.c,1892,-,+,,14,"		size_t n = 0, length = (size_t)len;"
type_conversion,fast-import.c,1928,-,+,,30,	if (errno || endp == src || *endp != ' ')
type_conversion,fast-import.c,1932,-,+,,6,	if (*src != '-' && *src != '+')
type_conversion,fast-import.c,1941,-,+,,18,	    (strict && (1400 < num))             /* parsed a broken timezone */
type_conversion,fast-import.c,1956,-,+,,6,	if (*buf == '<')
type_conversion,fast-import.c,1960,-,+,,6,	if (*ltgt != '<')
type_conversion,fast-import.c,1962,-,+,,21,	if (ltgt != buf && ltgt[-1] != ' ')
type_conversion,fast-import.c,1965,-,+,,6,	if (*ltgt != '>')
type_conversion,fast-import.c,1968,-,+,,6,	if (*ltgt != ' ')
type_conversion,fast-import.c,1971,-,+,,13,	name_len = ltgt - buf;
type_conversion,fast-import.c,2010,-,+,,19,			last->offset = 0;
type_conversion,fast-import.c,2011,-,+,,18,			last->depth = 0;
type_conversion,fast-import.c,2048,-,+,,15,		e->active = 0;
type_conversion,fast-import.c,2062,-,+,,15,		b->active = 1;
type_conversion,fast-import.c,2072,-,+,,25,	unsigned char fanout = 0;
type_conversion,fast-import.c,2081,-,+,,19,"	unsigned int i = 0, j = 0;"
type_conversion,fast-import.c,2082,-,+,,6,	if (fanout >= the_hash_algo->rawsz)
type_conversion,fast-import.c,2083,-,+,,32,"		die(""Too large fanout (%u)"", fanout);"
type_conversion,fast-import.c,2087,-,+,,15,		path[i++] = '/';
type_conversion,fast-import.c,2090,-,+,,56,"	memcpy(path + i, hex_sha1 + j, the_hash_algo->hexsz - j);"
type_conversion,fast-import.c,2091,-,+,,7,	path[i + the_hash_algo->hexsz - j] = '\0';
type_conversion,fast-import.c,2103,-,+,,24,	uintmax_t num_notes = 0;
type_conversion,fast-import.c,2113,-,+,,11,	for (i = 0; t && i < t->entry_count; i++) {
type_conversion,fast-import.c,2115,-,+,,35,		tmp_hex_oid_len = hex_oid_len + e->name->str_len;
type_conversion,fast-import.c,2128,-,+,,7,		    e->name->str_len % 2)
type_conversion,fast-import.c,2133,-,+,,10,		       e->name->str_len);
type_conversion,fast-import.c,2135,-,+,,35,			fullpath[tmp_fullpath_len++] = '/';
type_conversion,fast-import.c,2137,-,+,,10,		       e->name->str_len);
type_conversion,fast-import.c,2138,-,+,,23,		tmp_fullpath_len += e->name->str_len;
type_conversion,fast-import.c,2139,-,+,,32,		fullpath[tmp_fullpath_len] = '\0';
type_conversion,fast-import.c,2143,-,+,,8,			if (fanout == 0xff) {
type_conversion,fast-import.c,2185,-,+,,52,"	return do_change_note_fanout(root, root, hex_oid, 0, path, 0, fanout);"
type_conversion,fast-import.c,2244,-,+,,6,	if (*end != '\0')
type_conversion,fast-import.c,2259,-,+,,6,	if (*end++ != ' ')
type_conversion,fast-import.c,2274,-,+,,6,"	if (*p == '""') {"
type_conversion,fast-import.c,2287,-,+,,21,"		strbuf_add(sb, p, *endp - p);"
type_conversion,fast-import.c,2313,-,+,,6,	if (**endp != ' ')
type_conversion,fast-import.c,2323,-,+,,31,"	uint16_t mode, inline_data = 0;"
type_conversion,fast-import.c,2328,-,+,,10,	switch (mode) {
type_conversion,fast-import.c,2343,-,+,,6,	if (*p == ':') {
type_conversion,fast-import.c,2347,-,+,,17,		inline_data = 1;
type_conversion,fast-import.c,2353,-,+,,7,		if (*p++ != ' ')
type_conversion,fast-import.c,2371,-,+,,8,			if (oe->type != OBJ_COMMIT)
type_conversion,fast-import.c,2373,-,+,,16,"					type_name(oe->type), command_buf.buf);"
type_conversion,fast-import.c,2388,-,+,,44,"				parse_and_store_blob(&last_blob, &oid, 0);"
type_conversion,fast-import.c,2395,-,+,,32,		enum object_type type = oe ? oe->type :
type_conversion,fast-import.c,2398,-,+,,7,		if (type < 0)
type_conversion,fast-import.c,2402,-,+,,7,		if (type != expected)
type_conversion,fast-import.c,2404,-,+,,15,"				type_name(expected), type_name(type),"
type_conversion,fast-import.c,2461,-,+,,25,	uint16_t inline_data = 0;
type_conversion,fast-import.c,2474,-,+,,22,	if (b->num_notes == 0 && *old_fanout == 0) {
type_conversion,fast-import.c,2476,-,+,,54,"		b->num_notes = change_note_fanout(&b->branch_tree, 0xff);"
type_conversion,fast-import.c,2482,-,+,,6,	if (*p == ':') {
type_conversion,fast-import.c,2486,-,+,,17,		inline_data = 1;
type_conversion,fast-import.c,2492,-,+,,7,		if (*p++ != ' ')
type_conversion,fast-import.c,2502,-,+,,13,	} else if (*p == ':') {
type_conversion,fast-import.c,2505,-,+,,7,		if (commit_oe->type != OBJ_COMMIT)
type_conversion,fast-import.c,2514,-,+,,45,		if (!buf || size < the_hash_algo->hexsz + 6)
type_conversion,fast-import.c,2522,-,+,,42,"		parse_and_store_blob(&last_blob, &oid, 0);"
type_conversion,fast-import.c,2524,-,+,,7,		if (oe->type != OBJ_BLOB)
type_conversion,fast-import.c,2526,-,+,,15,"				type_name(oe->type), command_buf.buf);"
type_conversion,fast-import.c,2530,-,+,,7,		if (type < 0)
type_conversion,fast-import.c,2532,-,+,,7,		if (type != OBJ_BLOB)
type_conversion,fast-import.c,2534,-,+,,18,"			    type_name(type), command_buf.buf);"
type_conversion,fast-import.c,2556,-,+,,17,	b->num_notes = 0;
type_conversion,fast-import.c,2561,-,+,,44,	if (!buf || size < the_hash_algo->hexsz + 6)
type_conversion,fast-import.c,2563,-,+,,27,"	if (memcmp(""tree "", buf, 5)"
type_conversion,fast-import.c,2602,-,+,,13,	} else if (*objectish == ':') {
type_conversion,fast-import.c,2605,-,+,,7,		if (oe->type != OBJ_COMMIT)
type_conversion,fast-import.c,2609,-,+,,8,			if (oe->pack_id != MAX_PACK_ID) {
type_conversion,fast-import.c,2620,-,+,,16,			b->delete = 1;
type_conversion,fast-import.c,2660,-,+,,11,	*count = 0;
type_conversion,fast-import.c,2666,-,+,,12,		else if (*from == ':') {
type_conversion,fast-import.c,2669,-,+,,8,			if (oe->type != OBJ_COMMIT)
type_conversion,fast-import.c,2678,-,+,,46,			if (!buf || size < the_hash_algo->hexsz + 6)
type_conversion,fast-import.c,2727,-,+,,19,"	parse_data(&msg, 0, NULL);"
type_conversion,fast-import.c,2741,-,+,,27,	while (command_buf.len > 0) {
type_conversion,fast-import.c,2767,-,+,,6,	if (new_fanout != prev_fanout)
type_conversion,fast-import.c,2803,-,+,,16,		b->pack_id = pack_id;
type_conversion,fast-import.c,2814,-,+,,24,	uintmax_t from_mark = 0;
type_conversion,fast-import.c,2819,-,+,,36,"	t = mem_pool_calloc(&fi_mem_pool, 1, sizeof(struct tag));"
type_conversion,fast-import.c,2838,-,+,,13,	} else if (*from == ':') {
type_conversion,fast-import.c,2848,-,+,,8,			if (type < 0)
type_conversion,fast-import.c,2867,-,+,,19,"	parse_data(&msg, 0, NULL);"
type_conversion,fast-import.c,2876,-,+,,35,"		    oid_to_hex(&oid), type_name(type), t->name);"
type_conversion,fast-import.c,2935,-,+,,24,	if (command_buf.len > 0)
type_conversion,fast-import.c,2941,-,+,,46,"	if (write_in_full(cat_blob_fd, buf, size) < 0)"
type_conversion,fast-import.c,2952,-,+,,13,	if (!oe || oe->pack_id == MAX_PACK_ID) {
type_conversion,fast-import.c,2962,-,+,,6,	if (type <= 0) {
type_conversion,fast-import.c,2972,-,+,,6,	if (type != OBJ_BLOB)
type_conversion,fast-import.c,2974,-,+,,34,"		    oid_to_hex(oid), type_name(type));"
type_conversion,fast-import.c,2977,-,+,,17,"		    type_name(type), (uintmax_t)size);"
type_conversion,fast-import.c,2981,-,+,,23,"	cat_blob_write(""\n"", 1);"
type_conversion,fast-import.c,2982,-,+,,12,	if (oe && oe->pack_id == pack_id) {
type_conversion,fast-import.c,2985,-,+,,21,		last_blob.depth = oe->depth;
type_conversion,fast-import.c,2996,-,+,,6,	if (*p != ':')
type_conversion,fast-import.c,3004,-,+,,48,"	cat_blob_write(output, the_hash_algo->hexsz + 1);"
type_conversion,fast-import.c,3013,-,+,,6,	if (*p == ':') {
type_conversion,fast-import.c,3039,-,+,,7,		if (type < 0)
type_conversion,fast-import.c,3043,-,+,,14,		oe->type = type;
type_conversion,fast-import.c,3045,-,+,,20,		oe->idx.offset = 1;
type_conversion,fast-import.c,3047,-,+,,10,	switch (oe->type) {
type_conversion,fast-import.c,3048,-,+,,7,	case OBJ_TREE:	/* easy case. */
type_conversion,fast-import.c,3050,-,+,,7,	case OBJ_COMMIT:
type_conversion,fast-import.c,3051,-,+,,7,	case OBJ_TAG:
type_conversion,fast-import.c,3057,-,+,,6,	if (oe->pack_id != MAX_PACK_ID) {	/* in a pack being written */
type_conversion,fast-import.c,3068,-,+,,10,	switch (oe->type) {
type_conversion,fast-import.c,3069,-,+,,7,	case OBJ_TAG:
type_conversion,fast-import.c,3070,-,+,,14,"		if (size < hexsz + strlen(""object "") ||"
type_conversion,fast-import.c,3074,-,+,,7,	case OBJ_COMMIT:
type_conversion,fast-import.c,3075,-,+,,14,"		if (size < hexsz + strlen(""tree "") ||"
type_conversion,fast-import.c,3100,-,+,,22,"	for_each_mark(from, 0, insert_mapped_mark, to);"
type_conversion,fast-import.c,3125,-,+,,6,	if (**p == ':') {	/* <mark> */
type_conversion,fast-import.c,3134,-,+,,7,		if (*(*p)++ != ' ')
type_conversion,fast-import.c,3138,-,+,,15,	while (!e || e->type != OBJ_TREE)
type_conversion,fast-import.c,3157,-,+,,36,"		quote_c_style(path, &line, NULL, 0);"
type_conversion,fast-import.c,3164,-,+,,36,"		quote_c_style(path, &line, NULL, 0);"
type_conversion,fast-import.c,3177,-,+,,6,"	if (*p == '""') {"
type_conversion,fast-import.c,3199,-,+,,11,"	print_ls(leaf.versions[1].mode, leaf.versions[1].oid.hash, path.buf);"
type_conversion,fast-import.c,3225,-,+,,26,"	fwrite(command_buf.buf, 1, command_buf.len, stdout);"
type_conversion,fast-import.c,3342,-,+,,7,	*f = '\0';
type_conversion,fast-import.c,3363,-,+,,11,		if (v < 8192) {
type_conversion,fast-import.c,3365,-,+,,9,			v *= 1024 * 1024;
type_conversion,fast-import.c,3366,-,+,,18,		} else if (v < 1024 * 1024) {
type_conversion,fast-import.c,3368,-,+,,8,			v = 1024 * 1024;
type_conversion,fast-import.c,3370,-,+,,18,		max_packsize = v;
type_conversion,fast-import.c,3383,-,+,,16,		show_stats = 0;
type_conversion,fast-import.c,3385,-,+,,16,		show_stats = 1;
type_conversion,fast-import.c,3477,-,+,,27,		pack_idx_opts.version = indexversion_value;
type_conversion,fast-import.c,3478,-,+,,31,		if (pack_idx_opts.version > 2)
type_conversion,fast-import.c,3483,-,+,,18,		max_packsize = packsizelimit_value;
type_conversion,fast-import.c,3500,-,+,,18,	for (i = 1; i < global_argc; i++) {
type_conversion,fast-import.c,3503,-,+,,7,"		if (*a != '-' || !strcmp(a, ""--""))"
type_conversion,fast-import.c,3522,-,+,,11,	if (i != global_argc)
type_conversion,fast-import.c,3542,-,+,,28,"	strbuf_init(&command_buf, 0);"
type_conversion,fast-import.c,3546,-,+,,40,"	marks = mem_pool_calloc(&fi_mem_pool, 1, sizeof(struct mark_set));"
type_conversion,fast-import.c,3548,-,+,,58,"	hashmap_init(&object_table, object_entry_hashcmp, NULL, 0);"
type_conversion,fast-import.c,3556,-,+,,18,	for (i = 1; i < argc; i++) {
type_conversion,fast-import.c,3558,-,+,,7,"		if (*arg != '-' || !strcmp(arg, ""--""))"
type_conversion,fast-import.c,3568,-,+,,41,"	rc_free = mem_pool_alloc(&fi_mem_pool, cmd_save * sizeof(*rc_free));"
type_conversion,fast-import.c,3569,-,+,,30,	for (i = 0; i < (cmd_save - 1); i++)
type_conversion,fast-import.c,3570,-,+,,34,		rc_free[i].next = &rc_free[i + 1];
type_conversion,fast-import.c,3571,-,+,,21,	rc_free[cmd_save - 1].next = NULL;
type_conversion,fast-import.c,3631,-,+,,27,"		uintmax_t total_count = 0, duplicate_count = 0;"
type_conversion,fast-import.c,3632,-,+,,15,		for (i = 0; i < ARRAY_SIZE(object_count_by_type); i++)
type_conversion,fast-import.c,3634,-,+,,15,		for (i = 0; i < ARRAY_SIZE(duplicate_count_by_type); i++)
type_conversion,fast-import.c,3646,-,+,,119,"		fprintf(stderr, ""      marks:     %10"" PRIuMAX "" (%10"" PRIuMAX "" unique    )\n"", (((uintmax_t)1) << marks->shift) * 1024, marks_set_count);"
type_conversion,fast-import.c,3648,-,+,,147,"		fprintf(stderr, ""Memory total:    %10"" PRIuMAX "" KiB\n"", (tree_entry_allocd + fi_mem_pool.pool_alloc + alloc_count*sizeof(struct object_entry))/1024);"
type_conversion,fast-import.c,3649,-,+,,113,"		fprintf(stderr, ""       pools:    %10lu KiB\n"", (unsigned long)((tree_entry_allocd + fi_mem_pool.pool_alloc) /1024));"
type_conversion,fast-import.c,3650,-,+,,102,"		fprintf(stderr, ""     objects:    %10"" PRIuMAX "" KiB\n"", (alloc_count*sizeof(struct object_entry))/1024);"
type_conversion,fetch-pack.c,25,-,+,,7,		if (*p == ' ') {
type_conversion,fetch-pack.c,28,-,+,,14,		} else if (*p == '\0') {
type_conversion,fetch-pack.c,71,-,+,,26,	for (i = 1; i < argc && *argv[i] == '-'; i++) {
type_conversion,fetch-pack.c,83,-,+,,17,			args.quiet = 1;
type_conversion,fetch-pack.c,87,-,+,,21,			args.lock_pack = args.keep_pack;
type_conversion,fetch-pack.c,88,-,+,,21,			args.keep_pack = 1;
type_conversion,fetch-pack.c,92,-,+,,25,			args.use_thin_pack = 1;
type_conversion,fetch-pack.c,96,-,+,,23,			args.include_tag = 1;
type_conversion,fetch-pack.c,100,-,+,,21,			args.fetch_all = 1;
type_conversion,fetch-pack.c,104,-,+,,22,			args.stdin_refs = 1;
type_conversion,fetch-pack.c,108,-,+,,20,			args.diag_url = 1;
type_conversion,fetch-pack.c,112,-,+,,19,			args.verbose = 1;
type_conversion,fetch-pack.c,119,-,+,,11,	for (i = 0; i < cache.nr; i++)
type_conversion,fetch-pack.c,128,-,+,,27,			args.deepen_relative = 1;
type_conversion,fetch-pack.c,132,-,+,,23,			args.no_progress = 1;
type_conversion,fetch-pack.c,136,-,+,,25,			args.stateless_rpc = 1;
type_conversion,fetch-pack.c,139,-,+,,7,		if (*type == OBJ_TAG) {
type_conversion,fetch-pack.c,140,-,+,,21,			args.lock_pack = 1;
type_conversion,fetch-pack.c,145,-,+,,46,			args.check_self_contained_and_connected = 1;
type_conversion,fetch-pack.c,149,-,+,,19,			args.cloning = 1;
type_conversion,fetch-pack.c,153,-,+,,26,			args.update_shallow = 1;
type_conversion,fetch-pack.c,157,-,+,,25,			args.from_promisor = 1;
type_conversion,fetch-pack.c,161,-,+,,19,			args.refetch = 1;
type_conversion,fetch-pack.c,207,-,+,,10,		while (packet_reader_read(reader) == PACKET_READ_NORMAL) {
type_conversion,fetch-pack.c,214,-,+,,48,		int flags = args.verbose ? CONNECT_VERBOSE : 0;
type_conversion,fetch-pack.c,223,-,+,,43,"	packet_reader_init(&reader, fd[0], NULL, 0,"
type_conversion,fetch-pack.c,225,-,+,,6,	if (packet_reader_read(reader) != PACKET_READ_NORMAL)
type_conversion,fetch-pack.c,232,-,+,,5,				args.stateless_rpc);
type_conversion,fetch-pack.c,236,-,+,,35,"		get_remote_heads(&reader, &ref, 0, NULL, &shallow);"
type_conversion,fetch-pack.c,249,-,+,,15,		for (i = 1; i < pack_lockfiles.nr; i++)
type_conversion,fetch-pack.c,253,-,+,,35,"		send_sideband(fd, -1, buf->buf, buf->len, LARGE_PACKET_MAX);"
type_conversion,fetch-pack.c,256,-,+,,47,"		if (write_in_full(fd, buf->buf, buf->len) < 0)"
type_conversion,fetch-pack.c,298,-,+,,14,	for (i = 0; i < negotiation_tips->nr; i++)
type_conversion,fetch-pack.c,335,-,+,,21,	unsigned in_vain = 0;
type_conversion,fetch-pack.c,339,-,+,,21,	size_t state_len = 0;
type_conversion,fetch-pack.c,345,-,+,,43,"	packet_reader_init(&reader, fd[0], NULL, 0,"
type_conversion,fetch-pack.c,419,-,+,,15,		for (i = 0; i < args->deepen_not->nr; i++) {
type_conversion,fetch-pack.c,433,-,+,,10,		while (packet_reader_read(&reader) == PACKET_READ_NORMAL) {
type_conversion,fetch-pack.c,461,-,+,,27,"		strbuf_setlen(&req_buf, 0);"
type_conversion,fetch-pack.c,462,-,+,,15,		state_len = 0;
type_conversion,fetch-pack.c,489,-,+,,26,"			flush_at = next_flush(args->stateless_rpc, count);"
type_conversion,fetch-pack.c,500,-,+,,11,"				ack = get_ack(&reader, result_oid);"
type_conversion,fetch-pack.c,505,-,+,,10,				case ACK:
type_conversion,fetch-pack.c,513,-,+,,10,				case ACK_common:
type_conversion,fetch-pack.c,514,-,+,,10,				case ACK_ready:
type_conversion,fetch-pack.c,515,-,+,,10,				case ACK_continue: {
type_conversion,fetch-pack.c,525,-,+,,17,					 && ack == ACK_common
type_conversion,fetch-pack.c,540,-,+,,17,						in_vain = 0;
type_conversion,fetch-pack.c,542,-,+,,20,						   || ack != ACK_common)
type_conversion,fetch-pack.c,543,-,+,,17,						in_vain = 0;
type_conversion,fetch-pack.c,546,-,+,,17,					if (ack == ACK_ready)
type_conversion,fetch-pack.c,582,-,+,,13,"		int ack = get_ack(&reader, result_oid);"
type_conversion,fetch-pack.c,586,-,+,,15,			if (ack == ACK)
type_conversion,fetch-pack.c,638,-,+,,9,	return	ref->match_status == REF_NOT_MATCHED &&
type_conversion,fetch-pack.c,640,-,+,,3,		*p == '\0' &&
type_conversion,fetch-pack.c,750,-,+,,23,	timestamp_t cutoff = 0;
type_conversion,fetch-pack.c,770,-,+,,14,			if (!o || o->type != OBJ_COMMIT)
type_conversion,fetch-pack.c,877,-,+,,35,	int len = the_hash_algo->hexsz + 1; /* hash + NL */
type_conversion,fetch-pack.c,881,-,+,,45,"		int read_len = read_in_full(fd, hex_hash, len);"
type_conversion,fetch-pack.c,889,-,+,,46,"		if (parse_oid_hex(hex_hash, &oid, &end) || *end != '\n')"
type_conversion,fetch-pack.c,917,-,+,,16,	int do_keep = args->keep_pack;
type_conversion,fetch-pack.c,946,-,+,,35,		if (ntohl(header.hdr_entries) < unpack_limit)
type_conversion,fetch-pack.c,984,-,+,,47,			args->check_self_contained_and_connected = 0;
type_conversion,fetch-pack.c,1002,-,+,,46,		args->check_self_contained_and_connected = 0;
type_conversion,fetch-pack.c,1025,-,+,,15,		for (i = 0; i < cmd.args.nr; i++)
type_conversion,fetch-pack.c,1032,-,+,,16,	cmd.git_cmd = 1;
type_conversion,fetch-pack.c,1054,-,+,,4,"			args->check_self_contained_and_connected &&
			ret == 0;"
type_conversion,fetch-pack.c,1127,-,+,,18,		args->deepen = 1;
type_conversion,fetch-pack.c,1160,-,+,,25,		args->use_thin_pack = 0;
type_conversion,fetch-pack.c,1164,-,+,,23,		args->no_progress = 0;
type_conversion,fetch-pack.c,1168,-,+,,23,		args->include_tag = 0;
type_conversion,fetch-pack.c,1247,-,+,,15,		for (i = 0; i < args->deepen_not->nr; i++) {
type_conversion,fetch-pack.c,1330,-,+,,15,		for (i = 0; i < server_options->nr; i++)
type_conversion,fetch-pack.c,1385,-,+,,15,		for (i = 0; i < uri_protocols.nr; i++) {
type_conversion,fetch-pack.c,1419,-,+,,56,"	if (write_in_full(fd_out, req_buf.buf, req_buf.len) < 0)"
type_conversion,fetch-pack.c,1437,-,+,,6,	if (packet_reader_peek(reader) == PACKET_READ_NORMAL &&
type_conversion,fetch-pack.c,1460,-,+,,9,	while (packet_reader_read(reader) == PACKET_READ_NORMAL) {
type_conversion,fetch-pack.c,1484,-,+,,6,	if (reader->status != PACKET_READ_FLUSH &&
type_conversion,fetch-pack.c,1485,-,+,,6,	    reader->status != PACKET_READ_DELIM)
type_conversion,fetch-pack.c,1495,-,+,,25,	if (*received_ready && reader->status != PACKET_READ_DELIM)
type_conversion,fetch-pack.c,1501,-,+,,26,	if (!*received_ready && reader->status != PACKET_READ_FLUSH)
type_conversion,fetch-pack.c,1519,-,+,,9,	while (packet_reader_read(reader) == PACKET_READ_NORMAL) {
type_conversion,fetch-pack.c,1545,-,+,,6,	if (reader->status != PACKET_READ_FLUSH &&
type_conversion,fetch-pack.c,1546,-,+,,6,	    reader->status != PACKET_READ_DELIM)
type_conversion,fetch-pack.c,1557,-,+,,15,		for (i = 0; i < shallows->nr; i++)
type_conversion,fetch-pack.c,1561,-,+,,18,		args->deepen = 1;
type_conversion,fetch-pack.c,1590,-,+,,9,	while (packet_reader_read(reader) == PACKET_READ_NORMAL) {
type_conversion,fetch-pack.c,1595,-,+,,50,"		if (parse_oid_hex(reader->line, &oid, &end) || *end++ != ' ')"
type_conversion,fetch-pack.c,1598,-,+,,32,"		found = bsearch(end, sought, nr_sought, sizeof(*sought),"
type_conversion,fetch-pack.c,1605,-,+,,6,	if (reader->status != PACKET_READ_DELIM)
type_conversion,fetch-pack.c,1613,-,+,,9,	while (packet_reader_read(reader) == PACKET_READ_NORMAL) {
type_conversion,fetch-pack.c,1614,-,+,,7,		if (reader->pktlen < the_hash_algo->hexsz ||
type_conversion,fetch-pack.c,1620,-,+,,6,	if (reader->status != PACKET_READ_DELIM)
type_conversion,fetch-pack.c,1670,-,+,,43,"	packet_reader_init(&reader, fd[0], NULL, 0,"
type_conversion,fetch-pack.c,1675,-,+,,25,		reader.use_sideband = 1;
type_conversion,fetch-pack.c,1679,-,+,,9,	while (state != FETCH_DONE) {
type_conversion,fetch-pack.c,1689,-,+,,20,				args->deepen = 1;
type_conversion,fetch-pack.c,1717,-,+,,13,"					       reader.use_sideband,"
type_conversion,fetch-pack.c,1746,-,+,,34,"				do_check_stateless_delimiter(args->stateless_rpc, &reader);"
type_conversion,fetch-pack.c,1785,-,+,,33,"			do_check_stateless_delimiter(args->stateless_rpc, &reader);"
type_conversion,fetch-pack.c,1794,-,+,,14,	for (i = 0; i < packfile_uris.nr; i++) {
type_conversion,fetch-pack.c,1805,-,+,,15,		for (j = 0; j < index_pack_args.nr; j++)
type_conversion,fetch-pack.c,1809,-,+,,17,		cmd.git_cmd = 1;
type_conversion,fetch-pack.c,1810,-,+,,18,		cmd.no_stdin = 1;
type_conversion,fetch-pack.c,1815,-,+,,39,"		if (read_in_full(cmd.out, packname, 5) < 0 ||"
type_conversion,fetch-pack.c,1816,-,+,,34,"		    memcmp(packname, ""keep\t"", 5))"
type_conversion,fetch-pack.c,1820,-,+,,29,				 the_hash_algo->hexsz + 1) < 0 ||
type_conversion,fetch-pack.c,1824,-,+,,36,		packname[the_hash_algo->hexsz] = '\0';
type_conversion,fetch-pack.c,1950,-,+,,7,		if (*alternate_shallow_file == '\0') { /* --unshallow */
type_conversion,fetch-pack.c,1971,-,+,,15,		for (i = 0; i < si->shallow->nr; i++)
type_conversion,fetch-pack.c,2065,-,+,,6,	if (version != protocol_v2 && !ref) {
type_conversion,fetch-pack.c,2069,-,+,,6,	if (version == protocol_v2) {
type_conversion,fetch-pack.c,2088,-,+,,29,			opt.is_deepening_fetch = 1;
type_conversion,fetch-pack.c,2096,-,+,,32,		args->connectivity_checked = 1;
type_conversion,fetch-pack.c,2146,-,+,,43,"	packet_reader_init(&reader, fd[0], NULL, 0,"
type_conversion,fetch-pack.c,2182,-,+,,56,"		if (write_in_full(fd[1], req_buf.buf, req_buf.len) < 0)"
type_conversion,fetch-pack.c,2209,-,+,,23,"						 REACH_SCRATCH, 0,"
type_conversion,fetch.c,74,-,+,,37,static uint64_t forced_updates_ms = 0;
type_conversion,fetch.c,86,-,+,,19,"static int tags = TAGS_DEFAULT, update_shallow, deepen;"
type_conversion,fetch.c,138,-,+,,11,"		int r = git_config_bool(k, v) ?
			RECURSE_SUBMODULES_ON : RECURSE_SUBMODULES_OFF;"
type_conversion,fetch.c,199,-,+,,14,	unlock_pack(0);
type_conversion,fetch.c,301,-,+,,50,"	hashmap_init(map, refname_hash_entry_cmp, NULL, 0);"
type_conversion,fetch.c,482,-,+,,24,		rs->items[i].force = 1;
type_conversion,fetch.c,585,-,+,,14,	if (tags == TAGS_SET)
type_conversion,fetch.c,588,-,+,,19,	else if (tags == TAGS_DEFAULT && *autotags)
type_conversion,fetch.c,675,-,+,,22,"				     NULL, NULL, 0, msg, &err);"
type_conversion,fetch.c,715,-,+,,7,		if (ref->status == REF_STATUS_REJECT_SHALLOW ||
type_conversion,fetch.c,751,-,+,,35,"	strbuf_init(&display_state->buf, 0);"
type_conversion,fetch.c,759,-,+,,27,	display_state->url_len = strlen(display_state->url);
type_conversion,fetch.c,760,-,+,,39,	for (i = display_state->url_len - 1; display_state->url[i] == '/' && 0 <= i; i--)
type_conversion,fetch.c,763,-,+,,60,"	if (4 < i && !strncmp("".git"", display_state->url + i - 3, 4))"
type_conversion,fetch.c,773,-,+,,11,							   display_state->format == DISPLAY_FORMAT_COMPACT);
type_conversion,fetch.c,803,-,+,,9,	nlen = strlen(needle);
type_conversion,fetch.c,811,-,+,,27,	if (p > haystack->buf && p[-1] != '/')
type_conversion,fetch.c,814,-,+,,9,	plen = strlen(p);
type_conversion,fetch.c,815,-,+,,21,	if (plen > nlen && p[nlen] != '/')
type_conversion,fetch.c,818,-,+,,26,"	strbuf_splice(haystack, p - haystack->buf, nlen,"
type_conversion,fetch.c,870,-,+,,12,		width = (summary_width + strlen(summary) - gettext_width(summary));
type_conversion,fetch.c,874,-,+,,49,"		strbuf_addf(&display_state->buf, "" %c %-*s "", code, width, summary);"
type_conversion,fetch.c,876,-,+,,7,		if (display_state->format != DISPLAY_FORMAT_COMPACT)
type_conversion,fetch.c,887,-,+,,51,"		strbuf_addf(&display_state->buf, ""%c %s %s %s"", code,"
type_conversion,fetch.c,914,-,+,,38,"			display_ref_update(display_state, '=', _(""[up to date]""), NULL,"
type_conversion,fetch.c,927,-,+,,37,"		display_ref_update(display_state, '!', _(""[rejected]""),"
type_conversion,fetch.c,939,-,+,,38,"			display_ref_update(display_state, r ? '!' : 't', _(""[tag update]""),"
type_conversion,fetch.c,945,-,+,,38,"			display_ref_update(display_state, '!', _(""[rejected]""),"
type_conversion,fetch.c,978,-,+,,37,"		display_ref_update(display_state, r ? '!' : '*', what,"
type_conversion,fetch.c,991,-,+,,53,		forced_updates_ms += (getnanotime() - t_before) / 1000000;
type_conversion,fetch.c,1004,-,+,,37,"		display_ref_update(display_state, r ? '!' : ' ', quickref.buf,"
type_conversion,fetch.c,1017,-,+,,37,"		display_ref_update(display_state, r ? '!' : '+', quickref.buf,"
type_conversion,fetch.c,1024,-,+,,37,"		display_ref_update(display_state, '!', _(""[rejected]""), _(""non-fast-forward""),"
type_conversion,fetch.c,1036,-,+,,16,	while (ref && ref->status == REF_STATUS_REJECT_SHALLOW)
type_conversion,fetch.c,1057,-,+,,33,"		strbuf_init(&fetch_head->buf, 0);"
type_conversion,fetch.c,1092,-,+,,11,	for (i = 0; i < url_len; ++i)
type_conversion,fetch.c,1093,-,+,,15,		if ('\n' == url[i])
type_conversion,fetch.c,1096,-,+,,35,"			strbuf_addch(&fetch_head->buf, url[i]);"
type_conversion,fetch.c,1170,-,+,,21,	for (want_status = FETCH_HEAD_MERGE;
type_conversion,fetch.c,1171,-,+,,22,	     want_status <= FETCH_HEAD_IGNORE;
type_conversion,fetch.c,1176,-,+,,8,			if (rm->status == REF_STATUS_REJECT_SHALLOW) {
type_conversion,fetch.c,1177,-,+,,24,				if (want_status == FETCH_HEAD_MERGE)
type_conversion,fetch.c,1214,-,+,,8,			if (rm->fetch_head_status != want_status)
type_conversion,fetch.c,1221,-,+,,18,				ref->force = rm->peer_ref->force;
type_conversion,fetch.c,1224,-,+,,38,			if (config->recurse_submodules != RECURSE_SUBMODULES_OFF &&
type_conversion,fetch.c,1253,-,+,,8,					  display_state->url_len);
type_conversion,fetch.c,1265,-,+,,39,"				display_ref_update(display_state, '*',"
type_conversion,fetch.c,1285,-,+,,5,				forced_updates_ms / 1000.0);
type_conversion,fetch.c,1360,-,+,,4,			transport->smart_options->connectivity_checked : 0;
type_conversion,fetch.c,1370,-,+,,35,"	transport_unlock_pack(transport, 0);"
type_conversion,fetch.c,1389,-,+,,67,"				result = ref_transaction_delete(transaction, ref->name, NULL, 0,"
type_conversion,fetch.c,1402,-,+,,9,						  0);
type_conversion,fetch.c,1411,-,+,,38,"			display_ref_update(display_state, '-', _(""[deleted]""), NULL,"
type_conversion,fetch.c,1472,-,+,,35,"	struct oid_array *oids = xcalloc(1, sizeof(*oids));"
type_conversion,fetch.c,1475,-,+,,14,	for (i = 0; i < negotiation_tip.nr; i++) {
type_conversion,fetch.c,1482,-,+,,42,"			if (!has_object(the_repository, &oid, 0))"
type_conversion,fetch.c,1487,-,+,,12,		old_nr = oids->nr;
type_conversion,fetch.c,1490,-,+,,7,		if (old_nr == oids->nr)
type_conversion,fetch.c,1579,-,+,,41,	struct display_state display_state = { 0 };
type_conversion,fetch.c,1589,-,+,,14,	if (tags == TAGS_DEFAULT) {
type_conversion,fetch.c,1591,-,+,,11,			tags = TAGS_SET;
type_conversion,fetch.c,1593,-,+,,11,			tags = TAGS_UNSET;
type_conversion,fetch.c,1635,-,+,,14,	if (tags == TAGS_SET || tags == TAGS_DEFAULT) {
type_conversion,fetch.c,1673,-,+,,14,	if (tags == TAGS_DEFAULT && autotags)
type_conversion,fetch.c,1701,-,+,,14,	if (tags == TAGS_DEFAULT && autotags) {
type_conversion,fetch.c,1832,-,+,,19,			if (wordlen >= 1)
type_conversion,fetch.c,1835,-,+,,24,			value += wordlen + (value[wordlen] != '\0');
type_conversion,fetch.c,1844,-,+,,16,	int prev_nr = list->nr;
type_conversion,fetch.c,1849,-,+,,18,	if (list->nr == prev_nr) {
type_conversion,fetch.c,1873,-,+,,36,	if (config->recurse_submodules == RECURSE_SUBMODULES_ON)
type_conversion,fetch.c,1875,-,+,,41,	else if (config->recurse_submodules == RECURSE_SUBMODULES_OFF)
type_conversion,fetch.c,1877,-,+,,41,	else if (config->recurse_submodules == RECURSE_SUBMODULES_ON_DEMAND)
type_conversion,fetch.c,1879,-,+,,14,	if (tags == TAGS_SET)
type_conversion,fetch.c,1881,-,+,,19,	else if (tags == TAGS_UNSET)
type_conversion,fetch.c,1889,-,+,,6,	if (family == TRANSPORT_FAMILY_IPV4)
type_conversion,fetch.c,1891,-,+,,11,	else if (family == TRANSPORT_FAMILY_IPV6)
type_conversion,fetch.c,1895,-,+,,6,	if (config->display_format == DISPLAY_FORMAT_PORCELAIN)
type_conversion,fetch.c,1915,-,+,,25,	if (state->next < 0 || state->next >= state->remotes->nr)
type_conversion,fetch.c,1923,-,+,,16,	cp->git_cmd = 1;
type_conversion,fetch.c,1925,-,+,,24,	if (verbosity >= 0 && state->config->display_format != DISPLAY_FORMAT_PORCELAIN)
type_conversion,fetch.c,1978,-,+,,39,	if (max_children != 1 && list->nr != 1) {
type_conversion,fetch.c,1984,-,+,,17,"			.processes = max_children,"
type_conversion,fetch.c,1997,-,+,,15,		for (i = 0; i < list->nr; i++) {
type_conversion,fetch.c,2003,-,+,,26,			if (verbosity >= 0 && config->display_format != DISPLAY_FORMAT_PORCELAIN)
type_conversion,fetch.c,2005,-,+,,18,			cmd.git_cmd = 1;
type_conversion,fetch.c,2141,-,+,,25,"		.recurse_submodules = RECURSE_SUBMODULES_DEFAULT,"
type_conversion,fetch.c,2155,-,+,,31,	int recurse_submodules_cli = RECURSE_SUBMODULES_DEFAULT;
type_conversion,fetch.c,2156,-,+,,35,	int recurse_submodules_default = RECURSE_SUBMODULES_ON_DEMAND;
type_conversion,fetch.c,2268,-,+,,32,	if (recurse_submodules_cli != RECURSE_SUBMODULES_DEFAULT)
type_conversion,fetch.c,2273,-,+,,8,		case RECURSE_SUBMODULES_OFF:
type_conversion,fetch.c,2274,-,+,,8,		case RECURSE_SUBMODULES_DEFAULT:
type_conversion,fetch.c,2280,-,+,,32,			config.recurse_submodules = RECURSE_SUBMODULES_OFF;
type_conversion,fetch.c,2289,-,+,,35,	if (config.recurse_submodules != RECURSE_SUBMODULES_OFF) {
type_conversion,fetch.c,2292,-,+,,42,		int *rs = config.recurse_submodules == RECURSE_SUBMODULES_DEFAULT
type_conversion,fetch.c,2301,-,+,,8,		case RECURSE_SUBMODULES_OFF:
type_conversion,fetch.c,2302,-,+,,8,		case RECURSE_SUBMODULES_DEFAULT:
type_conversion,fetch.c,2307,-,+,,32,			config.recurse_submodules = RECURSE_SUBMODULES_OFF;
type_conversion,fetch.c,2371,-,+,,18,		if (list.nr == 1)
type_conversion,fetch.c,2385,-,+,,17,		if (list.nr > 1) {
type_conversion,fetch.c,2458,-,+,,57,	if (!result && remote && (config.recurse_submodules != RECURSE_SUBMODULES_OFF)) {
type_conversion,fetch.c,2493,-,+,,28,		int commit_graph_flags = COMMIT_GRAPH_WRITE_SPLIT;
type_conversion,fetch.c,2496,-,+,,26,			commit_graph_flags |= COMMIT_GRAPH_WRITE_PROGRESS;
type_conversion,files-backend.c,96,-,+,,41,"	struct files_ref_store *refs = xcalloc(1, sizeof(*refs));"
type_conversion,files-backend.c,218,-,+,,15,	for (ip = 0; ip < ARRAY_SIZE(prefixes); ip++) {
type_conversion,files-backend.c,220,-,+,,20,		int prefix_len = strlen(prefix);
type_conversion,files-backend.c,224,-,+,,37,"		pos = search_ref_dir(dir, prefix, prefix_len);"
type_conversion,files-backend.c,227,-,+,,54,"		child_entry = create_dir_entry(dir->cache, prefix, prefix_len);"
type_conversion,files-backend.c,276,-,+,,19,	int dirnamelen = strlen(dirname);
type_conversion,files-backend.c,288,-,+,,24,"	strbuf_init(&refname, dirnamelen + 257);"
type_conversion,files-backend.c,289,-,+,,32,"	strbuf_add(&refname, dirname, dirnamelen);"
type_conversion,files-backend.c,294,-,+,,7,		if (de->d_name[0] == '.')
type_conversion,files-backend.c,301,-,+,,7,		if (dtype == DT_DIR) {
type_conversion,files-backend.c,306,-,+,,14,		} else if (dtype == DT_REG) {
type_conversion,files-backend.c,309,-,+,,27,"		strbuf_setlen(&refname, dirnamelen);"
type_conversion,files-backend.c,347,-,+,,7,		if (de->d_name[0] == '.')
type_conversion,files-backend.c,354,-,+,,7,		if (dtype == DT_REG && is_root_ref(de->d_name))
type_conversion,files-backend.c,382,-,+,,15,		if (flags & DO_FOR_EACH_INCLUDE_ROOT_REFS)
type_conversion,files-backend.c,390,-,+,,64,"		add_entry_to_dir(dir, create_dir_entry(refs->loose, ""refs/"", 5));"
type_conversion,files-backend.c,411,-,+,,10,	*type = 0;
type_conversion,files-backend.c,452,-,+,,43,"		if (strbuf_readlink(&sb_contents, path, st.st_size) < 0) {"
type_conversion,files-backend.c,506,-,+,,36,"	if (strbuf_read(&sb_contents, fd, 256) < 0) {"
type_conversion,files-backend.c,568,-,+,,7,	    (*p != '\0' && !isspace(*p))) {
type_conversion,files-backend.c,629,-,+,,10,	*type = 0;
type_conversion,files-backend.c,829,-,+,,21,		if (iter->flags & DO_FOR_EACH_PER_WORKTREE_ONLY &&
type_conversion,files-backend.c,831,-,+,,21,				       NULL) != REF_WORKTREE_CURRENT)
type_conversion,files-backend.c,834,-,+,,22,		if ((iter->flags & DO_FOR_EACH_OMIT_DANGLING_SYMREFS) &&
type_conversion,files-backend.c,839,-,+,,23,		if (!(iter->flags & DO_FOR_EACH_INCLUDE_BROKEN) &&
type_conversion,files-backend.c,898,-,+,,16,	if (!(flags & DO_FOR_EACH_INCLUDE_BROKEN))
type_conversion,files-backend.c,1048,-,+,,8,			if (scld_result == SCLD_OK)
type_conversion,files-backend.c,1050,-,+,,12,		} while (scld_result == SCLD_VANISHED && create_directories_remaining-- > 0);
type_conversion,files-backend.c,1156,-,+,,16,		while (*p && *p != '/')
type_conversion,files-backend.c,1159,-,+,,10,		while (*p == '/')
type_conversion,files-backend.c,1163,-,+,,18,	while (flags & (REMOVE_EMPTY_PARENTS_REF | REMOVE_EMPTY_PARENTS_REFLOG)) {
type_conversion,files-backend.c,1164,-,+,,19,		while (q > p && *q != '/')
type_conversion,files-backend.c,1166,-,+,,19,		while (q > p && *(q-1) == '/')
type_conversion,files-backend.c,1170,-,+,,23,"		strbuf_setlen(&buf, q - buf.buf);"
type_conversion,files-backend.c,1174,-,+,,16,		if ((flags & REMOVE_EMPTY_PARENTS_REF) && rmdir(sb.buf))
type_conversion,files-backend.c,1175,-,+,,13,			flags &= ~REMOVE_EMPTY_PARENTS_REF;
type_conversion,files-backend.c,1179,-,+,,16,		if ((flags & REMOVE_EMPTY_PARENTS_REFLOG) && rmdir(sb.buf))
type_conversion,files-backend.c,1180,-,+,,13,			flags &= ~REMOVE_EMPTY_PARENTS_REFLOG;
type_conversion,files-backend.c,1241,-,+,,6,	    REF_WORKTREE_SHARED)
type_conversion,files-backend.c,1256,-,+,,41,"		if (!wildmatch(item->string, refname, 0))"
type_conversion,files-backend.c,1280,-,+,,60,"	iter = cache_ref_iterator_begin(get_loose_ref_cache(refs, 0), NULL,"
type_conversion,files-backend.c,1551,-,+,,9,	flag = log_all_ref_updates;
type_conversion,files-backend.c,1732,-,+,,42,"	if (write_in_full(fd, sb.buf, sb.len) < 0)"
type_conversion,files-backend.c,1745,-,+,,6,	if (log_all_ref_updates == LOG_REFS_UNSET)
type_conversion,files-backend.c,1791,-,+,,21,	static char term = '\n';
type_conversion,files-backend.c,1805,-,+,,7,		if (o->type != OBJ_COMMIT && is_branch(lock->ref_name)) {
type_conversion,files-backend.c,1815,-,+,,65,"	if (write_in_full(fd, oid_to_hex(oid), the_hash_algo->hexsz) < 0 ||"
type_conversion,files-backend.c,1816,-,+,,31,"	    write_in_full(fd, &term, 1) < 0 ||"
type_conversion,files-backend.c,1964,-,+,,36,	if (!sb->len || sb->buf[sb->len - 1] != '\n' ||
type_conversion,files-backend.c,1965,-,+,,37,"	    parse_oid_hex(p, &ooid, &p) || *p++ != ' ' ||"
type_conversion,files-backend.c,1966,-,+,,37,"	    parse_oid_hex(p, &noid, &p) || *p++ != ' ' ||"
type_conversion,files-backend.c,1968,-,+,,6,	    email_end[1] != ' ' ||
type_conversion,files-backend.c,1970,-,+,,18,	    !message || message[0] != ' ' ||
type_conversion,files-backend.c,1971,-,+,,7,	    (message[1] != '+' && message[1] != '-') ||
type_conversion,files-backend.c,1975,-,+,,17,	email_end[1] = '\0';
type_conversion,files-backend.c,1977,-,+,,6,	if (message[6] != '\t')
type_conversion,files-backend.c,1986,-,+,,23,	while (bob < scan && *(--scan) != '\n')
type_conversion,files-backend.c,2015,-,+,,19,"	if (fseek(logfp, 0, SEEK_END) < 0)"
type_conversion,files-backend.c,2019,-,+,,17,	while (!ret && 0 < pos) {
type_conversion,files-backend.c,2026,-,+,,24,		cnt = (sizeof(buf) < pos) ? sizeof(buf) : pos;
type_conversion,files-backend.c,2027,-,+,,26,"		if (fseek(logfp, pos - cnt, SEEK_SET)) {"
type_conversion,files-backend.c,2032,-,+,,22,"		nread = fread(buf, cnt, 1, logfp);"
type_conversion,files-backend.c,2033,-,+,,16,		if (nread != 1) {
type_conversion,files-backend.c,2038,-,+,,10,		pos -= cnt;
type_conversion,files-backend.c,2041,-,+,,18,		if (at_tail && scanp[-1] == '\n')
type_conversion,files-backend.c,2055,-,+,,8,			if (*bp == '\n') {
type_conversion,files-backend.c,2062,-,+,,24,"				strbuf_splice(&sb, 0, 0, bp + 1, endp - (bp + 1));"
type_conversion,files-backend.c,2076,-,+,,24,"				strbuf_splice(&sb, 0, 0, buf, endp - buf);"
type_conversion,files-backend.c,2095,-,+,,24,"				strbuf_splice(&sb, 0, 0, buf, endp - buf);"
type_conversion,files-backend.c,2606,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,files-backend.c,2663,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,files-backend.c,2719,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,files-backend.c,2828,-,+,,36,"				&update->new_oid, update->msg, update->flags, err)) {"
type_conversion,files-backend.c,2847,-,+,,29,"		files_downcast(ref_store, 0, ""ref_transaction_finish"");"
type_conversion,files-backend.c,2866,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,files-backend.c,2906,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,files-backend.c,2915,-,+,,9,							 REMOVE_EMPTY_PARENTS_REFLOG);
type_conversion,files-backend.c,2935,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,files-backend.c,2960,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,files-backend.c,2971,-,+,,8,						 REMOVE_EMPTY_PARENTS_REF);
type_conversion,files-backend.c,2984,-,+,,29,"		files_downcast(ref_store, 0, ""ref_transaction_abort"");"
type_conversion,files-backend.c,3014,-,+,,6,	if (transaction->state != REF_TRANSACTION_OPEN)
type_conversion,files-backend.c,3018,-,+,,11,	for (i = 0; i < transaction->nr; i++)
type_conversion,files-backend.c,3049,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,files-backend.c,3142,-,+,,33,	cb.rewrite = !!(expire_flags & EXPIRE_REFLOGS_REWRITE);
type_conversion,files-backend.c,3143,-,+,,33,	cb.dry_run = !!(expire_flags & EXPIRE_REFLOGS_DRY_RUN);
type_conversion,files-backend.c,3216,-,+,,23,		if ((expire_flags & EXPIRE_REFLOGS_UPDATE_REF) &&
type_conversion,files-backend.c,3233,-,+,,60,"				oid_to_hex(&cb.last_kept_oid), the_hash_algo->hexsz) < 0 ||"
type_conversion,files-backend.c,3234,-,+,,63,"			    write_str_in_full(get_lock_file_fd(&lock->lk), ""\n"") < 0 ||"
type_conversion,fmt-merge-msg.c,24,-,+,,5,"		  PARSE_OPT_OPTARG | PARSE_OPT_HIDDEN, NULL,"
type_conversion,fmt-merge-msg.c,53,-,+,,38,"	if (strbuf_read(&input, fileno(in), 0) < 0)"
type_conversion,fmt-merge-msg.c,60,-,+,,19,	opts.add_title = !message;
type_conversion,fmt-merge-msg.c,61,-,+,,23,	opts.credit_people = 1;
type_conversion,fmt-merge-msg.c,62,-,+,,32,	data->branch.strdup_strings = 1;
type_conversion,fmt-merge-msg.c,63,-,+,,29,	data->tag.strdup_strings = 1;
type_conversion,fmt-merge-msg.c,64,-,+,,34,	data->r_branch.strdup_strings = 1;
type_conversion,fmt-merge-msg.c,65,-,+,,33,	data->generic.strdup_strings = 1;
type_conversion,fmt-merge-msg.c,108,-,+,,32,	table->item[table->nr].used = 0;
type_conversion,fmt-merge-msg.c,114,-,+,,15,"	int i, len = strlen(line);"
type_conversion,fmt-merge-msg.c,125,-,+,,6,	if (len < hexsz + 3 || line[hexsz] != '\t')
type_conversion,fmt-merge-msg.c,131,-,+,,19,	if (line[hexsz + 1] != '\t')
type_conversion,fmt-merge-msg.c,144,-,+,,6,	if (line[len - 1] == '\n')
type_conversion,fmt-merge-msg.c,145,-,+,,19,		line[len - 1] = 0;
type_conversion,fmt-merge-msg.c,146,-,+,,18,	line += hexsz + 2;
type_conversion,fmt-merge-msg.c,155,-,+,,10,		*src = 0;
type_conversion,fmt-merge-msg.c,166,-,+,,24,"		item->util = xcalloc(1, sizeof(struct src_data));"
type_conversion,fmt-merge-msg.c,175,-,+,,34,		origin_data->is_local_branch = 1;
type_conversion,fmt-merge-msg.c,192,-,+,,13,		int len = strlen(origin);
type_conversion,fmt-merge-msg.c,193,-,+,,7,		if (origin[0] == '\'' && origin[len - 1] == '\'')
type_conversion,fmt-merge-msg.c,194,-,+,,44,"			origin = to_free = xmemdupz(origin + 1, len - 2);"
type_conversion,fmt-merge-msg.c,198,-,+,,34,		origin_data->is_local_branch = 0;
type_conversion,fmt-merge-msg.c,207,-,+,,18,	if (list->nr == 0)
type_conversion,fmt-merge-msg.c,209,-,+,,18,	if (list->nr == 1) {
type_conversion,fmt-merge-msg.c,214,-,+,,15,		for (i = 0; i < list->nr - 1; i++)
type_conversion,fmt-merge-msg.c,217,-,+,,54,"		strbuf_addf(out, "" and %s"", list->items[list->nr - 1].string);"
type_conversion,fmt-merge-msg.c,260,-,+,,46,"	name_buf = xmemdupz(name, name_end - name + 1);"
type_conversion,fmt-merge-msg.c,267,-,+,,48,	elem->util = (void*)(util_as_integral(elem) + 1);
type_conversion,fmt-merge-msg.c,289,-,+,,20,	if (people->nr == 1)
type_conversion,fmt-merge-msg.c,291,-,+,,25,	else if (people->nr == 2)
type_conversion,fmt-merge-msg.c,319,-,+,,19,	    (them->nr == 1 &&
type_conversion,fmt-merge-msg.c,362,-,+,,17,	if (!branch || branch->type != OBJ_COMMIT)
type_conversion,fmt-merge-msg.c,386,-,+,,21,		if (subjects.nr > limit)
type_conversion,fmt-merge-msg.c,411,-,+,,14,	for (i = 0; i < subjects.nr; i++)
type_conversion,fmt-merge-msg.c,417,-,+,,46,"	clear_commit_marks((struct commit *)branch, flags);"
type_conversion,fmt-merge-msg.c,418,-,+,,27,"	clear_commit_marks(head, flags);"
type_conversion,fmt-merge-msg.c,421,-,+,,20,	rev->pending.nr = 0;
type_conversion,fmt-merge-msg.c,453,-,+,,14,	for (i = 0; i < srcs.nr; i++) {
type_conversion,fmt-merge-msg.c,507,-,+,,32,"		strbuf_add(tagbuf, tag_body, buf + len - tag_body);"
type_conversion,fmt-merge-msg.c,522,-,+,,14,	for (i = 0; i < origins.nr; i++) {
type_conversion,fmt-merge-msg.c,533,-,+,,15,		if (!buf || type != OBJ_TAG)
type_conversion,fmt-merge-msg.c,561,-,+,,28,"				strbuf_insert(&tagbuf, 0, tagline.buf,"
type_conversion,fmt-merge-msg.c,593,-,+,,9,	while (pos < in->len) {
type_conversion,fmt-merge-msg.c,602,-,+,,19,		len = newline ? newline - p : strlen(p);
type_conversion,fmt-merge-msg.c,606,-,+,,7,		    q[0] != '\t' ||
type_conversion,fmt-merge-msg.c,607,-,+,,7,		    q[1] != '\t')
type_conversion,fmt-merge-msg.c,632,-,+,,28,				result->item[i].used = 1;
type_conversion,fmt-merge-msg.c,678,-,+,,9,	while (pos < in->len) {
type_conversion,fmt-merge-msg.c,683,-,+,,19,		len = newline ? newline - p : strlen(p);
type_conversion,fmt-merge-msg.c,686,-,+,,12,		p[len] = 0;
type_conversion,fmt-merge-msg.c,705,-,+,,17,		rev.limited = 1;
type_conversion,fmt-merge-msg.c,709,-,+,,15,		for (i = 0; i < origins.nr; i++)
type_conversion,fopen.c,19,-,+,,6,	if (mode[0] == 'w' || mode[0] == 'a')
type_conversion,for-each-ref.c,80,-,+,,42,"	ref_sorting_set_sort_flags_all(sorting, REF_SORTING_ICASE, icase);"
type_conversion,for-each-ref.c,81,-,+,,23,	filter.ignore_case = icase;
type_conversion,for-each-ref.c,103,-,+,,25,	filter.match_as_path = 1;
type_conversion,for-each-repo.c,21,-,+,,18,	child.git_cmd = 1;
type_conversion,for-each-repo.c,61,-,+,,14,	for (i = 0; i < values->nr; i++) {
type_conversion,fsck.c,25,-,+,,37,static ssize_t max_tree_entry_len = 4096;
type_conversion,fsck.c,34,-,+,,15,} msg_id_info[FSCK_MSG_MAX + 1] = {
type_conversion,fsck.c,49,-,+,,18,	for (i = 0; i < FSCK_MSG_MAX; i++) {
type_conversion,fsck.c,51,-,+,,13,		int len = strlen(p);
type_conversion,fsck.c,52,-,+,,21,		char *q = xmalloc(len);
type_conversion,fsck.c,56,-,+,,8,			if (*p == '_')
type_conversion,fsck.c,60,-,+,,8,		*q = '\0';
type_conversion,fsck.c,63,-,+,,15,		q = xmalloc(len);
type_conversion,fsck.c,66,-,+,,8,			if (*p == '_') {
type_conversion,fsck.c,72,-,+,,6,	if (type == OBJ_NONE)
type_conversion,fsck.c,74,-,+,,8,		*q = '\0';
type_conversion,fsck.c,75,-,+,,18,	ret = type_name(type);
type_conversion,fsck.c,84,-,+,,18,	for (i = 0; i < FSCK_MSG_MAX; i++)
type_conversion,fsck.c,97,-,+,,18,	for (i = 0; i < FSCK_MSG_MAX; i++)
type_conversion,fsck.c,109,-,+,,26,		if (options->strict && msg_type == FSCK_WARN)
type_conversion,fsck.c,136,-,+,,7,"			  (type == OBJ_ANY ? _(""unknown"") : type_name(type)),"
type_conversion,fsck.c,142,-,+,,6,	if (type != OBJ_ANY && obj->type != type)
type_conversion,fsck.c,145,-,+,,19,		for (i = 0; i < FSCK_MSG_MAX; i++)
type_conversion,fsck.c,146,-,+,,6,	if (obj->flags & REACHABLE)
type_conversion,fsck.c,158,-,+,,8,	if (!(obj->flags & HAS_OBJ)) {
type_conversion,fsck.c,159,-,+,,56,"		if (parent && !has_object(the_repository, &obj->oid, 1)) {"
type_conversion,fsck.c,163,-,+,,16,	if (msg_id == FSCK_MSG_LARGE_PATHNAME) {
type_conversion,fsck.c,167,-,+,,28,"				xmemdupz(msg_type_str, colon - msg_type_str);"
type_conversion,fsck.c,175,-,+,,6,	if (msg_type != FSCK_ERROR && msg_id_info[msg_id].msg_type == FSCK_FATAL)
type_conversion,fsck.c,184,-,+,,6,	if (obj->type == OBJ_TREE) {
type_conversion,fsck.c,188,-,+,,13,"		int len = strcspn(buf, "" ,|""), equal;"
type_conversion,fsck.c,194,-,+,,20,	unsigned int nr = 0;
type_conversion,fsck.c,195,-,+,,14,		buf[len] = '\0';
type_conversion,fsck.c,197,-,+,,65,"		progress = start_delayed_progress(_(""Checking connectivity""), 0);"
type_conversion,fsck.c,198,-,+,,23,		     equal < len && buf[equal] != '=' && buf[equal] != ':';
type_conversion,fsck.c,200,-,+,,30,"		display_progress(progress, ++nr);"
type_conversion,fsck.c,201,-,+,,16,		buf[equal] = '\0';
type_conversion,fsck.c,220,-,+,,16,	if (!obj || !(obj->flags & HAS_OBJ))
type_conversion,fsck.c,222,-,+,,6,	if (obj->flags & REACHABLE)
type_conversion,fsck.c,229,-,+,,6,	if (obj->type == OBJ_NONE) {
type_conversion,fsck.c,232,-,+,,7,		if (type > 0)
type_conversion,fsck.c,236,-,+,,6,	if (msg_type == FSCK_IGNORE)
type_conversion,fsck.c,238,-,+,,6,	if (obj->type == OBJ_TREE)
type_conversion,fsck.c,242,-,+,,6,	if (msg_type == FSCK_FATAL)
type_conversion,fsck.c,244,-,+,,11,	else if (msg_type == FSCK_INFO)
type_conversion,fsck.c,269,-,+,,8,	if (!(obj->flags & HAS_OBJ)) {
type_conversion,fsck.c,293,-,+,,8,	if (!(obj->flags & HAS_OBJ))
type_conversion,fsck.c,310,-,+,,6,	b = (b + 1) % ARRAY_SIZE(bufs);
type_conversion,fsck.c,319,-,+,,8,	if (!(obj->flags & USED)) {
type_conversion,fsck.c,326,-,+,,5,"				obj->type == OBJ_COMMIT ? ""commit"" : ""other"","
type_conversion,fsck.c,336,-,+,,8,			if (obj->type == OBJ_BLOB) {
type_conversion,fsck.c,361,-,+,,6,	if (obj->flags & REACHABLE)
type_conversion,fsck.c,391,-,+,,13,"		int len = strlen(name), power;"
type_conversion,fsck.c,393,-,+,,14,		if (len && name[len - 1] == '^') {
type_conversion,fsck.c,395,-,+,,8,	max = get_max_object_index();
type_conversion,fsck.c,400,-,+,,43,		struct object *obj = get_indexed_object(i);
type_conversion,fsck.c,401,-,+,,28,				generation += power * (name[--len] - '0');
type_conversion,fsck.c,402,-,+,,28,			if (power > 1 && len && name[len - 1] == '~')
type_conversion,fsck.c,411,-,+,,6,	if (obj->flags & SEEN)
type_conversion,fsck.c,426,-,+,,6,	if (obj->type == OBJ_COMMIT) {
type_conversion,fsck.c,434,-,+,,6,	if (obj->type == OBJ_TAG) {
type_conversion,fsck.c,447,-,+,,6,	if (obj->type == OBJ_TREE)
type_conversion,fsck.c,452,-,+,,6,	if (obj->type == OBJ_NONE)
type_conversion,fsck.c,455,-,+,,10,	switch (obj->type) {
type_conversion,fsck.c,456,-,+,,7,	case OBJ_BLOB:
type_conversion,fsck.c,458,-,+,,7,	case OBJ_TREE:
type_conversion,fsck.c,460,-,+,,7,	case OBJ_COMMIT:
type_conversion,fsck.c,462,-,+,,7,	case OBJ_TAG:
type_conversion,fsck.c,481,-,+,,15,		if (obj && (obj->flags & HAS_OBJ)) {
type_conversion,fsck.c,490,-,+,,29,	stack->nr = stack->alloc = 0;
type_conversion,fsck.c,506,-,+,,16,	return '\0' < c && c < '/';
type_conversion,fsck.c,507,-,+,,40,"	fsck_handle_reflog_oid(refname, ooid, 0);"
type_conversion,fsck.c,513,-,+,,13,	int len1 = strlen(name1);
type_conversion,fsck.c,514,-,+,,13,	int len2 = strlen(name2);
type_conversion,fsck.c,519,-,+,,29,"	cmp = memcmp(name1, name2, len);"
type_conversion,fsck.c,530,-,+,,7,	c1 = name1[len];
type_conversion,fsck.c,531,-,+,,7,	c2 = name2[len];
type_conversion,fsck.c,540,-,+,,8,		c1 = '/';
type_conversion,fsck.c,542,-,+,,8,		c2 = '/';
type_conversion,fsck.c,545,-,+,,6,	if (obj->type != OBJ_COMMIT && is_branch(refname)) {
type_conversion,fsck.c,560,-,+,,13,	} else if (c2 == '/' && is_less_than_slash(c1)) {
type_conversion,fsck.c,571,-,+,,27,			if (is_less_than_slash(*p)) {
type_conversion,fsck.c,578,-,+,,9,	return c1 < c2 ? 0 : TREE_UNORDERED;
type_conversion,fsck.c,610,-,+,,11,	o_mode = 0;
type_conversion,fsck.c,626,-,+,,19,		has_zero_pad |= *(char *)desc.buffer == '0';
type_conversion,fsck.c,627,-,+,,21,		has_large_name |= tree_entry_len(&desc.entry) > max_tree_entry_len;
type_conversion,fsck.c,637,-,+,,6,	if (type != OBJ_NONE && type < 0)
type_conversion,fsck.c,647,-,+,,19,	if (!contents && type != OBJ_BLOB)
type_conversion,fsck.c,684,-,+,,34,"	display_progress(progress, nr + 1);"
type_conversion,fsck.c,689,-,+,,11,		switch (mode) {
type_conversion,fsck.c,700,-,+,,63,"		progress = start_progress(_(""Checking object directories""), 256);"
type_conversion,fsck.c,704,-,+,,29,"	display_progress(progress, 256);"
type_conversion,fsck.c,713,-,+,,43,"			switch (verify_ordered(o_mode, o_name, mode, name,"
type_conversion,fsck.c,726,-,+,,12,		o_mode = mode;
type_conversion,fsck.c,765,-,+,,7,		if (obj->type != OBJ_TREE)
type_conversion,fsck.c,803,-,+,,11,	for (i = 0; i < size; i++) {
type_conversion,fsck.c,804,-,+,,11,		switch (buffer[i]) {
type_conversion,fsck.c,810,-,+,,12,			if (i + 1 < size && buffer[i + 1] == '\n')
type_conversion,fsck.c,819,-,+,,11,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,fsck.c,821,-,+,,28,	if (size && buffer[size - 1] == '\n')
type_conversion,fsck.c,836,-,+,,6,	if (**ident == '\n')
type_conversion,fsck.c,839,-,+,,6,	if (*p == '<')
type_conversion,fsck.c,842,-,+,,6,	if (*p == '>')
type_conversion,fsck.c,844,-,+,,6,	if (*p != '<')
type_conversion,fsck.c,846,-,+,,6,	if (p[-1] != ' ')
type_conversion,fsck.c,850,-,+,,6,	if (*p != '>')
type_conversion,fsck.c,853,-,+,,6,	if (*p != ' ')
type_conversion,fsck.c,865,-,+,,9,	while (*p == ' ' || *p == '\t')
type_conversion,fsck.c,870,-,+,,24,	uint32_t pack_count = 0;
type_conversion,fsck.c,874,-,+,,19,	if ((end == p || *end != ' '))
type_conversion,fsck.c,876,-,+,,71,"		progress = start_delayed_progress(""Verifying reverse pack-indexes"", pack_count);"
type_conversion,fsck.c,877,-,+,,16,		pack_count = 0;
type_conversion,fsck.c,882,-,+,,7,	    (p[5] != '\n'))
type_conversion,fsck.c,892,-,+,,30,"		display_progress(progress, ++pack_count);"
type_conversion,fsck.c,909,-,+,,46,"	if (parse_oid_hex(buffer, &tree_oid, &p) || *p != '\n') {"
type_conversion,fsck.c,916,-,+,,49,"		if (parse_oid_hex(buffer, &parent_oid, &p) || *p != '\n') {"
type_conversion,fsck.c,923,-,+,,17,	author_count = 0;
type_conversion,fsck.c,930,-,+,,21,	if (author_count < 1)
type_conversion,fsck.c,932,-,+,,26,	else if (author_count > 1)
type_conversion,fsck.c,943,-,+,,29,		fsck_obj_options.strict = 1;
type_conversion,fsck.c,971,-,+,,21,"			uint32_t total = 0, count = 0;"
type_conversion,fsck.c,982,-,+,,54,"				progress = start_progress(_(""Checking objects""), total);"
type_conversion,fsck.c,983,-,+,,47,"	if (parse_oid_hex(buffer, tagged_oid, &p) || *p != '\n') {"
type_conversion,fsck.c,994,-,+,,29,"	eol = memchr(buffer, '\n', buffer_end - buffer);"
type_conversion,fsck.c,1007,-,+,,18,			if (!obj || !(obj->flags & HAS_OBJ)) {
type_conversion,fsck.c,1010,-,+,,29,"	eol = memchr(buffer, '\n', buffer_end - buffer);"
type_conversion,fsck.c,1074,-,+,,34,			commit_graph_verify.git_cmd = 1;
type_conversion,fsck.c,1092,-,+,,26,			midx_verify.git_cmd = 1;
type_conversion,fsck.c,1094,-,+,,6,	    parse_submodule_update_type(value) == SM_UPDATE_COMMAND)
type_conversion,fsck.c,1113,-,+,,41,		struct config_options config_opts = { 0 };
type_conversion,fsck.c,1191,-,+,,40,"			char *backslash = memchr(ptr, '\\', slash - ptr);"
type_conversion,fsck.c,1194,-,+,,13,			*slash = '\0';
type_conversion,fsck.c,1197,-,+,,18,				*backslash = '\0';
type_conversion,fsck.c,1202,-,+,,18,				*backslash = '\\';
type_conversion,fsck.c,1204,-,+,,33,"				backslash = memchr(p, '\\', slash - p);"
type_conversion,fsck.c,1237,-,+,,6,	if (type == OBJ_BLOB)
type_conversion,fsck.c,1239,-,+,,6,	if (type == OBJ_TREE)
type_conversion,fsck.c,1241,-,+,,6,	if (type == OBJ_COMMIT)
type_conversion,fsck.c,1243,-,+,,6,	if (type == OBJ_TAG)
type_conversion,fsck.c,1259,-,+,,6,	if (msg_type == FSCK_WARN) {
type_conversion,fsck.c,1294,-,+,,7,		if (type == OBJ_BLOB)
type_conversion,fsck.c,1366,-,+,,6,	if (msg_id == FSCK_MSG_GITMODULES_MISSING) {
type_conversion,fsmonitor-settings.c,166,-,+,,6,	if (reason != FSMONITOR_REASON_OK) {
type_conversion,fsmonitor-settings.c,187,-,+,,6,	if (reason != FSMONITOR_REASON_OK) {
type_conversion,fsmonitor.c,22,-,+,,12,	if (pos > istate->cache_nr)
type_conversion,fsmonitor.c,32,-,+,,37,"	assert_index_minimum(istate, pos + 1);"
type_conversion,fsmonitor.c,65,-,+,,30,	if (sz < sizeof(uint32_t) + 1 + sizeof(uint32_t))
type_conversion,fsmonitor.c,76,-,+,,30,		index += last_update.len + 1;
type_conversion,fsmonitor.c,87,-,+,,47,"	ret = ewah_read_mmap(fsmonitor_dirty, index, ewah_size);"
type_conversion,fsmonitor.c,88,-,+,,6,	if (ret != ewah_size) {
type_conversion,fsmonitor.c,107,-,+,,28,"	unsigned int i, skipped = 0;"
type_conversion,fsmonitor.c,109,-,+,,11,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,fsmonitor.c,113,-,+,,38,"			ewah_set(istate->fsmonitor_dirty, i - skipped);"
type_conversion,fsmonitor.c,121,-,+,,23,	uint32_t ewah_size = 0;
type_conversion,fsmonitor.c,133,-,+,,10,	fixup = sb->len;
type_conversion,fsmonitor.c,136,-,+,,15,	ewah_start = sb->len;
type_conversion,fsmonitor.c,142,-,+,,33,"	put_be32(&ewah_size, sb->len - ewah_start);"
type_conversion,fsmonitor.c,163,-,+,,6,	if (fsm_settings__get_mode(r) != FSMONITOR_MODE_HOOK)
type_conversion,fsmonitor.c,169,-,+,,17,	cp.use_shell = 1;
type_conversion,fsmonitor.c,174,-,+,,46,"	result = capture_command(&cp, query_result, 1024);"
type_conversion,fsmonitor.c,217,-,+,,39,"	ce = index_file_exists(istate, name, strlen(name), 1);"
type_conversion,fsmonitor.c,219,-,+,,10,		return 0;
type_conversion,fsmonitor.c,254,-,+,,9,	return 1;
type_conversion,fsmonitor.c,272,-,+,,17,	if (name[len - 1] == '/')
type_conversion,fsmonitor.c,275,-,+,,36,"	if (!index_dir_find(istate, name, len, &canonical_path))"
type_conversion,fsmonitor.c,276,-,+,,10,		return 0; /* name is untracked */
type_conversion,fsmonitor.c,306,-,+,,9,			     canonical_path.len);
type_conversion,fsmonitor.c,347,-,+,,10,		return 1;
type_conversion,fsmonitor.c,362,-,+,,47,"		pos = index_name_pos(istate, work_path.buf, work_path.len);"
type_conversion,fsmonitor.c,406,-,+,,22,	size_t nr_in_cone = 0;
type_conversion,fsmonitor.c,421,-,+,,16,	for (i = pos; i < istate->cache_nr; i++) {
type_conversion,fsmonitor.c,433,-,+,,12,	int len = strlen(name);
type_conversion,fsmonitor.c,441,-,+,,6,	if (name[len - 1] == '/')
type_conversion,fsmonitor.c,507,-,+,,15,	size_t bol = 0; /* beginning of line */
type_conversion,fsmonitor.c,517,-,+,,20,	if (!warn_once && reason > FSMONITOR_REASON_OK) {
type_conversion,fsmonitor.c,524,-,+,,6,	if (fsm_mode <= FSMONITOR_MODE_DISABLED ||
type_conversion,fsmonitor.c,528,-,+,,35,	istate->fsmonitor_has_run_once = 1;
type_conversion,fsmonitor.c,532,-,+,,6,	if (fsm_mode == FSMONITOR_MODE_IPC) {
type_conversion,fsmonitor.c,549,-,+,,34,			bol = last_update_token.len + 1;
type_conversion,fsmonitor.c,550,-,+,,17,			is_trivial = query_result.buf[bol] == '/';
type_conversion,fsmonitor.c,610,-,+,,36,					bol = last_update_token.len + 1;
type_conversion,fsmonitor.c,611,-,+,,19,					is_trivial = query_result.buf[bol] == '/';
type_conversion,fsmonitor.c,625,-,+,,18,				is_trivial = query_result.buf[0] == '/';
type_conversion,fsmonitor.c,665,-,+,,17,		for (i = bol; i < query_result.len; i++) {
type_conversion,fsmonitor.c,666,-,+,,8,			if (buf[i] != '\0')
type_conversion,fsmonitor.c,669,-,+,,14,			bol = i + 1;
type_conversion,fsmonitor.c,679,-,+,,39,			istate->untracked->use_fsmonitor = 1;
type_conversion,fsmonitor.c,698,-,+,,12,		for (i = 0; i < istate->cache_nr; i++) {
type_conversion,fsmonitor.c,713,-,+,,39,			istate->untracked->use_fsmonitor = 0;
type_conversion,fsmonitor.c,765,-,+,,12,		for (i = 0; i < istate->cache_nr; i++)
type_conversion,fsmonitor.c,771,-,+,,39,			istate->untracked->use_fsmonitor = 1;
type_conversion,fsmonitor.c,791,-,+,,27,	int fsmonitor_enabled = (fsm_settings__get_mode(istate->repo)
type_conversion,fsmonitor.c,792,-,+,,8,				 > FSMONITOR_MODE_DISABLED);
type_conversion,fsmonitor.c,797,-,+,,13,			for (i = 0; i < istate->cache_nr; i++) {
type_conversion,fsmonitor.h,21,-,+,,9,	return fsm_mode <= FSMONITOR_MODE_DISABLED ||
type_conversion,fsmonitor.h,43,-,+,,6,	if (fsm_mode > FSMONITOR_MODE_DISABLED &&
type_conversion,fsmonitor.h,64,-,+,,6,	if (fsm_mode > FSMONITOR_MODE_DISABLED) {
type_conversion,fuzz-config.c,26,-,+,,40,	struct config_options config_opts = { 0 };
type_conversion,fuzz-date.c,16,-,+,,14,	if (size <= 4)
type_conversion,fuzz-date.c,26,-,+,,13,	local = !!(*data++ & 0x10);
type_conversion,fuzz-date.c,27,-,+,,8,	num = *data++ % DATE_UNIX;
type_conversion,fuzz-date.c,28,-,+,,13,	if (num >= DATE_STRFTIME)
type_conversion,fuzz-date.c,31,-,+,,10,	size -= 2;
type_conversion,fuzz-date.c,33,-,+,,7,	tz = *data++;
type_conversion,fuzz-date.c,34,-,+,,8,	tz = (tz << 8) | *data++;
type_conversion,fuzz-date.c,35,-,+,,10,	size -= 2;
type_conversion,gc.c,84,-,+,,14,	for (i = 0; i < pack_garbage.nr; i++)
type_conversion,gc.c,143,-,+,,20,		return expire == 0;
type_conversion,gc.c,223,-,+,,16,	cmd.git_cmd = 1;
type_conversion,gc.c,244,-,+,,54,	const unsigned hexsz_loose = the_hash_algo->hexsz - 2;
type_conversion,gc.c,252,-,+,,50,"		if (strspn(ent->d_name, ""0123456789abcdef"") != hexsz_loose ||"
type_conversion,gc.c,253,-,+,,7,		    ent->d_name[hexsz_loose] != '\0')
type_conversion,gc.c,273,-,+,,8,			if (p->pack_size >= limit)
type_conversion,gc.c,336,-,+,,9,	return 0;
type_conversion,gc.c,345,-,+,,10,		return 0;
type_conversion,gc.c,353,-,+,,13,	os_cache = pack->pack_size + pack->index_size;
type_conversion,gc.c,360,-,+,,45,	heap += sizeof(struct blob) * nr_objects / 2;
type_conversion,gc.c,365,-,+,,45,	heap += sizeof(struct tree) * nr_objects / 2;
type_conversion,gc.c,438,-,+,,24,			if (keep_pack.nr >= gc_auto_pack_limit) {
type_conversion,gc.c,439,-,+,,26,				big_pack_threshold = 0;
type_conversion,gc.c,441,-,+,,33,"				find_base_packs(&keep_pack, 0);"
type_conversion,gc.c,444,-,+,,55,"			struct packed_git *p = find_base_packs(&keep_pack, 0);"
type_conversion,gc.c,455,-,+,,43,			if (!mem_have || mem_want < mem_have / 2)
type_conversion,gc.c,514,-,+,,32,			time(NULL) - st.st_mtime <= 12 * 3600 &&
type_conversion,gc.c,517,-,+,,44,"			(strcmp(locking_host, my_host) || !kill(pid, 0) || errno == EPERM);"
type_conversion,gc.c,523,-,+,,15,			*ret_pid = pid;
type_conversion,gc.c,564,-,+,,43,"	len = strbuf_read_file(&sb, gc_log_path, 0);"
type_conversion,gc.c,565,-,+,,12,	if (len < 0)
type_conversion,gc.c,567,-,+,,17,	else if (len > 0) {
type_conversion,gc.c,605,-,+,,17,		cmd.git_cmd = 1;
type_conversion,gc.c,718,-,+,,33,"				find_base_packs(&keep_pack, 0);"
type_conversion,gc.c,749,-,+,,24,		repack_cmd.git_cmd = 1;
type_conversion,gc.c,750,-,+,,35,		repack_cmd.close_object_store = 1;
type_conversion,gc.c,765,-,+,,24,			prune_cmd.git_cmd = 1;
type_conversion,gc.c,776,-,+,,33,		prune_worktrees_cmd.git_cmd = 1;
type_conversion,gc.c,782,-,+,,23,	rerere_cmd.git_cmd = 1;
type_conversion,gc.c,789,-,+,,24,	if (pack_garbage.nr > 0) {
type_conversion,gc.c,796,-,+,,35,"					     !quiet && !daemonized ? COMMIT_GRAPH_WRITE_PROGRESS : 0,"
type_conversion,gc.c,851,-,+,,52,"	if (oid_object_info(the_repository, oid, NULL) != OBJ_COMMIT)"
type_conversion,gc.c,922,-,+,,45,	child.git_cmd = child.close_object_store = 1;
type_conversion,gc.c,954,-,+,,18,	child.git_cmd = 1;
type_conversion,gc.c,980,-,+,,45,	child.git_cmd = child.close_object_store = 1;
type_conversion,gc.c,997,-,+,,18,	child.git_cmd = 1;
type_conversion,gc.c,1075,-,+,,22,	pack_proc.git_cmd = 1;
type_conversion,gc.c,1146,-,+,,18,	child.git_cmd = 1;
type_conversion,gc.c,1162,-,+,,45,	child.git_cmd = child.close_object_store = 1;
type_conversion,gc.c,1190,-,+,,19,	off_t max_size = 0;
type_conversion,gc.c,1191,-,+,,30,	off_t second_largest_size = 0;
type_conversion,gc.c,1205,-,+,,38,	result_size = second_largest_size + 1;
type_conversion,gc.c,1218,-,+,,45,	child.git_cmd = child.close_object_store = 1;
type_conversion,gc.c,1302,-,+,,3,"		1,"
type_conversion,gc.c,1348,-,+,,37,	for (i = 0; !found_selected && i < TASK__COUNT; i++)
type_conversion,gc.c,1354,-,+,,18,	for (i = 0; i < TASK__COUNT; i++) {
type_conversion,gc.c,1366,-,+,,25,		if (opts->schedule && tasks[i].schedule < opts->schedule)
type_conversion,gc.c,1390,-,+,,38,		tasks[TASK_COMMIT_GRAPH].enabled = 1;
type_conversion,gc.c,1392,-,+,,34,		tasks[TASK_PREFETCH].enabled = 1;
type_conversion,gc.c,1394,-,+,,44,		tasks[TASK_INCREMENTAL_REPACK].enabled = 1;
type_conversion,gc.c,1396,-,+,,39,		tasks[TASK_LOOSE_OBJECTS].enabled = 1;
type_conversion,gc.c,1398,-,+,,35,		tasks[TASK_PACK_REFS].enabled = 1;
type_conversion,gc.c,1412,-,+,,18,	for (i = 0; i < TASK__COUNT; i++) {
type_conversion,gc.c,1421,-,+,,23,			tasks[i].enabled = config_value;
type_conversion,gc.c,1444,-,+,,18,	for (i = 0; i < TASK__COUNT; i++) {
type_conversion,gc.c,1488,-,+,,18,	for (i = 0; i < TASK__COUNT; i++)
type_conversion,gc.c,1499,-,+,,25,	initialize_task_config(opts.schedule);
type_conversion,gc.c,1569,-,+,,29,"			CONFIG_REGEX_NONE, NULL, 0);"
type_conversion,gc.c,1746,-,+,,22,	return git_rand() % 60;
type_conversion,gc.c,1801,-,+,,20,	child.no_stderr = 1;
type_conversion,gc.c,1802,-,+,,20,	child.no_stdout = 1;
type_conversion,gc.c,1839,-,+,,20,	child.no_stderr = 1;
type_conversion,gc.c,1840,-,+,,20,	child.no_stdout = 1;
type_conversion,gc.c,1923,-,+,,35,	if ((long)lock_file_timeout_ms < 0 &&
type_conversion,gc.c,1926,-,+,,26,		lock_file_timeout_ms = 150;
type_conversion,gc.c,1929,-,+,,13,					       lock_file_timeout_ms);
type_conversion,gc.c,1935,-,+,,30,"	if (!stat(filename, &st) && st.st_size == plist.len &&"
type_conversion,gc.c,1936,-,+,,6,"	    strbuf_read_file(&plist2, filename, plist.len) == plist.len &&"
type_conversion,gc.c,1941,-,+,,49,"		if (write_in_full(fd, plist.buf, plist.len) < 0 ||"
type_conversion,gc.c,2127,-,+,,20,	child.no_stdout = 1;
type_conversion,gc.c,2128,-,+,,20,	child.no_stderr = 1;
type_conversion,gc.c,2163,-,+,,19,	child.no_stdin = 1;
type_conversion,gc.c,2164,-,+,,20,	child.no_stdout = 1;
type_conversion,gc.c,2165,-,+,,20,	child.no_stderr = 1;
type_conversion,gc.c,2166,-,+,,30,	child.silent_exec_failure = 1;
type_conversion,gc.c,2214,-,+,,25,	crontab_list.git_cmd = 0;
type_conversion,gc.c,2276,-,+,,25,	crontab_edit.git_cmd = 0;
type_conversion,gc.c,2297,-,+,,19,	child.no_stdin = 1;
type_conversion,gc.c,2298,-,+,,20,	child.no_stdout = 1;
type_conversion,gc.c,2299,-,+,,20,	child.no_stderr = 1;
type_conversion,gc.c,2300,-,+,,30,	child.silent_exec_failure = 1;
type_conversion,gc.c,2509,-,+,,21,		child.no_stderr = 1;
type_conversion,gc.c,2660,-,+,,6,	if (*scheduler == SCHEDULER_INVALID)
type_conversion,gc.c,2671,-,+,,6,	if (scheduler != SCHEDULER_AUTO)
type_conversion,gc.c,2695,-,+,,6,	if (scheduler == SCHEDULER_INVALID)
type_conversion,gc.c,2697,-,+,,6,	if (scheduler == SCHEDULER_AUTO)
type_conversion,gc.c,2718,-,+,,14,	for (i = 1; i < ARRAY_SIZE(scheduler_fn); i++) {
type_conversion,gc.c,2719,-,+,,17,		if (enable && opts->scheduler == i)
type_conversion,gc.c,2764,-,+,,53,"	if (maintenance_register(ARRAY_SIZE(register_args)-1, register_args, NULL))"
type_conversion,get-tar-commit-id.c,31,-,+,,10,	if (n < 0)
type_conversion,get-tar-commit-id.c,35,-,+,,6,	if (header->typeflag[0] != TYPEFLAG_GLOBAL_HEADER)
type_conversion,get-tar-commit-id.c,39,-,+,,49,	if (errno == ERANGE || end == content || len < 0)
type_conversion,get-tar-commit-id.c,44,-,+,,12,	if (len < 1 || !(len % 2) ||
type_conversion,get-tar-commit-id.c,45,-,+,,33,	    hash_algo_by_length((len - 1) / 2) == GIT_HASH_UNKNOWN)
type_conversion,get-tar-commit-id.c,48,-,+,,32,"	if (write_in_full(1, comment, len) < 0)"
type_conversion,gettext.c,136,-,+,,19,	return is_utf8 ? utf8_strwidth(s) : strlen(s);
type_conversion,gettext.h,59,-,+,,15,		return n == 1 ? msgid : plu;
type_conversion,git-compat-util.h,504,-,+,,20,	return is_dir_sep(path[0]);
type_conversion,git-compat-util.h,554,-,+,,10,			*id = env_id;
type_conversion,git-compat-util.h,724,-,+,,11,	} while (*str++ == *prefix++);
type_conversion,git-compat-util.h,1033,-,+,,11,	if (a != (uint32_t)a)
type_conversion,git-compat-util.h,1249,-,+,,12,	if (len < 0 || (uintmax_t) len > SIZE_MAX)
type_conversion,git-compat-util.h,1292,-,+,,19,	} while (len-- > 0 && tolower(*buf++) == tolower(*prefix++));
type_conversion,git-compat-util.h,1306,-,+,,31,	if (errno || *p || p == s || (unsigned int) ul != ul)
type_conversion,git-compat-util.h,1308,-,+,,12,	*result = ul;
type_conversion,git-compat-util.h,1319,-,+,,31,	if (errno || *p || p == s || (int) ul != ul)
type_conversion,git-compat-util.h,1321,-,+,,12,	*result = ul;
type_conversion,git-compat-util.h,1335,-,+,,14,	if (nmemb > 1)
type_conversion,git-compat-util.h,1362,-,+,,20,	pmatch[0].rm_eo = size;
type_conversion,git-zlib.c,53,-,+,,19,	bytes_consumed = s->z.next_in - s->next_in;
type_conversion,git-zlib.c,54,-,+,,19,	bytes_produced = s->z.next_out - s->next_out;
type_conversion,git-zlib.c,120,-,+,,7,				 (strm->z.avail_in != strm->avail_in)
type_conversion,git-zlib.c,246,-,+,,7,				 (strm->z.avail_in != strm->avail_in)
type_conversion,git.c,58,-,+,,9,	while (i < list->nr) {
type_conversion,git.c,68,-,+,,18,	int token_len = strlen(token);
type_conversion,git.c,70,-,+,,51,"	return len == token_len && !strncmp(spec, token, token_len);"
type_conversion,git.c,87,-,+,,13,		int len = sep - spec;
type_conversion,git.c,90,-,+,,25,"			list_builtins(&list, 0);"
type_conversion,git.c,101,-,+,,47,"		else if (len > 5 && !strncmp(spec, ""list-"", 5)) {"
type_conversion,git.c,104,-,+,,30,"			strbuf_add(&sb, spec + 5, len - 5);"
type_conversion,git.c,111,-,+,,7,"		if (*spec == ',')"
type_conversion,git.c,114,-,+,,14,	for (i = 0; i < list.nr; i++)
type_conversion,git.c,150,-,+,,7,		if (cmd[0] != '-')
type_conversion,git.c,166,-,+,,8,			if (*cmd == '=')
type_conversion,git.c,319,-,+,,17,				for (i = 0; i < list.nr; i++)
type_conversion,git.c,353,-,+,,9,	return (*argv) - orig_argv;
type_conversion,git.c,370,-,+,,7,		if (alias_string[0] == '!') {
type_conversion,git.c,379,-,+,,22,			child.use_shell = 1;
type_conversion,git.c,380,-,+,,26,			child.clean_on_exit = 1;
type_conversion,git.c,381,-,+,,29,			child.wait_after_clean = 1;
type_conversion,git.c,646,-,+,,14,	for (i = 0; i < ARRAY_SIZE(commands); i++) {
type_conversion,git.c,662,-,+,,14,	for (i = 0; i < ARRAY_SIZE(commands); i++) {
type_conversion,git.c,684,-,+,,14,	for (i = 0; i < ARRAY_SIZE(commands); i++)
type_conversion,git.c,686,-,+,,28,"			add_cmdname(cmds, name, strlen(name));"
type_conversion,git.c,744,-,+,,22,	cmd.clean_on_exit = 1;
type_conversion,git.c,745,-,+,,25,	cmd.wait_after_clean = 1;
type_conversion,git.c,746,-,+,,28,	cmd.silent_exec_failure = 1;
type_conversion,git.c,819,-,+,,30,			cmd.silent_exec_failure = 1;
type_conversion,git.c,820,-,+,,24,			cmd.clean_on_exit = 1;
type_conversion,git.c,821,-,+,,27,			cmd.wait_after_clean = 1;
type_conversion,git.c,836,-,+,,16,			for (i = 0; i < cmd_list.nr; i++) {
type_conversion,git.c,842,-,+,,14,				else if (i == cmd_list.nr - 1)
type_conversion,gpg-interface.c,128,-,+,,14,	for (i = 0; i < ARRAY_SIZE(gpg_format); i++)
type_conversion,gpg-interface.c,138,-,+,,14,	for (i = 0; i < ARRAY_SIZE(gpg_format); i++)
type_conversion,gpg-interface.c,175,-,+,,4,"	{ 'G', ""GOODSIG "", GPG_STATUS_STDSIG },"
type_conversion,gpg-interface.c,176,-,+,,4,"	{ 'B', ""BADSIG "", GPG_STATUS_STDSIG },"
type_conversion,gpg-interface.c,177,-,+,,4,"	{ 'E', ""ERRSIG "", GPG_STATUS_EXCLUSIVE|GPG_STATUS_KEYID },"
type_conversion,gpg-interface.c,178,-,+,,4,"	{ 'X', ""EXPSIG "", GPG_STATUS_STDSIG },"
type_conversion,gpg-interface.c,179,-,+,,4,"	{ 'Y', ""EXPKEYSIG "", GPG_STATUS_STDSIG },"
type_conversion,gpg-interface.c,180,-,+,,4,"	{ 'R', ""REVKEYSIG "", GPG_STATUS_STDSIG },"
type_conversion,gpg-interface.c,181,-,+,,4,"	{ 0, ""VALIDSIG "", GPG_STATUS_FINGERPRINT },"
type_conversion,gpg-interface.c,182,-,+,,4,"	{ 0, ""TRUST_"", GPG_STATUS_TRUST_LEVEL },"
type_conversion,gpg-interface.c,203,-,+,,27,"		*field = xmemdupz(line, next - line);"
type_conversion,gpg-interface.c,213,-,+,,11,	for (i = 0; i < ARRAY_SIZE(sigcheck_gpg_trust_level); i++) {
type_conversion,gpg-interface.c,231,-,+,,10,		while (*line == '\n')
type_conversion,gpg-interface.c,241,-,+,,15,		for (i = 0; i < ARRAY_SIZE(sigcheck_gpg_status); i++) {
type_conversion,gpg-interface.c,327,-,+,,17,	sigc->result = 'E';
type_conversion,gpg-interface.c,349,-,+,,59,"	if (write_in_full(temp->fd, signature, signature_size) < 0 ||"
type_conversion,gpg-interface.c,365,-,+,,74,"	ret = pipe_command(&gpg, sigc->payload, sigc->payload_len, &gpg_stdout, 0,"
type_conversion,gpg-interface.c,366,-,+,,20,"			   &gpg_stderr, 0);"
type_conversion,gpg-interface.c,402,-,+,,17,	sigc->result = 'B';
type_conversion,gpg-interface.c,419,-,+,,18,		sigc->result = 'G';
type_conversion,gpg-interface.c,421,-,+,,57,"		sigc->signer = xmemdupz(principal, line - principal - 1);"
type_conversion,gpg-interface.c,424,-,+,,18,		sigc->result = 'G';
type_conversion,gpg-interface.c,439,-,+,,18,		sigc->result = 'B';
type_conversion,gpg-interface.c,476,-,+,,66,"	if (write_in_full(buffer_file->fd, signature, signature_size) < 0 ||"
type_conversion,gpg-interface.c,495,-,+,,40,"	ret = pipe_command(&ssh_keygen, NULL, 0, &ssh_principals_out, 0,"
type_conversion,gpg-interface.c,496,-,+,,28,"			   &ssh_principals_err, 0);"
type_conversion,gpg-interface.c,514,-,+,,25,"				   &ssh_keygen_out, 0, &ssh_keygen_err, 0);"
type_conversion,gpg-interface.c,534,-,+,,8,			    end_of_text[-1] == '\r')
type_conversion,gpg-interface.c,546,-,+,,31,"			principal = xmemdupz(line, end_of_text - line);"
type_conversion,gpg-interface.c,576,-,+,,26,"					   &ssh_keygen_out, 0, &ssh_keygen_err, 0);"
type_conversion,gpg-interface.c,637,-,+,,43,"	if (split_ident_line(&ident, ident_line, ident_len))"
type_conversion,gpg-interface.c,654,-,+,,17,	sigc->result = 'N';
type_conversion,gpg-interface.c,669,-,+,,12,	status |= sigc->result != 'G';
type_conversion,gpg-interface.c,670,-,+,,12,	status |= sigc->trust_level < configured_min_trust_level;
type_conversion,gpg-interface.c,681,-,+,,25,"		fwrite(sigc->payload, 1, sigc->payload_len, stdout);"
type_conversion,gpg-interface.c,689,-,+,,15,	size_t len = 0;
type_conversion,gpg-interface.c,698,-,+,,36,		len += eol ? eol - (buf + len) + 1 : size - len;
type_conversion,gpg-interface.c,821,-,+,,50,"				   strlen(literal_key), &fingerprint_stdout, 0,"
type_conversion,gpg-interface.c,822,-,+,,14,"				   NULL, 0);"
type_conversion,gpg-interface.c,826,-,+,,41,"		ret = pipe_command(&ssh_keygen, NULL, 0, &fingerprint_stdout, 0,"
type_conversion,gpg-interface.c,827,-,+,,14,"				   NULL, 0);"
type_conversion,gpg-interface.c,869,-,+,,45,"	ret = pipe_command(&ssh_default_key, NULL, 0, &key_stdout, 0,"
type_conversion,gpg-interface.c,870,-,+,,20,"			   &key_stderr, 0);"
type_conversion,gpg-interface.c,932,-,+,,6,	if (level < 0 || level >= ARRAY_SIZE(sigcheck_gpg_trust_level))
type_conversion,gpg-interface.c,936,-,+,,6,	if (trust->value != level)
type_conversion,gpg-interface.c,958,-,+,,7,		if (buffer->buf[i] != '\r') {
type_conversion,gpg-interface.c,990,-,+,,18,"			   signature, 1024, &gpg_status, 0);"
type_conversion,gpg-interface.c,996,-,+,,31,		if (cp == gpg_status.buf || cp[-1] == '\n')
type_conversion,gpg-interface.c,1027,-,+,,22,	if (!signing_key || signing_key[0] == '\0')
type_conversion,gpg-interface.c,1039,-,+,,58,"		if (write_in_full(key_file->fd, literal_key, keylen) < 0 ||"
type_conversion,gpg-interface.c,1057,-,+,,65,"	if (write_in_full(buffer_file->fd, buffer->buf, buffer->len) < 0 ||"
type_conversion,gpg-interface.c,1074,-,+,,36,"	ret = pipe_command(&signer, NULL, 0, NULL, 0, &signer_stderr, 0);"
type_conversion,gpg-interface.c,1089,-,+,,62,"	if (strbuf_read_file(signature, ssh_signature_filename.buf, 0) < 0) {"
type_conversion,graph.c,96,-,+,,31,"		if (!color_parse_mem(start, comma - start, color))"
type_conversion,graph.c,148,-,+,,6,	if (c->color < column_colors_max)
type_conversion,graph.c,150,-,+,,25,"	graph_line_addch(line, col_char);"
type_conversion,graph.c,151,-,+,,6,	if (c->color < column_colors_max)
type_conversion,graph.c,351,-,+,,7,						column_colors_ansi_max);
type_conversion,graph.c,359,-,+,,26,						custom_colors.nr - 1);
type_conversion,graph.c,382,-,+,,32,	graph->default_column_color = column_colors_max - 1;
type_conversion,graph.c,457,-,+,,9,"	return get_commit_action(graph->revs, commit) == commit_show;"
type_conversion,graph.c,518,-,+,,33,	graph->default_column_color = (graph->default_column_color + 1) %
type_conversion,graph.c,519,-,+,,3,		column_colors_max;
type_conversion,graph.c,790,-,+,,6,	if (graph->state != GRAPH_PADDING)
type_conversion,graph.c,829,-,+,,20,	if (line->width < graph->width)
type_conversion,graph.c,830,-,+,,34,"		graph_line_addchars(line, ' ', graph->width - line->width);"
type_conversion,graph.c,842,-,+,,57,"		graph_line_write_column(line, &graph->new_columns[i], '|');"
type_conversion,graph.c,897,-,+,,39,"			graph_line_write_column(line, col, '|');"
type_conversion,graph.c,898,-,+,,35,"			graph_line_addchars(line, ' ', graph->expansion_row);"
type_conversion,graph.c,909,-,+,,8,			if (graph->prev_state == GRAPH_POST_MERGE &&
type_conversion,graph.c,911,-,+,,40,"				graph_line_write_column(line, col, '\\');"
type_conversion,graph.c,913,-,+,,40,"				graph_line_write_column(line, col, '|');"
type_conversion,graph.c,915,-,+,,39,"			graph_line_write_column(line, col, '\\');"
type_conversion,graph.c,917,-,+,,39,"			graph_line_write_column(line, col, '|');"
type_conversion,graph.c,989,-,+,,38,"		graph_line_write_column(line, col, '-');"
type_conversion,graph.c,990,-,+,,38,"		graph_line_write_column(line, col, (i == dashed_parents - 1) ? '.' : '-');"
type_conversion,graph.c,1027,-,+,,39,"			graph_line_write_column(line, col, '\\');"
type_conversion,graph.c,1043,-,+,,8,			if (graph->prev_state == GRAPH_POST_MERGE &&
type_conversion,graph.c,1046,-,+,,40,"				graph_line_write_column(line, col, '\\');"
type_conversion,graph.c,1048,-,+,,40,"				graph_line_write_column(line, col, '|');"
type_conversion,graph.c,1049,-,+,,14,		} else if (graph->prev_state == GRAPH_COLLAPSING &&
type_conversion,graph.c,1052,-,+,,39,"			graph_line_write_column(line, col, '/');"
type_conversion,graph.c,1054,-,+,,39,"			graph_line_write_column(line, col, '|');"
type_conversion,graph.c,1070,-,+,,36,"static const char merge_chars[] = {'/', '|', '\\'};"
type_conversion,graph.c,1126,-,+,,40,"				graph_line_write_column(line, col, '\\');"
type_conversion,graph.c,1128,-,+,,40,"				graph_line_write_column(line, col, '|');"
type_conversion,graph.c,1131,-,+,,39,"			graph_line_write_column(line, col, '|');"
type_conversion,graph.c,1135,-,+,,25,"						line, parent_col, '_');"
type_conversion,graph.c,1157,-,+,,26,	short used_horizontal = 0;
type_conversion,graph.c,1278,-,+,,63,"			graph_line_write_column(line, &graph->new_columns[target], '|');"
type_conversion,graph.c,1288,-,+,,23,				used_horizontal = 1;
type_conversion,graph.c,1289,-,+,,63,"			graph_line_write_column(line, &graph->new_columns[target], '_');"
type_conversion,graph.c,1293,-,+,,63,"			graph_line_write_column(line, &graph->new_columns[target], '/');"
type_conversion,graph.c,1310,-,+,,49,"	struct graph_line line = { .buf = sb, .width = 0 };"
type_conversion,graph.c,1351,-,+,,49,"	struct graph_line line = { .buf = sb, .width = 0 };"
type_conversion,graph.c,1353,-,+,,6,	if (graph->state != GRAPH_COMMIT) {
type_conversion,graph.c,1368,-,+,,39,"		graph_line_write_column(&line, col, '|');"
type_conversion,graph.c,1372,-,+,,36,"			graph_line_addchars(&line, ' ', len);"
type_conversion,graph.c,1388,-,+,,10,	return (graph->state == GRAPH_PADDING);
type_conversion,graph.c,1419,-,+,,26,"		strbuf_setlen(&msgbuf, 0);"
type_conversion,graph.c,1470,-,+,,26,"		strbuf_setlen(&msgbuf, 0);"
type_conversion,graph.c,1501,-,+,,10,			len = next_p - p;
type_conversion,graph.c,1503,-,+,,10,			len = (sb->buf + sb->len) - p;
type_conversion,graph.c,1506,-,+,,17,		if (next_p && *next_p != '\0')
type_conversion,graph.c,1526,-,+,,53,	newline_terminated = (sb->len && sb->buf[sb->len - 1] == '\n');
type_conversion,grep.c,21,-,+,,20,"	fwrite(buf, size, 1, stdout);"
type_conversion,grep.c,39,-,+,,10,		return GREP_PATTERN_TYPE_UNSPECIFIED;
type_conversion,grep.c,41,-,+,,10,		return GREP_PATTERN_TYPE_BRE;
type_conversion,grep.c,43,-,+,,10,		return GREP_PATTERN_TYPE_ERE;
type_conversion,grep.c,45,-,+,,10,		return GREP_PATTERN_TYPE_FIXED;
type_conversion,grep.c,47,-,+,,10,		return GREP_PATTERN_TYPE_PCRE;
type_conversion,grep.c,110,-,+,,9,	while ((todo_end+1) % ARRAY_SIZE(todo) == todo_done) {
type_conversion,grep.c,115,-,+,,24,	todo[todo_end].done = 0;
type_conversion,grep.c,117,-,+,,13,	todo_end = (todo_end + 1) % ARRAY_SIZE(todo);
type_conversion,grep.c,126,-,+,,31,"	struct grep_pat *p = xcalloc(1, sizeof(*p));"
type_conversion,grep.c,136,-,+,,16,		todo_start = (todo_start + 1) % ARRAY_SIZE(todo);
type_conversion,grep.c,147,-,+,,12,	w->done = 1;
type_conversion,grep.c,148,-,+,,17,			size_t len = 0;
type_conversion,grep.c,150,-,+,,18,	    todo_done = (todo_done+1) % ARRAY_SIZE(todo)) {
type_conversion,grep.c,151,-,+,,9,				if (*(--cp) == '\n') {
type_conversion,grep.c,158,-,+,,44,"			new_pat = create_grep_pat(nl + 1, len - 1, p->origin,"
type_conversion,grep.c,160,-,+,,10,					if (*p++ == '\n')
type_conversion,grep.c,164,-,+,,10,			*nl = '\0';
type_conversion,grep.c,178,-,+,,6,	if (field == GREP_HEADER_REFLOG)
type_conversion,grep.c,184,-,+,,14,	for (i = 0; i < repos_to_free_nr; i++) {
type_conversion,grep.c,189,-,+,,21,	repos_to_free_nr = 0;
type_conversion,grep.c,190,-,+,,24,	repos_to_free_alloc = 0;
type_conversion,grep.c,207,-,+,,6,		if(pat->token == GREP_PATTERN_HEAD)
type_conversion,grep.c,228,-,+,,14,		where[0] = 0;
type_conversion,grep.c,232,-,+,,14,	for (i = 0; i < ARRAY_SIZE(todo); i++) {
type_conversion,grep.c,233,-,+,,29,"		strbuf_init(&todo[i].out, 0);"
type_conversion,grep.c,237,-,+,,11,	for (i = 0; i < len; i++) {
type_conversion,grep.c,335,-,+,,31,"				strbuf_add(out, filename, tree_name_len);"
type_conversion,grep.c,346,-,+,,58,"		quote_path(filename + tree_name_len, grep_prefix, out, 0);"
type_conversion,grep.c,348,-,+,,54,"		quote_c_style(filename + tree_name_len, out, NULL, 0);"
type_conversion,grep.c,351,-,+,,22,"		strbuf_insert(out, 0, filename, tree_name_len);"
type_conversion,grep.c,412,-,+,,13,	if (len == 1 && *(const char *)data == '\0')
type_conversion,grep.c,423,-,+,,14,	for (i = 0; i < path_list->nr; i++)
type_conversion,grep.c,426,-,+,,20,	child.use_shell = 1;
type_conversion,grep.c,495,-,+,,6,	if (opt->pattern_type_option == GREP_PATTERN_TYPE_UNSPECIFIED)
type_conversion,grep.c,500,-,+,,19,	p->word_regexp = opt->word_regexp;
type_conversion,grep.c,501,-,+,,19,	p->ignore_case = opt->ignore_case;
type_conversion,grep.c,502,-,+,,13,	p->fixed = opt->pattern_type_option == GREP_PATTERN_TYPE_FIXED;
type_conversion,grep.c,504,-,+,,6,	if (opt->pattern_type_option != GREP_PATTERN_TYPE_PCRE &&
type_conversion,grep.c,508,-,+,,16,"	p->is_fixed = is_fixed(p->pattern, p->patternlen);"
type_conversion,grep.c,531,-,+,,52,"		hit = grep_tree(&subopt, pathspec, &tree, &base, base.len,"
type_conversion,grep.c,532,-,+,,5,				object_type == OBJ_COMMIT);
type_conversion,grep.c,551,-,+,,19,		name_base_len = strlen(repo->submodule_prefix);
type_conversion,grep.c,556,-,+,,6,	if (opt->pattern_type_option == GREP_PATTERN_TYPE_PCRE) {
type_conversion,grep.c,558,-,+,,15,	for (nr = 0; nr < repo->index->cache_nr; nr++) {
type_conversion,grep.c,563,-,+,,6,	if (opt->pattern_type_option == GREP_PATTERN_TYPE_ERE)
type_conversion,grep.c,564,-,+,,24,"		strbuf_setlen(&name, name_base_len);"
type_conversion,grep.c,568,-,+,,37,"		regerror(err, &p->regexp, errbuf, 1024);"
type_conversion,grep.c,575,-,+,,32,"	struct grep_expr *z = xcalloc(1, sizeof(*z));"
type_conversion,grep.c,579,-,+,,25,"			strbuf_setlen(&name, name_base_len);"
type_conversion,grep.c,583,-,+,,55,"		    match_pathspec(repo->index, pathspec, name.buf, name.len, 0, NULL,"
type_conversion,grep.c,585,-,+,,32,"	struct grep_expr *z = xcalloc(1, sizeof(*z));"
type_conversion,grep.c,610,-,+,,13,			} while (nr < repo->index->cache_nr &&
type_conversion,grep.c,623,-,+,,17,		if (!*list || (*list)->token != GREP_CLOSE_PAREN)
type_conversion,grep.c,630,-,+,,20,	int old_baselen = base->len;
type_conversion,grep.c,635,-,+,,19,		name_base_len = name.len;
type_conversion,grep.c,641,-,+,,7,		if (match != all_entries_interesting) {
type_conversion,grep.c,646,-,+,,25,"			strbuf_setlen(&name, name_base_len);"
type_conversion,grep.c,648,-,+,,8,			if (match == all_entries_not_interesting)
type_conversion,grep.c,650,-,+,,8,			if (match == entry_not_interesting)
type_conversion,grep.c,654,-,+,,32,"		strbuf_add(base, entry.path, te_len);"
type_conversion,grep.c,661,-,+,,11,	if (p && p->token == GREP_AND) {
type_conversion,grep.c,682,-,+,,23,"		strbuf_setlen(base, old_baselen);"
type_conversion,grep.c,695,-,+,,6,	if (obj->type == OBJ_BLOB)
type_conversion,grep.c,697,-,+,,6,	if (obj->type == OBJ_COMMIT || obj->type == OBJ_TREE) {
type_conversion,grep.c,698,-,+,,32,"	struct grep_expr *z = xcalloc(1, sizeof(*z));"
type_conversion,grep.c,710,-,+,,31,		len = name ? strlen(name) : 0;
type_conversion,grep.c,713,-,+,,28,"			strbuf_add(&base, name, len);"
type_conversion,grep.c,714,-,+,,7,		if (p->token != GREP_PATTERN_HEAD)
type_conversion,grep.c,716,-,+,,7,		if (p->field < GREP_HEADER_FIELD_MIN ||
type_conversion,grep.c,717,-,+,,48,"		hit = grep_tree(opt, pathspec, &tree, &base, base.len,"
type_conversion,grep.c,718,-,+,,5,				obj->type == OBJ_COMMIT);
type_conversion,grep.c,722,-,+,,16,	for (fld = 0; fld < GREP_HEADER_FIELD_MAX; fld++)
type_conversion,grep.c,723,-,+,,60,"	die(_(""unable to grep from object of type %s""), type_name(obj->type));"
type_conversion,grep.c,733,-,+,,11,	for (i = 0; i < nr; i++) {
type_conversion,grep.c,741,-,+,,16,	for (fld = 0; fld < GREP_HEADER_FIELD_MAX; fld++) {
type_conversion,grep.c,758,-,+,,7,		    x->u.binary.right->node == GREP_NODE_TRUE) {
type_conversion,grep.c,776,-,+,,16,		dir.flags |= DIR_NO_GITLINKS;
type_conversion,grep.c,798,-,+,,52,		grep_opt->pre_context = grep_opt->post_context = 0;
type_conversion,grep.c,801,-,+,,10,"	value = strtol(arg, (char **)&endp, 10);"
type_conversion,grep.c,806,-,+,,51,	grep_opt->pre_context = grep_opt->post_context = value;
type_conversion,grep.c,832,-,+,,17,		if (sb.len == 0)
type_conversion,grep.c,867,-,+,,14,	while (l && *cp != '\n') {
type_conversion,grep.c,877,-,+,,24,	return isalnum(ch) || ch == '_';
type_conversion,grep.c,894,-,+,,26,"		opt->output(opt, ""\0"", 1);"
type_conversion,grep.c,896,-,+,,28,"		output_color(opt, &sign, 1, opt->colors[GREP_COLOR_SEP]);"
type_conversion,grep.c,902,-,+,,59,"	opt->output(opt, opt->null_following_name ? ""\0"" : ""\n"", 1);"
type_conversion,grep.c,914,-,+,,40,"		hit = !regexec_buf(&p->regexp, line, eol - line, 1, match,"
type_conversion,grep.c,925,-,+,,7,		if (*eol != '>')
type_conversion,grep.c,936,-,+,,15,"	{ ""author "", 7 },"
type_conversion,grep.c,937,-,+,,18,"	{ ""committer "", 10 },"
type_conversion,grep.c,938,-,+,,15,"	{ ""reflog "", 7 },"
type_conversion,grep.c,949,-,+,,7,	if ((p->token != GREP_PATTERN) &&
type_conversion,grep.c,950,-,+,,8,	    ((p->token == GREP_PATTERN_HEAD) != (ctx == GREP_CONTEXT_HEAD)))
type_conversion,grep.c,958,-,+,,21,		    (eol - bol) < pmatch[0].rm_so ||
type_conversion,grep.c,960,-,+,,21,		    (eol - bol) < pmatch[0].rm_eo)
type_conversion,grep.c,971,-,+,,10,		     ((pmatch[0].rm_eo == (eol-bol)) ||
type_conversion,grep.c,1011,-,+,,6,	if (p->token == GREP_PATTERN_HEAD) {
type_conversion,grep.c,1015,-,+,,4,"			PARSE_OPT_OPTARG | PARSE_OPT_NOCOMPLETE,"
type_conversion,grep.c,1040,-,+,,9,			     PARSE_OPT_KEEP_DASHDASH |
type_conversion,grep.c,1041,-,+,,9,			     PARSE_OPT_STOP_AT_NON_OPTION);
type_conversion,grep.c,1049,-,+,,21,			if (h && (*col < 0 || tmp.rm_so < *col))
type_conversion,grep.c,1050,-,+,,12,				*col = tmp.rm_so;
type_conversion,grep.c,1052,-,+,,7,		if (x->u.atom->token == GREP_PATTERN_BODY)
type_conversion,grep.c,1090,-,+,,29,			x->u.binary.left->hit |= h;
type_conversion,grep.c,1098,-,+,,13,		x->hit |= h;
type_conversion,grep.c,1137,-,+,,15,			if (*col < 0 || tmp.rm_so < *col)
type_conversion,grep.c,1138,-,+,,12,				*col = tmp.rm_so;
type_conversion,grep.c,1142,-,+,,50,"		add_object_array_with_path(object, arg, &list, oc.mode, oc.path);"
type_conversion,grep.c,1156,-,+,,28,"	parse_pathspec(&pathspec, 0,"
type_conversion,grep.c,1161,-,+,,23,	pathspec.recursive = 1;
type_conversion,grep.c,1162,-,+,,32,	pathspec.recurse_submodules = !!recurse_submodules;
type_conversion,grep.c,1176,-,+,,14,		for (p = ((ctx == GREP_CONTEXT_HEAD)
type_conversion,grep.c,1181,-,+,,10,				if ((field != GREP_HEADER_FIELD_MAX) &&
type_conversion,grep.c,1182,-,+,,10,				    (p->field != field))
type_conversion,grep.c,1201,-,+,,41,	if (opt->heading && opt->last_shown == 0) {
type_conversion,grep.c,1203,-,+,,26,"		opt->output(opt, ""\n"", 1);"
type_conversion,grep.c,1220,-,+,,13,		int len = strlen(pager);
type_conversion,grep.c,1222,-,+,,29,		if (len > 4 && is_dir_sep(pager[len - 5]))
type_conversion,grep.c,1234,-,+,,13,	int rest = eol - bol;
type_conversion,grep.c,1238,-,+,,44,	if (opt->file_break && opt->last_shown == 0) {
type_conversion,grep.c,1240,-,+,,27,"			opt->output(opt, ""\n"", 1);"
type_conversion,grep.c,1242,-,+,,26,		if (opt->last_shown == 0) {
type_conversion,grep.c,1244,-,+,,29,"				output_color(opt, ""--"", 2, opt->colors[GREP_COLOR_SEP]);"
type_conversion,grep.c,1245,-,+,,28,"				opt->output(opt, ""\n"", 1);"
type_conversion,grep.c,1247,-,+,,38,		} else if (lno > opt->last_shown + 1) {
type_conversion,grep.c,1248,-,+,,28,"			output_color(opt, ""--"", 2, opt->colors[GREP_COLOR_SEP]);"
type_conversion,grep.c,1249,-,+,,27,"			opt->output(opt, ""\n"", 1);"
type_conversion,grep.c,1265,-,+,,8,			if (sign == ':')
type_conversion,grep.c,1269,-,+,,8,			if (sign == ':')
type_conversion,grep.c,1271,-,+,,13,			else if (sign == '-')
type_conversion,grep.c,1273,-,+,,13,			else if (sign == '=')
type_conversion,grep.c,1284,-,+,,28,"				output_color(opt, bol, match.rm_so, line_color);"
type_conversion,grep.c,1286,-,+,,10,"				     match.rm_eo - match.rm_so, match_color);"
type_conversion,grep.c,1288,-,+,,28,"				opt->output(opt, ""\n"", 1);"
type_conversion,grep.c,1290,-,+,,11,			cno += match.rm_eo;
type_conversion,grep.c,1296,-,+,,26,"		output_color(opt, bol, rest, line_color);"
type_conversion,grep.c,1297,-,+,,26,"		opt->output(opt, ""\n"", 1);"
type_conversion,grep.c,1337,-,+,,48,"		return xecfg->find_func(bol, eol - bol, buf, 1,"
type_conversion,grep.c,1338,-,+,,32,					xecfg->find_func_priv) >= 0;
type_conversion,grep.c,1343,-,+,,23,	if (isalpha(*bol) || *bol == '_' || *bol == '$')
type_conversion,grep.c,1354,-,+,,27,		while (bol > gs->buf && bol[-1] != '\n')
type_conversion,grep.c,1362,-,+,,44,"			show_line(opt, bol, eol, gs->name, lno, 0, '=');"
type_conversion,grep.c,1373,-,+,,29,"	unsigned cur = lno, from = 1, funcname_lno = 0, orig_from;"
type_conversion,grep.c,1379,-,+,,28,		from = opt->last_shown + 1;
type_conversion,grep.c,1386,-,+,,28,		from = opt->last_shown + 1;
type_conversion,grep.c,1394,-,+,,27,		while (bol > gs->buf && bol[-1] != '\n')
type_conversion,grep.c,1423,-,+,,33,"		const char *eol = bol, sign = (cur == funcname_lno) ? '=' : '-';"
type_conversion,grep.c,1425,-,+,,10,		while (*eol != '\n')
type_conversion,grep.c,1427,-,+,,43,"		show_line(opt, bol, eol, gs->name, cur, 0, sign);"
type_conversion,grep.c,1442,-,+,,7,		if (p->token != GREP_PATTERN)
type_conversion,grep.c,1472,-,+,,13,		*left_p = 0;
type_conversion,grep.c,1475,-,+,,40,	for (sp = bol + earliest; bol < sp && sp[-1] != '\n'; sp--)
type_conversion,grep.c,1480,-,+,,7,		if (*sp == '\n')
type_conversion,grep.c,1483,-,+,,13,	*left_p -= last_bol - bol;
type_conversion,grep.c,1508,-,+,,40,"		fill_filespec(df, gs->identifier, 1, 0100644);"
type_conversion,grep.c,1511,-,+,,36,"		fill_filespec(df, null_oid(), 0, 0100644);"
type_conversion,grep.c,1561,-,+,,17,	unsigned lno = 1;
type_conversion,grep.c,1562,-,+,,22,	unsigned last_hit = 0;
type_conversion,grep.c,1564,-,+,,19,	unsigned count = 0;
type_conversion,grep.c,1591,-,+,,20,	opt->last_shown = 0;
type_conversion,grep.c,1644,-,+,,17,"		ssize_t col = -1, icol = -1;"
type_conversion,grep.c,1663,-,+,,8,		if ((ctx == GREP_CONTEXT_HEAD) && (eol == bol))
type_conversion,grep.c,1682,-,+,,45,		if (hit && (opt->max_count < 0 || count < opt->max_count)) {
type_conversion,grep.c,1693,-,+,,38,"				opt->output(opt, ""Binary file "", 12);"
type_conversion,grep.c,1696,-,+,,36,"				opt->output(opt, "" matches\n"", 9);"
type_conversion,grep.c,1707,-,+,,14,			if (cno < 0) {
type_conversion,grep.c,1715,-,+,,11,				cno = 0;
type_conversion,grep.c,1717,-,+,,50,"			show_line(opt, bol, eol, gs->name, lno, cno + 1, ':');"
type_conversion,grep.c,1746,-,+,,50,"			show_line(opt, bol, eol, gs->name, lno, col + 1, '-');"
type_conversion,grep.c,1781,-,+,,20,"			output_sep(opt, ':');"
type_conversion,grep.c,1796,-,+,,12,		x->hit = 0;
type_conversion,grep.c,1797,-,+,,7,		if (x->node != GREP_NODE_OR)
type_conversion,grep.c,1799,-,+,,27,		x->u.binary.left->hit = 0;
type_conversion,grep.c,1808,-,+,,7,		if (x->node != GREP_NODE_OR)
type_conversion,grep.c,1809,-,+,,11,			return x->hit;
type_conversion,grep.c,1873,-,+,,13,	gs->size = 0;
type_conversion,grep.c,1886,-,+,,13,	gs->size = 0;
type_conversion,grep.c,1908,-,+,,14,		gs->size = 0;
type_conversion,hash-ll.h,243,-,+,,9,	return p - hash_algos;
type_conversion,hash-lookup.c,8,-,+,,11,	return ((oid->hash[ofs] << 8) | oid->hash[ofs + 1]);
type_conversion,hash-lookup.c,59,-,+,,14,	size_t lo = 0;
type_conversion,hash-lookup.c,60,-,+,,14,	size_t mi = 0;
type_conversion,hash-lookup.c,65,-,+,,12,	if (nr != 1) {
type_conversion,hash-lookup.c,68,-,+,,46,		for (ofs = 0; ofs < the_hash_algo->rawsz - 2; ofs += 2) {
type_conversion,hash-lookup.c,69,-,+,,19,"			lov = take2(fn(0, table), ofs);"
type_conversion,hash-lookup.c,70,-,+,,24,"			hiv = take2(fn(nr - 1, table), ofs);"
type_conversion,hash-lookup.c,71,-,+,,10,"			miv = take2(oid, ofs);"
type_conversion,hash-lookup.c,83,-,+,,16,				mi = (nr - 1) * (miv - lov) / (hiv - lov);
type_conversion,hash-lookup.c,95,-,+,,11,			return mi;
type_conversion,hash-lookup.c,99,-,+,,14,			lo = mi + 1;
type_conversion,hash-lookup.c,100,-,+,,25,		mi = lo + (hi - lo) / 2;
type_conversion,hash-lookup.c,111,-,+,,9,	lo = ((*hash == 0x0) ? 0 : ntohl(fanout_nbo[*hash - 1]));
type_conversion,hash-lookup.c,114,-,+,,34,		unsigned mi = lo + (hi - lo) / 2;
type_conversion,hash-lookup.c,115,-,+,,29,"		int cmp = hashcmp(table + mi * stride, hash);"
type_conversion,hash-lookup.c,125,-,+,,14,			lo = mi + 1;
type_conversion,hash-object.c,31,-,+,,28,"	if (strbuf_read(&buf, fd, 4096) < 0)"
type_conversion,hash-object.c,74,-,+,,7,"		if (buf.buf[0] == '""') {"
type_conversion,hashmap.c,13,-,+,,14,	while ((c = (unsigned char) *str++))
type_conversion,hashmap.c,21,-,+,,14,	while ((c = (unsigned char) *str++)) {
type_conversion,hashmap.c,22,-,+,,12,		if (c >= 'a' && c <= 'z')
type_conversion,hashmap.c,23,-,+,,9,			c -= 'a' - 'A';
type_conversion,hashmap.c,34,-,+,,20,		unsigned int c = *ucbuf++;
type_conversion,hashmap.c,45,-,+,,20,		unsigned int c = *ucbuf++;
type_conversion,hashmap.c,46,-,+,,12,		if (c >= 'a' && c <= 'z')
type_conversion,hashmap.c,47,-,+,,9,			c -= 'a' - 'A';
type_conversion,hashmap.c,62,-,+,,20,		unsigned int c = *ucbuf++;
type_conversion,hashmap.c,63,-,+,,12,		if (c >= 'a' && c <= 'z')
type_conversion,hashmap.c,64,-,+,,9,			c -= 'a' - 'A';
type_conversion,hashmap.c,82,-,+,,73,	map->grow_at = (unsigned int) ((uint64_t) size * HASHMAP_LOAD_FACTOR / 100);
type_conversion,hashmap.c,84,-,+,,20,		map->shrink_at = 0;
type_conversion,hashmap.c,107,-,+,,39,	return key->hash & (map->tablesize - 1);
type_conversion,hashmap.c,112,-,+,,34,	return hash & (map->tablesize - 1);
type_conversion,hashmap.c,122,-,+,,11,	for (i = 0; i < oldsize; i++) {
type_conversion,hashmap.c,164,-,+,,59,	initial_size = (unsigned int) ((uint64_t) initial_size * 100
type_conversion,hashmap.c,166,-,+,,24,	while (initial_size > size)
type_conversion,hashmap.c,174,-,+,,24,	map->do_count_items = 1;
type_conversion,hashmap.c,195,-,+,,22,	if (entry_offset >= 0)  /* called by hashmap_clear_entries */
type_conversion,hashmap.c,197,-,+,,24,"	memset(map->table, 0, map->tablesize * sizeof(struct hashmap_entry *));"
type_conversion,hashmap.c,198,-,+,,19,	map->shrink_at = 0;
type_conversion,hashmap.c,199,-,+,,22,	map->private_size = 0;
type_conversion,hashmap.c,206,-,+,,22,	if (entry_offset >= 0)  /* called by hashmap_clear_and_free */
type_conversion,hashmap.c,290,-,+,,19,	iter->tablepos = 0;
type_conversion,hashmap.c,337,-,+,,44,"		hashmap_init(&map, pool_entry_cmp, NULL, 0);"
type_conversion,hashmap.h,309,-,+,,9,	return 0;
type_conversion,hashmap.h,532,-,+,,24,	map->do_count_items = 0;
type_conversion,hashmap.h,542,-,+,,19,	unsigned int n = 0;
type_conversion,hashmap.h,552,-,+,,24,	map->do_count_items = 1;
type_conversion,help.c,31,-,+,,4,"	{ 0, NULL }"
type_conversion,help.c,44,-,+,,4,"	{ 0, NULL }"
type_conversion,help.c,73,-,+,,34,	if (ARRAY_SIZE(command_list) == 0)
type_conversion,help.c,78,-,+,,14,	for (i = 0; i < ARRAY_SIZE(command_list); i++) {
type_conversion,help.c,102,-,+,,8,			if (longest > len)
type_conversion,help.c,103,-,+,,15,"				mput_char(' ', longest - len);"
type_conversion,help.c,123,-,+,,18,	uint32_t mask = 0;
type_conversion,help.c,131,-,+,,7,		if (longest < strlen(cmds[i].name))
type_conversion,help.c,132,-,+,,14,			longest = strlen(cmds[i].name);
type_conversion,help.c,154,-,+,,13,	ent->len = len;
type_conversion,help.c,157,-,+,,14,	for (i = 0; i < keys.nr; i++) {
type_conversion,help.c,190,-,+,,24,"		strbuf_add(&sb, var, cut - var);"
type_conversion,help.c,238,-,+,,32,	ec_process.stdout_to_stderr = 1;
type_conversion,help.c,242,-,+,,39,"	strbuf_read(&buffer, ec_process.err, 20);"
type_conversion,help.c,252,-,+,,8,	len = buf.len;
type_conversion,help.c,256,-,+,,25,"	strbuf_remove(&buffer, 0, strlen(""emacsclient""));"
type_conversion,help.c,261,-,+,,23,"		strbuf_setlen(&buf, len);"
type_conversion,help.c,269,-,+,,26,"		add_cmdname(cmds, ent, entlen);"
type_conversion,help.c,295,-,+,,14,				*colon = 0;
type_conversion,help.c,324,-,+,,25,	unsigned int colopts = 0;
type_conversion,help.c,386,-,+,,20,	uint32_t cat_id = 0;
type_conversion,help.c,390,-,+,,13,			cat_id = 1UL << i;
type_conversion,help.c,420,-,+,,29,"		strbuf_add(&sb, cmd_list, p - cmd_list);"
type_conversion,help.c,421,-,+,,7,		if (sb.buf[0] == '-')
type_conversion,help.c,426,-,+,,10,		while (*p == ' ')
type_conversion,help.c,436,-,+,,5,"		{ 0, NULL }"
type_conversion,help.c,446,-,+,,5,"		{ 0, NULL }"
type_conversion,help.c,456,-,+,,5,"		{ 0, NULL }"
type_conversion,help.c,484,-,+,,14,	for (i = 0; i < others.nr; i++)
type_conversion,help.c,498,-,+,,14,	for (i = 0; i < alias_list.nr; i++) {
type_conversion,help.c,500,-,+,,7,		if (longest < len)
type_conversion,help.c,501,-,+,,14,			longest = len;
type_conversion,help.c,507,-,+,,15,		for (i = 0; i < alias_list.nr; i++) {
type_conversion,help.c,510,-,+,,26,			aliases[i].category = 1;
type_conversion,help.c,513,-,+,,31,"		print_command_list(aliases, 1, longest);"
type_conversion,help.c,531,-,+,,25,"	strbuf_init(page_path, 0);"
type_conversion,help.c,570,-,+,,26,		if (!exclude_guides || alias[0] == '!') {
type_conversion,help.c,572,-,+,,28,"		add_cmdname(&aliases, p, strlen(p));"
type_conversion,help.c,581,-,+,,11,	int l1 = (*c1)->len;
type_conversion,help.c,582,-,+,,11,	int l2 = (*c2)->len;
type_conversion,help.c,644,-,+,,6,	if (cmd_mode != HELP_ACTION_ALL &&
type_conversion,help.c,659,-,+,,31,				main_cmds.names[i]->len = 0;
type_conversion,help.c,665,-,+,,4,"			levenshtein(cmd, candidate, 0, 2, 1, 3) + 1;"
type_conversion,help.c,683,-,+,,26,		for (best_similarity = main_cmds.names[n++]->len;
type_conversion,help.c,685,-,+,,9,		      best_similarity == main_cmds.names[n]->len);
type_conversion,help.c,704,-,+,,6,	if (parsed_help_format != HELP_FORMAT_NONE)
type_conversion,help.c,706,-,+,,6,	if (help_format == HELP_FORMAT_NONE)
type_conversion,help.c,715,-,+,,8,"				   (float)autocorrect/10.0, assumed);"
type_conversion,help.c,727,-,+,,7,			   n));
type_conversion,help.c,827,-,+,,26,	if (suggested_refs.nr > 0) {
type_conversion,help.c,832,-,+,,15,		for (i = 0; i < suggested_refs.nr; i++)
type_conversion,help.h,19,-,+,,11,		putchar(c);
type_conversion,hex-ll.c,42,-,+,,30,		unsigned int val = (hexval(hex[0]) << 4) | hexval(hex[1]);
type_conversion,hex-ll.c,44,-,+,,13,		if (val & ~0xff)
type_conversion,hex-ll.c,46,-,+,,15,		*binary++ = val;
type_conversion,hex-ll.h,7,-,+,,9,	return hexval_table[c];
type_conversion,hex-ll.h,16,-,+,,28,	unsigned int val = hexval(s[0]);
type_conversion,hex-ll.h,17,-,+,,16,	return (val & ~0xf) ? val : (val << 4) | hexval(s[1]);
type_conversion,hex.c,9,-,+,,14,	for (i = 0; i < algop->rawsz; i++) {
type_conversion,hex.c,13,-,+,,13,		*hash++ = val;
type_conversion,hex.c,89,-,+,,14,	for (i = 0; i < algop->rawsz; i++) {
type_conversion,hex.c,90,-,+,,22,		unsigned int val = *hash++;
type_conversion,hex.c,92,-,+,,22,		*buf++ = hex[val & 0xf];
type_conversion,hex.c,94,-,+,,9,	*buf = '\0';
type_conversion,hex.c,108,-,+,,10,	bufno = (bufno + 1) % ARRAY_SIZE(hexbuffer);
type_conversion,hook.c,60,-,+,,26,		opt.error_if_missing = 1;
type_conversion,hook.c,100,-,+,,17,	cp->no_stdin = 1;
type_conversion,hook.c,104,-,+,,18,		cp->no_stdin = 0;
type_conversion,hook.c,107,-,+,,25,	cp->stdout_to_stderr = 1;
type_conversion,hook.c,171,-,+,,16,"		.processes = 1,"
type_conversion,hook.c,172,-,+,,14,"		.ungroup = 1,"
type_conversion,http-backend.c,27,-,+,,43,static unsigned long max_request_buffer = 10 * 1024 * 1024;
type_conversion,http-backend.c,39,-,+,,33,"	{ ""upload-pack"", ""uploadpack"", 1, 1 },"
type_conversion,http-backend.c,40,-,+,,35,"	{ ""receive-pack"", ""receivepack"", 0, -1 },"
type_conversion,http-backend.c,41,-,+,,39,"	{ ""upload-archive"", ""uploadarchive"", 0, -1 },"
type_conversion,http-backend.c,82,-,+,,6,"	n = vsnprintf(buffer, sizeof(buffer), fmt, args);"
type_conversion,http-backend.c,84,-,+,,6,	if (n >= sizeof(buffer))
type_conversion,http-backend.c,87,-,+,,27,"	write_or_die(fd, buffer, n);"
type_conversion,http-backend.c,122,-,+,,33,"	hdr_date(hdr, ""Expires"", now + 31536000);"
type_conversion,http-backend.c,128,-,+,,26,"	strbuf_add(hdr, ""\r\n"", 2);"
type_conversion,http-backend.c,138,-,+,,19,"	http_status(hdr, 404, ""Not Found"");"
type_conversion,http-backend.c,154,-,+,,19,"	http_status(hdr, 403, ""Forbidden"");"
type_conversion,http-backend.c,184,-,+,,21,	size_t buf_alloc = 8192;
type_conversion,http-backend.c,195,-,+,,31,"	hdr_int(hdr, content_length, sb.st_size);"
type_conversion,http-backend.c,202,-,+,,11,		if (n < 0)
type_conversion,http-backend.c,206,-,+,,24,"		write_or_die(1, buf, n);"
type_conversion,http-backend.c,249,-,+,,14,	for (i = 0; i < ARRAY_SIZE(rpc_service); i++) {
type_conversion,http-backend.c,269,-,+,,14,	for (i = 0; i < ARRAY_SIZE(rpc_service); i++) {
type_conversion,http-backend.c,280,-,+,,6,	if (svc->enabled < 0) {
type_conversion,http-backend.c,291,-,+,,30,"	if (write_in_full(out, buf, len) < 0)"
type_conversion,http-backend.c,302,-,+,,15,"	size_t len = 0, alloc = 8192;"
type_conversion,http-backend.c,312,-,+,,13,		if (cnt < 0) {
type_conversion,http-backend.c,314,-,+,,11,			return -1;
type_conversion,http-backend.c,318,-,+,,10,		len += cnt;
type_conversion,http-backend.c,321,-,+,,11,			return len;
type_conversion,http-backend.c,340,-,+,,16,	ssize_t cnt = 0;
type_conversion,http-backend.c,342,-,+,,27,	if (max_request_buffer < req_len) {
type_conversion,http-backend.c,348,-,+,,16,	buf = xmalloc(req_len);
type_conversion,http-backend.c,349,-,+,,30,"	cnt = read_in_full(fd, buf, req_len);"
type_conversion,http-backend.c,350,-,+,,12,	if (cnt < 0) {
type_conversion,http-backend.c,352,-,+,,10,		return -1;
type_conversion,http-backend.c,360,-,+,,16,	ssize_t val = -1;
type_conversion,http-backend.c,370,-,+,,16,	if (req_len < 0)
type_conversion,http-backend.c,382,-,+,,22,	unsigned long cnt = 0;
type_conversion,http-backend.c,383,-,+,,35,	int req_len_defined = req_len >= 0;
type_conversion,http-backend.c,384,-,+,,29,	size_t req_remaining_len = req_len;
type_conversion,http-backend.c,394,-,+,,9,				n = 0; /* nothing left to read */
type_conversion,http-backend.c,401,-,+,,18,				buffer_len = req_remaining_len;
type_conversion,http-backend.c,403,-,+,,18,				buffer_len = sizeof(in_buf);
type_conversion,http-backend.c,404,-,+,,25,"			n = xread(0, in_buf, buffer_len);"
type_conversion,http-backend.c,406,-,+,,31,			if (req_len_defined && n > 0)
type_conversion,http-backend.c,407,-,+,,26,				req_remaining_len -= n;
type_conversion,http-backend.c,410,-,+,,12,		if (n <= 0)
type_conversion,http-backend.c,412,-,+,,21,		stream.avail_in = n;
type_conversion,http-backend.c,414,-,+,,10,		while (0 < stream.avail_in) {
type_conversion,http-backend.c,424,-,+,,8,			n = stream.total_out - cnt;
type_conversion,http-backend.c,425,-,+,,33,"			write_to_child(out, out_buf, stream.total_out - cnt, prog_name);"
type_conversion,http-backend.c,443,-,+,,10,	if (n < 0)
type_conversion,http-backend.c,455,-,+,,25,	while (remaining_len > 0) {
type_conversion,http-backend.c,458,-,+,,11,		if (n < 0)
type_conversion,http-backend.c,461,-,+,,20,		remaining_len -= n;
type_conversion,http-backend.c,491,-,+,,52,	if (buffer_input || gzipped_request || req_len >= 0)
type_conversion,http-backend.c,493,-,+,,16,	cld.git_cmd = 1;
type_conversion,http-backend.c,494,-,+,,22,	cld.clean_on_exit = 1;
type_conversion,http-backend.c,495,-,+,,25,	cld.wait_after_clean = 1;
type_conversion,http-backend.c,504,-,+,,22,	else if (req_len >= 0)
type_conversion,http-backend.c,505,-,+,,38,"		pipe_fixed_length(argv[0], cld.in, req_len);"
type_conversion,http-backend.c,523,-,+,,6,	if (o->type == OBJ_TAG) {
type_conversion,http-backend.c,552,-,+,,7,		if (determine_protocol_version_server() != protocol_v2) {
type_conversion,http-backend.c,605,-,+,,15,	size_t cnt = 0;
type_conversion,http-backend.c,613,-,+,,26,"	strbuf_grow(&buf, cnt * 53 + 2);"
type_conversion,http-backend.c,633,-,+,,20,"		http_status(hdr, 415, ""Unsupported Media Type"");"
type_conversion,http-backend.c,667,-,+,,22,"	run_service(argv.v, svc->buffer_input);"
type_conversion,http-backend.c,681,-,+,,21,"		http_status(&hdr, 500, ""Internal Server Error"");"
type_conversion,http-backend.c,706,-,+,,7,		if (pathinfo[0] == '/')
type_conversion,http-backend.c,744,-,+,,20,"		http_status(hdr, 405, ""Method Not Allowed"");"
type_conversion,http-backend.c,748,-,+,,20,"		http_status(hdr, 400, ""Bad Request"");"
type_conversion,http-backend.c,773,-,+,,14,	for (i = 0; i < ARRAY_SIZE(services); i++) {
type_conversion,http-backend.c,781,-,+,,27,"		ret = regexec(&re, dir, 1, out, 0);"
type_conversion,http-backend.c,791,-,+,,8,			n = out[0].rm_eo - out[0].rm_so;
type_conversion,http-backend.c,792,-,+,,51,"			cmd_arg = xmemdupz(dir + out[0].rm_so + 1, n - 1);"
type_conversion,http-backend.c,793,-,+,,24,			dir[out[0].rm_so] = 0;
type_conversion,http-fetch.c,66,-,+,,37,	preq->preserve_index_pack_stdout = 1;
type_conversion,http-fetch.c,70,-,+,,7,		if (results.curl_result != CURLE_OK) {
type_conversion,http-fetch.c,110,-,+,,23,	while (arg < argc && argv[arg][0] == '-') {
type_conversion,http-fetch.c,113,-,+,,7,		if (argv[arg][1] == 't') {
type_conversion,http-fetch.c,114,-,+,,14,		} else if (argv[arg][1] == 'c') {
type_conversion,http-fetch.c,115,-,+,,14,		} else if (argv[arg][1] == 'a') {
type_conversion,http-fetch.c,116,-,+,,14,		} else if (argv[arg][1] == 'v') {
type_conversion,http-fetch.c,118,-,+,,14,		} else if (argv[arg][1] == 'w') {
type_conversion,http-fetch.c,121,-,+,,14,		} else if (argv[arg][1] == 'h') {
type_conversion,http-push.c,90,-,+,,23,static int push_all = MATCH_REFS_NONE;
type_conversion,http-push.c,223,-,+,,6,	if (options & DAV_HEADER_IF) {
type_conversion,http-push.c,228,-,+,,6,	if (options & DAV_HEADER_LOCK) {
type_conversion,http-push.c,233,-,+,,6,	if (options & DAV_HEADER_TIMEOUT) {
type_conversion,http-push.c,332,-,+,,7,		if (check_request->state == RUN_FETCH_PACKED &&
type_conversion,http-push.c,375,-,+,,42,"	size = git_deflate_bound(&stream, len + hdrlen);"
type_conversion,http-push.c,376,-,+,,36,"	strbuf_init(&request->buffer.buf, size);"
type_conversion,http-push.c,377,-,+,,25,	request->buffer.posn = 0;
type_conversion,http-push.c,381,-,+,,21,	stream.avail_out = size;
type_conversion,http-push.c,385,-,+,,20,	stream.avail_in = hdrlen;
type_conversion,http-push.c,404,-,+,,73,"	strbuf_add(&buf, request->lock->tmpfile_suffix, the_hash_algo->hexsz + 1);"
type_conversion,http-push.c,453,-,+,,44,"	dav_headers = get_dav_token_headers(lock, DAV_HEADER_IF | DAV_HEADER_TIMEOUT);"
type_conversion,http-push.c,462,-,+,,7,		if (results.curl_result != CURLE_OK) {
type_conversion,http-push.c,484,-,+,,20,"		time_remaining = lock->start_time + lock->timeout -
			current_time;"
type_conversion,http-push.c,532,-,+,,6,	if (request->state != RUN_PUT && request->state != RUN_FETCH_PACKED) {
type_conversion,http-push.c,536,-,+,,6,	if (request->state == RUN_MKCOL) {
type_conversion,http-push.c,537,-,+,,7,		if (request->curl_result == CURLE_OK ||
type_conversion,http-push.c,538,-,+,,29,		    request->http_code == 405) {
type_conversion,http-push.c,539,-,+,,51,			remote_dir_exists[request->obj->oid.hash[0]] = 1;
type_conversion,http-push.c,548,-,+,,13,	} else if (request->state == RUN_PUT) {
type_conversion,http-push.c,549,-,+,,7,		if (request->curl_result == CURLE_OK) {
type_conversion,http-push.c,558,-,+,,13,	} else if (request->state == RUN_MOVE) {
type_conversion,http-push.c,559,-,+,,7,		if (request->curl_result == CURLE_OK) {
type_conversion,http-push.c,572,-,+,,13,	} else if (request->state == RUN_FETCH_LOOSE) {
type_conversion,http-push.c,586,-,+,,13,	} else if (request->state == RUN_FETCH_PACKED) {
type_conversion,http-push.c,588,-,+,,7,		if (request->curl_result != CURLE_OK) {
type_conversion,http-push.c,617,-,+,,7,		if (request->state == NEED_FETCH) {
type_conversion,http-push.c,620,-,+,,25,		} else if (pushing && request->state == NEED_PUSH) {
type_conversion,http-push.c,621,-,+,,8,			if (remote_dir_exists[request->obj->oid.hash[0]] == 1) {
type_conversion,http-push.c,644,-,+,,6,	if (remote_dir_exists[obj->oid.hash[0]] == -1)
type_conversion,http-push.c,675,-,+,,6,	if (remote_dir_exists[obj->oid.hash[0]] == -1)
type_conversion,http-push.c,743,-,+,,9,			if ((*lock_flags & DAV_PROP_LOCKEX) &&
type_conversion,http-push.c,744,-,+,,9,			    (*lock_flags & DAV_PROP_LOCKWR)) {
type_conversion,http-push.c,776,-,+,,30,			lock->tmpfile_suffix[0] = '_';
type_conversion,http-push.c,796,-,+,,16,	old_namelen = strlen(ctx->name);
type_conversion,http-push.c,797,-,+,,12,	new_len = old_namelen + strlen(c) + 2;
type_conversion,http-push.c,800,-,+,,35,"		ctx->name = xrealloc(ctx->name, new_len);"
type_conversion,http-push.c,803,-,+,,37,"	xsnprintf(ctx->name + old_namelen, ctx->len - old_namelen, "".%s"", c);"
type_conversion,http-push.c,825,-,+,,8,	*ep = 0;
type_conversion,http-push.c,833,-,+,,27,"	ctx->cdata = xmemdupz(s, len);"
type_conversion,http-push.c,840,-,+,,44,"	struct buffer out_buffer = { STRBUF_INIT, 0 };"
type_conversion,http-push.c,856,-,+,,11,		ep[1] = '\0';
type_conversion,http-push.c,862,-,+,,8,			if (results.curl_result != CURLE_OK &&
type_conversion,http-push.c,863,-,+,,29,			    results.http_code != 405) {
type_conversion,http-push.c,894,-,+,,18,	lock->timeout = -1;
type_conversion,http-push.c,898,-,+,,7,		if (results.curl_result == CURLE_OK) {
type_conversion,http-push.c,901,-,+,,23,"			ctx.name = xcalloc(10, 1);"
type_conversion,http-push.c,911,-,+,,9,"					   in_buffer.len, 1);"
type_conversion,http-push.c,913,-,+,,8,			if (result != XML_STATUS_OK) {
type_conversion,http-push.c,917,-,+,,21,				lock->timeout = -1;
type_conversion,http-push.c,933,-,+,,46,	if (lock->token == NULL || lock->timeout <= 0) {
type_conversion,http-push.c,965,-,+,,7,		if (results.curl_result == CURLE_OK)
type_conversion,http-push.c,1021,-,+,,45,	if (strlen(path) != the_hash_algo->hexsz + 1)
type_conversion,http-push.c,1024,-,+,,36,"	if (hex_to_bytes(oid->hash, path, 1))"
type_conversion,http-push.c,1029,-,+,,66,"	return hex_to_bytes(oid->hash + 1, path, the_hash_algo->rawsz - 1);"
type_conversion,http-push.c,1038,-,+,,45,"	if (!strcmp(ls->path, ls->dentry_name) && (ls->flags & IS_DIR)) {"
type_conversion,http-push.c,1039,-,+,,32,		remote_dir_exists[*parent] = 1;
type_conversion,http-push.c,1052,-,+,,45,"	if (!strcmp(ls->path, ls->dentry_name) && (ls->dentry_flags & IS_DIR)) {"
type_conversion,http-push.c,1057,-,+,,8,	if (!(ls->dentry_flags & IS_DIR))
type_conversion,http-push.c,1067,-,+,,8,			if (ls->dentry_flags & IS_DIR) {
type_conversion,http-push.c,1072,-,+,,9,				if (ls->flags & PROCESS_DIRS) {
type_conversion,http-push.c,1076,-,+,,9,				    ls->flags & RECURSIVE) {
type_conversion,http-push.c,1082,-,+,,15,			} else if (ls->flags & PROCESS_FILES) {
type_conversion,http-push.c,1087,-,+,,8,			if (*ctx->cdata == 'h') {
type_conversion,http-push.c,1097,-,+,,28,"				if (strncmp(path, url, repo->path_len))"
type_conversion,http-push.c,1128,-,+,,44,"	struct buffer out_buffer = { STRBUF_INIT, 0 };"
type_conversion,http-push.c,1154,-,+,,7,		if (results.curl_result == CURLE_OK) {
type_conversion,http-push.c,1157,-,+,,23,"			ctx.name = xcalloc(10, 1);"
type_conversion,http-push.c,1167,-,+,,9,"					   in_buffer.len, 1);"
type_conversion,http-push.c,1170,-,+,,8,			if (result != XML_STATUS_OK) {
type_conversion,http-push.c,1192,-,+,,21,	unsigned int val = parent;
type_conversion,http-push.c,1195,-,+,,22,	path[9] = hex[val & 0xf];
type_conversion,http-push.c,1196,-,+,,27,	remote_dir_exists[val] = 0;
type_conversion,http-push.c,1206,-,+,,44,"	struct buffer out_buffer = { STRBUF_INIT, 0 };"
type_conversion,http-push.c,1228,-,+,,7,		if (results.curl_result == CURLE_OK) {
type_conversion,http-push.c,1231,-,+,,23,"			ctx.name = xcalloc(10, 1);"
type_conversion,http-push.c,1240,-,+,,9,"					   in_buffer.len, 1);"
type_conversion,http-push.c,1243,-,+,,8,			if (result != XML_STATUS_OK) {
type_conversion,http-push.c,1346,-,+,,14,	for (i = 0; i < revs->pending.nr; i++) {
type_conversion,http-push.c,1353,-,+,,7,		if (obj->type == OBJ_TAG) {
type_conversion,http-push.c,1358,-,+,,7,		if (obj->type == OBJ_TREE) {
type_conversion,http-push.c,1362,-,+,,7,		if (obj->type == OBJ_BLOB) {
type_conversion,http-push.c,1382,-,+,,44,"	struct buffer out_buffer = { STRBUF_INIT, 0 };"
type_conversion,http-push.c,1398,-,+,,7,		if (results.curl_result != CURLE_OK) {
type_conversion,http-push.c,1481,-,+,,6,	if (o->type == OBJ_TAG) {
type_conversion,http-push.c,1492,-,+,,40,"	struct buffer buffer = { STRBUF_INIT, 0 };"
type_conversion,http-push.c,1510,-,+,,8,			if (results.curl_result != CURLE_OK) {
type_conversion,http-push.c,1557,-,+,,20,	if (buffer.len == 0)
type_conversion,http-push.c,1565,-,+,,41,"		*symref = xmemdupz(name, buffer.len - (name - buffer.buf));"
type_conversion,http-push.c,1592,-,+,,15,	int patlen = strlen(pattern);
type_conversion,http-push.c,1601,-,+,,17,		int namelen = strlen(name);
type_conversion,http-push.c,1603,-,+,,48,"		    memcmp(name + namelen - patlen, pattern, patlen))"
type_conversion,http-push.c,1605,-,+,,28,		if (namelen != patlen && name[namelen - patlen - 1] != '/')
type_conversion,http-push.c,1670,-,+,,7,		if (results.curl_result != CURLE_OK)
type_conversion,http-push.c,1715,-,+,,7,		if (*arg == '-') {
type_conversion,http-push.c,1717,-,+,,16,				push_all = MATCH_REFS_ALL;
type_conversion,http-push.c,1752,-,+,,21,			repo->path_len = strlen(repo->url);
type_conversion,http-push.c,1756,-,+,,23,					repo->path_len = strlen(repo->path);
type_conversion,http-push.c,1772,-,+,,32,"	memset(remote_dir_exists, -1, 256);"
type_conversion,http-push.c,1924,-,+,,19,"		setup_revisions(commit_argv.nr, commit_argv.v, &revs, NULL);"
type_conversion,http-push.c,1925,-,+,,20,		revs.edge_hint = 0; /* just in case */
type_conversion,http-walker.c,136,-,+,,7,		if (obj_req->state == WAITING) {
type_conversion,http-walker.c,174,-,+,,6,	if (http_follow_config != HTTP_FOLLOW_ALWAYS) {
type_conversion,http-walker.c,179,-,+,,14,	for (i = 0; i < ARRAY_SIZE(protocols); i++) {
type_conversion,http-walker.c,186,-,+,,6,	if (i >= ARRAY_SIZE(protocols)) {
type_conversion,http-walker.c,207,-,+,,25,	const char null_byte = '\0';
type_conversion,http-walker.c,215,-,+,,7,		if (slot->curl_result != CURLE_OK ||
type_conversion,http-walker.c,237,-,+,,13,	} else if (slot->curl_result != CURLE_OK) {
type_conversion,http-walker.c,244,-,+,,36,"	fwrite_buffer((char *)&null_byte, 1, 1, alt_req->buffer);"
type_conversion,http-walker.c,248,-,+,,9,	while (i < alt_req->buffer->len) {
type_conversion,http-walker.c,250,-,+,,10,		while (posn < alt_req->buffer->len && data[posn] != '\n')
type_conversion,http-walker.c,252,-,+,,7,		if (data[posn] == '\n') {
type_conversion,http-walker.c,256,-,+,,8,			if (data[i] == '/') {
type_conversion,http-walker.c,266,-,+,,18,"					serverlen = (strchr(colon_ss + 3, '/')
						     - base);"
type_conversion,http-walker.c,270,-,+,,40,"			} else if (!memcmp(data + i, ""../"", 3)) {"
type_conversion,http-walker.c,290,-,+,,17,				serverlen = strlen(base);
type_conversion,http-walker.c,292,-,+,,37,"				       !memcmp(data + i, ""../"", 3)) {"
type_conversion,http-walker.c,296,-,+,,8,						 base[serverlen - 1] != '/');
type_conversion,http-walker.c,300,-,+,,39,"				okay = strchr(base, ':') - base + 3 <"
type_conversion,http-walker.c,301,-,+,,12,				       serverlen;
type_conversion,http-walker.c,312,-,+,,31,"				strbuf_add(&target, base, serverlen);"
type_conversion,http-walker.c,313,-,+,,35,"				strbuf_add(&target, data + i, posn - i);"
type_conversion,http-walker.c,451,-,+,,7,		if (results.curl_result != CURLE_OK) {
type_conversion,http-walker.c,501,-,+,,9,	while (obj_req->state == WAITING)
type_conversion,http-walker.c,509,-,+,,9,	while (obj_req->state == ACTIVE)
type_conversion,http-walker.c,522,-,+,,6,	if (obj_req->state == ABORTED) {
type_conversion,http-walker.c,524,-,+,,13,	} else if (req->curl_result != CURLE_OK &&
type_conversion,http-walker.c,525,-,+,,24,		   req->http_code != 416) {
type_conversion,http-walker.c,600,-,+,,58,	for (s = data->alt->base + strlen(data->alt->base) - 1; *s == '/'; --s)
type_conversion,http-walker.c,601,-,+,,8,		*s = 0;
type_conversion,http.c,50,-,+,,13,"	{ ""sslv2"", CURL_SSLVERSION_SSLv2 },"
type_conversion,http.c,51,-,+,,13,"	{ ""sslv3"", CURL_SSLVERSION_SSLv3 },"
type_conversion,http.c,52,-,+,,13,"	{ ""tlsv1"", CURL_SSLVERSION_TLSv1 },"
type_conversion,http.c,54,-,+,,15,"	{ ""tlsv1.0"", CURL_SSLVERSION_TLSv1_0 },"
type_conversion,http.c,55,-,+,,15,"	{ ""tlsv1.1"", CURL_SSLVERSION_TLSv1_1 },"
type_conversion,http.c,56,-,+,,15,"	{ ""tlsv1.2"", CURL_SSLVERSION_TLSv1_2 },"
type_conversion,http.c,59,-,+,,15,"	{ ""tlsv1.3"", CURL_SSLVERSION_TLSv1_3 },"
type_conversion,http.c,70,-,+,,36,static long curl_low_speed_limit = -1;
type_conversion,http.c,71,-,+,,35,static long curl_low_speed_time = -1;
type_conversion,http.c,168,-,+,,15,	if (offset < 0 || offset >= buffer->buf.len) {
type_conversion,http.c,173,-,+,,17,	buffer->posn = offset;
type_conversion,http.c,193,-,+,,18,	return size && (*ptr == ' ' || *ptr == '\t');
type_conversion,http.c,240,-,+,,36,		http_auth.header_is_last_match = 1;
type_conversion,http.c,264,-,+,,48,			char *prev = xstrdup(values->v[values->nr - 1]);
type_conversion,http.c,278,-,+,,35,	http_auth.header_is_last_match = 0;
type_conversion,http.c,348,-,+,,7,		if (curl_message->msg == CURLMSG_DONE) {
type_conversion,http.c,349,-,+,,22,			int curl_result = curl_message->data.result;
type_conversion,http.c,471,-,+,,26,		if (http_post_buffer < 0)
type_conversion,http.c,628,-,+,,15,		for (i = 0; i < ARRAY_SIZE(proxy_authmethods); i++) {
type_conversion,http.c,635,-,+,,7,		if (i == ARRAY_SIZE(proxy_authmethods)) {
type_conversion,http.c,719,-,+,,26,"		strbuf_setlen(header,  sensitive_header - header->buf);"
type_conversion,http.c,736,-,+,,18,				*semicolon = 0;
type_conversion,http.c,743,-,+,,41,"			strbuf_add(&redacted_header, cookie, equals - cookie);"
type_conversion,http.c,757,-,+,,25,"		strbuf_setlen(header, sensitive_header - header->buf);"
type_conversion,http.c,801,-,+,,39,"		if (redact_sensitive_header(header, sensitive_header - header->buf)) {"
type_conversion,http.c,822,-,+,,37,"			redact_sensitive_header(*header, 0);"
type_conversion,http.c,823,-,+,,31,"		strbuf_insertstr((*header), 0, text);"
type_conversion,http.c,837,-,+,,23,	unsigned int width = 60;
type_conversion,http.c,843,-,+,,11,	for (i = 0; i < size; i += width) {
type_conversion,http.c,848,-,+,,20,		for (w = 0; (w < width) && (i + w < size); w++) {
type_conversion,http.c,852,-,+,,13,				       (ch >= 0x20) && (ch < 0x80)
type_conversion,http.c,853,-,+,,14,				       ? ch : '.');
type_conversion,http.c,886,-,+,,55,"		curl_dump_header(text, (unsigned char *)data, size, DO_FILTER);"
type_conversion,http.c,902,-,+,,55,"		curl_dump_header(text, (unsigned char *)data, size, NO_FILTER);"
type_conversion,http.c,949,-,+,,14,	long bits = 0;
type_conversion,http.c,979,-,+,,17,"		{ ""HTTP/1.1"", CURL_HTTP_VERSION_1_1 },"
type_conversion,http.c,983,-,+,,14,	for (i = 0; i < ARRAY_SIZE(choice); i++) {
type_conversion,http.c,1029,-,+,,15,		for (i = 0; i < ARRAY_SIZE(curl_deleg_levels); i++) {
type_conversion,http.c,1036,-,+,,7,		if (i == ARRAY_SIZE(curl_deleg_levels))
type_conversion,http.c,1058,-,+,,15,		for (i = 0; i < ARRAY_SIZE(sslversions); i++) {
type_conversion,http.c,1065,-,+,,7,		if (i == ARRAY_SIZE(sslversions))
type_conversion,http.c,1107,-,+,,29,	if (curl_low_speed_limit > 0 && curl_low_speed_time > 0) {
type_conversion,http.c,1178,-,+,,25,	if (curl_http_proxy && curl_http_proxy[0] == '\0') {
type_conversion,http.c,1290,-,+,,43,	if (curl_global_init(CURL_GLOBAL_ALL) != CURLE_OK)
type_conversion,http.c,1486,-,+,,6,	if (http_follow_config == HTTP_FOLLOW_ALWAYS)
type_conversion,http.c,1504,-,+,,6,	if (curlm_result != CURLM_OK &&
type_conversion,http.c,1505,-,+,,6,	    curlm_result != CURLM_CALL_MULTI_PERFORM) {
type_conversion,http.c,1573,-,+,,11,	} while (curlm_result == CURLM_CALL_MULTI_PERFORM);
type_conversion,http.c,1596,-,+,,24,			if (curl_timeout == 0) {
type_conversion,http.c,1598,-,+,,31,			} else if (curl_timeout == -1) {
type_conversion,http.c,1599,-,+,,30,				select_timeout.tv_sec  = 0;
type_conversion,http.c,1600,-,+,,30,				select_timeout.tv_usec = 50000;
type_conversion,http.c,1602,-,+,,46,				select_timeout.tv_sec  =  curl_timeout / 1000;
type_conversion,http.c,1603,-,+,,46,				select_timeout.tv_usec = (curl_timeout % 1000) * 1000;
type_conversion,http.c,1618,-,+,,33,			    (select_timeout.tv_sec > 0 ||
type_conversion,http.c,1619,-,+,,34,			     select_timeout.tv_usec > 50000)) {
type_conversion,http.c,1620,-,+,,30,				select_timeout.tv_sec  = 0;
type_conversion,http.c,1621,-,+,,30,				select_timeout.tv_usec = 50000;
type_conversion,http.c,1703,-,+,,23,	for (cp = ref; (ch = *cp) != 0; cp++)
type_conversion,http.c,1707,-,+,,23,"			strbuf_addch(&buf, *cp);"
type_conversion,http.c,1742,-,+,,6,	if (*result == CURLE_OK && http_code >= 300) {
type_conversion,http.c,1761,-,+,,6,	if (results->curl_result == CURLE_OK) {
type_conversion,http.c,1766,-,+,,13,	} else if (results->curl_result == CURLE_SSL_CERTPROBLEM) {
type_conversion,http.c,1776,-,+,,13,	} else if (results->curl_result == CURLE_SSL_PINNEDPUBKEYNOTMATCH) {
type_conversion,http.c,1781,-,+,,33,	else if (results->http_code == 401) {
type_conversion,http.c,1793,-,+,,26,				http_auth_methods &= results->auth_avail;
type_conversion,http.c,1799,-,+,,36,		if (results->http_connectcode == 407)
type_conversion,http.c,1863,-,+,,6,	if (*raw != '=')
type_conversion,http.c,1867,-,+,,35,	while (*raw && !isspace(*raw) && *raw != ';')
type_conversion,http.c,1868,-,+,,21,"		strbuf_addch(out, *raw++);"
type_conversion,http.c,1899,-,+,,7,		if (*p == ';') {
type_conversion,http.c,1911,-,+,,25,		while (isspace(*p) || *p == ';')
type_conversion,http.c,1950,-,+,,32,		for (; *s && (isalnum(*s) || *s == '_'); s++)
type_conversion,http.c,1951,-,+,,23,"			strbuf_addch(&tag, *s == '_' ? '-' : *s);"
type_conversion,http.c,1954,-,+,,16,		while (*s && *s != ':')
type_conversion,http.c,1996,-,+,,19,			if (buf->len > MAX_ACCEPT_LANGUAGE_HEADER_SIZE) {
type_conversion,http.c,1997,-,+,,24,"				strbuf_remove(buf, last_buf_len, buf->len - last_buf_len);"
type_conversion,http.c,2001,-,+,,19,			last_buf_len = buf->len;
type_conversion,http.c,2027,-,+,,17,		if (buf.len > 0)
type_conversion,http.c,2069,-,+,,15,			if (posn > 0)
type_conversion,http.c,2087,-,+,,6,	    http_follow_config == HTTP_FOLLOW_INITIAL)
type_conversion,http.c,2214,-,+,,34,"			if (ftruncate(fileno(result), 0) < 0) {"
type_conversion,http.c,2270,-,+,,37,	struct http_get_options options = {0};
type_conversion,http.c,2275,-,+,,21,	options.no_cache = 1;
type_conversion,http.c,2361,-,+,,37,	struct http_get_options options = {0};
type_conversion,http.c,2372,-,+,,21,	options.no_cache = 1;
type_conversion,http.c,2382,-,+,,8,		    (*data == '\n' || *data == '\0')) {
type_conversion,http.c,2423,-,+,,15,	ip.git_cmd = 1;
type_conversion,http.c,2432,-,+,,18,		ip.no_stdout = 1;
type_conversion,http.c,2472,-,+,,20,	off_t prev_posn = 0;
type_conversion,http.c,2476,-,+,,30,"	strbuf_init(&preq->tmpfile, 0);"
type_conversion,http.c,2500,-,+,,16,	if (prev_posn>0) {
type_conversion,http.c,2531,-,+,,7,		if (c != CURLE_OK)
type_conversion,http.c,2534,-,+,,26,		if (slot->http_code >= 300)
type_conversion,http.c,2540,-,+,,34,"					(char *) ptr + posn, size - posn);"
type_conversion,http.c,2541,-,+,,16,		if (retval < 0)
type_conversion,http.c,2542,-,+,,11,			return posn / eltsize;
type_conversion,http.c,2544,-,+,,11,	} while (posn < size);
type_conversion,http.c,2566,-,+,,22,	ssize_t prev_read = 0;
type_conversion,http.c,2567,-,+,,20,	off_t prev_posn = 0;
type_conversion,http.c,2571,-,+,,30,"	strbuf_init(&freq->tmpfile, 0);"
type_conversion,http.c,2595,-,+,,11,			*dir = 0;
type_conversion,http.c,2596,-,+,,29,"			mkdir(freq->tmpfile.buf, 0777);"
type_conversion,http.c,2597,-,+,,11,			*dir = '/';
type_conversion,http.c,2623,-,+,,18,			if (prev_read>0) {
type_conversion,http.c,2625,-,+,,12,"						     1,"
type_conversion,http.c,2626,-,+,,12,"						     prev_read,"
type_conversion,http.c,2627,-,+,,21,						     freq) == prev_read) {
type_conversion,http.c,2630,-,+,,18,					prev_read = -1;
type_conversion,http.c,2633,-,+,,24,		} while (prev_read > 0);
type_conversion,http.c,2643,-,+,,19,	if (prev_read == -1) {
type_conversion,http.c,2647,-,+,,17,		if (prev_posn>0) {
type_conversion,http.c,2648,-,+,,16,			prev_posn = 0;
type_conversion,http.c,2649,-,+,,27,"			lseek(freq->localfile, 0, SEEK_SET);"
type_conversion,http.c,2650,-,+,,35,"			if (ftruncate(freq->localfile, 0) < 0) {"
type_conversion,http.c,2672,-,+,,16,	if (prev_posn>0) {
type_conversion,http.c,2708,-,+,,25,	if (freq->http_code == 416) {
type_conversion,http.c,2710,-,+,,13,	} else if (freq->curl_result != CURLE_OK) {
type_conversion,http.c,2712,-,+,,22,			if (st.st_size == 0)
type_conversion,http.h,88,-,+,,14,		(result == CURLE_FILE_COULDNT_READ_FILE) ||
type_conversion,http.h,90,-,+,,29,		(code == 404 && result == CURLE_HTTP_RETURNED_ERROR) ||
type_conversion,http.h,92,-,+,,29,		(code == 550 && result == CURLE_FTP_COULDNT_RETR_FILE)
type_conversion,ident.c,68,-,+,,35,"	for (src = get_gecos(w); *src && *src != ','; src++) {"
type_conversion,ident.c,69,-,+,,12,		int ch = *src;
type_conversion,ident.c,205,-,+,,10,	return  c <= 32  ||
type_conversion,ident.c,206,-,+,,3,"		c == ',' ||"
type_conversion,ident.c,207,-,+,,3,		c == ':' ||
type_conversion,ident.c,208,-,+,,3,		c == ';' ||
type_conversion,ident.c,209,-,+,,3,		c == '<' ||
type_conversion,ident.c,210,-,+,,3,		c == '>' ||
type_conversion,ident.c,211,-,+,,3,"		c == '""' ||"
type_conversion,ident.c,212,-,+,,3,		c == '\\' ||
type_conversion,ident.c,213,-,+,,3,		c == '\'';
type_conversion,ident.c,219,-,+,,13,		if (!crud(*str))
type_conversion,ident.c,235,-,+,,14,	while ((c = *src) != 0) {
type_conversion,ident.c,243,-,+,,15,	while (len > 0) {
type_conversion,ident.c,244,-,+,,15,		c = src[len-1];
type_conversion,ident.c,257,-,+,,11,	for (i = 0; i < len; i++) {
type_conversion,ident.c,258,-,+,,7,		c = *src++;
type_conversion,ident.c,259,-,+,,11,		switch (c) {
type_conversion,ident.c,263,-,+,,24,		sb->buf[sb->len++] = c;
type_conversion,ident.c,265,-,+,,21,	sb->buf[sb->len] = '\0';
type_conversion,ident.c,285,-,+,,7,		if (*cp == '<') {
type_conversion,ident.c,303,-,+,,7,		if (*cp == '>') {
type_conversion,ident.c,321,-,+,,28,	for (cp = line + len - 1; *cp != '>'; cp--)
type_conversion,ident.c,335,-,+,,27,	if (line + len <= cp || (*cp != '+' && *cp != '-'))
type_conversion,ident.c,364,-,+,,39,"	if (split_ident_line(&ident, person, len))"
type_conversion,ident.c,365,-,+,,10,		return 0;
type_conversion,ident.c,368,-,+,,12,	maillen = ident.mail_end - ident.mail_begin;
type_conversion,ident.c,370,-,+,,12,	namelen = ident.name_end - ident.name_begin;
type_conversion,ident.c,379,-,+,,22,"		strbuf_splice(buf, ident.name_begin - buf->buf,"
type_conversion,ident.c,380,-,+,,46,"			      ident.mail_end - ident.name_begin + 1,"
type_conversion,ident.c,386,-,+,,19,		return newlen - (ident.mail_end - ident.name_begin);
type_conversion,ident.c,389,-,+,,9,	return 0;
type_conversion,ident.c,395,-,+,,22,	size_t buf_offset = 0;
type_conversion,ident.c,406,-,+,,17,		if (!*line || *line == '\n')
type_conversion,ident.c,409,-,+,,12,		for (i = 0; header[i]; i++)
type_conversion,ident.c,413,-,+,,19,				buf_offset += endp - line;
type_conversion,ident.c,414,-,+,,46,"				buf_offset += rewrite_ident_line(person, endp - person, buf, mailmap);"
type_conversion,ident.c,419,-,+,,17,"			buf_offset = strchrnul(line, '\n') - buf->buf;"
type_conversion,ident.c,420,-,+,,8,			if (buf->buf[buf_offset] == '\n')
type_conversion,ident.c,462,-,+,,10,	index = (index + 1) % ARRAY_SIZE(ident_pool);
type_conversion,ident.c,465,-,+,,7,		if (whose_ident == WANT_AUTHOR_IDENT && git_author_email.len)
type_conversion,ident.c,467,-,+,,12,		else if (whose_ident == WANT_COMMITTER_IDENT && git_committer_email.len)
type_conversion,ident.c,486,-,+,,8,			if (whose_ident == WANT_AUTHOR_IDENT && git_author_name.len)
type_conversion,ident.c,488,-,+,,13,			else if (whose_ident == WANT_COMMITTER_IDENT &&
type_conversion,ident.c,708,-,+,,14,	int a_len = a_end - a_begin;
type_conversion,ident.c,709,-,+,,14,	int b_len = b_end - b_begin;
type_conversion,ident.c,713,-,+,,33,"	cmp = memcmp(a_begin, b_begin, min);"
type_conversion,imap-send.c,208,-,+,,6,	if (pattern[0] == '*' && pattern[1] == '.') {
type_conversion,imap-send.c,245,-,+,,68,"	if ((len = X509_NAME_get_text_by_NID(subj, NID_commonName, cname, sizeof(cname))) < 0)"
type_conversion,imap-send.c,338,-,+,,7,"		n = SSL_read(sock->ssl, buf, len);"
type_conversion,imap-send.c,341,-,+,,31,"		n = xread(sock->fd[0], buf, len);"
type_conversion,imap-send.c,342,-,+,,11,	if (n <= 0) {
type_conversion,imap-send.c,343,-,+,,31,"		socket_perror(""read"", sock, n);"
type_conversion,imap-send.c,348,-,+,,9,	return n;
type_conversion,imap-send.c,359,-,+,,39,"		n = write_in_full(sock->fd[1], buf, len);"
type_conversion,imap-send.c,400,-,+,,38,"					memmove(b->buf, b->buf + start, n);"
type_conversion,imap-send.c,407,-,+,,24,					 sizeof(b->buf) - b->bytes);
type_conversion,imap-send.c,415,-,+,,7,		if (b->buf[b->offset] == '\r') {
type_conversion,imap-send.c,417,-,+,,8,			if (b->buf[b->offset + 1] == '\n') {
type_conversion,imap-send.c,418,-,+,,25,				b->buf[b->offset] = 0;  /* terminate the string */
type_conversion,imap-send.c,468,-,+,,6,"	if (**s == '""') {"
type_conversion,imap-send.c,479,-,+,,14,			*(*s)++ = 0;
type_conversion,imap-send.c,523,-,+,,45,"	if (socket_write(&imap->buf.sock, buf.buf, buf.len) != buf.len) {"
type_conversion,imap-send.c,597,-,+,,16,		if (level && *s == ')') {
type_conversion,imap-send.c,601,-,+,,7,		if (*s == '(') {
type_conversion,imap-send.c,606,-,+,,14,"		} else if (*s == '""') {"
type_conversion,imap-send.c,609,-,+,,11,"			for (; *s != '""'; s++)"
type_conversion,imap-send.c,616,-,+,,18,				if (level && *s == ')')
type_conversion,imap-send.c,644,-,+,,15,		for (i = 0; i < ARRAY_SIZE(cap_list); i++)
type_conversion,imap-send.c,646,-,+,,19,				imap->caps |= 1 << i;
type_conversion,imap-send.c,656,-,+,,12,	if (!s || *s != '[')
type_conversion,imap-send.c,663,-,+,,9,	*p++ = 0;
type_conversion,imap-send.c,714,-,+,,7,		if (*arg == '*') {
type_conversion,imap-send.c,751,-,+,,14,		} else if (*arg == '+') {
type_conversion,imap-send.c,839,-,+,,13,	return b < 10 ? '0' + b : 'a' + (b - 10);
type_conversion,imap-send.c,854,-,+,,16,	encoded_len = strlen(challenge_64);
type_conversion,imap-send.c,855,-,+,,22,	challenge = xmalloc(encoded_len);
type_conversion,imap-send.c,860,-,+,,29,"	if (!HMAC(EVP_md5(), pass, strlen(pass), (unsigned char *)challenge, decoded_len, hash, NULL))"
type_conversion,imap-send.c,863,-,+,,12,	hex[32] = 0;
type_conversion,imap-send.c,865,-,+,,25,		hex[2 * i] = hexchar((hash[i] >> 4) & 0xf);
type_conversion,imap-send.c,866,-,+,,28,		hex[2 * i + 1] = hexchar(hash[i] & 0xf);
type_conversion,imap-send.c,871,-,+,,13,	resp_len = strlen(response);
type_conversion,imap-send.c,900,-,+,,53,"	ret = socket_write(&ctx->imap->buf.sock, response, strlen(response));"
type_conversion,imap-send.c,901,-,+,,6,	if (ret != strlen(response))
type_conversion,imap-send.c,950,-,+,,22,		tunnel.use_shell = 1;
type_conversion,imap-send.c,989,-,+,,9,"				    sizeof(addr), NULL, 0, NI_NUMERICHOST);"
type_conversion,imap-send.c,1051,-,+,,14,	if (!arg || *arg != '*' || (arg = next_arg(&rsp)) == NULL) {
type_conversion,imap-send.c,1167,-,+,,15,"	for (i = j = 0, lastc = '\0'; i < msg->len; i++) {"
type_conversion,imap-send.c,1168,-,+,,7,		if (msg->buf[i] == '\n' && lastc != '\r')
type_conversion,imap-send.c,1180,-,+,,15,"	for (i = j = 0, lastc = '\0'; i < msg->len; i++) {"
type_conversion,imap-send.c,1181,-,+,,7,		if (msg->buf[i] == '\n' && lastc != '\r')
type_conversion,imap-send.c,1182,-,+,,19,			new_msg[j++] = '\r';
type_conversion,imap-send.c,1185,-,+,,37,"	strbuf_attach(msg, new_msg, j, j + 1);"
type_conversion,imap-send.c,1202,-,+,,12,	cb.dlen = msg->len;
type_conversion,imap-send.c,1228,-,+,,47,"	strbuf_add(&buf, msg->buf, body - msg->buf - 1);"
type_conversion,imap-send.c,1273,-,+,,6,	if (*ofs >= all_msgs->len)
type_conversion,imap-send.c,1277,-,+,,24,	len = all_msgs->len - *ofs;
type_conversion,imap-send.c,1279,-,+,,12,"	if (len < 5 || !starts_with(data, ""From ""))"
type_conversion,imap-send.c,1285,-,+,,10,		len -= p - data;
type_conversion,imap-send.c,1292,-,+,,9,		len = &p[1] - data;
type_conversion,imap-send.c,1357,-,+,,22,		unsigned percent = n * 100 / total;
type_conversion,imap-send.c,1384,-,+,,43,	if (curl_global_init(CURL_GLOBAL_ALL) != CURLE_OK)
type_conversion,imap-send.c,1398,-,+,,39,	if (!path.len || path.buf[path.len - 1] != '/')
type_conversion,imap-send.c,1445,-,+,,40,"	struct buffer msgbuf = { STRBUF_INIT, 0 };"
type_conversion,imap-send.c,1455,-,+,,22,		unsigned percent = n * 100 / total;
type_conversion,imap-send.c,1460,-,+,,14,		prev_len = msgbuf.buf.len;
type_conversion,imap-send.c,1472,-,+,,6,		if(res != CURLE_OK) {
type_conversion,imap-send.c,1486,-,+,,7,		if (res == CURLE_OK)
type_conversion,imap-send.c,1488,-,+,,12,		else if (res == CURLE_LOGIN_DENIED)
type_conversion,imap-send.c,1494,-,+,,9,	return res != CURLE_OK;
type_conversion,imap-send.c,1540,-,+,,32,"	if (strbuf_read(&all_msgs, 0, 0) < 0) {"
type_conversion,imap-send.c,1545,-,+,,22,	if (all_msgs.len == 0) {
type_conversion,index-pack.c,228,-,+,,6,	if (type != OBJ_ANY && obj->type != type)
type_conversion,index-pack.c,240,-,+,,10,		return 0;
type_conversion,index-pack.c,243,-,+,,10,		return 0;
type_conversion,index-pack.c,251,-,+,,15,		if (type != obj->type)
type_conversion,index-pack.c,254,-,+,,18,"			    type_name(obj->type), type_name(type));"
type_conversion,index-pack.c,256,-,+,,10,		return 1;
type_conversion,index-pack.c,259,-,+,,9,	return 0;
type_conversion,index-pack.c,264,-,+,,32,"	unsigned i, max, foreign_nr = 0;"
type_conversion,index-pack.c,269,-,+,,60,"		progress = start_delayed_progress(_(""Checking objects""), max);"
type_conversion,index-pack.c,271,-,+,,11,	for (i = 0; i < max; i++) {
type_conversion,index-pack.c,273,-,+,,34,"		display_progress(progress, i + 1);"
type_conversion,index-pack.c,286,-,+,,42,"			write_or_die(output_fd, input_buffer, input_offset);"
type_conversion,index-pack.c,287,-,+,,54,"		the_hash_algo->update_fn(&input_ctx, input_buffer, input_offset);"
type_conversion,index-pack.c,288,-,+,,54,"		memmove(input_buffer, input_buffer + input_offset, input_len);"
type_conversion,index-pack.c,289,-,+,,18,		input_offset = 0;
type_conversion,index-pack.c,299,-,+,,6,	if (min <= input_len)
type_conversion,index-pack.c,301,-,+,,6,	if (min > sizeof(input_buffer))
type_conversion,index-pack.c,304,-,+,,10,"		       min),"
type_conversion,index-pack.c,309,-,+,,28,				sizeof(input_buffer) - input_len);
type_conversion,index-pack.c,310,-,+,,14,		if (ret <= 0) {
type_conversion,index-pack.c,317,-,+,,50,"			display_throughput(progress, consumed_bytes + input_len);"
type_conversion,index-pack.c,318,-,+,,23,	} while (input_len < min);
type_conversion,index-pack.c,324,-,+,,6,	if (bytes > input_len)
type_conversion,index-pack.c,326,-,+,,22,"	input_crc32 = crc32(input_crc32, input_buffer + input_offset, bytes);"
type_conversion,index-pack.c,327,-,+,,15,	input_len -= bytes;
type_conversion,index-pack.c,328,-,+,,18,	input_offset += bytes;
type_conversion,index-pack.c,333,-,+,,20,	consumed_bytes += bytes;
type_conversion,index-pack.c,366,-,+,,33,	struct pack_header *hdr = fill(sizeof(struct pack_header));
type_conversion,index-pack.c,376,-,+,,6,	use(sizeof(struct pack_header));
type_conversion,index-pack.c,449,-,+,,10,	return (type == OBJ_REF_DELTA || type == OBJ_OFS_DELTA);
type_conversion,index-pack.c,466,-,+,,37,"		the_hash_algo->update_fn(&c, hdr, hdrlen);"
type_conversion,index-pack.c,469,-,+,,6,	if (type == OBJ_BLOB && size > big_file_threshold)
type_conversion,index-pack.c,482,-,+,,21,		stream.avail_in = input_len;
type_conversion,index-pack.c,484,-,+,,7,		use(input_len - stream.avail_in);
type_conversion,index-pack.c,486,-,+,,43,"			the_hash_algo->update_fn(&c, last_out, stream.next_out - last_out);"
type_conversion,index-pack.c,512,-,+,,22,"	input_crc32 = crc32(0, NULL, 0);"
type_conversion,index-pack.c,515,-,+,,6,	c = *p;
type_conversion,index-pack.c,517,-,+,,25,	obj->type = (c >> 4) & 7;
type_conversion,index-pack.c,518,-,+,,14,	size = (c & 15);
type_conversion,index-pack.c,519,-,+,,10,	shift = 4;
type_conversion,index-pack.c,520,-,+,,13,	while (c & 0x80) {
type_conversion,index-pack.c,522,-,+,,7,		c = *p;
type_conversion,index-pack.c,524,-,+,,16,		size += (c & 0x7f) << shift;
type_conversion,index-pack.c,525,-,+,,12,		shift += 7;
type_conversion,index-pack.c,529,-,+,,10,	switch (obj->type) {
type_conversion,index-pack.c,530,-,+,,7,	case OBJ_REF_DELTA:
type_conversion,index-pack.c,534,-,+,,7,	case OBJ_OFS_DELTA:
type_conversion,index-pack.c,536,-,+,,7,		c = *p;
type_conversion,index-pack.c,538,-,+,,21,		base_offset = c & 127;
type_conversion,index-pack.c,539,-,+,,14,		while (c & 128) {
type_conversion,index-pack.c,540,-,+,,19,			base_offset += 1;
type_conversion,index-pack.c,544,-,+,,8,			c = *p;
type_conversion,index-pack.c,546,-,+,,18,			base_offset = (base_offset << 7) + (c & 127);
type_conversion,index-pack.c,549,-,+,,22,		if (*ofs_offset <= 0 || *ofs_offset >= obj->idx.offset)
type_conversion,index-pack.c,552,-,+,,7,	case OBJ_COMMIT:
type_conversion,index-pack.c,553,-,+,,7,	case OBJ_TREE:
type_conversion,index-pack.c,554,-,+,,7,	case OBJ_BLOB:
type_conversion,index-pack.c,555,-,+,,7,	case OBJ_TAG:
type_conversion,index-pack.c,558,-,+,,60,"		bad_object(obj->idx.offset, _(""unknown object type %d""), obj->type);"
type_conversion,index-pack.c,560,-,+,,18,	obj->hdr_size = consumed_bytes - obj->idx.offset;
type_conversion,index-pack.c,571,-,+,,35,	off_t from = obj[0].idx.offset + obj[0].hdr_size;
type_conversion,index-pack.c,577,-,+,,28,	data = xmallocz(consume ? 64*1024 : obj->size);
type_conversion,index-pack.c,578,-,+,,25,	inbuf = xmalloc((len < 64*1024) ? (int)len : 64*1024);
type_conversion,index-pack.c,583,-,+,,31,	stream.avail_out = consume ? 64*1024 : obj->size;
type_conversion,index-pack.c,586,-,+,,22,		ssize_t n = (len < 64*1024) ? (ssize_t)len : 64*1024;
type_conversion,index-pack.c,587,-,+,,49,"		n = xpread(get_thread_data()->pack_fd, inbuf, n, from);"
type_conversion,index-pack.c,588,-,+,,11,		if (n < 0)
type_conversion,index-pack.c,593,-,+,,11,"			       len),"
type_conversion,index-pack.c,598,-,+,,21,		stream.avail_in = n;
type_conversion,index-pack.c,604,-,+,,23,"				if (consume(data, stream.next_out - data, cb_data)) {"
type_conversion,index-pack.c,610,-,+,,24,				stream.avail_out = 64*1024;
type_conversion,index-pack.c,636,-,+,,12,	int cmp = type1 - type2;
type_conversion,index-pack.c,692,-,+,,12,	int cmp = type1 - type2;
type_conversion,index-pack.c,761,-,+,,14,		if (len == 0)
type_conversion,index-pack.c,764,-,+,,13,		if (len < 0)
type_conversion,index-pack.c,767,-,+,,30,"		if (memcmp(buf, data->buf, len))"
type_conversion,index-pack.c,770,-,+,,11,		size -= len;
type_conversion,index-pack.c,782,-,+,,43,	if (entry->size <= big_file_threshold || entry->type != OBJ_BLOB)
type_conversion,index-pack.c,791,-,+,,29,	if (size != entry->size || type != entry->type)
type_conversion,index-pack.c,829,-,+,,7,		if (has_type < 0)
type_conversion,index-pack.c,831,-,+,,7,		if (has_type != type || has_size != size)
type_conversion,index-pack.c,840,-,+,,27,		if (size != has_size || type != has_type ||
type_conversion,index-pack.c,848,-,+,,7,		if (type == OBJ_BLOB) {
type_conversion,index-pack.c,872,-,+,,36,"				die(_(""invalid %s""), type_name(type));"
type_conversion,index-pack.c,879,-,+,,8,			if (obj->type == OBJ_TREE) {
type_conversion,index-pack.c,882,-,+,,19,				obj->parsed = 0;
type_conversion,index-pack.c,884,-,+,,8,			if (obj->type == OBJ_COMMIT) {
type_conversion,index-pack.c,950,-,+,,35,"	struct base_data *base = xcalloc(1, sizeof(struct base_data));"
type_conversion,index-pack.c,970,-,+,,11,		int i = delta_obj - objects;
type_conversion,index-pack.c,971,-,+,,11,		int j = base->obj - objects;
type_conversion,index-pack.c,972,-,+,,55,		obj_stat[i].delta_depth = obj_stat[j].delta_depth + 1;
type_conversion,index-pack.c,1030,-,+,,30,"		display_progress(progress, nr_resolved_deltas);"
type_conversion,index-pack.c,1057,-,+,,9,				if (child_obj->real_type != OBJ_REF_DELTA)
type_conversion,index-pack.c,1173,-,+,,5,				nr_objects);
type_conversion,index-pack.c,1180,-,+,,7,		if (obj->type == OBJ_OFS_DELTA) {
type_conversion,index-pack.c,1184,-,+,,14,		} else if (obj->type == OBJ_REF_DELTA) {
type_conversion,index-pack.c,1191,-,+,,21,			obj->real_type = OBJ_BAD;
type_conversion,index-pack.c,1197,-,+,,30,"		display_progress(progress, i+1);"
type_conversion,index-pack.c,1215,-,+,,20,"			lseek(input_fd, 0, SEEK_CUR) - input_len != st.st_size)"
type_conversion,index-pack.c,1220,-,+,,7,		if (obj->real_type != OBJ_BAD)
type_conversion,index-pack.c,1252,-,+,,8,					  nr_ref_deltas + nr_ofs_deltas);
type_conversion,index-pack.c,1255,-,+,,46,	base_cache_limit = delta_base_cache_limit * nr_threads;
type_conversion,index-pack.c,1300,-,+,,10,		       nr_unresolved * sizeof(*objects));
type_conversion,index-pack.c,1305,-,+,,10,"				     nr_objects - nr_objects_initial),"
type_conversion,index-pack.c,1309,-,+,,57,"		finalize_hashfile(f, tail_hash, FSYNC_COMPONENT_PACK, 0);"
type_conversion,index-pack.c,1312,-,+,,18,"					 curr_pack, nr_objects,"
type_conversion,index-pack.c,1313,-,+,,18,"					 read_hash, consumed_bytes-the_hash_algo->rawsz);"
type_conversion,index-pack.c,1321,-,+,,10,"		       nr_ofs_deltas + nr_ref_deltas - nr_resolved_deltas),"
type_conversion,index-pack.c,1333,-,+,,20,	stream.avail_in = size;
type_conversion,index-pack.c,1339,-,+,,24,"		hashwrite(f, outbuf, sizeof(outbuf) - stream.avail_out);"
type_conversion,index-pack.c,1344,-,+,,9,	size = stream.total_out;
type_conversion,index-pack.c,1346,-,+,,9,	return size;
type_conversion,index-pack.c,1357,-,+,,20,	unsigned char c = (type << 4) | (s & 15);
type_conversion,index-pack.c,1360,-,+,,17,		header[n++] = c | 0x80;
type_conversion,index-pack.c,1361,-,+,,11,		c = s & 0x7f;
type_conversion,index-pack.c,1366,-,+,,23,"	hashwrite(f, header, n);"
type_conversion,index-pack.c,1368,-,+,,20,	obj[0].hdr_size = n;
type_conversion,index-pack.c,1369,-,+,,16,	obj[0].type = type;
type_conversion,index-pack.c,1370,-,+,,21,	obj[0].real_type = type;
type_conversion,index-pack.c,1371,-,+,,42,	obj[1].idx.offset = obj[0].idx.offset + n;
type_conversion,index-pack.c,1372,-,+,,48,"	obj[1].idx.offset += write_compressed(f, buf, size);"
type_conversion,index-pack.c,1420,-,+,,23,"					   to_fetch.oid, to_fetch.nr);"
type_conversion,index-pack.c,1430,-,+,,7,		if (objects[d->obj_no].real_type != OBJ_REF_DELTA)
type_conversion,index-pack.c,1450,-,+,,30,"		display_progress(progress, nr_resolved_deltas);"
type_conversion,index-pack.c,1460,-,+,,22,	    pack_name[len - 1] != '.')
type_conversion,index-pack.c,1475,-,+,,16,	int msg_len = strlen(msg);
type_conversion,index-pack.c,1489,-,+,,26,"			write_or_die(fd, msg, msg_len);"
type_conversion,index-pack.c,1490,-,+,,27,"			write_or_die(fd, ""\n"", 1);"
type_conversion,index-pack.c,1513,-,+,,22,"		chmod(*final_name, 0444);"
type_conversion,index-pack.c,1568,-,+,,49,"		write_in_full(1, input_buffer + input_offset, input_len);"
type_conversion,index-pack.c,1582,-,+,,19,"		opts->version = git_config_int(k, v, ctx->kvi);"
type_conversion,index-pack.c,1583,-,+,,23,		if (opts->version > 2)
type_conversion,index-pack.c,1629,-,+,,11,	for (i = 0; i < p->num_objects; i++) {
type_conversion,index-pack.c,1633,-,+,,15,		off = off & 0x7fffffff;
type_conversion,index-pack.c,1634,-,+,,39,"		check_pack_index_ptr(p, &idx2[off * 2]);"
type_conversion,index-pack.c,1635,-,+,,18,		if (idx2[off * 2])
type_conversion,index-pack.c,1659,-,+,,18,	opts->version = p->index_version;
type_conversion,index-pack.c,1661,-,+,,23,	if (opts->version == 2)
type_conversion,index-pack.c,1687,-,+,,46,			chain_histogram[obj_stat[i].delta_depth - 1]++;
type_conversion,index-pack.c,1692,-,+,,20,"		       type_name(obj->real_type), (uintmax_t)obj->size,"
type_conversion,index-pack.c,1706,-,+,,9,"			     baseobjects),"
type_conversion,index-pack.c,1708,-,+,,14,	for (i = 0; i < deepest_delta; i++) {
type_conversion,index-pack.c,1733,-,+,,24,"	unsigned foreign_nr = 1;	/* zero is a ""good"" value, assume bad */"
type_conversion,index-pack.c,1765,-,+,,7,		if (*arg == '-') {
type_conversion,index-pack.c,1795,-,+,,18,"				nr_threads = strtoul(arg+10, &end, 0);"
type_conversion,index-pack.c,1809,-,+,,9,"				if (*c != ',')"
type_conversion,index-pack.c,1814,-,+,,17,				input_len = sizeof(*hdr);
type_conversion,index-pack.c,1831,-,+,,20,"				opts.version = strtoul(arg + 16, &c, 10);"
type_conversion,index-pack.c,1832,-,+,,24,				if (opts.version > 2)
type_conversion,index-pack.c,1834,-,+,,9,"				if (*c == ',')"
type_conversion,index-pack.c,1835,-,+,,25,"					opts.off32_limit = strtoul(c+1, &c, 0);"
type_conversion,index-pack.c,1916,-,+,,26,"		write_in_full(2, ""\0"", 1);"
type_conversion,index-pack.c,1933,-,+,,7,"						nr_objects, pack_hash,"
type_conversion,init-db.c,54,-,+,,64,"	*((int *) opt->value) = (arg) ? git_config_perm(""arg"", arg) : PERM_GROUP;"
type_conversion,init-db.c,79,-,+,,23,	unsigned int flags = 0;
type_conversion,init-db.c,94,-,+,,4,"			PARSE_OPT_OPTARG | PARSE_OPT_NONEG, shared_callback, 0},"
type_conversion,init-db.c,145,-,+,,24,"				if (mkdir(argv[0], 0777) < 0)"
type_conversion,init-db.c,224,-,+,,34,"			char *rel = xstrndup(git_dir, git_dir_parent - git_dir);"
type_conversion,interpret-trailers.c,114,-,+,,54,"		strbuf_add(&filename_template, file, tail - file + 1);"
type_conversion,interpret-trailers.c,117,-,+,,61,"	trailers_tempfile = xmks_tempfile_m(filename_template.buf, st.st_mode);"
type_conversion,interpret-trailers.c,129,-,+,,34,"		if (strbuf_read_file(sb, file, 0) < 0)"
type_conversion,interpret-trailers.c,132,-,+,,38,"		if (strbuf_read(sb, fileno(stdin), 0) < 0)"
type_conversion,interpret-trailers.c,158,-,+,,18,"		fwrite(sb.buf, 1, trailer_block_start(info), outfile);"
type_conversion,interpret-trailers.c,176,-,+,,28,"	fwrite(trailer_block.buf, 1, trailer_block.len, outfile);"
type_conversion,interpret-trailers.c,181,-,+,,44,"		fwrite(sb.buf + trailer_block_end(info), 1, sb.len - trailer_block_end(info), outfile);"
type_conversion,ipc-unix-socket.c,26,-,+,,25,	options.wait_if_busy = 0;
type_conversion,ipc-unix-socket.c,27,-,+,,30,	options.wait_if_not_found = 0;
type_conversion,ipc-unix-socket.c,100,-,+,,38,"		int fd = unix_stream_connect(path, options->uds_disallow_chdir);"
type_conversion,ipc-unix-socket.c,173,-,+,,6,	if (state == IPC_STATE__LISTENING) {
type_conversion,ipc-unix-socket.c,174,-,+,,29,"		(*p_connection) = xcalloc(1, sizeof(struct ipc_client_connection));"
type_conversion,ipc-unix-socket.c,199,-,+,,24,"	strbuf_setlen(answer, 0);"
type_conversion,ipc-unix-socket.c,212,-,+,,71,		    PACKET_READ_GENTLE_ON_EOF | PACKET_READ_GENTLE_ON_READ_ERROR) < 0) {
type_conversion,ipc-unix-socket.c,233,-,+,,6,	if (state != IPC_STATE__LISTENING)
type_conversion,ipc-unix-socket.c,432,-,+,,6,	if (reply_data->magic != MAGIC_SERVER_REPLY_DATA)
type_conversion,ipc-unix-socket.c,468,-,+,,25,"		result = poll(pollfd, 1, MY_WAIT_POLL_TIMEOUT_MS);"
type_conversion,ipc-unix-socket.c,493,-,+,,7,		if (pollfd[0].revents & POLLHUP)
type_conversion,ipc-unix-socket.c,496,-,+,,7,		if (pollfd[0].revents & POLLIN)
type_conversion,ipc-unix-socket.c,653,-,+,,25,"		result = poll(pollfd, 2, MY_ACCEPT_POLL_TIMEOUT_MS);"
type_conversion,ipc-unix-socket.c,680,-,+,,7,		if (pollfd[0].revents & POLLIN) {
type_conversion,ipc-unix-socket.c,685,-,+,,7,		if (pollfd[1].revents & POLLIN) {
type_conversion,ipc-unix-socket.c,787,-,+,,29,	uslg_opts.disallow_chdir = ipc_opts->uds_disallow_chdir;
type_conversion,ipc-unix-socket.c,789,-,+,,41,"	ret = unix_ss_create(path, &uslg_opts, -1, &server_socket);"
type_conversion,ipc-unix-socket.c,867,-,+,,24,"	server_data = xcalloc(1, sizeof(*server_data));"
type_conversion,ipc-unix-socket.c,871,-,+,,38,"	strbuf_init(&server_data->buf_path, 0);"
type_conversion,ipc-unix-socket.c,884,-,+,,11,"		xcalloc(1, sizeof(*server_data->accept_thread));"
type_conversion,ipc-unix-socket.c,898,-,+,,17,"		wtd = xcalloc(1, sizeof(*wtd));"
type_conversion,ipc-unix-socket.c,944,-,+,,63,"	if (write(server_data->accept_thread->fd_send_shutdown, ""Q"", 1) < 0)"
type_conversion,iter.c,58,-,+,,7,		if (ref->value_type == REFTABLE_REF_VAL2 &&
type_conversion,iter.c,65,-,+,,7,		if (ref->value_type == REFTABLE_REF_VAL1 &&
type_conversion,iter.c,116,-,+,,10,		return REFTABLE_FORMAT_ERROR;
type_conversion,iter.c,158,-,+,,55,"	struct indexed_table_ref_iter *itr = reftable_calloc(1, sizeof(*itr));"
type_conversion,iter.c,163,-,+,,29,"	strbuf_add(&itr->oid, oid, oid_len);"
type_conversion,iterator.c,33,-,+,,16,	iter->flags = 0;
type_conversion,iterator.c,72,-,+,,44,"	struct empty_ref_iterator *iter = xcalloc(1, sizeof(*iter));"
type_conversion,iterator.c,129,-,+,,21,				       NULL) == REF_WORKTREE_SHARED)
type_conversion,iterator.c,178,-,+,,7,		if (selection == ITER_SELECT_DONE) {
type_conversion,iterator.c,180,-,+,,14,		} else if (selection == ITER_SELECT_ERROR) {
type_conversion,iterator.c,185,-,+,,8,		if ((selection & ITER_CURRENT_SELECTION_MASK) == 0) {
type_conversion,iterator.c,193,-,+,,7,		if (selection & ITER_SKIP_SECONDARY) {
type_conversion,iterator.c,201,-,+,,7,		if (selection & ITER_YIELD_CURRENT) {
type_conversion,iterator.c,254,-,+,,44,"	struct merge_ref_iterator *iter = xcalloc(1, sizeof(*iter));"
type_conversion,iterator.c,331,-,+,,7,		if (*refname != *prefix)
type_conversion,iterator.c,332,-,+,,12,			return ((unsigned char)*refname < (unsigned char)*prefix) ? -1 : +1;
type_conversion,iterator.c,373,-,+,,40,			if (strlen(iter->iter0->refname) <= iter->trim)
type_conversion,iterator.c,451,-,+,,44,"		retval = fn(r, iter->refname, iter->oid, iter->flags, cb_data);"
type_conversion,json-writer.c,24,-,+,,14,	while ((c = *in++) != '\0') {
type_conversion,json-writer.c,25,-,+,,7,"		if (c == '""')"
type_conversion,json-writer.c,27,-,+,,12,		else if (c == '\\')
type_conversion,json-writer.c,29,-,+,,12,		else if (c == '\n')
type_conversion,json-writer.c,31,-,+,,12,		else if (c == '\r')
type_conversion,json-writer.c,33,-,+,,12,		else if (c == '\t')
type_conversion,json-writer.c,35,-,+,,12,		else if (c == '\f')
type_conversion,json-writer.c,37,-,+,,12,		else if (c == '\b')
type_conversion,json-writer.c,39,-,+,,12,		else if (c < 0x20)
type_conversion,json-writer.c,40,-,+,,32,"			strbuf_addf(out, ""\\u%04x"", c);"
type_conversion,json-writer.c,42,-,+,,22,"			strbuf_addch(out, c);"
type_conversion,json-writer.c,51,-,+,,14,	for (k = 0; k < jw->open_stack.len; k++)
type_conversion,json-writer.c,61,-,+,,15,	jw->pretty = pretty;
type_conversion,json-writer.c,63,-,+,,26,"	strbuf_addch(&jw->json, ch_open);"
type_conversion,json-writer.c,65,-,+,,32,"	strbuf_addch(&jw->open_stack, ch_open);"
type_conversion,json-writer.c,66,-,+,,19,	jw->need_comma = 0;
type_conversion,json-writer.c,76,-,+,,46,	if (jw->open_stack.buf[jw->open_stack.len - 1] != '{')
type_conversion,json-writer.c,87,-,+,,46,	if (jw->open_stack.buf[jw->open_stack.len - 1] != '[')
type_conversion,json-writer.c,99,-,+,,20,		jw->need_comma = 1;
type_conversion,json-writer.c,155,-,+,,12,"	begin(jw, '{', pretty);"
type_conversion,json-writer.c,210,-,+,,14,	for (k = 0; k < jw->json.len; k++) {
type_conversion,json-writer.c,212,-,+,,20,"		strbuf_addch(sb, ch);"
type_conversion,json-writer.c,213,-,+,,7,		if (ch == '\n')
type_conversion,json-writer.c,214,-,+,,29,"			strbuf_addchars(sb, ' ', indent);"
type_conversion,json-writer.c,225,-,+,,14,	for (k = 0; k < jw->json.len; k++) {
type_conversion,json-writer.c,227,-,+,,17,		if (eat_it && ch == ' ')
type_conversion,json-writer.c,229,-,+,,7,		if (ch == '\n') {
type_conversion,json-writer.c,234,-,+,,20,"		strbuf_addch(sb, ch);"
type_conversion,json-writer.c,256,-,+,,52,"		increase_indent(&sb, value, jw->open_stack.len * 2);"
type_conversion,json-writer.c,289,-,+,,22,"	jw_object_begin(jw, jw->pretty);"
type_conversion,json-writer.c,296,-,+,,21,"	jw_array_begin(jw, jw->pretty);"
type_conversion,json-writer.c,301,-,+,,12,"	begin(jw, '[', pretty);"
type_conversion,json-writer.c,374,-,+,,22,"	jw_object_begin(jw, jw->pretty);"
type_conversion,json-writer.c,381,-,+,,21,"	jw_array_begin(jw, jw->pretty);"
type_conversion,json-writer.c,397,-,+,,29,	len = jw->open_stack.len - 1;
type_conversion,json-writer.c,400,-,+,,33,"	strbuf_setlen(&jw->open_stack, len);"
type_conversion,json-writer.c,401,-,+,,19,	jw->need_comma = 1;
type_conversion,json-writer.c,408,-,+,,6,	if (ch_open == '{')
type_conversion,kwset.c,44,-,+,,13,	if (size < 0)
type_conversion,kwset.c,46,-,+,,17,	return xmalloc(size);
type_conversion,kwset.c,144,-,+,,28,  kwset->trie->accepting = 0;
type_conversion,kwset.c,185,-,+,,57,      label = kwset->trans ? kwset->trans[U(*--text)] : *--text;
type_conversion,kwset.c,195,-,+,,22,      while (link && label != link->label)
type_conversion,kwset.c,198,-,+,,8,	  if (label < link->label)
type_conversion,kwset.c,222,-,+,,28,	  link->trie->accepting = 0;
type_conversion,kwset.c,230,-,+,,20,	  link->balance = 0;
type_conversion,kwset.c,233,-,+,,8,	  if (dirs[--depth] == L)
type_conversion,kwset.c,241,-,+,,12,	      if (dirs[depth] == L)
type_conversion,kwset.c,249,-,+,,19,	  if (depth && ((dirs[depth] == L && --links[depth]->balance)
type_conversion,kwset.c,250,-,+,,8,			|| (dirs[depth] == R && ++links[depth]->balance)))
type_conversion,kwset.c,252,-,+,,16,	      switch (links[depth]->balance)
type_conversion,kwset.c,254,-,+,,8,		case (char) -2:
type_conversion,kwset.c,260,-,+,,35,		      t->balance = r->balance = 0;
type_conversion,kwset.c,266,-,+,,22,		      l->balance = t->balance != 1 ? 0 : -1;
type_conversion,kwset.c,267,-,+,,22,		      r->balance = t->balance != (char) -1 ? 0 : 1;
type_conversion,kwset.c,268,-,+,,22,		      t->balance = 0;
type_conversion,kwset.c,280,-,+,,35,		      t->balance = l->balance = 0;
type_conversion,kwset.c,286,-,+,,22,		      l->balance = t->balance != 1 ? 0 : -1;
type_conversion,kwset.c,287,-,+,,22,		      r->balance = t->balance != (char) -1 ? 0 : 1;
type_conversion,kwset.c,288,-,+,,22,		      t->balance = 0;
type_conversion,kwset.c,298,-,+,,12,	      if (dirs[depth - 1] == L)
type_conversion,kwset.c,311,-,+,,23,    trie->accepting = 1 + 2 * kwset->words;
type_conversion,kwset.c,355,-,+,,22,      while (link && tree->label != link->label)
type_conversion,kwset.c,356,-,+,,6,	if (tree->label < link->label)
type_conversion,kwset.c,382,-,+,,15,  if (depth < delta[tree->label])
type_conversion,kwset.c,383,-,+,,26,    delta[tree->label] = depth;
type_conversion,kwset.c,396,-,+,,15,  while (a && b->label != a->label)
type_conversion,kwset.c,397,-,+,,9,    if (b->label < a->label)
type_conversion,kwset.c,446,-,+,,23,	  kwset->target[i] = curr->links->label;
type_conversion,kwset.c,451,-,+,,31,	delta[U(kwset->target[i])] = kwset->mind - (i + 1);
type_conversion,kwset.c,456,-,+,,6,	if (kwset->target[i] == c)
type_conversion,kwset.c,476,-,+,,27,"	  treedelta(curr->links, curr->depth, delta);"
type_conversion,kwset.c,546,-,+,,12,    return 0;
type_conversion,kwset.c,547,-,+,,7,  if (len > size)
type_conversion,kwset.c,548,-,+,,12,    return -1;
type_conversion,kwset.c,551,-,+,,26,"      tp = memchr (text, kwset->target[0], size);"
type_conversion,kwset.c,552,-,+,,31,      return tp ? tp - text : -1;
type_conversion,kwset.c,562,-,+,,14,  if (size > 12 * len)
type_conversion,kwset.c,592,-,+,,15,	      return tp - len - text;
type_conversion,kwset.c,601,-,+,,10,  while (d <= ep - tp)
type_conversion,kwset.c,611,-,+,,13,	    return tp - len - text;
type_conversion,kwset.c,616,-,+,,10,  return -1;
type_conversion,kwset.c,639,-,+,,13,  if (len < kwset->mind)
type_conversion,kwset.c,640,-,+,,12,    return -1;
type_conversion,kwset.c,654,-,+,,14,  if (len >= 4 * kwset->mind)
type_conversion,kwset.c,659,-,+,,23,  while (lim - end >= d)
type_conversion,kwset.c,664,-,+,,26,	  while ((d = delta[c = *end]) && end < qlim)
type_conversion,kwset.c,673,-,+,,16,	d = delta[c = (end += d)[-1]];
type_conversion,kwset.c,686,-,+,,35,	  c = trans ? trans[U(*--beg)] : *--beg;
type_conversion,kwset.c,688,-,+,,19,	  while (tree && c != tree->label)
type_conversion,kwset.c,689,-,+,,10,	    if (c < tree->label)
type_conversion,kwset.c,709,-,+,,10,  return -1;
type_conversion,kwset.c,715,-,+,,19,  if (lim - mch > kwset->maxd)
type_conversion,kwset.c,719,-,+,,23,  while (lim - end >= d)
type_conversion,kwset.c,721,-,+,,26,      if ((d = delta[c = (end += d)[-1]]) != 0)
type_conversion,kwset.c,737,-,+,,35,	  c = trans ? trans[U(*--beg)] : *--beg;
type_conversion,kwset.c,739,-,+,,19,	  while (tree && c != tree->label)
type_conversion,kwset.c,740,-,+,,10,	    if (c < tree->label)
type_conversion,kwset.c,768,-,+,,45,      kwsmatch->index = accept->accepting / 2;
type_conversion,kwset.c,769,-,+,,29,      kwsmatch->offset[0] = mch - text;
type_conversion,kwset.c,770,-,+,,27,      kwsmatch->size[0] = accept->depth;
type_conversion,kwset.c,772,-,+,,10,  return mch - text;
type_conversion,kwset.c,794,-,+,,24,	  kwsmatch->size[0] = kwset->mind;
type_conversion,levenshtein.c,44,-,+,,13,"	int len1 = strlen(string1), len2 = strlen(string2);"
type_conversion,levenshtein.c,60,-,+,,33,			row2[j + 1] = row1[j] + s * (string1[i] != string2[j]);
type_conversion,levenshtein.c,62,-,+,,26,			if (i > 0 && j > 0 && string1[i - 1] == string2[j] &&
type_conversion,levenshtein.c,63,-,+,,6,					string1[i] == string2[j - 1] &&
type_conversion,line-log.c,31,-,+,,23,	rs->alloc = rs->nr = 0;
type_conversion,line-log.c,40,-,+,,23,	rs->alloc = rs->nr = 0;
type_conversion,line-log.c,46,-,+,,22,"	range_set_init(dst, src->nr);"
type_conversion,line-log.c,58,-,+,,25,	src->alloc = src->nr = 0;
type_conversion,line-log.c,65,-,+,,21,"	range_set_grow(rs, 1);"
type_conversion,line-log.c,103,-,+,,11,	for (i = 1; i < rs->nr; i++) {
type_conversion,line-log.c,116,-,+,,19,	unsigned int o = 0; /* output cursor */
type_conversion,line-log.c,120,-,+,,11,	for (i = 0; i < rs->nr; i++) {
type_conversion,line-log.c,123,-,+,,11,		if (o > 0 && rs->ranges[i].start <= rs->ranges[o-1].end) {
type_conversion,line-log.c,124,-,+,,21,			if (rs->ranges[o-1].end < rs->ranges[i].end)
type_conversion,line-log.c,125,-,+,,18,				rs->ranges[o-1].end = rs->ranges[i].end;
type_conversion,line-log.c,149,-,+,,19,"	unsigned int i = 0, j = 0;"
type_conversion,line-log.c,172,-,+,,44,		else if (!out->nr || out->ranges[out->nr-1].end < new_range->start) {
type_conversion,line-log.c,173,-,+,,24,"			range_set_grow(out, 1);"
type_conversion,line-log.c,177,-,+,,34,		} else if (out->ranges[out->nr-1].end < new_range->end) {
type_conversion,line-log.c,178,-,+,,24,			out->ranges[out->nr-1].end = new_range->end;
type_conversion,line-log.c,191,-,+,,23,"	unsigned int i, j =  0;"
type_conversion,line-log.c,192,-,+,,11,	for (i = 0; i < a->nr; i++) {
type_conversion,line-log.c,232,-,+,,32,"	range_set_init(&diff->parent, 0);"
type_conversion,line-log.c,233,-,+,,32,"	range_set_init(&diff->target, 0);"
type_conversion,line-log.c,245,-,+,,29,"	range_set_init(&r->ranges, 0);"
type_conversion,line-log.c,322,-,+,,17,	if (count_a >= 0)
type_conversion,line-log.c,324,-,+,,17,	if (count_b >= 0)
type_conversion,line-log.c,339,-,+,,41,	xecfg.ctxlen = xecfg.interhunkctxlen = 0;
type_conversion,line-log.c,402,-,+,,22,"	unsigned int i, j = 0;"
type_conversion,line-log.c,406,-,+,,11,	for (i = 0; i < diff->target.nr; i++) {
type_conversion,line-log.c,431,-,+,,22,"	unsigned int i, j = 0;"
type_conversion,line-log.c,432,-,+,,16,	long offset = 0;
type_conversion,line-log.c,437,-,+,,11,	for (i = 0; i < rs->nr; i++) {
type_conversion,line-log.c,480,-,+,,14,	for (i = 0; i < revs->pending.nr; i++) {
type_conversion,line-log.c,485,-,+,,15,		if (!obj || obj->type != OBJ_COMMIT)
type_conversion,line-log.c,520,-,+,,13,	long cur = 0;
type_conversion,line-log.c,528,-,+,,16,	ends[cur++] = 0;
type_conversion,line-log.c,530,-,+,,9,	while (num < spec->size) {
type_conversion,line-log.c,531,-,+,,7,		if (data[num] == '\n' || num == spec->size - 1) {
type_conversion,line-log.c,533,-,+,,18,			ends[cur++] = num;
type_conversion,line-log.c,540,-,+,,15,	*lines = cur-1;
type_conversion,line-log.c,556,-,+,,14,	if (line == 0)
type_conversion,line-log.c,566,-,+,,15,	long lines = 0;
type_conversion,line-log.c,577,-,+,,16,"		long begin = 0, end = 0;"
type_conversion,line-log.c,581,-,+,,21,		if (!name_part || *name_part != ':' || !name_part[1])
type_conversion,line-log.c,584,-,+,,39,"		range_part = xstrndup(item->string, name_part - item->string);"
type_conversion,line-log.c,587,-,+,,61,"		full_name = prefix_path(prefix, prefix ? strlen(prefix) : 0,"
type_conversion,line-log.c,599,-,+,,45,			anchor = p->ranges.ranges[p->ranges.nr - 1].end + 1;
type_conversion,line-log.c,601,-,+,,13,			anchor = 1;
type_conversion,line-log.c,609,-,+,,15,		if (begin < 1)
type_conversion,line-log.c,610,-,+,,12,			begin = 1;
type_conversion,line-log.c,611,-,+,,13,		if (end < 1 || lines < end)
type_conversion,line-log.c,769,-,+,,27,"	parse_pathspec(pathspec, 0, PATHSPEC_PREFER_FULL, """", paths);"
type_conversion,line-log.c,871,-,+,,14,	if (line == 0)
type_conversion,line-log.c,882,-,+,,32,"	char *end = get_nth_line(line+1, ends, data);"
type_conversion,line-log.c,885,-,+,,21,	if (end > begin && end[-1] == '\n') {
type_conversion,line-log.c,892,-,+,,7,"	putc(first, file);"
type_conversion,line-log.c,893,-,+,,16,"	fwrite(begin, 1, end-begin, file);"
type_conversion,line-log.c,914,-,+,,22,"	unsigned int i, j = 0;"
type_conversion,line-log.c,942,-,+,,11,	for (i = 0; i < range->ranges.nr; i++) {
type_conversion,line-log.c,978,-,+,,14,			p_start = -1;
type_conversion,line-log.c,979,-,+,,12,			p_end = -1;
type_conversion,line-log.c,985,-,+,,18,"		       p_start+1, p_end-p_start, t_start+1, t_end-t_start,"
type_conversion,line-log.c,990,-,+,,24,"				print_line(prefix, ' ', t_cur, t_ends, pair->two->data,"
type_conversion,line-log.c,992,-,+,,43,			for (k = diff->parent.ranges[j].start; k < diff->parent.ranges[j].end; k++)
type_conversion,line-log.c,993,-,+,,24,"				print_line(prefix, '-', k, p_ends, pair->one->data,"
type_conversion,line-log.c,996,-,+,,24,"				print_line(prefix, '+', t_cur, t_ends, pair->two->data,"
type_conversion,line-log.c,1001,-,+,,23,"			print_line(prefix, ' ', t_cur, t_ends, pair->two->data,"
type_conversion,line-log.c,1046,-,+,,23,	if (rg->ranges.nr == 0)
type_conversion,line-log.c,1052,-,+,,21,	file_target.size = pair->two->size;
type_conversion,line-log.c,1057,-,+,,22,		file_parent.size = pair->one->size;
type_conversion,line-log.c,1060,-,+,,22,		file_parent.size = 0;
type_conversion,line-log.c,1071,-,+,,23,"	range_set_init(&tmp, 0);"
type_conversion,line-log.c,1078,-,+,,35,	return ((*diff_out)->parent.nr > 0);
type_conversion,line-log.c,1209,-,+,,17,	int nparents = commit_list_count(commit->parents);
type_conversion,line-range.c,35,-,+,,6,	if (1 <= begin && (spec[0] == '+' || spec[0] == '-')) {
type_conversion,line-range.c,40,-,+,,15,			if (num == 0)
type_conversion,line-range.c,42,-,+,,8,			if (spec[0] == '-')
type_conversion,line-range.c,43,-,+,,11,				num = 0 - num;
type_conversion,line-range.c,44,-,+,,8,			if (0 < num)
type_conversion,line-range.c,45,-,+,,26,				*ret = begin + num - 2;
type_conversion,line-range.c,49,-,+,,26,				*ret = begin + num > 0 ? begin + num : 1;
type_conversion,line-range.c,57,-,+,,15,			if (num <= 0)
type_conversion,line-range.c,64,-,+,,14,	if (begin < 0) {
type_conversion,line-range.c,65,-,+,,7,		if (spec[0] != '^')
type_conversion,line-range.c,68,-,+,,12,			begin = 1;
type_conversion,line-range.c,73,-,+,,6,	if (spec[0] != '/')
type_conversion,line-range.c,77,-,+,,42,	for (term = (char *) spec + 1; *term && *term != '/'; term++) {
type_conversion,line-range.c,78,-,+,,7,		if (*term == '\\')
type_conversion,line-range.c,81,-,+,,6,	if (*term != '/')
type_conversion,line-range.c,89,-,+,,10,	*term = 0;
type_conversion,line-range.c,94,-,+,,43,"	    !(reg_error = regexec(&regexp, line, 1, match, 0))) {"
type_conversion,line-range.c,106,-,+,,13,		*term++ = '/';
type_conversion,line-range.c,111,-,+,,40,"		regerror(reg_error, &regexp, errbuf, 1024);"
type_conversion,line-range.c,113,-,+,,25,"		    spec + 1, begin + 1, errbuf);"
type_conversion,line-range.c,121,-,+,,48,"		return xecfg->find_func(bol, eol - bol, buf, 1,"
type_conversion,line-range.c,122,-,+,,32,					xecfg->find_func_priv) >= 0;
type_conversion,line-range.c,127,-,+,,23,	if (isalpha(*bol) || *bol == '_' || *bol == '$')
type_conversion,line-range.c,139,-,+,,38,"		reg_error = regexec(regexp, start, 1, match, 0);"
type_conversion,line-range.c,144,-,+,,40,"			regerror(reg_error, regexp, errbuf, 1024);"
type_conversion,line-range.c,150,-,+,,25,		while (bol > start && *--bol != '\n')
type_conversion,line-range.c,152,-,+,,7,		if (*bol == '\n')
type_conversion,line-range.c,154,-,+,,18,		while (*eol && *eol != '\n')
type_conversion,line-range.c,156,-,+,,7,		if (*eol == '\n')
type_conversion,line-range.c,180,-,+,,6,	if (*arg == '^') {
type_conversion,line-range.c,181,-,+,,12,		anchor = 1;
type_conversion,line-range.c,187,-,+,,18,	while (*term && *term != ':') {
type_conversion,line-range.c,188,-,+,,7,		if (*term == '\\' && *(term+1))
type_conversion,line-range.c,197,-,+,,28,"	pattern = xstrndup(arg+1, term-(arg+1));"
type_conversion,line-range.c,212,-,+,,40,"		regerror(reg_error, &regexp, errbuf, 1024);"
type_conversion,line-range.c,219,-,+,,25,"		    pattern, anchor + 1);"
type_conversion,line-range.c,220,-,+,,11,	*begin = 0;
type_conversion,line-range.c,227,-,+,,16,	*end = *begin+1;
type_conversion,line-range.c,230,-,+,,47,"		const char *eol = nth_line_cb(cb_data, *end+1);"
type_conversion,line-range.c,251,-,+,,18,	*begin = *end = 0;
type_conversion,line-range.c,253,-,+,,15,	if (anchor < 1)
type_conversion,line-range.c,254,-,+,,12,		anchor = 1;
type_conversion,line-range.c,256,-,+,,20,		anchor = lines + 1;
type_conversion,line-range.c,258,-,+,,6,	if (*arg == ':' || (*arg == '^' && *(arg + 1) == ':')) {
type_conversion,line-range.c,269,-,+,,6,"	if (*arg == ',')"
type_conversion,line-range.c,270,-,+,,66,"		arg = parse_loc(arg + 1, nth_line_cb, cb_data, lines, *begin + 1, end);"
type_conversion,line-range.c,284,-,+,,6,	if (*arg == ':' || (*arg == '^' && *(arg + 1) == ':'))
type_conversion,line-range.c,286,-,+,,10,"					    0, 0, NULL, NULL,"
type_conversion,line-range.c,289,-,+,,35,"	arg = parse_loc(arg, NULL, NULL, 0, -1, NULL);"
type_conversion,line-range.c,291,-,+,,6,"	if (*arg == ',')"
type_conversion,line-range.c,292,-,+,,38,"		arg = parse_loc(arg+1, NULL, NULL, 0, 0, NULL);"
type_conversion,linear-assignment.c,23,-,+,,39,"		memset(column2row, 0, sizeof(int) * column_count);"
type_conversion,linear-assignment.c,24,-,+,,39,"		memset(row2column, 0, sizeof(int) * row_count);"
type_conversion,linear-assignment.c,28,-,+,,39,"	memset(column2row, -1, sizeof(int) * column_count);"
type_conversion,linear-assignment.c,29,-,+,,39,"	memset(row2column, -1, sizeof(int) * row_count);"
type_conversion,list-objects-filter-options.c,85,-,+,,42,"		int type = type_from_string_gently(v0, strlen(v0), 1);"
type_conversion,list-objects-filter-options.c,119,-,+,,7,"		if (*c <= ' ' || strchr(RESERVED_NON_WS, *c)) {"
type_conversion,list-objects-filter-options.c,123,-,+,,5,				*c);
type_conversion,list-objects-filter-options.c,170,-,+,,13,	for (sub = 0; subspecs[sub] && !result; sub++) {
type_conversion,list-objects-filter-options.c,171,-,+,,22,		if (subspecs[sub + 1]) {
type_conversion,list-objects-filter-options.c,176,-,+,,39,			size_t last = subspecs[sub]->len - 1;
type_conversion,list-objects-filter-options.c,178,-,+,,39,"			strbuf_remove(subspecs[sub], last, 1);"
type_conversion,list-objects-filter-options.c,195,-,+,,6,	if (ch <= ' ' || ch == '%' || ch == '+')
type_conversion,list-objects-filter-options.c,197,-,+,,34,"	return !strchr(RESERVED_NON_WS, ch);"
type_conversion,list-objects-filter-options.c,217,-,+,,6,	if (filter_options->choice == LOFC_COMBINE)
type_conversion,list-objects-filter-options.c,222,-,+,,12,"			xcalloc(initial_sub_alloc, sizeof(*sub_array));"
type_conversion,list-objects-filter-options.c,226,-,+,,31,		filter_options->sub_alloc = initial_sub_alloc;
type_conversion,list-objects-filter-options.c,228,-,+,,27,	filter_options->sub_nr = 1;
type_conversion,list-objects-filter-options.c,276,-,+,,55,		sub = &filter_options->sub[filter_options->sub_nr - 1];
type_conversion,list-objects-filter-options.c,308,-,+,,6,	if (filter->choice == LOFC_BLOB_LIMIT) {
type_conversion,list-objects-filter-options.c,326,-,+,,13,	for (sub = 0; sub < filter_options->sub_nr; sub++)
type_conversion,list-objects-filter-options.c,403,-,+,,34,"	strbuf_init(&dest->filter_spec, 0);"
type_conversion,list-objects-filter-options.c,408,-,+,,14,	for (i = 0; i < src->sub_nr; i++)
type_conversion,list-objects-filter-options.h,151,-,+,,30,	filter_options->no_filter = 1;
type_conversion,list-objects-filter.c,86,-,+,,10,		return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,91,-,+,,10,		return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,96,-,+,,10,		return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,187,-,+,,10,		return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,192,-,+,,10,		return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,201,-,+,,23,		return include_it ? LOFR_MARK_SEEN | LOFR_DO_SHOW : LOFR_ZERO;
type_conversion,list-objects-filter.c,218,-,+,,17,			filter_res = LOFR_SKIP_TREE;
type_conversion,list-objects-filter.c,225,-,+,,18,				filter_res = LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,231,-,+,,18,				filter_res = LOFR_ZERO;
type_conversion,list-objects-filter.c,233,-,+,,18,				filter_res = LOFR_SKIP_TREE;
type_conversion,list-objects-filter.c,253,-,+,,46,"	struct filter_trees_depth_data *d = xcalloc(1, sizeof(*d));"
type_conversion,list-objects-filter.c,254,-,+,,33,"	oidmap_init(&d->seen_at_depth, 0);"
type_conversion,list-objects-filter.c,256,-,+,,21,	d->current_depth = 0;
type_conversion,list-objects-filter.c,291,-,+,,10,		return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,296,-,+,,10,		return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,301,-,+,,10,		return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,312,-,+,,7,		if (t != OBJ_BLOB) { /* probably OBJ_NONE */
type_conversion,list-objects-filter.c,333,-,+,,9,	return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,340,-,+,,46,"	struct filter_blobs_limit_data *d = xcalloc(1, sizeof(*d));"
type_conversion,list-objects-filter.c,405,-,+,,10,		return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,410,-,+,,10,		return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,415,-,+,,47,"		match = path_matches_pattern_list(pathname, strlen(pathname),"
type_conversion,list-objects-filter.c,418,-,+,,7,		if (match == UNDECIDED)
type_conversion,list-objects-filter.c,419,-,+,,55,			match = filter_data->array_frame[filter_data->nr - 1].default_match;
type_conversion,list-objects-filter.c,424,-,+,,63,		filter_data->array_frame[filter_data->nr].child_prov_omit = 0;
type_conversion,list-objects-filter.c,443,-,+,,7,		if (obj->flags & FILTER_SHOWN_BUT_REVISIT)
type_conversion,list-objects-filter.c,458,-,+,,46,		filter_data->array_frame[filter_data->nr - 1].child_prov_omit |=
type_conversion,list-objects-filter.c,459,-,+,,4,			frame->child_prov_omit;
type_conversion,list-objects-filter.c,474,-,+,,55,		frame = &filter_data->array_frame[filter_data->nr - 1];
type_conversion,list-objects-filter.c,477,-,+,,47,"		match = path_matches_pattern_list(pathname, strlen(pathname),"
type_conversion,list-objects-filter.c,480,-,+,,7,		if (match == UNDECIDED)
type_conversion,list-objects-filter.c,482,-,+,,7,		if (match == MATCHED) {
type_conversion,list-objects-filter.c,485,-,+,,11,			return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,506,-,+,,28,		frame->child_prov_omit = 1;
type_conversion,list-objects-filter.c,524,-,+,,41,"	struct filter_sparse_data *d = xcalloc(1, sizeof(*d));"
type_conversion,list-objects-filter.c,539,-,+,,42,	d->array_frame[d->nr].child_prov_omit = 0;
type_conversion,list-objects-filter.c,572,-,+,,7,		if (filter_data->object_type == OBJ_TAG)
type_conversion,list-objects-filter.c,573,-,+,,11,			return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,578,-,+,,7,		if (filter_data->object_type == OBJ_COMMIT)
type_conversion,list-objects-filter.c,579,-,+,,11,			return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,589,-,+,,7,		if (filter_data->object_type == OBJ_COMMIT ||
type_conversion,list-objects-filter.c,590,-,+,,7,		    filter_data->object_type == OBJ_TAG)
type_conversion,list-objects-filter.c,593,-,+,,7,		if (filter_data->object_type == OBJ_TREE)
type_conversion,list-objects-filter.c,594,-,+,,11,			return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,601,-,+,,7,		if (filter_data->object_type == OBJ_BLOB)
type_conversion,list-objects-filter.c,602,-,+,,11,			return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,614,-,+,,46,"	struct filter_object_type_data *d = xcalloc(1, sizeof(*d));"
type_conversion,list-objects-filter.c,648,-,+,,7,		if (filter_situation == LOFS_END_TREE &&
type_conversion,list-objects-filter.c,650,-,+,,28,			sub->is_skipping_tree = 0;
type_conversion,list-objects-filter.c,660,-,+,,6,	if (result & LOFR_MARK_SEEN)
type_conversion,list-objects-filter.c,663,-,+,,6,	if (result & LOFR_SKIP_TREE) {
type_conversion,list-objects-filter.c,664,-,+,,27,		sub->is_skipping_tree = 1;
type_conversion,list-objects-filter.c,682,-,+,,3,		LOFR_DO_SHOW | LOFR_MARK_SEEN | LOFR_SKIP_TREE;
type_conversion,list-objects-filter.c,685,-,+,,13,	for (sub = 0; sub < d->nr; sub++) {
type_conversion,list-objects-filter.c,689,-,+,,9,		if (!(sub_result & LOFR_DO_SHOW))
type_conversion,list-objects-filter.c,690,-,+,,23,			combined_result &= ~LOFR_DO_SHOW;
type_conversion,list-objects-filter.c,691,-,+,,9,		if (!(sub_result & LOFR_MARK_SEEN))
type_conversion,list-objects-filter.c,692,-,+,,23,			combined_result &= ~LOFR_MARK_SEEN;
type_conversion,list-objects-filter.c,694,-,+,,23,			combined_result &= ~LOFR_SKIP_TREE;
type_conversion,list-objects-filter.c,704,-,+,,13,	for (sub = 0; sub < d->nr; sub++) {
type_conversion,list-objects-filter.c,721,-,+,,13,	for (sub = 0; sub < d->nr; sub++) {
type_conversion,list-objects-filter.c,731,-,+,,42,"	struct combine_filter_data *d = xcalloc(1, sizeof(*d));"
type_conversion,list-objects-filter.c,736,-,+,,13,	for (sub = 0; sub < d->nr; sub++)
type_conversion,list-objects-filter.c,776,-,+,,6,	if (filter_options->choice >= LOFC__COUNT)
type_conversion,list-objects-filter.c,808,-,+,,6,	if (filter_situation == LOFS_END_TREE)
type_conversion,list-objects-filter.c,810,-,+,,9,	return LOFR_MARK_SEEN | LOFR_DO_SHOW;
type_conversion,list-objects.c,84,-,+,,6,	if (r & LOFR_MARK_SEEN)
type_conversion,list-objects.c,86,-,+,,6,	if (r & LOFR_DO_SHOW)
type_conversion,list-objects.c,108,-,+,,7,		if (match != all_entries_interesting) {
type_conversion,list-objects.c,112,-,+,,8,			if (match == all_entries_not_interesting)
type_conversion,list-objects.c,114,-,+,,8,			if (match == entry_not_interesting)
type_conversion,list-objects.c,152,-,+,,16,	int baselen = base->len;
type_conversion,list-objects.c,192,-,+,,6,	if (r & LOFR_MARK_SEEN)
type_conversion,list-objects.c,194,-,+,,6,	if (r & LOFR_DO_SHOW)
type_conversion,list-objects.c,199,-,+,,6,	if (r & LOFR_SKIP_TREE)
type_conversion,list-objects.c,208,-,+,,6,	if (r & LOFR_MARK_SEEN)
type_conversion,list-objects.c,210,-,+,,6,	if (r & LOFR_DO_SHOW)
type_conversion,list-objects.c,213,-,+,,22,"	strbuf_setlen(base, baselen);"
type_conversion,list-objects.c,226,-,+,,6,	if (r & LOFR_MARK_SEEN)
type_conversion,list-objects.c,228,-,+,,6,	if (r & LOFR_DO_SHOW)
type_conversion,list-objects.c,288,-,+,,21,"		oidset_init(&set, 16);"
type_conversion,list-objects.c,321,-,+,,15,		for (i = 0; i < revs->cmdline.nr; i++) {
type_conversion,list-objects.c,324,-,+,,8,			if (obj->type != OBJ_COMMIT || !(obj->flags & UNINTERESTING))
type_conversion,list-objects.c,348,-,+,,14,	for (i = 0; i < ctx->revs->pending.nr; i++) {
type_conversion,list-objects.c,355,-,+,,7,		if (obj->type == OBJ_TAG) {
type_conversion,list-objects.c,361,-,+,,7,		if (obj->type == OBJ_TREE) {
type_conversion,list-objects.c,366,-,+,,7,		if (obj->type == OBJ_BLOB) {
type_conversion,list-objects.c,408,-,+,,7,		if (r & LOFR_MARK_SEEN)
type_conversion,list-objects.c,410,-,+,,7,		if (r & LOFR_DO_SHOW)
type_conversion,lockfile.c,19,-,+,,10,	int i = path->len;
type_conversion,lockfile.c,22,-,+,,14,	while (i && path->buf[i - 1] == '/')
type_conversion,lockfile.c,29,-,+,,14,	while (i && path->buf[i - 1] != '/')
type_conversion,lockfile.c,32,-,+,,22,"	strbuf_setlen(path, i);"
type_conversion,lockfile.c,109,-,+,,22,	long remaining_ms = 0;
type_conversion,lockfile.c,112,-,+,,20,	if (timeout_ms == 0)
type_conversion,lockfile.c,120,-,+,,19,	if (timeout_ms > 0)
type_conversion,lockfile.c,133,-,+,,25,		else if (timeout_ms > 0 && remaining_ms <= 0)
type_conversion,lockfile.c,136,-,+,,16,		backoff_ms = multiplier * INITIAL_BACKOFF_MS;
type_conversion,lockfile.c,138,-,+,,13,		wait_ms = (750 + rand() % 500) * backoff_ms / 1000;
type_conversion,lockfile.c,139,-,+,,18,		sleep_millisec(wait_ms);
type_conversion,lockfile.h,192,-,+,,60,"	return hold_lock_file_for_update_timeout(lk, path, flags, 0);"
type_conversion,lockfile.h,199,-,+,,65,"	return hold_lock_file_for_update_timeout_mode(lk, path, flags, 0, mode);"
type_conversion,log-tree.c,86,-,+,,14,	res->type = type;
type_conversion,log-tree.c,101,-,+,,41,"		if (!wildmatch(item->string, refname, 0))"
type_conversion,log-tree.c,106,-,+,,18,		    (!*rest || *rest == '/'))
type_conversion,log-tree.c,176,-,+,,6,	if (objtype < 0)
type_conversion,log-tree.c,180,-,+,,14,	for (i = 0; i < ARRAY_SIZE(ref_namespace); i++) {
type_conversion,log-tree.c,197,-,+,,9,	while (obj->type == OBJ_TAG) {
type_conversion,log-tree.c,274,-,+,,21,		if (list->type == DECORATION_REF_HEAD) {
type_conversion,log-tree.c,292,-,+,,22,		if ((list->type == DECORATION_REF_LOCAL) &&
type_conversion,log-tree.c,364,-,+,,36,			if (*tag && decoration->type == DECORATION_REF_TAG) {
type_conversion,log-tree.c,375,-,+,,28,			    decoration->type == DECORATION_REF_HEAD) {
type_conversion,log-tree.c,414,-,+,,19,"	unsigned int i = 10, result = 1;"
type_conversion,log-tree.c,416,-,+,,8,		i *= 10;
type_conversion,log-tree.c,428,-,+,,18,	int start_len = filename->len;
type_conversion,log-tree.c,429,-,+,,16,	int max_len = start_len + info->patch_name_max - (strlen(suffix) + 1);
type_conversion,log-tree.c,441,-,+,,6,	if (max_len < filename->len)
type_conversion,log-tree.c,442,-,+,,27,"		strbuf_setlen(filename, max_len);"
type_conversion,log-tree.c,465,-,+,,25,"			    digits_in_number(opt->total),"
type_conversion,log-tree.c,495,-,+,,57,	if (opt->ref_message_ids && opt->ref_message_ids->nr > 0) {
type_conversion,log-tree.c,497,-,+,,7,		n = opt->ref_message_ids->nr;
type_conversion,log-tree.c,625,-,+,,31,"	strbuf_init(&verify_message, 256);"
type_conversion,log-tree.c,673,-,+,,22,	opt->shown_dashes = 1;
type_conversion,log-tree.c,681,-,+,,43,	int abbrev_commit = opt->abbrev_commit ? opt->abbrev : the_hash_algo->hexsz;
type_conversion,log-tree.c,729,-,+,,19,	opt->shown_one = 1;
type_conversion,log-tree.c,745,-,+,,13,	} else if (opt->commit_format != CMIT_FMT_USERFORMAT) {
type_conversion,log-tree.c,747,-,+,,7,		if (opt->commit_format != CMIT_FMT_ONELINE)
type_conversion,log-tree.c,764,-,+,,7,		if (opt->commit_format == CMIT_FMT_ONELINE) {
type_conversion,log-tree.c,778,-,+,,10,"					    opt->commit_format == CMIT_FMT_ONELINE,"
type_conversion,log-tree.c,780,-,+,,10,					    opt->date_mode_explicit);
type_conversion,log-tree.c,781,-,+,,8,			if (opt->commit_format == CMIT_FMT_ONELINE)
type_conversion,log-tree.c,795,-,+,,10,		raw = (opt->commit_format == CMIT_FMT_USERFORMAT);
type_conversion,log-tree.c,808,-,+,,27,	ctx.date_mode_explicit = opt->date_mode_explicit;
type_conversion,log-tree.c,810,-,+,,25,	ctx.preserve_subject = opt->preserve_subject;
type_conversion,log-tree.c,811,-,+,,29,	ctx.encode_email_headers = opt->encode_email_headers;
type_conversion,log-tree.c,826,-,+,,27,"		append_signoff(&msgbuf, 0, APPEND_SIGNOFF_DEDUP);"
type_conversion,log-tree.c,828,-,+,,7,	if ((ctx.fmt != CMIT_FMT_USERFORMAT) &&
type_conversion,log-tree.c,844,-,+,,45,	if (!msgbuf.len || msgbuf.buf[msgbuf.len - 1] != '\n')
type_conversion,log-tree.c,845,-,+,,26,		opt->missing_newline = 1;
type_conversion,log-tree.c,847,-,+,,26,		opt->missing_newline = 0;
type_conversion,log-tree.c,879,-,+,,18,"			.dual_color = 1,"
type_conversion,log-tree.c,904,-,+,,22,	opt->shown_dashes = 0;
type_conversion,log-tree.c,919,-,+,,7,		    opt->commit_format != CMIT_FMT_ONELINE &&
type_conversion,log-tree.c,932,-,+,,32,"				fwrite(msg->buf, msg->len, 1, opt->diffopt.file);"
type_conversion,log-tree.c,983,-,+,,20,"				   entry->key, strlen(entry->key),"
type_conversion,log-tree.c,1024,-,+,,38,	o.record_conflict_msgs_as_headers = 1;
type_conversion,log.c,157,-,+,,35,	data->rev->line_level_traverse = 1;
type_conversion,log.c,175,-,+,,47,		rev->diffopt.flags.default_follow_renames = 1;
type_conversion,log.c,176,-,+,,24,	rev->verbose_header = 1;
type_conversion,log.c,178,-,+,,33,	rev->diffopt.flags.recursive = 1;
type_conversion,log.c,179,-,+,,38,	rev->diffopt.flags.allow_textconv = 1;
type_conversion,log.c,180,-,+,,23,	rev->abbrev_commit = default_abbrev_commit;
type_conversion,log.c,181,-,+,,24,	rev->show_root_diff = default_show_root;
type_conversion,log.c,184,-,+,,24,	rev->show_signature = default_show_signature;
type_conversion,log.c,185,-,+,,30,	rev->encode_email_headers = default_encode_email_headers;
type_conversion,log.c,227,-,+,,14,	for (i = 0; i < ARRAY_SIZE(ref_namespace); i++) {
type_conversion,log.c,275,-,+,,9,			     PARSE_OPT_KEEP_ARGV0 | PARSE_OPT_KEEP_UNKNOWN_OPT |
type_conversion,log.c,276,-,+,,9,			     PARSE_OPT_KEEP_DASHDASH);
type_conversion,log.c,299,-,+,,29,		rev->always_show_header = 0;
type_conversion,log.c,312,-,+,,27,	if (rev->pretty_given && rev->commit_format == CMIT_FMT_RAW) {
type_conversion,log.c,320,-,+,,25,			rev->abbrev_commit = 0;
type_conversion,log.c,323,-,+,,6,	if (rev->commit_format == CMIT_FMT_USERFORMAT) {
type_conversion,log.c,344,-,+,,28,			rev->show_decorations = 1;
type_conversion,log.c,378,-,+,,24,		unsigned int flags = commit->object.flags;
type_conversion,log.c,389,-,+,,20,		rev->shown_one = 0;
type_conversion,log.c,390,-,+,,7,		if (rev->commit_format != CMIT_FMT_ONELINE)
type_conversion,log.c,400,-,+,,10,	int i = revs->early_output;
type_conversion,log.c,445,-,+,,39,	early_output_timer.it_value.tv_sec = 0;
type_conversion,log.c,446,-,+,,40,	early_output_timer.it_value.tv_usec = 500000;
type_conversion,log.c,479,-,+,,39,	early_output_timer.it_value.tv_sec = 0;
type_conversion,log.c,480,-,+,,40,	early_output_timer.it_value.tv_usec = 100000;
type_conversion,log.c,633,-,+,,13,	rev.diff = 1;
type_conversion,log.c,634,-,+,,25,	rev.simplify_history = 0;
type_conversion,log.c,674,-,+,,9,"			     obj_context.mode, &oidc, 1, &buf, &size)) {"
type_conversion,log.c,698,-,+,,9,	while (offset < size && buf[offset] != '\n') {
type_conversion,log.c,701,-,+,,10,		while (new_offset < size && buf[new_offset++] != '\n')
type_conversion,log.c,708,-,+,,6,	if (offset < size)
type_conversion,log.c,709,-,+,,31,"		fwrite(buf + offset, size - offset, 1, rev->diffopt.file);"
type_conversion,log.c,754,-,+,,13,	rev.diff = 1;
type_conversion,log.c,755,-,+,,27,	rev.always_show_header = 1;
type_conversion,log.c,756,-,+,,16,	rev.no_walk = 1;
type_conversion,log.c,768,-,+,,11,	for (i = 0; i < rev.pending.nr && !ret; i++) {
type_conversion,log.c,771,-,+,,11,		switch (o->type) {
type_conversion,log.c,772,-,+,,8,		case OBJ_BLOB:
type_conversion,log.c,775,-,+,,8,		case OBJ_TAG: {
type_conversion,log.c,786,-,+,,20,			rev.shown_one = 1;
type_conversion,log.c,797,-,+,,8,		case OBJ_TREE:
type_conversion,log.c,807,-,+,,20,			rev.shown_one = 1;
type_conversion,log.c,809,-,+,,8,		case OBJ_COMMIT:
type_conversion,log.c,854,-,+,,23,	rev.verbose_header = 1;
type_conversion,log.c,858,-,+,,22,	rev.abbrev_commit = 1;
type_conversion,log.c,860,-,+,,23,	rev.use_terminator = 1;
type_conversion,log.c,861,-,+,,27,	rev.always_show_header = 1;
type_conversion,log.c,871,-,+,,39,		rev->diffopt.flags.follow_renames = 1;
type_conversion,log.c,888,-,+,,27,	rev.always_show_header = 1;
type_conversion,log.c,912,-,+,,12,	int len = strlen(value);
type_conversion,log.c,913,-,+,,16,	while (len && value[len - 1] == '\n')
type_conversion,log.c,916,-,+,,34,"	if (!strncasecmp(value, ""to: "", 4)) {"
type_conversion,log.c,919,-,+,,41,"	} else if (!strncasecmp(value, ""cc: "", 4)) {"
type_conversion,log.c,926,-,+,,22,	item->string[len] = '\0';
type_conversion,log.c,1078,-,+,,24,"		force_in_body_from = git_config_bool(var, value);"
type_conversion,log.c,1126,-,+,,30,"		strbuf_complete(&filename, '/');"
type_conversion,log.c,1156,-,+,,25,	if (rev->pending.nr != 2)
type_conversion,log.c,1161,-,+,,11,	flags1 = o1->flags;
type_conversion,log.c,1162,-,+,,11,	flags2 = o2->flags;
type_conversion,log.c,1207,-,+,,34,	if (signature[strlen(signature)-1] != '\n')
type_conversion,log.c,1220,-,+,,14,	for (i = 0; i < rev->cmdline.nr; i++) {
type_conversion,log.c,1232,-,+,,41,"	if (repo_dwim_ref(the_repository, ref, strlen(ref), &branch_oid,"
type_conversion,log.c,1261,-,+,,39,"	if (strbuf_read_file(buf, desc_file, 0) < 0)"
type_conversion,log.c,1278,-,+,,6,	if (cover_from_description_mode == COVER_FROM_NONE)
type_conversion,log.c,1288,-,+,,6,	if (cover_from_description_mode == COVER_FROM_SUBJECT ||
type_conversion,log.c,1289,-,+,,4,			cover_from_description_mode == COVER_FROM_AUTO)
type_conversion,log.c,1292,-,+,,6,	if (cover_from_description_mode == COVER_FROM_MESSAGE ||
type_conversion,log.c,1293,-,+,,5,			(cover_from_description_mode == COVER_FROM_AUTO &&
type_conversion,log.c,1367,-,+,,28,	pp.encode_email_headers = rev->encode_email_headers;
type_conversion,log.c,1408,-,+,,18,"			.dual_color = 1,"
type_conversion,log.c,1430,-,+,,39,	while ((ch = *m) && (isspace(ch) || (ch == '<')))
type_conversion,log.c,1435,-,+,,24,		if (!isspace(ch) && (ch != '>'))
type_conversion,log.c,1443,-,+,,21,"	return xmemdupz(a, z - a);"
type_conversion,log.c,1459,-,+,,18,	outdir_offset = strlen(prefix);
type_conversion,log.c,1659,-,+,,21,			die_on_failure = auto_base == AUTO_BASE_ALWAYS;
type_conversion,log.c,1787,-,+,,28,	diffopt.flags.recursive = 1;
type_conversion,log.c,1794,-,+,,20,	revs.topo_order = 1;
type_conversion,log.c,2016,-,+,,29,	extra_hdr.strdup_strings = 1;
type_conversion,log.c,2017,-,+,,28,	extra_to.strdup_strings = 1;
type_conversion,log.c,2018,-,+,,28,	extra_cc.strdup_strings = 1;
type_conversion,log.c,2029,-,+,,29,	rev.encode_email_headers = default_encode_email_headers;
type_conversion,log.c,2031,-,+,,23,	rev.verbose_header = 1;
type_conversion,log.c,2032,-,+,,13,	rev.diff = 1;
type_conversion,log.c,2034,-,+,,32,	rev.diffopt.flags.recursive = 1;
type_conversion,log.c,2056,-,+,,9,			     PARSE_OPT_KEEP_ARGV0 | PARSE_OPT_KEEP_UNKNOWN_OPT |
type_conversion,log.c,2057,-,+,,9,			     PARSE_OPT_KEEP_DASHDASH);
type_conversion,log.c,2062,-,+,,6,"	if (fmt_patch_name_max <= strlen(""0000-"") + strlen(fmt_patch_suffix))"
type_conversion,log.c,2063,-,+,,24,"		fmt_patch_name_max = strlen(""0000-"") + strlen(fmt_patch_suffix);"
type_conversion,log.c,2070,-,+,,7,		if (rfc[0] == '-')
type_conversion,log.c,2073,-,+,,29,"			strbuf_insertf(&sprefix, 0, ""%s "", rfc);"
type_conversion,log.c,2083,-,+,,14,	for (i = 0; i < extra_hdr.nr; i++) {
type_conversion,log.c,2090,-,+,,14,	for (i = 0; i < extra_to.nr; i++) {
type_conversion,log.c,2094,-,+,,7,		if (i + 1 < extra_to.nr)
type_conversion,log.c,2101,-,+,,14,	for (i = 0; i < extra_cc.nr; i++) {
type_conversion,log.c,2105,-,+,,7,		if (i + 1 < extra_cc.nr)
type_conversion,log.c,2113,-,+,,47,"		if (split_ident_line(&rev.from_ident, from, strlen(from)))"
type_conversion,log.c,2132,-,+,,25,	rev.preserve_subject = keep_subject;
type_conversion,log.c,2156,-,+,,27,	rev.always_show_header = 1;
type_conversion,log.c,2158,-,+,,20,	rev.zero_commit = zero_commit;
type_conversion,log.c,2162,-,+,,30,		rev.diffopt.flags.binary = 1;
type_conversion,log.c,2200,-,+,,31,"		if (mkdir(output_directory, 0777) < 0 && errno != EEXIST)"
type_conversion,log.c,2205,-,+,,24,	if (rev.pending.nr == 1) {
type_conversion,log.c,2244,-,+,,23,	rev.show_root_diff = 1;
type_conversion,log.c,2248,-,+,,25,		if (rev.pending.nr == 2) {
type_conversion,log.c,2258,-,+,,17,	rev.boundary = 1;
type_conversion,log.c,2278,-,+,,7,		if (config_cover_letter == COVER_AUTO)
type_conversion,log.c,2281,-,+,,20,			cover_letter = (config_cover_letter == COVER_ON);
type_conversion,log.c,2291,-,+,,52,		rev.idiff_oid1 = &idiff_prev.oid[idiff_prev.nr - 1];
type_conversion,log.c,2324,-,+,,46,"		if (strbuf_read_file(&buf, signature_file, 128) < 0)"
type_conversion,log.c,2363,-,+,,62,"		progress = start_delayed_progress(_(""Generating patches""), total);"
type_conversion,log.c,2366,-,+,,30,"		display_progress(progress, total - nr);"
type_conversion,log.c,2394,-,+,,9,				if (thread == THREAD_SHALLOW
type_conversion,log.c,2395,-,+,,38,				    && rev.ref_message_ids->nr > 0
type_conversion,log.c,2419,-,+,,20,			rev.shown_one = 0;
type_conversion,log.c,2480,-,+,,28,"		fprintf(file, ""%c %s\n"", sign,"
type_conversion,log.c,2485,-,+,,31,"		fprintf(file, ""%c %s %s\n"", sign,"
type_conversion,log.c,2542,-,+,,25,	if (revs.pending.nr == 2) {
type_conversion,log.c,2561,-,+,,15,		char sign = '+';
type_conversion,log.c,2565,-,+,,11,			sign = '-';
type_conversion,loose.c,91,-,+,,7,		    *p++ != ' ' ||
type_conversion,loose.c,136,-,+,,77,"	fd = hold_lock_file_for_update_timeout(&lock, path.buf, LOCK_DIE_ON_ERROR, -1);"
type_conversion,loose.c,138,-,+,,76,"	if (write_in_full(fd, loose_object_header, strlen(loose_object_header)) < 0)"
type_conversion,loose.c,147,-,+,,46,"			if (write_in_full(fd, buf.buf, buf.len) < 0)"
type_conversion,loose.c,177,-,+,,72,"	hold_lock_file_for_update_timeout(&lock, path.buf, LOCK_DIE_ON_ERROR, -1);"
type_conversion,loose.c,184,-,+,,91,"	if (!st.st_size && write_in_full(fd, loose_object_header, strlen(loose_object_header)) < 0)"
type_conversion,loose.c,188,-,+,,44,"	if (write_in_full(fd, buf.buf, buf.len) < 0)"
type_conversion,ls-files.c,101,-,+,,32,"		quote_c_style(rel, sb, NULL, 0);"
type_conversion,ls-files.c,114,-,+,,23,"		memcpy(alttag, tag, 3);"
type_conversion,ls-files.c,118,-,+,,14,		} else if (tag[0] == '?') {
type_conversion,ls-files.c,119,-,+,,16,			alttag[0] = '!';
type_conversion,ls-files.c,121,-,+,,16,			alttag[0] = 'v';
type_conversion,ls-files.c,123,-,+,,16,			alttag[2] = ' ';
type_conversion,ls-files.c,124,-,+,,16,			alttag[3] = 0;
type_conversion,ls-files.c,151,-,+,,6,	if (len > ent->len)
type_conversion,ls-files.c,170,-,+,,47,"		if (!index_name_is_other(istate, ent->name, ent->len))"
type_conversion,ls-files.c,185,-,+,,41,		for (cp = ent->name; cp - ent->name < ent->len; cp = sp + 1) {
type_conversion,ls-files.c,191,-,+,,45,"				pos = index_name_pos(istate, ent->name, ent->len);"
type_conversion,ls-files.c,196,-,+,,12,				while (pos < istate->cache_nr &&
type_conversion,ls-files.c,199,-,+,,29,				if (istate->cache_nr <= pos)
type_conversion,ls-files.c,206,-,+,,21,				if ((ent->len < len) &&
type_conversion,ls-files.c,208,-,+,,22,"					     ent->name, ent->len) &&"
type_conversion,ls-files.c,209,-,+,,9,				    istate->cache[pos]->name[ent->len] == '/')
type_conversion,ls-files.c,213,-,+,,47,"			if (0 <= index_name_pos(istate, ent->name, sp - ent->name)) {"
type_conversion,ls-files.c,248,-,+,,6,	if (type == OBJ_BLOB) {
type_conversion,ls-files.c,281,-,+,,33,"			strbuf_addstr(&sb, type_name(object_type(ce->ce_mode)));"
type_conversion,ls-files.c,284,-,+,,34,"					  object_type(ce->ce_mode), 1);"
type_conversion,ls-files.c,287,-,+,,34,"					  object_type(ce->ce_mode), 0);"
type_conversion,ls-files.c,307,-,+,,25,"	fwrite(sb.buf, sb.len, 1, stdout);"
type_conversion,ls-files.c,315,-,+,,6,	if (max_prefix_len > strlen(fullname))
type_conversion,ls-files.c,321,-,+,,62,"	} else if (match_pathspec(repo->index, &pathspec, fullname, strlen(fullname),"
type_conversion,ls-files.c,360,-,+,,9,		len = strlen(path);
type_conversion,ls-files.c,401,-,+,,18,			dir->flags |= DIR_COLLECT_KILLED_ONLY;
type_conversion,ls-files.c,415,-,+,,14,	for (i = 0; i < repo->index->cache_nr; i++) {
type_conversion,ls-files.c,422,-,+,,8,		if ((dir->flags & DIR_SHOW_IGNORED) &&
type_conversion,ls-files.c,450,-,+,,54,"		    (stat_err || ie_modified(repo->index, ce, &st, 0))) {"
type_conversion,ls-files.c,461,-,+,,20,			for (j = i + 1; j < repo->index->cache_nr; j++)
type_conversion,ls-files.c,482,-,+,,39,"	pos = index_name_pos(istate, prefix, prefixlen);"
type_conversion,ls-files.c,485,-,+,,10,	first = pos;
type_conversion,ls-files.c,488,-,+,,14,		int next = first + ((last - first) >> 1);
type_conversion,ls-files.c,491,-,+,,12,			first = next+1;
type_conversion,ls-files.c,494,-,+,,10,		last = next;
type_conversion,ls-files.c,497,-,+,,28,	istate->cache_nr = last - pos;
type_conversion,ls-files.c,507,-,+,,22,	common_prefix_len = strlen(common_prefix);
type_conversion,ls-files.c,513,-,+,,6,	if (common_prefix[common_prefix_len - 1] == '/')
type_conversion,ls-files.c,649,-,+,,16,		prefix_len = strlen(prefix);
type_conversion,ls-files.c,658,-,+,,14,	for (i = 0; i < exclude_list.nr; i++) {
type_conversion,ls-files.c,678,-,+,,55,	if (show_modified || show_others || show_deleted || (dir.flags & DIR_SHOW_IGNORED) || show_killed)
type_conversion,ls-files.c,703,-,+,,28,"	parse_pathspec(&pathspec, 0,"
type_conversion,ls-files.c,721,-,+,,49,"	prune_index(the_repository->index, max_prefix, max_prefix_len);"
type_conversion,ls-files.c,725,-,+,,24,"		ps_matched = xcalloc(pathspec.nr, 1);"
type_conversion,ls-files.c,727,-,+,,7,	if ((dir.flags & DIR_SHOW_IGNORED) && !show_others && !show_cached)
type_conversion,ls-files.c,730,-,+,,7,	if ((dir.flags & DIR_SHOW_IGNORED) && !exc_given)
type_conversion,ls-refs.c,59,-,+,,14,	for (i = 0; i < prefixes->nr; i++) {
type_conversion,ls-refs.c,159,-,+,,25,"	strbuf_init(&data.buf, 0);"
type_conversion,ls-refs.c,164,-,+,,9,	while (packet_reader_read(request) == PACKET_READ_NORMAL) {
type_conversion,ls-refs.c,169,-,+,,16,			data.peel = 1;
type_conversion,ls-refs.c,171,-,+,,19,			data.symrefs = 1;
type_conversion,ls-refs.c,177,-,+,,18,			data.unborn = !!unborn_config(r);
type_conversion,ls-refs.c,182,-,+,,6,	if (request->status != PACKET_READ_FLUSH)
type_conversion,ls-refs.c,209,-,+,,15,	if (value && unborn_config(r) == UNBORN_ADVERTISE)
type_conversion,ls-remote.c,32,-,+,,30,"		if (!wildmatch(p, pathbuf, 0)) {"
type_conversion,ls-remote.c,44,-,+,,19,	unsigned flags = 0;
type_conversion,ls-remote.c,136,-,+,,28,"		if (!check_ref_type(ref, flags))"
type_conversion,ls-tree.c,26,-,+,,6,	if (type == OBJ_BLOB) {
type_conversion,ls-tree.c,60,-,+,,6,	if (options->ls_options & LS_RECURSIVE)
type_conversion,ls-tree.c,77,-,+,,20,		if (spec[len] && spec[len] != '/')
type_conversion,ls-tree.c,95,-,+,,6,"	if (type == OBJ_TREE && show_recursive(options, base->buf, base->len, pathname))"
type_conversion,ls-tree.c,97,-,+,,6,	if (type == OBJ_TREE && recurse && !(options->ls_options & LS_SHOW_TREES))
type_conversion,ls-tree.c,99,-,+,,6,	if (type == OBJ_BLOB && (options->ls_options & LS_TREE_ONLY))
type_conversion,ls-tree.c,112,-,+,,33,"			strbuf_addstr(&sb, type_name(type));"
type_conversion,ls-tree.c,114,-,+,,38,"			expand_objectsize(&sb, oid, type, 1);"
type_conversion,ls-tree.c,116,-,+,,38,"			expand_objectsize(&sb, oid, type, 0);"
type_conversion,ls-tree.c,127,-,+,,35,"			quote_c_style(name, &sb, NULL, 0);"
type_conversion,ls-tree.c,134,-,+,,25,"	fwrite(sb.buf, sb.len, 1, stdout);"
type_conversion,ls-tree.c,146,-,+,,6,	if (type == OBJ_BLOB) {
type_conversion,ls-tree.c,147,-,+,,7,		if (options->ls_options & LS_TREE_ONLY)
type_conversion,ls-tree.c,149,-,+,,13,	} else if (type == OBJ_TREE &&
type_conversion,ls-tree.c,152,-,+,,9,		if (!(options->ls_options & LS_SHOW_TREES))
type_conversion,ls-tree.c,196,-,+,,41,"	printf(""%06o %s %s\t"", mode, type_name(object_type(mode)),"
type_conversion,ls-tree.c,216,-,+,,6,	if (type == OBJ_BLOB) {
type_conversion,ls-tree.c,218,-,+,,54,"		if (oid_object_info(the_repository, oid, &size) == OBJ_BAD)"
type_conversion,ls-tree.c,227,-,+,,45,"	printf(""%06o %s %s %7s\t"", mode, type_name(type),"
type_conversion,ls-tree.c,341,-,+,,37,	struct ls_tree_options options = { 0 };
type_conversion,ls-tree.c,377,-,+,,29,	options.null_termination = null_termination;
type_conversion,ls-tree.c,388,-,+,,6,	if (cmdmode == MODE_NAME_STATUS)
type_conversion,ls-tree.c,392,-,+,,8,	if ( (LS_TREE_ONLY|LS_RECURSIVE) ==
type_conversion,ls-tree.c,393,-,+,,8,	    ((LS_TREE_ONLY|LS_RECURSIVE) & options.ls_options))
type_conversion,ls-tree.c,394,-,+,,25,		options.ls_options |= LS_SHOW_TREES;
type_conversion,ls-tree.c,419,-,+,,34,	options.pathspec.has_wildcard = 0;
type_conversion,ls-tree.c,433,-,+,,33,		} else if (!options.format && cmdmode == m2f->mode) {
type_conversion,mailinfo.c,12,-,+,,13,	for (pos = 0; pos < sb->len; pos++) {
type_conversion,mailinfo.c,14,-,+,,19,			sb->buf[pos] = ' ';
type_conversion,mailinfo.c,15,-,+,,15,			for (cnt = 0; isspace(sb->buf[pos + cnt + 1]); cnt++);
type_conversion,mailinfo.c,16,-,+,,28,"			strbuf_remove(sb, pos + 1, cnt);"
type_conversion,mailinfo.c,24,-,+,,20,"	if (!name->len || 60 < name->len || strpbrk(name->buf, ""@<>""))"
type_conversion,mailinfo.c,51,-,+,,46,"	strbuf_add(&mi->email, bra + 1, ket - bra - 1);"
type_conversion,mailinfo.c,54,-,+,,35,"	strbuf_add(&mi->name, line->buf, bra - line->buf);"
type_conversion,mailinfo.c,67,-,+,,11,		int c = *in++;
type_conversion,mailinfo.c,98,-,+,,11,		int c = *in++;
type_conversion,mailinfo.c,125,-,+,,14,	while ((c = *in++) != 0) {
type_conversion,mailinfo.c,173,-,+,,7,		if (c == '<') {
type_conversion,mailinfo.c,174,-,+,,13,			at[-1] = ' ';
type_conversion,mailinfo.c,182,-,+,,20,"	strbuf_remove(&f, at - f.buf, el + (at[el] ? 1 : 0));"
type_conversion,mailinfo.c,198,-,+,,6,	if (f.buf[0] == '(' && f.len && f.buf[f.len - 1] == ')') {
type_conversion,mailinfo.c,199,-,+,,21,"		strbuf_remove(&f, 0, 1);"
type_conversion,mailinfo.c,200,-,+,,29,"		strbuf_setlen(&f, f.len - 1);"
type_conversion,mailinfo.c,230,-,+,,22,"	strbuf_setlen(attr, 0);"
type_conversion,mailinfo.c,234,-,+,,6,"	if (*ap == '""') {"
type_conversion,mailinfo.c,258,-,+,,22,"	mi->format_flowed = has_attr_value(line->buf, ""format="", ""flowed"");"
type_conversion,mailinfo.c,259,-,+,,14,"	mi->delsp = has_attr_value(line->buf, ""delsp="", ""yes"");"
type_conversion,mailinfo.c,262,-,+,,30,"		strbuf_insertstr(boundary, 0, ""--"");"
type_conversion,mailinfo.c,301,-,+,,14,	size_t at = 0;
type_conversion,mailinfo.c,307,-,+,,11,		switch (subject->buf[at]) {
type_conversion,mailinfo.c,309,-,+,,29,			if (subject->len <= at + 3)
type_conversion,mailinfo.c,311,-,+,,27,			if ((subject->buf[at + 1] == 'e' ||
type_conversion,mailinfo.c,312,-,+,,27,			     subject->buf[at + 1] == 'E') &&
type_conversion,mailinfo.c,313,-,+,,26,			    subject->buf[at + 2] == ':') {
type_conversion,mailinfo.c,314,-,+,,32,"				strbuf_remove(subject, at, 3);"
type_conversion,mailinfo.c,320,-,+,,31,"			strbuf_remove(subject, at, 1);"
type_conversion,mailinfo.c,326,-,+,,41,			remove = pos - (subject->buf + at) + 1;
type_conversion,mailinfo.c,328,-,+,,9,			    (7 <= remove &&
type_conversion,mailinfo.c,329,-,+,,52,"			     memmem(subject->buf + at, remove, ""PATCH"", 5)))"
type_conversion,mailinfo.c,340,-,+,,12,					at += 1;
type_conversion,mailinfo.c,359,-,+,,6,	    *val++ != ':')
type_conversion,mailinfo.c,373,-,+,,6,	if (len != strlen(SAMPLE))
type_conversion,mailinfo.c,377,-,+,,40,"	if (strspn(cp, ""0123456789abcdef"") != 40)"
type_conversion,mailinfo.c,380,-,+,,60,"	return !memcmp(SAMPLE + (cp - line), cp, strlen(SAMPLE) - (cp - line));"
type_conversion,mailinfo.c,390,-,+,,14,	while ((c = *in++) != 0) {
type_conversion,mailinfo.c,392,-,+,,16,"			int ch, d = *in;"
type_conversion,mailinfo.c,418,-,+,,14,	while ((c = *in++) != 0) {
type_conversion,mailinfo.c,482,-,+,,9,"	while (in - it->buf <= it->len && (ep = strstr(in, ""=?"")) != NULL) {"
type_conversion,mailinfo.c,505,-,+,,29,"				strbuf_add(&outbuf, in, ep - in);"
type_conversion,mailinfo.c,514,-,+,,7,"		if (ep - it->buf >= it->len || !(cp = strchr(ep, '?')))"
type_conversion,mailinfo.c,517,-,+,,7,		if (cp + 3 - it->buf > it->len)
type_conversion,mailinfo.c,519,-,+,,30,"		strbuf_add(&charset_q, ep, cp - ep);"
type_conversion,mailinfo.c,521,-,+,,14,		encoding = cp[1];
type_conversion,mailinfo.c,522,-,+,,20,		if (!encoding || cp[2] != '?')
type_conversion,mailinfo.c,527,-,+,,43,"		strbuf_add(&piecebuf, cp + 3, ep - cp - 3);"
type_conversion,mailinfo.c,671,-,+,,18,	if (line->len < 4)
type_conversion,mailinfo.c,676,-,+,,7,		if (line->buf[3] == ' ' && !isspace(line->buf[4]))
type_conversion,mailinfo.c,679,-,+,,12,		for (i = 3; i < line->len; i++) {
type_conversion,mailinfo.c,680,-,+,,22,			unsigned char c = line->buf[i];
type_conversion,mailinfo.c,681,-,+,,8,			if (c == '\n')
type_conversion,mailinfo.c,709,-,+,,7,		if (*c == '-') {
type_conversion,mailinfo.c,735,-,+,,46,		visible = last_nonblank - first_nonblank + 1;
type_conversion,mailinfo.c,755,-,+,,7,	    (line->buf[0] == ' ' || line->buf[0] == '\t')) {
type_conversion,mailinfo.c,772,-,+,,63,"		return is_format_patch_separator(line->buf + 1, line->len - 1);"
type_conversion,mailinfo.c,794,-,+,,35,		if (!line->len || (line->len == 1 && line->buf[0] == '\n')) {
type_conversion,mailinfo.c,820,-,+,,35,"		strbuf_setlen(&mi->log_message, 0);"
type_conversion,mailinfo.c,848,-,+,,20,"	fwrite(line->buf, 1, line->len, mi->patchfile);"
type_conversion,mailinfo.c,883,-,+,,15,	while ((ch = *cp++)) {
type_conversion,mailinfo.c,928,-,+,,25,		continuation.buf[0] = ' ';
type_conversion,mailinfo.c,952,-,+,,47,	if (line->len >= (*(mi->content_top))->len + 2 &&
type_conversion,mailinfo.c,953,-,+,,59,"	    !memcmp(line->buf + (*(mi->content_top))->len, ""--"", 2)) {"
type_conversion,mailinfo.c,1003,-,+,,14,		if (len >= 2 &&
type_conversion,mailinfo.c,1004,-,+,,23,		    line->buf[len - 2] == '\r' &&
type_conversion,mailinfo.c,1005,-,+,,23,		    line->buf[len - 1] == '\n') {
type_conversion,mailinfo.c,1006,-,+,,25,			mi->have_quoted_cr = 1;
type_conversion,mailinfo.c,1007,-,+,,25,			if (mi->quoted_cr == quoted_cr_strip) {
type_conversion,mailinfo.c,1008,-,+,,31,"				strbuf_setlen(line, len - 2);"
type_conversion,mailinfo.c,1017,-,+,,22,	if (line->buf[len - 1] == '\n') {
type_conversion,mailinfo.c,1019,-,+,,30,		if (len && line->buf[len - 1] == '\r')
type_conversion,mailinfo.c,1024,-,+,,46,"	if (skip_prefix(line->buf, ""-- "", &rest) && rest - line->buf == len) {"
type_conversion,mailinfo.c,1034,-,+,,13,	if (len && line->buf[0] == ' ') {
type_conversion,mailinfo.c,1035,-,+,,23,"		strbuf_remove(line, 0, 1);"
type_conversion,mailinfo.c,1040,-,+,,29,	if (len && line->buf[len - 1] == ' ') {
type_conversion,mailinfo.c,1041,-,+,,37,"		strbuf_add(prev, line->buf, len - !!mi->delsp);"
type_conversion,mailinfo.c,1046,-,+,,22,"	strbuf_insert(line, 0, prev->buf, prev->len);"
type_conversion,mailinfo.c,1055,-,+,,23,	    mi->quoted_cr == quoted_cr_warn)
type_conversion,mailinfo.c,1078,-,+,,25,			mi->have_quoted_cr = 0;
type_conversion,mailinfo.c,1093,-,+,,24,"			strbuf_insert(line, 0, prev.buf, prev.len);"
type_conversion,mailinfo.c,1104,-,+,,28,					if (sb->buf[sb->len - 1] != '\n') {
type_conversion,mailinfo.c,1143,-,+,,10,			len = strlen(sp);
type_conversion,mailinfo.c,1145,-,+,,10,			len = ep - sp;
type_conversion,mailinfo.c,1226,-,+,,30,"	fwrite(mi->log_message.buf, 1, mi->log_message.len, cmitmsg);"
type_conversion,mailinfo.c,1238,-,+,,13,		*action = quoted_cr_nowarn;
type_conversion,mailinfo.c,1240,-,+,,13,		*action = quoted_cr_warn;
type_conversion,mailinfo.c,1242,-,+,,13,		*action = quoted_cr_strip;
type_conversion,mailinfo.c,1273,-,+,,25,"	strbuf_init(&mi->name, 0);"
type_conversion,mailinfo.c,1274,-,+,,26,"	strbuf_init(&mi->email, 0);"
type_conversion,mailinfo.c,1275,-,+,,28,"	strbuf_init(&mi->charset, 0);"
type_conversion,mailinfo.c,1276,-,+,,32,"	strbuf_init(&mi->log_message, 0);"
type_conversion,mailinfo.c,1277,-,+,,40,"	strbuf_init(&mi->inbody_header_accum, 0);"
type_conversion,mailinfo.c,1278,-,+,,18,	mi->quoted_cr = quoted_cr_warn;
type_conversion,mailmap.c,41,-,+,,31,	me->namemap.strdup_strings = 1;
type_conversion,mailmap.c,77,-,+,,32,		me->namemap.strdup_strings = 1;
type_conversion,mailmap.c,93,-,+,,37,"		struct mailmap_info *mi = xcalloc(1, sizeof(struct mailmap_info));"
type_conversion,mailmap.c,123,-,+,,14,	*(nend+1) = '\0';
type_conversion,mailmap.c,124,-,+,,13,	*right++ = '\0';
type_conversion,mailmap.c,126,-,+,,10,	return (*right == '\0' ? NULL : right);
type_conversion,mailmap.c,133,-,+,,6,	if (buffer[0] == '#')
type_conversion,mailmap.c,168,-,+,,23,"	while (fgets(buffer, sizeof(buffer), f) != NULL)"
type_conversion,mailmap.c,180,-,+,,13,			*end++ = '\0';
type_conversion,mailmap.c,202,-,+,,6,	if (type != OBJ_BLOB)
type_conversion,mailmap.c,215,-,+,,24,	map->strdup_strings = 1;
type_conversion,mailmap.c,227,-,+,,50,"	err |= read_mailmap_file(map, git_mailmap_file, 0);"
type_conversion,mailmap.c,233,-,+,,24,	map->strdup_strings = 1;
type_conversion,mailmap.c,268,-,+,,21,	while (0 <= --i && i < map->nr) {
type_conversion,mailsplit.c,19,-,+,,40,"	if (len < 20 || memcmp(""From "", line, 5))"
type_conversion,mailsplit.c,27,-,+,,7,		if (*--colon == ':')
type_conversion,mailsplit.c,39,-,+,,35,"	if (strtol(colon+3, NULL, 10) <= 90)"
type_conversion,mailsplit.c,72,-,+,,39,"	int is_bare = !is_from_line(buf.buf, buf.len);"
type_conversion,mailsplit.c,85,-,+,,29,		if (!keep_cr && buf.len > 1 && buf.buf[buf.len-1] == '\n' &&
type_conversion,mailsplit.c,86,-,+,,20,			buf.buf[buf.len-2] == '\r') {
type_conversion,mailsplit.c,87,-,+,,32,"			strbuf_setlen(&buf, buf.len-2);"
type_conversion,mailsplit.c,92,-,+,,24,"			strbuf_remove(&buf, 0, 1);"
type_conversion,mailsplit.c,94,-,+,,23,"		if (fwrite(buf.buf, 1, buf.len, output) != buf.len)"
type_conversion,mailsplit.c,104,-,+,,41,"		if (!is_bare && is_from_line(buf.buf, buf.len))"
type_conversion,mailsplit.c,131,-,+,,8,			if (dent->d_name[0] == '.')
type_conversion,mailsplit.c,156,-,+,,12,				return na - nb;
type_conversion,mailsplit.c,160,-,+,,8,			if (*a != *b)
type_conversion,mailsplit.c,161,-,+,,12,				return (unsigned char)*a - (unsigned char)*b;
type_conversion,mailsplit.c,166,-,+,,9,	return (unsigned char)*a - (unsigned char)*b;
type_conversion,mailsplit.c,183,-,+,,14,	for (i = 0; i < list.nr; i++) {
type_conversion,mailsplit.c,285,-,+,,7,		if (arg[0] != '-')
type_conversion,mailsplit.c,288,-,+,,8,		if ( arg[1] == 'd' ) {
type_conversion,mailsplit.c,293,-,+,,15,		} else if ( arg[1] == 'f' ) {
type_conversion,mailsplit.c,295,-,+,,15,		} else if ( arg[1] == 'h' ) {
type_conversion,mailsplit.c,297,-,+,,15,		} else if ( arg[1] == 'b' && !arg[2] ) {
type_conversion,mailsplit.c,301,-,+,,15,		} else if ( arg[1] == 'o' && arg[2] ) {
type_conversion,mailsplit.c,305,-,+,,15,		} else if ( arg[1] == '-' && !arg[2] ) {
type_conversion,mailsplit.c,316,-,+,,11,		switch (argc - (argp-argv)) {
type_conversion,mailsplit.c,317,-,+,,8,		case 1:
type_conversion,mailsplit.c,321,-,+,,8,		case 2:
type_conversion,mailsplit.c,340,-,+,,7,		if (arg[0] == '-' && arg[1] == 0) {
type_conversion,match-trees.c,64,-,+,,6,	if (type != OBJ_TREE)
type_conversion,match-trees.c,73,-,+,,36,"	return base_name_compare(a->path, tree_entry_len(a), a->mode,"
type_conversion,match-trees.c,74,-,+,,15,"				 b->path, tree_entry_len(b), b->mode);"
type_conversion,match-trees.c,190,-,+,,11,	toplen = subpath - prefix;
type_conversion,match-trees.c,205,-,+,,23,		if (strlen(name) == toplen &&
type_conversion,match-trees.c,206,-,+,,29,"		    !memcmp(name, prefix, toplen)) {"
type_conversion,match-trees.c,272,-,+,,23,"	add_prefix = xcalloc(1, 1);"
type_conversion,match-trees.c,273,-,+,,23,"	del_prefix = xcalloc(1, 1);"
type_conversion,match-trees.c,322,-,+,,23,	unsigned candidate = 0;
type_conversion,match-trees.c,327,-,+,,16,		candidate |= 1;
type_conversion,match-trees.c,332,-,+,,16,		candidate |= 2;
type_conversion,match-trees.c,334,-,+,,19,	if (candidate == 3) {
type_conversion,match-trees.c,339,-,+,,15,		candidate = 0;
type_conversion,match-trees.c,342,-,+,,16,			candidate = 1;
type_conversion,match-trees.c,347,-,+,,16,			candidate = 2;
type_conversion,match-trees.c,356,-,+,,19,	if (candidate == 1)
type_conversion,mem-pool.c,64,-,+,,21,	if (initial_size > 0)
type_conversion,mem-pool.c,79,-,+,,39,"			memset(block_to_free->space, 0xDD, ((char *)block_to_free->end) - ((char *)block_to_free->space));"
type_conversion,mem-pool.c,85,-,+,,21,	pool->pool_alloc = 0;
type_conversion,mem-pool.c,96,-,+,,6,	    pool->mp_block->end - pool->mp_block->next_free >= len)
type_conversion,mem-pool.c,100,-,+,,35,		if (len >= (pool->block_alloc / 2))
type_conversion,mem-pool.c,116,-,+,,61,	size_t available = block ? block->end - block->next_free : 0;
type_conversion,mem-pool.c,128,-,+,,16,"	size = st_add(len, 1); /* 1 for NUL */"
type_conversion,mem-pool.c,162,-,+,,29,	size_t len = strlen(str) + 1;
type_conversion,mem-pool.c,171,-,+,,27,	size_t actual_len = (p ? p - str : len);
type_conversion,mem-pool.c,172,-,+,,46,"	char *ret = mem_pool_alloc(pool, actual_len+1);"
type_conversion,mem-pool.c,174,-,+,,20,	ret[actual_len] = '\0';
type_conversion,mem-pool.c,216,-,+,,20,	src->pool_alloc = 0;
type_conversion,merge-blobs.c,17,-,+,,6,	if (type != OBJ_BLOB) {
type_conversion,merge-blobs.c,22,-,+,,12,	f->size = size;
type_conversion,merge-blobs.c,50,-,+,,6,	if (merge_status < 0)
type_conversion,merge-blobs.c,52,-,+,,6,	if (merge_status == LL_MERGE_BINARY_CONFLICT)
type_conversion,merge-blobs.c,56,-,+,,10,	*size = res.size;
type_conversion,merge-blobs.c,94,-,+,,17,		common.size = 0;
type_conversion,merge-file.c,36,-,+,,23,	if (diff_algorithm < 0)
type_conversion,merge-file.c,38,-,+,,57,	xpp->flags = (xpp->flags & ~XDF_DIFF_ALGORITHM_MASK) | diff_algorithm;
type_conversion,merge-file.c,61,-,+,,20,	xmparam_t xmp = { 0 };
type_conversion,merge-file.c,130,-,+,,21,		if (ret != -1 && (mmf->size > MAX_XDIFF_SIZE ||
type_conversion,merge-file.c,131,-,+,,34,"		    buffer_is_binary(mmf->ptr, mmf->size))) {"
type_conversion,merge-file.c,151,-,+,,39,"				if (write_object_file(result.ptr, result.size, OBJ_BLOB, &oid) < 0)"
type_conversion,merge-file.c,167,-,+,,25,"				 fwrite(result.ptr, result.size, 1, f) != 1)"
type_conversion,merge-index.c,20,-,+,,6,	if (pos >= the_repository->index->cache_nr)
type_conversion,merge-index.c,34,-,+,,11,	} while (++pos < the_repository->index->cache_nr);
type_conversion,merge-index.c,53,-,+,,56,"	int pos = index_name_pos(the_repository->index, path, strlen(path));"
type_conversion,merge-index.c,68,-,+,,14,	for (i = 0; i < the_repository->index->cache_nr; i++) {
type_conversion,merge-index.c,105,-,+,,22,		if (!force_file && *arg == '-') {
type_conversion,merge-ll.c,76,-,+,,11,		switch (opts->variant) {
type_conversion,merge-ll.c,113,-,+,,6,	if (orig->size > MAX_XDIFF_SIZE ||
type_conversion,merge-ll.c,114,-,+,,6,	    src1->size > MAX_XDIFF_SIZE ||
type_conversion,merge-ll.c,115,-,+,,6,	    src2->size > MAX_XDIFF_SIZE ||
type_conversion,merge-ll.c,116,-,+,,34,"	    buffer_is_binary(orig->ptr, orig->size) ||"
type_conversion,merge-ll.c,117,-,+,,34,"	    buffer_is_binary(src1->ptr, src1->size) ||"
type_conversion,merge-ll.c,118,-,+,,34,"	    buffer_is_binary(src2->ptr, src2->size)) {"
type_conversion,merge-ll.c,129,-,+,,14,	xmp.favor = opts->variant;
type_conversion,merge-ll.c,130,-,+,,18,	xmp.xpp.flags = opts->xdl_opts;
type_conversion,merge-ll.c,141,-,+,,23,	ret = (status > 0) ? LL_MERGE_CONFLICT : status;
type_conversion,merge-ll.c,179,-,+,,34,"	if (write_in_full(fd, src->ptr, src->size) < 0)"
type_conversion,merge-ll.c,209,-,+,,17,	result->size = 0;
type_conversion,merge-ll.c,237,-,+,,20,	child.use_shell = 1;
type_conversion,merge-ll.c,246,-,+,,25,	result->ptr = xmallocz(result->size);
type_conversion,merge-ll.c,247,-,+,,36,"	if (read_in_full(fd, result->ptr, result->size) != result->size) {"
type_conversion,merge-ll.c,249,-,+,,18,		result->size = 0;
type_conversion,merge-ll.c,379,-,+,,14,	for (i = 0; i < ARRAY_SIZE(ll_merge_drv); i++)
type_conversion,merge-ll.c,390,-,+,,48,"	if (renormalize_buffer(istate, path, mm->ptr, mm->size, &strbuf)) {"
type_conversion,merge-ll.c,392,-,+,,14,		mm->size = strbuf.len;
type_conversion,merge-ort.c,68,-,+,,38,static unsigned RESULT_INITIALIZED = 0x1abe11ed; /* unlikely accidental value */
type_conversion,merge-ort.c,666,-,+,,29,	for (i = MERGE_SIDE1; i <= MERGE_SIDE2; ++i) {
type_conversion,merge-ort.c,682,-,+,,29,	for (i = MERGE_SIDE1; i <= MERGE_SIDE2; ++i) {
type_conversion,merge-ort.c,685,-,+,,46,		renames->deferred[i].trivial_merges_okay = 1; /* 1 == maybe */
type_conversion,merge-ort.c,688,-,+,,29,	renames->dir_rename_mask = 0;
type_conversion,merge-ort.c,697,-,+,,20,			for (int i = 0; i < list->nr; i++) {
type_conversion,merge-ort.c,735,-,+,,27,"	strbuf_addchars(sb, ' ', indent);"
type_conversion,merge-ort.c,781,-,+,,17,"	info = xcalloc(1, sizeof(*info));"
type_conversion,merge-ort.c,792,-,+,,19,		for (int i = 0; i < other_paths->nr; i++)
type_conversion,merge-ort.c,800,-,+,,30,"		strbuf_addchars(dest, ' ', 2);"
type_conversion,merge-ort.c,802,-,+,,30,"		strbuf_addchars(dest, ' ', opt->priv->call_depth * 2);"
type_conversion,merge-ort.c,816,-,+,,31,"		strbuf_grow(&buf, buf.len + 2*tmp.len); /* more than sufficient */"
type_conversion,merge-ort.c,817,-,+,,10,"		for (; i_tmp < tmp.len; i_tmp++, i_sb++) {"
type_conversion,merge-ort.c,819,-,+,,22,			buf.buf[buf.len + i_sb] = tmp.buf[i_tmp];
type_conversion,merge-ort.c,822,-,+,,8,			if (tmp.buf[i_tmp] == '\n')
type_conversion,merge-ort.c,823,-,+,,23,				buf.buf[++i_sb] = ' ';
type_conversion,merge-ort.c,826,-,+,,14,		buf.len += i_sb;
type_conversion,merge-ort.c,827,-,+,,22,		buf.buf[buf.len] = '\0';
type_conversion,merge-ort.c,841,-,+,,31,"	spec = mem_pool_calloc(pool, 1, sizeof(*spec));"
type_conversion,merge-ort.c,857,-,+,,29,"	dp = mem_pool_calloc(pool, 1, sizeof(*dp));"
type_conversion,merge-ort.c,871,-,+,,7,		if (out->buf[i] == '/')
type_conversion,merge-ort.c,872,-,+,,18,			out->buf[i] = '_';
type_conversion,merge-ort.c,895,-,+,,55,"	ret = mem_pool_alloc(&opt->priv->pool, newpath.len + 1);"
type_conversion,merge-ort.c,896,-,+,,41,"	memcpy(ret, newpath.buf, newpath.len + 1);"
type_conversion,merge-ort.c,911,-,+,,22,	unsigned filemask = mask & ~dirmask;
type_conversion,merge-ort.c,919,-,+,,30,		renames->dir_rename_mask = 0x07;
type_conversion,merge-ort.c,929,-,+,,9,	return mask;
type_conversion,merge-ort.c,999,-,+,,41,"	mi = mem_pool_calloc(&opt->priv->pool, 1,"
type_conversion,merge-ort.c,1003,-,+,,24,	mi->basename_offset = current_dir_name_len;
type_conversion,merge-ort.c,1004,-,+,,14,	mi->clean = !!resolved;
type_conversion,merge-ort.c,1006,-,+,,21,		mi->result.mode = merged_version->mode;
type_conversion,merge-ort.c,1008,-,+,,17,		mi->is_null = !!is_null;
type_conversion,merge-ort.c,1014,-,+,,29,		for (i = MERGE_BASE; i <= MERGE_SIDE2; i++) {
type_conversion,merge-ort.c,1016,-,+,,25,			ci->stages[i].mode = names[i].mode;
type_conversion,merge-ort.c,1021,-,+,,21,		ci->df_conflict = !!df_conflict;
type_conversion,merge-ort.c,1032,-,+,,18,			mi->is_null = 1;
type_conversion,merge-ort.c,1049,-,+,,34,	int names_idx = is_add ? side : 0;
type_conversion,merge-ort.c,1057,-,+,,46,		unsigned content_relevant = (match_mask == 0);
type_conversion,merge-ort.c,1058,-,+,,52,		unsigned location_relevant = (dir_rename_mask == 0x07);
type_conversion,merge-ort.c,1085,-,+,,11,				      content_relevant ? RELEVANT_CONTENT : RELEVANT_LOCATION);
type_conversion,merge-ort.c,1101,-,+,,35,"		      &names[names_idx].oid, 1, names[names_idx].mode);"
type_conversion,merge-ort.c,1137,-,+,,6,	if (renames->dir_rename_mask != 0x07 &&
type_conversion,merge-ort.c,1138,-,+,,18,	    (dirmask == 3 || dirmask == 5)) {
type_conversion,merge-ort.c,1143,-,+,,41,		renames->dir_rename_mask = (dirmask & ~1);
type_conversion,merge-ort.c,1147,-,+,,17,	if (dirmask == 1 || dirmask == 3 || dirmask == 5) {
type_conversion,merge-ort.c,1149,-,+,,21,		unsigned sides = (0x07 - dirmask)/2;
type_conversion,merge-ort.c,1150,-,+,,25,		unsigned relevance = (renames->dir_rename_mask == 0x07) ?
type_conversion,merge-ort.c,1160,-,+,,15,		if (sides & 1)
type_conversion,merge-ort.c,1162,-,+,,11,				      relevance);
type_conversion,merge-ort.c,1163,-,+,,15,		if (sides & 2)
type_conversion,merge-ort.c,1165,-,+,,11,				      relevance);
type_conversion,merge-ort.c,1173,-,+,,6,	if (renames->dir_rename_mask == 0x07 &&
type_conversion,merge-ort.c,1174,-,+,,19,	    (filemask == 2 || filemask == 4)) {
type_conversion,merge-ort.c,1182,-,+,,19,		unsigned side = 3 - (filemask >> 1);
type_conversion,merge-ort.c,1184,-,+,,10,			      RELEVANT_FOR_SELF);
type_conversion,merge-ort.c,1187,-,+,,18,	if (filemask == 0 || filemask == 7)
type_conversion,merge-ort.c,1190,-,+,,35,	for (side = MERGE_SIDE1; side <= MERGE_SIDE2; ++side) {
type_conversion,merge-ort.c,1191,-,+,,24,		unsigned side_mask = (1 << side);
type_conversion,merge-ort.c,1194,-,+,,19,		if ((filemask & 1) && !(filemask & side_mask))
type_conversion,merge-ort.c,1195,-,+,,41,"			add_pair(opt, names, fullname, side, 0 /* delete */,"
type_conversion,merge-ort.c,1197,-,+,,6,				 renames->dir_rename_mask);
type_conversion,merge-ort.c,1200,-,+,,20,		if (!(filemask & 1) && (filemask & side_mask))
type_conversion,merge-ort.c,1201,-,+,,41,"			add_pair(opt, names, fullname, side, 1 /* add */,"
type_conversion,merge-ort.c,1203,-,+,,6,				 renames->dir_rename_mask);
type_conversion,merge-ort.c,1228,-,+,,34,	unsigned prev_dir_rename_mask = renames->dir_rename_mask;
type_conversion,merge-ort.c,1229,-,+,,22,	unsigned filemask = mask & ~dirmask;
type_conversion,merge-ort.c,1230,-,+,,24,	unsigned match_mask = 0; /* will be updated below */
type_conversion,merge-ort.c,1231,-,+,,33,	unsigned mbase_null = !(mask & 1);
type_conversion,merge-ort.c,1232,-,+,,33,	unsigned side1_null = !(mask & 2);
type_conversion,merge-ort.c,1233,-,+,,33,	unsigned side2_null = !(mask & 4);
type_conversion,merge-ort.c,1234,-,+,,33,"	unsigned side1_matches_mbase = (!side1_null && !mbase_null &&
					names[0].mode == names[1].mode &&
					oideq(&names[0].oid, &names[1].oid));"
type_conversion,merge-ort.c,1237,-,+,,33,"	unsigned side2_matches_mbase = (!side2_null && !mbase_null &&
					names[0].mode == names[2].mode &&
					oideq(&names[0].oid, &names[2].oid));"
type_conversion,merge-ort.c,1240,-,+,,25,"	unsigned sides_match = (!side1_null && !side2_null &&
				names[1].mode == names[2].mode &&
				oideq(&names[1].oid, &names[2].oid));"
type_conversion,merge-ort.c,1258,-,+,,38,	unsigned df_conflict = (filemask != 0) && (dirmask != 0);
type_conversion,merge-ort.c,1277,-,+,,16,		match_mask = (side2_matches_mbase ? 7 : 3);
type_conversion,merge-ort.c,1279,-,+,,16,		match_mask = 5;
type_conversion,merge-ort.c,1281,-,+,,16,		match_mask = 6;
type_conversion,merge-ort.c,1290,-,+,,32,"	len = traverse_path_len(info, p->pathlen);"
type_conversion,merge-ort.c,1293,-,+,,52,"	fullpath = mem_pool_alloc(&opt->priv->pool, len + 1);"
type_conversion,merge-ort.c,1294,-,+,,37,"	make_traverse_path(fullpath, len + 1, info, p->path, p->pathlen);"
type_conversion,merge-ort.c,1303,-,+,,38,"		setup_path_info(opt, &pi, dirname, info->pathlen, fullpath,"
type_conversion,merge-ort.c,1304,-,+,,33,"				names, names+0, mbase_null, 0 /* df_conflict */,"
type_conversion,merge-ort.c,1305,-,+,,15,"				filemask, dirmask, 1 /* resolved */);"
type_conversion,merge-ort.c,1306,-,+,,10,		return mask;
type_conversion,merge-ort.c,1315,-,+,,33,	if (sides_match && filemask == 0x07) {
type_conversion,merge-ort.c,1317,-,+,,38,"		setup_path_info(opt, &pi, dirname, info->pathlen, fullpath,"
type_conversion,merge-ort.c,1318,-,+,,33,"				names, names+1, side1_null, 0,"
type_conversion,merge-ort.c,1319,-,+,,15,"				filemask, dirmask, 1);"
type_conversion,merge-ort.c,1320,-,+,,10,		return mask;
type_conversion,merge-ort.c,1329,-,+,,41,	if (side1_matches_mbase && filemask == 0x07) {
type_conversion,merge-ort.c,1331,-,+,,38,"		setup_path_info(opt, &pi, dirname, info->pathlen, fullpath,"
type_conversion,merge-ort.c,1332,-,+,,33,"				names, names+2, side2_null, 0,"
type_conversion,merge-ort.c,1333,-,+,,15,"				filemask, dirmask, 1);"
type_conversion,merge-ort.c,1334,-,+,,10,		return mask;
type_conversion,merge-ort.c,1338,-,+,,41,	if (side2_matches_mbase && filemask == 0x07) {
type_conversion,merge-ort.c,1340,-,+,,38,"		setup_path_info(opt, &pi, dirname, info->pathlen, fullpath,"
type_conversion,merge-ort.c,1341,-,+,,33,"				names, names+1, side1_null, 0,"
type_conversion,merge-ort.c,1342,-,+,,15,"				filemask, dirmask, 1);"
type_conversion,merge-ort.c,1343,-,+,,10,		return mask;
type_conversion,merge-ort.c,1358,-,+,,18,"			    filemask, dirmask, match_mask);"
type_conversion,merge-ort.c,1366,-,+,,37,"	setup_path_info(opt, &pi, dirname, info->pathlen, fullpath,"
type_conversion,merge-ort.c,1367,-,+,,17,"			names, NULL, 0, df_conflict, filemask, dirmask, 0);"
type_conversion,merge-ort.c,1387,-,+,,10,"		side = side1_matches_mbase ? MERGE_SIDE2 :
			side2_matches_mbase ? MERGE_SIDE1 : MERGE_BASE;"
type_conversion,merge-ort.c,1389,-,+,,19,		if (filemask == 0 && (dirmask == 2 || dirmask == 4)) {
type_conversion,merge-ort.c,1394,-,+,,22,			ci->match_mask = (7 - dirmask);
type_conversion,merge-ort.c,1395,-,+,,21,			side = dirmask / 2;
type_conversion,merge-ort.c,1397,-,+,,7,		if (renames->dir_rename_mask != 0x07 &&
type_conversion,merge-ort.c,1398,-,+,,15,		    side != MERGE_BASE &&
type_conversion,merge-ort.c,1403,-,+,,22,"				      pi.string, renames->dir_rename_mask);"
type_conversion,merge-ort.c,1405,-,+,,11,			return mask;
type_conversion,merge-ort.c,1413,-,+,,21,		newinfo.namelen = p->pathlen;
type_conversion,merge-ort.c,1425,-,+,,29,		for (i = MERGE_BASE; i <= MERGE_SIDE2; i++) {
type_conversion,merge-ort.c,1434,-,+,,19,				if (dirmask & 1)
type_conversion,merge-ort.c,1444,-,+,,7,		if (renames->dir_rename_mask == 0 ||
type_conversion,merge-ort.c,1445,-,+,,7,		    renames->dir_rename_mask == 0x07)
type_conversion,merge-ort.c,1452,-,+,,29,		for (i = MERGE_BASE; i <= MERGE_SIDE2; i++)
type_conversion,merge-ort.c,1459,-,+,,9,	return mask;
type_conversion,merge-ort.c,1469,-,+,,23,	ci->merged.is_null = is_null_oid(&ci->stages[side].oid);
type_conversion,merge-ort.c,1470,-,+,,19,	ci->match_mask = 0;
type_conversion,merge-ort.c,1471,-,+,,21,	ci->merged.clean = 1; /* (ci->filemask == 0); */
type_conversion,merge-ort.c,1483,-,+,,22,	path_count_before = strmap_get_size(&opt->priv->paths);
type_conversion,merge-ort.c,1484,-,+,,35,	for (side = MERGE_SIDE1; side <= MERGE_SIDE2; side++) {
type_conversion,merge-ort.c,1485,-,+,,32,		unsigned optimization_okay = 1;
type_conversion,merge-ort.c,1505,-,+,,25,				optimization_okay = 0;
type_conversion,merge-ort.c,1525,-,+,,19,				*dir_marker = '\0';
type_conversion,merge-ort.c,1552,-,+,,31,			unsigned dir_rename_mask = (intptr_t)entry->value;
type_conversion,merge-ort.c,1561,-,+,,14,			dirmask = ci->dirmask;
type_conversion,merge-ort.c,1572,-,+,,36,			info->pathlen = info->namelen + 1;
type_conversion,merge-ort.c,1575,-,+,,19,				if (i == 1 && ci->match_mask == 3)
type_conversion,merge-ort.c,1577,-,+,,24,				else if (i == 2 && ci->match_mask == 5)
type_conversion,merge-ort.c,1579,-,+,,24,				else if (i == 2 && ci->match_mask == 6)
type_conversion,merge-ort.c,1583,-,+,,20,					if (dirmask & 1)
type_conversion,merge-ort.c,1590,-,+,,22,			ci->match_mask &= ci->filemask;
type_conversion,merge-ort.c,1593,-,+,,8,			if (renames->dir_rename_mask == 0 ||
type_conversion,merge-ort.c,1594,-,+,,8,			    renames->dir_rename_mask == 0x07)
type_conversion,merge-ort.c,1599,-,+,,30,			for (i = MERGE_BASE; i <= MERGE_SIDE2; i++)
type_conversion,merge-ort.c,1620,-,+,,23,			path_count_after = strmap_get_size(&opt->priv->paths);
type_conversion,merge-ort.c,1640,-,+,,34,			renames->redo_after_renames = 1;
type_conversion,merge-ort.c,1643,-,+,,44,	} else if (renames->redo_after_renames == 2)
type_conversion,merge-ort.c,1644,-,+,,33,		renames->redo_after_renames = 0;
type_conversion,merge-ort.c,1710,-,+,,39,"	setup_revisions(ARRAY_SIZE(rev_args)-1, rev_args, &revs, &rev_opts);"
type_conversion,merge-ort.c,1733,-,+,,14,	for (i = 0; i < merges.nr; i++) {
type_conversion,merge-ort.c,1737,-,+,,15,		for (j = 0; j < merges.nr; j++) {
type_conversion,merge-ort.c,1759,-,+,,9,	return result->nr;
type_conversion,merge-ort.c,1779,-,+,,17,	int sub_flag = CONFLICT_SUBMODULE_FAILED_TO_MERGE;
type_conversion,merge-ort.c,1794,-,+,,14,		sub_flag = CONFLICT_SUBMODULE_NOT_INITIALIZED;
type_conversion,merge-ort.c,1813,-,+,,14,		sub_flag = CONFLICT_SUBMODULE_HISTORY_NOT_AVAILABLE;
type_conversion,merge-ort.c,1928,-,+,,15,		for (i = 0; i < merges.nr; i++)
type_conversion,merge-ort.c,1973,-,+,,28,	attr_index->initialized = 1;
type_conversion,merge-ort.c,1984,-,+,,43,"		ce = make_empty_cache_entry(attr_index, len);"
type_conversion,merge-ort.c,1985,-,+,,32,		ce->ce_mode = create_ce_mode(mi->result.mode);
type_conversion,merge-ort.c,1986,-,+,,34,		ce->ce_flags = create_ce_flags(0);
type_conversion,merge-ort.c,1987,-,+,,20,		ce->ce_namelen = len;
type_conversion,merge-ort.c,1989,-,+,,40,"		memcpy(ce->name, GITATTRIBUTES_FILE, len);"
type_conversion,merge-ort.c,1999,-,+,,26,			unsigned stage_mask = (1 << stage);
type_conversion,merge-ort.c,2004,-,+,,44,"			ce = make_empty_cache_entry(attr_index, len);"
type_conversion,merge-ort.c,2005,-,+,,33,			ce->ce_mode = create_ce_mode(ci->stages[stage].mode);
type_conversion,merge-ort.c,2006,-,+,,35,			ce->ce_flags = create_ce_flags(stage);
type_conversion,merge-ort.c,2007,-,+,,21,			ce->ce_namelen = len;
type_conversion,merge-ort.c,2009,-,+,,41,"			memcpy(ce->name, GITATTRIBUTES_FILE, len);"
type_conversion,merge-ort.c,2035,-,+,,24,	ll_opts.renormalize = opt->renormalize;
type_conversion,merge-ort.c,2036,-,+,,30,	ll_opts.extra_marker_size = extra_marker_size;
type_conversion,merge-ort.c,2041,-,+,,30,		ll_opts.virtual_ancestor = 1;
type_conversion,merge-ort.c,2042,-,+,,21,		ll_opts.variant = 0;
type_conversion,merge-ort.c,2052,-,+,,22,			ll_opts.variant = 0;
type_conversion,merge-ort.c,2075,-,+,,6,	if (merge_status == LL_MERGE_BINARY_CONFLICT)
type_conversion,merge-ort.c,2087,-,+,,9,	return merge_status;
type_conversion,merge-ort.c,2112,-,+,,19,	unsigned clean = 1;
type_conversion,merge-ort.c,2122,-,+,,6,	if (a->mode == b->mode || a->mode == o->mode)
type_conversion,merge-ort.c,2128,-,+,,12,		clean = (b->mode == o->mode);
type_conversion,merge-ort.c,2168,-,+,,24,		two_way = ((S_IFMT & o->mode) != (S_IFMT & a->mode));
type_conversion,merge-ort.c,2180,-,+,,41,"		    write_object_file(result_buf.ptr, result_buf.size,"
type_conversion,merge-ort.c,2187,-,+,,12,		clean &= (merge_status == 0);
type_conversion,merge-ort.c,2191,-,+,,28,		int two_way = ((S_IFMT & o->mode) != (S_IFMT & a->mode));
type_conversion,merge-ort.c,2192,-,+,,11,"		clean = merge_submodule(opt, pathnames[0],
					two_way ? null_oid() : &o->oid,
					&a->oid, &b->oid, &result->oid);"
type_conversion,merge-ort.c,2201,-,+,,12,			clean = 0;
type_conversion,merge-ort.c,2207,-,+,,13,				clean = 0;
type_conversion,merge-ort.c,2222,-,+,,9,	return clean;
type_conversion,merge-ort.c,2250,-,+,,11,	oldlen = strlen(old_dir);
type_conversion,merge-ort.c,2251,-,+,,6,	if (*new_dir == '\0')
type_conversion,merge-ort.c,2261,-,+,,16,	new_dir_len = strlen(new_dir);
type_conversion,merge-ort.c,2262,-,+,,11,	newlen = new_dir_len + (strlen(old_path) - oldlen) + 1;
type_conversion,merge-ort.c,2263,-,+,,25,"	strbuf_grow(&new_path, newlen);"
type_conversion,merge-ort.c,2264,-,+,,33,"	strbuf_add(&new_path, new_dir, new_dir_len);"
type_conversion,merge-ort.c,2277,-,+,,36,	return mi->clean || (side_mask & (ci->filemask | ci->dirmask));
type_conversion,merge-ort.c,2323,-,+,,54,"	} else if (path_in_way(&opt->priv->paths, new_path, 1 << side_index)) {"
type_conversion,merge-ort.c,2324,-,+,,30,		c_info->reported_already = 1;
type_conversion,merge-ort.c,2335,-,+,,39,	} else if (c_info->source_files.nr > 1) {
type_conversion,merge-ort.c,2336,-,+,,30,		c_info->reported_already = 1;
type_conversion,merge-ort.c,2386,-,+,,17,			if (count == max)
type_conversion,merge-ort.c,2388,-,+,,21,			else if (count > max) {
type_conversion,merge-ort.c,2389,-,+,,11,				max = count;
type_conversion,merge-ort.c,2429,-,+,,14,	for (i = 0; i < duplicated.nr; i++) {
type_conversion,merge-ort.c,2444,-,+,,10,		*end = '\0';
type_conversion,merge-ort.c,2485,-,+,,7,		if (pair->status != 'A' && pair->status != 'R')
type_conversion,merge-ort.c,2539,-,+,,19,	int other_side = 3 - side_index;
type_conversion,merge-ort.c,2648,-,+,,14,						       last_slash - cur_path);
type_conversion,merge-ort.c,2667,-,+,,29,	for (i = dirs_to_insert.nr-1; i >= 0; --i) {
type_conversion,merge-ort.c,2674,-,+,,9,		len = strlen(parent_name);
type_conversion,merge-ort.c,2676,-,+,,36,		dir_ci->merged.basename_offset = (len > 0 ? len+1 : len);
type_conversion,merge-ort.c,2677,-,+,,21,		dir_ci->dirmask = ci->filemask;
type_conversion,merge-ort.c,2685,-,+,,6,	if (ci->dirmask == 0)
type_conversion,merge-ort.c,2694,-,+,,46,"		new_ci = mem_pool_calloc(&opt->priv->pool, 1, sizeof(*new_ci));"
type_conversion,merge-ort.c,2697,-,+,,21,		new_ci->dirmask = 0;
type_conversion,merge-ort.c,2698,-,+,,28,		new_ci->stages[1].mode = 0;
type_conversion,merge-ort.c,2705,-,+,,18,		ci->filemask = 0;
type_conversion,merge-ort.c,2706,-,+,,22,		ci->merged.clean = 1;
type_conversion,merge-ort.c,2707,-,+,,29,		for (i = MERGE_BASE; i <= MERGE_SIDE2; i++) {
type_conversion,merge-ort.c,2708,-,+,,8,			if (ci->dirmask & (1 << i))
type_conversion,merge-ort.c,2711,-,+,,25,			ci->stages[i].mode = 0;
type_conversion,merge-ort.c,2719,-,+,,28,	branch_with_new_path   = (ci->filemask == 2) ? opt->branch1 : opt->branch2;
type_conversion,merge-ort.c,2720,-,+,,28,	branch_with_dir_rename = (ci->filemask == 2) ? opt->branch2 : opt->branch1;
type_conversion,merge-ort.c,2724,-,+,,8,	len = strlen(parent_name);
type_conversion,merge-ort.c,2725,-,+,,31,	ci->merged.basename_offset = (len > 0 ? len+1 : len);
type_conversion,merge-ort.c,2740,-,+,,23,		new_ci->filemask |= ci->filemask;
type_conversion,merge-ort.c,2742,-,+,,26,			new_ci->df_conflict = 1;
type_conversion,merge-ort.c,2743,-,+,,12,		index = (ci->filemask >> 1);
type_conversion,merge-ort.c,2751,-,+,,6,	if (opt->detect_directory_renames == MERGE_DIRECTORY_RENAMES_TRUE) {
type_conversion,merge-ort.c,2753,-,+,,7,		if (pair->status == 'A')
type_conversion,merge-ort.c,2774,-,+,,23,		ci->path_conflict = 1;
type_conversion,merge-ort.c,2775,-,+,,7,		if (pair->status == 'A')
type_conversion,merge-ort.c,2852,-,+,,31,			unsigned was_binary_blob = 0;
type_conversion,merge-ort.c,2876,-,+,,28,				base->merged.is_null = 1;
type_conversion,merge-ort.c,2877,-,+,,26,				base->merged.clean = 1;
type_conversion,merge-ort.c,2907,-,+,,8,			    merged.mode == side1->stages[1].mode &&
type_conversion,merge-ort.c,2909,-,+,,23,				was_binary_blob = 1;
type_conversion,merge-ort.c,2929,-,+,,27,			side1->path_conflict = 1;
type_conversion,merge-ort.c,2930,-,+,,27,			side2->path_conflict = 1;
type_conversion,merge-ort.c,2943,-,+,,26,			base->path_conflict = 1;
type_conversion,merge-ort.c,2958,-,+,,18,		target_index = pair->score; /* from collect_renames() */
type_conversion,merge-ort.c,2961,-,+,,18,		old_sidemask = (1 << other_source_index); /* 2 or 4 */
type_conversion,merge-ort.c,2962,-,+,,21,		source_deleted = (oldinfo->filemask == 1);
type_conversion,merge-ort.c,2963,-,+,,54,		collision = ((newinfo->filemask & old_sidemask) != 0);
type_conversion,merge-ort.c,3061,-,+,,29,			newinfo->path_conflict = 1;
type_conversion,merge-ort.c,3082,-,+,,31,				oldinfo->stages[0].mode = 0;
type_conversion,merge-ort.c,3086,-,+,,30,				newinfo->path_conflict = 1;
type_conversion,merge-ort.c,3105,-,+,,30,			oldinfo->merged.is_null = 1;
type_conversion,merge-ort.c,3106,-,+,,28,			oldinfo->merged.clean = 1;
type_conversion,merge-ort.c,3123,-,+,,40,"	return possible_side_renames(renames, 1) ||"
type_conversion,merge-ort.c,3124,-,+,,40,"	       possible_side_renames(renames, 2) ||"
type_conversion,merge-ort.c,3140,-,+,,15,		p->status = 0; /* undecided */
type_conversion,merge-ort.c,3204,-,+,,39,		pairs->queue[pairs->nr-1]->status = entry->value ? 'R' : 'D';
type_conversion,merge-ort.c,3237,-,+,,22,		dir_renamed_side = 3 - side;
type_conversion,merge-ort.c,3241,-,+,,14,		if (val == RELEVANT_NO_MORE) {
type_conversion,merge-ort.c,3250,-,+,,6,	if (p->status == 'D') {
type_conversion,merge-ort.c,3256,-,+,,13,	} else if (p->status == 'R') {
type_conversion,merge-ort.c,3262,-,+,,27,"		cache_new_pair(renames, side, p->one->path, new_path, 1);"
type_conversion,merge-ort.c,3263,-,+,,13,	} else if (p->status == 'A' && new_path) {
type_conversion,merge-ort.c,3297,-,+,,30,	diff_opts.flags.recursive = 1;
type_conversion,merge-ort.c,3298,-,+,,33,	diff_opts.flags.rename_empty = 0;
type_conversion,merge-ort.c,3320,-,+,,33,		renames->redo_after_renames = 0;
type_conversion,merge-ort.c,3357,-,+,,7,		if (p->status != 'A' && p->status != 'R') {
type_conversion,merge-ort.c,3371,-,+,,7,		if (p->status != 'R' && !new_path) {
type_conversion,merge-ort.c,3389,-,+,,14,		p->score = side_index;
type_conversion,merge-ort.c,3402,-,+,,27,	unsigned detection_run = 0;
type_conversion,merge-ort.c,3408,-,+,,47,"	detection_run |= detect_regular_renames(opt, MERGE_SIDE1);"
type_conversion,merge-ort.c,3409,-,+,,47,"	detection_run |= detect_regular_renames(opt, MERGE_SIDE2);"
type_conversion,merge-ort.c,3412,-,+,,33,		renames->redo_after_renames = 0;
type_conversion,merge-ort.c,3419,-,+,,36,		for (side = MERGE_SIDE1; side <= MERGE_SIDE2; side++) {
type_conversion,merge-ort.c,3422,-,+,,41,"				possibly_cache_new_pair(renames, p, side, NULL);"
type_conversion,merge-ort.c,3427,-,+,,33,		renames->redo_after_renames = 2;
type_conversion,merge-ort.c,3438,-,+,,5,	  (opt->detect_directory_renames == MERGE_DIRECTORY_RENAMES_TRUE ||
type_conversion,merge-ort.c,3439,-,+,,5,	   opt->detect_directory_renames == MERGE_DIRECTORY_RENAMES_CONFLICT);
type_conversion,merge-ort.c,3442,-,+,,42,"		get_provisional_directory_renames(opt, MERGE_SIDE1, &clean);"
type_conversion,merge-ort.c,3443,-,+,,42,"		get_provisional_directory_renames(opt, MERGE_SIDE2, &clean);"
type_conversion,merge-ort.c,3450,-,+,,29,	for (i = MERGE_SIDE1; i <= MERGE_SIDE2; i++) {
type_conversion,merge-ort.c,3456,-,+,,43,"	clean &= collect_renames(opt, &combined, MERGE_SIDE1,"
type_conversion,merge-ort.c,3460,-,+,,43,"	clean &= collect_renames(opt, &combined, MERGE_SIDE2,"
type_conversion,merge-ort.c,3464,-,+,,29,	for (i = MERGE_SIDE1; i <= MERGE_SIDE2; i++)
type_conversion,merge-ort.c,3480,-,+,,29,	for (s = MERGE_SIDE1; s <= MERGE_SIDE2; s++) {
type_conversion,merge-ort.c,3493,-,+,,29,	for (s = MERGE_SIDE1; s <= MERGE_SIDE2; s++) {
type_conversion,merge-ort.c,3545,-,+,,18,	while (*one && (*one == *two)) {
type_conversion,merge-ort.c,3550,-,+,,14,	c1 = *one ? *one : '/';
type_conversion,merge-ort.c,3551,-,+,,14,	c2 = *two ? *two : '/';
type_conversion,merge-ort.c,3553,-,+,,6,	if (c1 == c2) {
type_conversion,merge-ort.c,3557,-,+,,10,		return c1 - c2;
type_conversion,merge-ort.c,3569,-,+,,6,	if (type != OBJ_BLOB) {
type_conversion,merge-ort.c,3573,-,+,,39,"	strbuf_attach(dst, buf, size, size + 1);"
type_conversion,merge-ort.c,3590,-,+,,6,	if (base->mode != side->mode)
type_conversion,merge-ort.c,3664,-,+,,57,"	return base_name_compare(a->string, strlen(a->string), ami->result.mode,"
type_conversion,merge-ort.c,3665,-,+,,36,"				 b->string, strlen(b->string), bmi->result.mode);"
type_conversion,merge-ort.c,3673,-,+,,18,"	size_t maxlen = 0, extra;"
type_conversion,merge-ort.c,3679,-,+,,22,	nr = versions->nr - offset;
type_conversion,merge-ort.c,3685,-,+,,22,"	extra = hash_size + 8; /* 8: 6 for mode, 1 for space, 1 for NUL char */"
type_conversion,merge-ort.c,3686,-,+,,14,	for (i = 0; i < nr; i++) {
type_conversion,merge-ort.c,3687,-,+,,43,		maxlen += strlen(versions->items[offset+i].string) + extra;
type_conversion,merge-ort.c,3692,-,+,,14,	for (i = 0; i < nr; i++) {
type_conversion,merge-ort.c,3693,-,+,,51,		struct merged_info *mi = versions->items[offset+i].util;
type_conversion,merge-ort.c,3696,-,+,,8,"			    ri->mode,"
type_conversion,merge-ort.c,3697,-,+,,31,"			    versions->items[offset+i].string, '\0');"
type_conversion,merge-ort.c,3730,-,+,,29,"	unsigned int offset, ret = 0;"
type_conversion,merge-ort.c,3826,-,+,,8,		     info->last_directory_len)) {
type_conversion,merge-ort.c,3830,-,+,,30,		info->last_directory_len = strlen(info->last_directory);
type_conversion,merge-ort.c,3850,-,+,,59,	offset = (uintptr_t)info->offsets.items[info->offsets.nr-1].util;
type_conversion,merge-ort.c,3851,-,+,,6,	if (offset == info->versions.nr) {
type_conversion,merge-ort.c,3860,-,+,,23,		dir_info->is_null = 1;
type_conversion,merge-ort.c,3866,-,+,,23,		dir_info->is_null = 0;
type_conversion,merge-ort.c,3870,+,+,ret = -1,10,			ret = -1;
type_conversion,merge-ort.c,3878,-,+,,22,	info->versions.nr = offset;
type_conversion,merge-ort.c,3887,-,+,,33,	prev_dir = info->offsets.nr == 0 ? NULL :
type_conversion,merge-ort.c,3888,-,+,,43,		   info->offsets.items[info->offsets.nr-1].string;
type_conversion,merge-ort.c,3897,-,+,,29,	info->last_directory_len = strlen(info->last_directory);
type_conversion,merge-ort.c,3899,-,+,,9,	return ret;
type_conversion,merge-ort.c,3918,-,+,,7,		if (ci->filemask == 0)
type_conversion,merge-ort.c,3924,-,+,,25,	if (ci->df_conflict && ci->merged.result.mode == 0) {
type_conversion,merge-ort.c,3932,-,+,,21,		ci->df_conflict = 0;
type_conversion,merge-ort.c,3934,-,+,,22,		ci->merged.clean = 0;
type_conversion,merge-ort.c,3935,-,+,,24,		ci->merged.is_null = 0;
type_conversion,merge-ort.c,3937,-,+,,21,		ci->match_mask = (ci->match_mask & ~ci->dirmask);
type_conversion,merge-ort.c,3938,-,+,,17,		ci->dirmask = 0;
type_conversion,merge-ort.c,3939,-,+,,29,		for (i = MERGE_BASE; i <= MERGE_SIDE2; i++) {
type_conversion,merge-ort.c,3940,-,+,,8,			if (ci->filemask & (1 << i))
type_conversion,merge-ort.c,3942,-,+,,25,			ci->stages[i].mode = 0;
type_conversion,merge-ort.c,3945,-,+,,32,	} else if (ci->df_conflict && ci->merged.result.mode != 0) {
type_conversion,merge-ort.c,3965,-,+,,7,		if (ci->filemask == 1) {
type_conversion,merge-ort.c,3966,-,+,,19,			ci->filemask = 0;
type_conversion,merge-ort.c,3975,-,+,,46,"		new_ci = mem_pool_calloc(&opt->priv->pool, 1, sizeof(*new_ci));"
type_conversion,merge-ort.c,3983,-,+,,25,		new_ci->match_mask = (new_ci->match_mask & ~new_ci->dirmask);
type_conversion,merge-ort.c,3984,-,+,,21,		new_ci->dirmask = 0;
type_conversion,merge-ort.c,3985,-,+,,29,		for (i = MERGE_BASE; i <= MERGE_SIDE2; i++) {
type_conversion,merge-ort.c,3986,-,+,,8,			if (new_ci->filemask & (1 << i))
type_conversion,merge-ort.c,3989,-,+,,29,			new_ci->stages[i].mode = 0;
type_conversion,merge-ort.c,3999,-,+,,20,		df_file_index = (ci->dirmask & (1 << 1)) ? 2 : 1;
type_conversion,merge-ort.c,4015,-,+,,18,		ci->filemask = 0;
type_conversion,merge-ort.c,4030,-,+,,22,		ci->merged.clean = !ci->df_conflict && !ci->path_conflict;
type_conversion,merge-ort.c,4031,-,+,,7,		if (ci->match_mask == 6) {
type_conversion,merge-ort.c,4037,-,+,,34,			unsigned int othermask = 7 & ~ci->match_mask;
type_conversion,merge-ort.c,4038,-,+,,29,			int side = (othermask == 4) ? 2 : 1;
type_conversion,merge-ort.c,4041,-,+,,25,			ci->merged.is_null = !ci->merged.result.mode;
type_conversion,merge-ort.c,4043,-,+,,24,				ci->merged.clean = 1;
type_conversion,merge-ort.c,4050,-,+,,13,	} else if (ci->filemask >= 6 &&
type_conversion,merge-ort.c,4051,-,+,,16,		   (S_IFMT & ci->stages[1].mode) !=
type_conversion,merge-ort.c,4052,-,+,,16,		   (S_IFMT & ci->stages[2].mode)) {
type_conversion,merge-ort.c,4056,-,+,,23,			ci->merged.clean = 0;
type_conversion,merge-ort.c,4059,-,+,,26,			ci->merged.is_null = (ci->merged.result.mode == 0);
type_conversion,merge-ort.c,4062,-,+,,22,			unsigned o_mode = ci->stages[0].mode;
type_conversion,merge-ort.c,4063,-,+,,22,			unsigned a_mode = ci->stages[1].mode;
type_conversion,merge-ort.c,4064,-,+,,22,			unsigned b_mode = ci->stages[2].mode;
type_conversion,merge-ort.c,4105,-,+,,23,			ci->merged.clean = 0;
type_conversion,merge-ort.c,4111,-,+,,29,			new_ci->stages[1].mode = 0;
type_conversion,merge-ort.c,4113,-,+,,23,			new_ci->filemask = 5;
type_conversion,merge-ort.c,4115,-,+,,30,				new_ci->stages[0].mode = 0;
type_conversion,merge-ort.c,4117,-,+,,24,				new_ci->filemask = 4;
type_conversion,merge-ort.c,4123,-,+,,25,			ci->stages[2].mode = 0;
type_conversion,merge-ort.c,4125,-,+,,19,			ci->filemask = 3;
type_conversion,merge-ort.c,4127,-,+,,26,				ci->stages[0].mode = 0;
type_conversion,merge-ort.c,4129,-,+,,20,				ci->filemask = 2;
type_conversion,merge-ort.c,4159,-,+,,13,	} else if (ci->filemask >= 6) {
type_conversion,merge-ort.c,4173,-,+,,22,"		ci->merged.clean = clean_merge &&
				   !ci->df_conflict && !ci->path_conflict;"
type_conversion,merge-ort.c,4176,-,+,,25,		ci->merged.is_null = (merged_file.mode == 0);
type_conversion,merge-ort.c,4180,-,+,,19,			ci->filemask = 1 << df_file_index;
type_conversion,merge-ort.c,4186,-,+,,8,			if (ci->filemask == 6)
type_conversion,merge-ort.c,4195,-,+,,13,	} else if (ci->filemask == 3 || ci->filemask == 5) {
type_conversion,merge-ort.c,4198,-,+,,15,		int side = (ci->filemask == 5) ? 2 : 1;
type_conversion,merge-ort.c,4203,-,+,,22,		ci->merged.clean = 0;
type_conversion,merge-ort.c,4217,-,+,,26,				ci->merged.is_null = 1;
type_conversion,merge-ort.c,4218,-,+,,24,				ci->merged.clean = 1;
type_conversion,merge-ort.c,4223,-,+,,23,				ci->df_conflict = 0;
type_conversion,merge-ort.c,4243,-,+,,13,	} else if (ci->filemask == 2 || ci->filemask == 4) {
type_conversion,merge-ort.c,4245,-,+,,15,		int side = (ci->filemask == 4) ? 2 : 1;
type_conversion,merge-ort.c,4248,-,+,,22,		ci->merged.clean = !ci->df_conflict && !ci->path_conflict;
type_conversion,merge-ort.c,4249,-,+,,13,	} else if (ci->filemask == 1) {
type_conversion,merge-ort.c,4251,-,+,,24,		ci->merged.is_null = 1;
type_conversion,merge-ort.c,4252,-,+,,28,		ci->merged.result.mode = 0;
type_conversion,merge-ort.c,4255,-,+,,22,		ci->merged.clean = !ci->path_conflict;
type_conversion,merge-ort.c,4280,-,+,,35,	for (e = &plist->items[plist->nr-1]; e >= plist->items; --e) {
type_conversion,merge-ort.c,4290,-,+,,25,		if (ci->match_mask || ci->filemask < 6 ||
type_conversion,merge-ort.c,4297,-,+,,7,		if (ci->filemask == 7 &&
type_conversion,merge-ort.c,4304,-,+,,25,			unsigned side_mask = (1 << i);
type_conversion,merge-ort.c,4315,-,+,,54,"	promisor_remote_get_direct(opt->repo, to_fetch.oid, to_fetch.nr);"
type_conversion,merge-ort.c,4328,-,+,,16,"						   NULL, 0 };"
type_conversion,merge-ort.c,4367,-,+,,37,	for (entry = &plist.items[plist.nr-1]; entry >= plist.items; --entry) {
type_conversion,merge-ort.c,4394,-,+,,33,	if (dir_metadata.offsets.nr != 1 ||
type_conversion,merge-ort.c,4395,-,+,,55,	    (uintptr_t)dir_metadata.offsets.items[0].util != 0) {
type_conversion,merge-ort.c,4403,-,+,,53,"	if (write_tree(result_oid, &dir_metadata.versions, 0,"
type_conversion,merge-ort.c,4443,-,+,,23,	unpack_opts.update = 1;
type_conversion,merge-ort.c,4444,-,+,,22,	unpack_opts.merge = 1;
type_conversion,merge-ort.c,4445,-,+,,22,	unpack_opts.quiet = 0; /* FIXME: sequencer might want quiet? */
type_conversion,merge-ort.c,4446,-,+,,31,	unpack_opts.verbose_update = (opt->verbosity > 2);
type_conversion,merge-ort.c,4448,-,+,,33,	unpack_opts.preserve_ignored = 0; /* FIXME: !opts->overwrite_ignore */
type_conversion,merge-ort.c,4456,-,+,,21,"	ret = unpack_trees(2, trees, &unpack_opts);"
type_conversion,merge-ort.c,4489,-,+,,16,	state.force = 1;
type_conversion,merge-ort.c,4490,-,+,,16,	state.quiet = 1;
type_conversion,merge-ort.c,4491,-,+,,24,	state.refresh_cache = 1;
type_conversion,merge-ort.c,4493,-,+,,22,	original_cache_nr = index->cache_nr;
type_conversion,merge-ort.c,4520,-,+,,37,"		pos = index_name_pos(index, path, strlen(path));"
type_conversion,merge-ort.c,4523,-,+,,8,			if (ci->filemask != 1)
type_conversion,merge-ort.c,4554,-,+,,29,		for (i = MERGE_BASE; i <= MERGE_SIDE2; i++) {
type_conversion,merge-ort.c,4556,-,+,,10,			if (!(ci->filemask & (1ul << i)))
type_conversion,merge-ort.c,4559,-,+,,33,"			ce = make_cache_entry(index, vi->mode, &vi->oid,"
type_conversion,merge-ort.c,4560,-,+,,23,"					      path, i+1, 0);"
type_conversion,merge-ort.c,4598,-,+,,21,		if (util->flag == CONFLICT_SUBMODULE_NOT_INITIALIZED ||
type_conversion,merge-ort.c,4599,-,+,,21,		    util->flag == CONFLICT_SUBMODULE_HISTORY_NOT_AVAILABLE)
type_conversion,merge-ort.c,4663,-,+,,24,	for (int path_nr = 0; path_nr < olist.nr; ++path_nr) {
type_conversion,merge-ort.c,4665,-,+,,19,		for (int i = 0; i < conflicts->nr; i++) {
type_conversion,merge-ort.c,4672,-,+,,21,				for (int n = 0; n < info->paths.nr; n++) {
type_conversion,merge-ort.c,4710,-,+,,29,		for (i = MERGE_BASE; i <= MERGE_SIDE2; i++) {
type_conversion,merge-ort.c,4713,-,+,,10,			if (!(ci->filemask & (1ul << i)))
type_conversion,merge-ort.c,4718,-,+,,15,			si->mode = ci->stages[i].mode;
type_conversion,merge-ort.c,4824,-,+,,26,	commit->object.parsed = 1;
type_conversion,merge-ort.c,4865,-,+,,39,	if (result->_properly_initialized != 0 &&
type_conversion,merge-ort.c,4898,-,+,,22,"	opt->priv = xcalloc(1, sizeof(*opt->priv));"
type_conversion,merge-ort.c,4902,-,+,,34,"	mem_pool_init(&opt->priv->pool, 0);"
type_conversion,merge-ort.c,4904,-,+,,29,	for (i = MERGE_SIDE1; i <= MERGE_SIDE2; i++) {
type_conversion,merge-ort.c,4906,-,+,,10,"					    NOT_RELEVANT, pool, 0);"
type_conversion,merge-ort.c,4928,-,+,,29,	for (i = MERGE_SIDE1; i <= MERGE_SIDE2; i++) {
type_conversion,merge-ort.c,4933,-,+,,46,		renames->deferred[i].trivial_merges_okay = 1; /* 1 == maybe */
type_conversion,merge-ort.c,4993,-,+,,38,		renames->cached_pairs_valid_side = MERGE_SIDE1;
type_conversion,merge-ort.c,4996,-,+,,38,		renames->cached_pairs_valid_side = MERGE_SIDE2;
type_conversion,merge-ort.c,5040,-,+,,47,	if (opt->priv->renames.redo_after_renames == 2) {
type_conversion,merge-recursive.c,27,-,+,,25,	unsigned bases_count = 0;
type_conversion,merge-recursive.c,51,-,+,,7,		if (bases_count < ARRAY_SIZE(bases)-1) {
type_conversion,merge-recursive.c,62,-,+,,27,"				    ARRAY_SIZE(bases)-1),"
type_conversion,merge-recursive.c,85,-,+,,49,"	failed = merge_recursive_generic(&o, &h1, &h2, bases_count, bases, &result);"
type_conversion,merge-recursive.c,111,-,+,,42,"	hashmap_init(map, dir_rename_cmp, NULL, 0);"
type_conversion,merge-recursive.c,119,-,+,,30,	entry->non_unique_new_dir = 0;
type_conversion,merge-recursive.c,120,-,+,,31,"	strbuf_init(&entry->new_dir, 0);"
type_conversion,merge-recursive.c,156,-,+,,41,"	hashmap_init(map, collision_cmp, NULL, 0);"
type_conversion,merge-recursive.c,161,-,+,,27,	if (opt->buffer_output < 2 && opt->obuf.len) {
type_conversion,merge-recursive.c,172,-,+,,27,	if (opt->buffer_output < 2)
type_conversion,merge-recursive.c,175,-,+,,31,"		strbuf_complete(&opt->obuf, '\n');"
type_conversion,merge-recursive.c,181,-,+,,27,	if (opt->buffer_output > 1)
type_conversion,merge-recursive.c,221,-,+,,26,	commit->object.parsed = 1;
type_conversion,merge-recursive.c,309,-,+,,35,	ci->ren1->dst_entry->processed = 0;
type_conversion,merge-recursive.c,330,-,+,,35,"	strbuf_addchars(&opt->obuf, ' ', opt->priv->call_depth * 2);"
type_conversion,merge-recursive.c,347,-,+,,35,"	strbuf_addchars(&opt->obuf, ' ', opt->priv->call_depth * 2);"
type_conversion,merge-recursive.c,383,-,+,,32,"	ce = make_cache_entry(istate, blob->mode, &blob->oid, path, stage, 0);"
type_conversion,merge-recursive.c,424,-,+,,39,		opt->priv->unpack_opts.index_only = 1;
type_conversion,merge-recursive.c,426,-,+,,35,		opt->priv->unpack_opts.update = 1;
type_conversion,merge-recursive.c,428,-,+,,45,		opt->priv->unpack_opts.preserve_ignored = 0;
type_conversion,merge-recursive.c,430,-,+,,33,	opt->priv->unpack_opts.merge = 1;
type_conversion,merge-recursive.c,435,-,+,,38,	opt->priv->unpack_opts.aggressive = !merge_detect_rename(opt);
type_conversion,merge-recursive.c,442,-,+,,20,"	rc = unpack_trees(3, t, &opt->priv->unpack_opts);"
type_conversion,merge-recursive.c,469,-,+,,16,	int baselen = base->len;
type_conversion,merge-recursive.c,478,-,+,,22,"	strbuf_setlen(base, baselen);"
type_conversion,merge-recursive.c,500,-,+,,15,		dfs->mode = 0;
type_conversion,merge-recursive.c,515,-,+,,33,"	struct stage_data *e = xcalloc(1, sizeof(struct stage_data));"
type_conversion,merge-recursive.c,537,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,merge-recursive.c,547,-,+,,25,"			item->util = xcalloc(1, sizeof(struct stage_data));"
type_conversion,merge-recursive.c,550,-,+,,34,		e->stages[ce_stage(ce)].mode = ce->ce_mode;
type_conversion,merge-recursive.c,559,-,+,,15,	int onelen = strlen(one);
type_conversion,merge-recursive.c,560,-,+,,15,	int twolen = strlen(two);
type_conversion,merge-recursive.c,573,-,+,,33,"	int cmp = df_name_compare(one, onelen, S_IFDIR,"
type_conversion,merge-recursive.c,574,-,+,,12,"				  two, twolen, S_IFDIR);"
type_conversion,merge-recursive.c,613,-,+,,14,	for (i = 0; i < entries->nr; i++) {
type_conversion,merge-recursive.c,622,-,+,,14,	for (i = 0; i < df_sorted_entries.nr; i++) {
type_conversion,merge-recursive.c,624,-,+,,13,		int len = strlen(path);
type_conversion,merge-recursive.c,635,-,+,,31,"		    memcmp(path, last_file, last_len) == 0 &&"
type_conversion,merge-recursive.c,636,-,+,,7,		    path[last_len] == '/') {
type_conversion,merge-recursive.c,692,-,+,,21,	entry->processed = 0;
type_conversion,merge-recursive.c,714,-,+,,51,"			ce = index_file_exists(opt->repo->index, path, strlen(path),"
type_conversion,merge-recursive.c,716,-,+,,30,"			if (ce && ce_stage(ce) == 0 && strcmp(path, ce->name))"
type_conversion,merge-recursive.c,731,-,+,,7,		if (out->buf[i] == '/')
type_conversion,merge-recursive.c,732,-,+,,18,			out->buf[i] = '_';
type_conversion,merge-recursive.c,777,-,+,,44,"	pos = index_name_pos(istate, dirpath.buf, dirpath.len);"
type_conversion,merge-recursive.c,781,-,+,,6,	if (pos < istate->cache_nr &&
type_conversion,merge-recursive.c,790,-,+,,35,"		!has_symlink_leading_path(path, strlen(path));"
type_conversion,merge-recursive.c,800,-,+,,57,"	int pos = index_name_pos(&opt->priv->orig_index, path, strlen(path));"
type_conversion,merge-recursive.c,809,-,+,,56,"	return (oideq(&ce->oid, &blob->oid) && ce->ce_mode == blob->mode);"
type_conversion,merge-recursive.c,817,-,+,,57,"	int pos = index_name_pos(&opt->priv->orig_index, path, strlen(path));"
type_conversion,merge-recursive.c,847,-,+,,41,"	int pos = index_name_pos(istate, path, strlen(path));"
type_conversion,merge-recursive.c,851,-,+,,9,	while (pos < istate->cache_nr &&
type_conversion,merge-recursive.c,860,-,+,,8,		case 0:
type_conversion,merge-recursive.c,861,-,+,,8,		case 2:
type_conversion,merge-recursive.c,878,-,+,,17,"			       path, strlen(path), ignore_case);"
type_conversion,merge-recursive.c,889,-,+,,14,	for (i = 0; i < opt->priv->df_conflict_file_set.nr; i++) {
type_conversion,merge-recursive.c,894,-,+,,7,		    path[df_pathlen] == '/' &&
type_conversion,merge-recursive.c,907,-,+,,11,	status = safe_create_leading_directories_const(path);
type_conversion,merge-recursive.c,909,-,+,,17,		if (status == SCLD_EXISTS)
type_conversion,merge-recursive.c,966,-,+,,7,		if (type != OBJ_BLOB) {
type_conversion,merge-recursive.c,988,-,+,,16,			int mode = (contents->mode & 0100 ? 0777 : 0666);
type_conversion,merge-recursive.c,1009,-,+,,7,"				  contents->mode, oid_to_hex(&contents->oid), path);"
type_conversion,merge-recursive.c,1016,-,+,,11,			       contents->mode != S_IFGITLINK);
type_conversion,merge-recursive.c,1055,-,+,,24,	ll_opts.renormalize = opt->renormalize;
type_conversion,merge-recursive.c,1056,-,+,,30,	ll_opts.extra_marker_size = extra_marker_size;
type_conversion,merge-recursive.c,1061,-,+,,30,		ll_opts.virtual_ancestor = 1;
type_conversion,merge-recursive.c,1062,-,+,,21,		ll_opts.variant = 0;
type_conversion,merge-recursive.c,1072,-,+,,22,			ll_opts.variant = 0;
type_conversion,merge-recursive.c,1100,-,+,,6,	if (merge_status == LL_MERGE_BINARY_CONFLICT)
type_conversion,merge-recursive.c,1110,-,+,,9,	return merge_status;
type_conversion,merge-recursive.c,1137,-,+,,39,"	setup_revisions(ARRAY_SIZE(rev_args)-1, rev_args, &revs, &rev_opts);"
type_conversion,merge-recursive.c,1159,-,+,,14,	for (i = 0; i < merges.nr; i++) {
type_conversion,merge-recursive.c,1163,-,+,,15,		for (j = 0; j < merges.nr; j++) {
type_conversion,merge-recursive.c,1185,-,+,,9,	return result->nr;
type_conversion,merge-recursive.c,1202,-,+,,9,	return dfs->mode != 0 && !is_null_oid(&dfs->oid);
type_conversion,merge-recursive.c,1344,-,+,,15,		for (i = 0; i < merges.nr; i++)
type_conversion,merge-recursive.c,1376,-,+,,18,	result->merge = 0;
type_conversion,merge-recursive.c,1377,-,+,,18,	result->clean = 1;
type_conversion,merge-recursive.c,1379,-,+,,16,	if ((S_IFMT & a->mode) != (S_IFMT & b->mode)) {
type_conversion,merge-recursive.c,1380,-,+,,19,		result->clean = 0;
type_conversion,merge-recursive.c,1397,-,+,,20,			result->merge = 1;
type_conversion,merge-recursive.c,1402,-,+,,7,		if (a->mode == b->mode || a->mode == o->mode)
type_conversion,merge-recursive.c,1406,-,+,,8,			if (b->mode != o->mode) {
type_conversion,merge-recursive.c,1407,-,+,,21,				result->clean = 0;
type_conversion,merge-recursive.c,1408,-,+,,21,				result->merge = 1;
type_conversion,merge-recursive.c,1428,-,+,,42,"			    write_object_file(result_buf.ptr, result_buf.size,"
type_conversion,merge-recursive.c,1437,-,+,,20,			result->clean = (merge_status == 0);
type_conversion,merge-recursive.c,1446,-,+,,20,			result->clean = clean;
type_conversion,merge-recursive.c,1452,-,+,,22,					result->clean = 0;
type_conversion,merge-recursive.c,1483,-,+,,25,	int mark_conflicted = (opt->detect_directory_renames ==
type_conversion,merge-recursive.c,1484,-,+,,11,			       MERGE_DIRECTORY_RENAMES_CONFLICT);
type_conversion,merge-recursive.c,1696,-,+,,14,	null.mode = 0;
type_conversion,merge-recursive.c,1702,-,+,,23,"	if (update_file(opt, mfi.clean, &mfi.blob, update_path))"
type_conversion,merge-recursive.c,1715,-,+,,9,	return mfi.clean;
type_conversion,merge-recursive.c,1841,-,+,,20,	if (!mfi.clean && mfi.blob.mode == a->mode &&
type_conversion,merge-recursive.c,1937,-,+,,25,	opts.flags.recursive = 1;
type_conversion,merge-recursive.c,1938,-,+,,28,	opts.flags.rename_empty = 0;
type_conversion,merge-recursive.c,1995,-,+,,11,	oldlen = strlen(entry->dir);
type_conversion,merge-recursive.c,1996,-,+,,28,	if (entry->new_dir.len == 0)
type_conversion,merge-recursive.c,2006,-,+,,52,	newlen = entry->new_dir.len + (strlen(old_path) - oldlen) + 1;
type_conversion,merge-recursive.c,2007,-,+,,25,"	strbuf_grow(&new_path, newlen);"
type_conversion,merge-recursive.c,2054,-,+,,33,"		*old_dir = xstrndup(old_path, end_of_old - old_path);"
type_conversion,merge-recursive.c,2060,-,+,,9,	while (*--end_of_new == *--end_of_old &&
type_conversion,merge-recursive.c,2070,-,+,,6,	    *end_of_old == *end_of_new)
type_conversion,merge-recursive.c,2085,-,+,,32,	    end_of_old != old_path && end_of_old[-1] == '/') {
type_conversion,merge-recursive.c,2086,-,+,,33,"		*old_dir = xstrndup(old_path, --end_of_old - old_path);"
type_conversion,merge-recursive.c,2113,-,+,,32,"	*old_dir = xstrndup(old_path, end_of_old - old_path);"
type_conversion,merge-recursive.c,2114,-,+,,32,"	*new_dir = xstrndup(new_path, end_of_new - new_path);"
type_conversion,merge-recursive.c,2123,-,+,,14,	for (i = 0; i < items_to_remove->nr; i++) {
type_conversion,merge-recursive.c,2185,-,+,,37,		collision_ent->reported_already = 1;
type_conversion,merge-recursive.c,2194,-,+,,46,	} else if (collision_ent->source_files.nr > 1) {
type_conversion,merge-recursive.c,2195,-,+,,37,		collision_ent->reported_already = 1;
type_conversion,merge-recursive.c,2340,-,+,,7,		if (pair->status != 'R')
type_conversion,merge-recursive.c,2361,-,+,,25,"			item->util = xcalloc(1, sizeof(int));"
type_conversion,merge-recursive.c,2384,-,+,,15,		for (i = 0; i < entry->possible_new_dirs.nr; i++) {
type_conversion,merge-recursive.c,2395,-,+,,32,			entry->non_unique_new_dir = 1;
type_conversion,merge-recursive.c,2408,-,+,,45,		entry->possible_new_dirs.strdup_strings = 1;
type_conversion,merge-recursive.c,2423,-,+,,10,		*end = '\0';
type_conversion,merge-recursive.c,2462,-,+,,7,		if (pair->status != 'A' && pair->status != 'R')
type_conversion,merge-recursive.c,2586,-,+,,30,		re->dst_entry->processed = 1;
type_conversion,merge-recursive.c,2602,-,+,,7,		if (pair->status == 'R')
type_conversion,merge-recursive.c,2603,-,+,,31,			re->dst_entry->processed = 1;
type_conversion,merge-recursive.c,2650,-,+,,17,	pair->status = 'R';
type_conversion,merge-recursive.c,2692,-,+,,7,		if (pair->status != 'A' && pair->status != 'R') {
type_conversion,merge-recursive.c,2701,-,+,,7,		if (pair->status != 'R' && !new_path) {
type_conversion,merge-recursive.c,2707,-,+,,19,		re->processed = 0;
type_conversion,merge-recursive.c,2710,-,+,,34,		re->dir_rename_original_type = '\0';
type_conversion,merge-recursive.c,2762,-,+,,14,	for (i = 0; i < a_renames->nr; i++) {
type_conversion,merge-recursive.c,2767,-,+,,14,	for (i = 0; i < b_renames->nr; i++) {
type_conversion,merge-recursive.c,2773,-,+,,21,"	for (i = 0, j = 0; i < a_renames->nr || j < b_renames->nr;) {"
type_conversion,merge-recursive.c,2779,-,+,,7,		if (i >= a_renames->nr) {
type_conversion,merge-recursive.c,2781,-,+,,14,		} else if (j >= b_renames->nr) {
type_conversion,merge-recursive.c,2804,-,+,,21,		ren1->processed = 1;
type_conversion,merge-recursive.c,2805,-,+,,32,		ren1->dst_entry->processed = 1;
type_conversion,merge-recursive.c,2809,-,+,,32,		ren1->src_entry->processed = 1;
type_conversion,merge-recursive.c,2821,-,+,,33,			ren2->dst_entry->processed = 1;
type_conversion,merge-recursive.c,2822,-,+,,22,			ren2->processed = 1;
type_conversion,merge-recursive.c,2848,-,+,,22,			ren2->processed = 1;
type_conversion,merge-recursive.c,2854,-,+,,33,			ren2->src_entry->processed = 1;
type_conversion,merge-recursive.c,2896,-,+,,8,			    ren1->dir_rename_original_type == 'A') {
type_conversion,merge-recursive.c,2905,-,+,,16,			} else if ((dst_other.mode == ren1->pair->two->mode) &&
type_conversion,merge-recursive.c,3005,-,+,,7,	if ((opt->detect_directory_renames == MERGE_DIRECTORY_RENAMES_TRUE) ||
type_conversion,merge-recursive.c,3006,-,+,,7,	    (opt->detect_directory_renames == MERGE_DIRECTORY_RENAMES_CONFLICT &&
type_conversion,merge-recursive.c,3055,-,+,,14,	for (i = 0; i < rename->nr; i++) {
type_conversion,merge-recursive.c,3079,-,+,,6,	if (type != OBJ_BLOB) {
type_conversion,merge-recursive.c,3083,-,+,,39,"	strbuf_attach(dst, buf, size, size + 1);"
type_conversion,merge-recursive.c,3097,-,+,,6,	if (a->mode != o->mode)
type_conversion,merge-recursive.c,3158,-,+,,33,	unsigned df_conflict_remains = 0;
type_conversion,merge-recursive.c,3166,-,+,,25,		df_conflict_remains = 1;
type_conversion,merge-recursive.c,3194,-,+,,54,"		pos = index_name_pos(&opt->priv->orig_index, path, strlen(path));"
type_conversion,merge-recursive.c,3197,-,+,,49,"			pos = index_name_pos(opt->repo->index, path, strlen(path));"
type_conversion,merge-recursive.c,3201,-,+,,10,		return mfi->clean;
type_conversion,merge-recursive.c,3243,-,+,,16,		mfi->clean = 0;
type_conversion,merge-recursive.c,3244,-,+,,30,"	} else if (update_file(opt, mfi->clean, &mfi->blob, path))"
type_conversion,merge-recursive.c,3265,-,+,,6,	    opt->detect_directory_renames == MERGE_DIRECTORY_RENAMES_CONFLICT &&
type_conversion,merge-recursive.c,3313,-,+,,11,	clean = (opt->detect_directory_renames == MERGE_DIRECTORY_RENAMES_TRUE);
type_conversion,merge-recursive.c,3315,-,+,,12,	is_add = (ren->dir_rename_original_type == 'A');
type_conversion,merge-recursive.c,3316,-,+,,6,	if (ren->dir_rename_original_type == 'A' && clean) {
type_conversion,merge-recursive.c,3319,-,+,,13,	} else if (ren->dir_rename_original_type == 'A' && !clean) {
type_conversion,merge-recursive.c,3323,-,+,,13,	} else if (ren->dir_rename_original_type == 'R' && clean) {
type_conversion,merge-recursive.c,3326,-,+,,13,	} else if (ren->dir_rename_original_type == 'R' && !clean) {
type_conversion,merge-recursive.c,3343,-,+,,18,	int normalize = opt->renormalize;
type_conversion,merge-recursive.c,3353,-,+,,21,	entry->processed = 1;
type_conversion,merge-recursive.c,3428,-,+,,23,			entry->processed = 0;
type_conversion,merge-recursive.c,3566,-,+,,15,"			     NULL, 512);"
type_conversion,merge-recursive.c,3576,-,+,,24,		for (i = entries->nr-1; 0 <= i; i--) {
type_conversion,merge-recursive.c,3589,-,+,,15,		for (i = 0; i < entries->nr; i++) {
type_conversion,merge-recursive.c,3657,-,+,,35,"				""found %u common ancestors:"", cnt), cnt);"
type_conversion,merge-recursive.c,3792,-,+,,53,	if (!opt->priv->call_depth && opt->buffer_output < 2)
type_conversion,merge-recursive.c,3847,-,+,,13,"			   name, strlen(name));"
type_conversion,merge-recursive.c,3850,-,+,,6,	if (object->type == OBJ_TREE)
type_conversion,merge-recursive.c,3852,-,+,,6,	if (object->type != OBJ_COMMIT)
type_conversion,merge-recursive.c,3909,-,+,,21,	opt->renormalize = renormalize;
type_conversion,merge-recursive.c,3946,-,+,,23,	opt->buffer_output = 1;
type_conversion,merge-recursive.c,3947,-,+,,26,"	strbuf_init(&opt->obuf, 0);"
type_conversion,merge-recursive.c,3949,-,+,,21,	opt->renormalize = 0;
type_conversion,merge-recursive.c,3958,-,+,,24,		opt->buffer_output = 0;
type_conversion,merge-recursive.c,3997,-,+,,15,		if (value < 0)
type_conversion,merge-recursive.c,4013,-,+,,22,		opt->renormalize = 1;
type_conversion,merge-recursive.c,4015,-,+,,22,		opt->renormalize = 0;
type_conversion,merge-recursive.c,4024,-,+,,63,		if ((opt->rename_score = parse_rename_score(&arg)) == -1 || *arg != 0)
type_conversion,merge-tree.c,45,-,+,,10,	switch (entry->stage) {
type_conversion,merge-tree.c,64,-,+,,6,	if (entry->stage == 3)
type_conversion,merge-tree.c,80,-,+,,6,	if (entry->stage == 1) {
type_conversion,merge-tree.c,85,-,+,,15,	if (entry && entry->stage == 2) {
type_conversion,merge-tree.c,100,-,+,,7,		if (entry->stage == 2)
type_conversion,merge-tree.c,126,-,+,,14,	xpp.flags = 0;
type_conversion,merge-tree.c,128,-,+,,17,	xecfg.ctxlen = 3;
type_conversion,merge-tree.c,132,-,+,,10,		size = 0;
type_conversion,merge-tree.c,133,-,+,,13,	src.size = size;
type_conversion,merge-tree.c,136,-,+,,10,		size = 0;
type_conversion,merge-tree.c,137,-,+,,13,	dst.size = size;
type_conversion,merge-tree.c,183,-,+,,35,"	struct merge_list *res = xcalloc(1, sizeof(*res));"
type_conversion,merge-tree.c,195,-,+,,49,"	strbuf_make_traverse_path(&buf, info, n->path, n->pathlen);"
type_conversion,merge-tree.c,209,-,+,,22,"	orig = create_entry(2, ours->mode, &ours->oid, path);"
type_conversion,merge-tree.c,210,-,+,,23,"	final = create_entry(0, result->mode, &result->oid, path);"
type_conversion,merge-tree.c,270,-,+,,21,"	unsigned dirmask = 0, mask = 0;"
type_conversion,merge-tree.c,273,-,+,,11,		mask |= (1 << i);
type_conversion,merge-tree.c,279,-,+,,15,			dirmask |= (1 << i);
type_conversion,merge-tree.c,288,-,+,,22,"		entry = link_entry(3, info, n + 2, entry);"
type_conversion,merge-tree.c,290,-,+,,22,"		entry = link_entry(2, info, n + 1, entry);"
type_conversion,merge-tree.c,292,-,+,,22,"		entry = link_entry(1, info, n + 0, entry);"
type_conversion,merge-tree.c,334,-,+,,10,		return mask;
type_conversion,merge-tree.c,341,-,+,,11,			return mask;
type_conversion,merge-tree.c,353,-,+,,10,		return mask;
type_conversion,merge-tree.c,357,-,+,,9,	return mask;
type_conversion,merge-tree.c,502,-,+,,15,		for (i = 0; i < conflicted_files.nr; i++) {
type_conversion,merge-tree.c,580,-,+,,28,	if (xopts.nr && o.mode == MODE_TRIVIAL)
type_conversion,merge-tree.c,582,-,+,,18,	for (int x = 0; x < xopts.nr; x++)
type_conversion,merge-tree.c,590,-,+,,17,		if (o.mode == MODE_TRIVIAL)
type_conversion,merge-tree.c,634,-,+,,7,	case MODE_UNKNOWN:
type_conversion,merge-tree.c,639,-,+,,13,			o.mode = MODE_REAL;
type_conversion,merge-tree.c,642,-,+,,13,			o.mode = MODE_TRIVIAL;
type_conversion,merge-tree.c,647,-,+,,7,	case MODE_REAL:
type_conversion,merge-tree.c,650,-,+,,7,	case MODE_TRIVIAL:
type_conversion,merge-tree.c,656,-,+,,16,	if (o.mode == MODE_TRIVIAL && argc < original_argc)
type_conversion,merge-tree.c,665,-,+,,16,	if (o.mode == MODE_REAL)
type_conversion,merge.c,30,-,+,,14,	for (i = 0; i < xopts_nr; i++)
type_conversion,merge.c,39,-,+,,16,	cmd.git_cmd = 1;
type_conversion,merge.c,89,-,+,,26,	opts.preserve_ignored = !overwrite_ignore;
type_conversion,merge.c,94,-,+,,16,	opts.update = 1;
type_conversion,merge.c,95,-,+,,24,	opts.verbose_update = 1;
type_conversion,merge.c,96,-,+,,15,	opts.merge = 1;
type_conversion,merge.c,98,-,+,,18,"	{ ""resolve"",    0 },"
type_conversion,merge.c,101,-,+,,19,"	if (unpack_trees(nr_trees, t, &opts)) {"
type_conversion,merge.c,122,-,+,,22,"		strbuf_setlen(buf, 0);"
type_conversion,merge.c,156,-,+,,33,"	if (strbuf_read_file(buf, arg, 0) < 0)"
type_conversion,merge.c,180,-,+,,14,	for (i = 0; i < ARRAY_SIZE(all_strategy); i++)
type_conversion,merge.c,193,-,+,,26,			for (j = 0; !found && j < ARRAY_SIZE(all_strategy); j++)
type_conversion,merge.c,197,-,+,,45,"				add_cmdname(&not_strategies, ent->name, ent->len);"
type_conversion,merge.c,270,-,+,,9,"		NULL, 0, option_read_message },"
type_conversion,merge.c,284,-,+,,62,"	  N_(""GPG sign commit""), PARSE_OPT_OPTARG, NULL, (intptr_t) """" },"
type_conversion,merge.c,309,-,+,,15,	cp.git_cmd = 1;
type_conversion,merge.c,313,-,+,,37,"	len = strbuf_read(&buffer, cp.out, 1024);"
type_conversion,merge.c,320,-,+,,36,"	strbuf_setlen(&buffer, buffer.len-1);"
type_conversion,merge.c,335,-,+,,16,	cmd.git_cmd = 1;
type_conversion,merge.c,347,-,+,,16,	cmd.git_cmd = 1;
type_conversion,merge.c,370,-,+,,16,	cmd.git_cmd = 1;
type_conversion,merge.c,414,-,+,,15,	ctx.abbrev = rev.abbrev;
type_conversion,merge.c,454,-,+,,6,"					0, UPDATE_REFS_DIE_ON_ERR);"
type_conversion,merge.c,494,-,+,,36,"	strbuf_branchname(&bname, remote, 0);"
type_conversion,merge.c,502,-,+,,44,"	if (repo_dwim_ref(the_repository, remote, strlen(remote), &branch_head,"
type_conversion,merge.c,523,-,+,,23,	     remote < ptr && ptr[-1] == '^';
type_conversion,merge.c,536,-,+,,22,				seen_nonzero |= (*ptr != '0');
type_conversion,merge.c,550,-,+,,41,"		strbuf_setlen(&truname, truname.len - len);"
type_conversion,merge.c,564,-,+,,27,	if (desc && desc->obj && desc->obj->type == OBJ_TAG) {
type_conversion,merge.c,567,-,+,,18,"			    type_name(desc->obj->type),"
type_conversion,merge.c,663,-,+,,16,	opts.update = 1;
type_conversion,merge.c,664,-,+,,24,	opts.verbose_update = 1;
type_conversion,merge.c,665,-,+,,29,	opts.trivial_merges_only = 1;
type_conversion,merge.c,666,-,+,,15,	opts.merge = 1;
type_conversion,merge.c,667,-,+,,26,	opts.preserve_ignored = 0; /* FIXME: !overwrite_ignore */
type_conversion,merge.c,684,-,+,,19,"	if (unpack_trees(nr_trees, t, &opts))"
type_conversion,merge.c,727,-,+,,15,		for (x = 0; x < xopts.nr; x++)
type_conversion,merge.c,772,-,+,,14,	for (i = 0; i < the_repository->index->cache_nr; i++)
type_conversion,merge.c,792,-,+,,14,	for (i = 0; i < ARRAY_SIZE(all_strategy); i++)
type_conversion,merge.c,802,-,+,,38,"	if (strbuf_read_file(msg, filename, 0) < 0)"
type_conversion,merge.c,855,-,+,,7,		if (cleanup_mode == COMMIT_MSG_CLEANUP_SCISSORS) {
type_conversion,merge.c,861,-,+,,7,		if (cleanup_mode == COMMIT_MSG_CLEANUP_SCISSORS)
type_conversion,merge.c,869,-,+,,69,"		append_signoff(&msg, ignored_log_message_bytes(msg.buf, msg.len), 0);"
type_conversion,merge.c,932,-,+,,24,	if (!head_subsumed || fast_forward == FF_NO)
type_conversion,merge.c,984,-,+,,23,"	run_diff_files(&rev, 0);"
type_conversion,merge.c,1013,-,+,,24,"	args = xcalloc(st_add(branch->merge_nr, 1), sizeof(char *));"
type_conversion,merge.c,1046,-,+,,6,	if (fast_forward == FF_NO)
type_conversion,merge.c,1122,-,+,,19,	opts.add_title = !have_message;
type_conversion,merge.c,1124,-,+,,23,	opts.credit_people = (0 < option_edit);
type_conversion,merge.c,1129,-,+,,45,"		strbuf_setlen(merge_msg, merge_msg->len - 1);"
type_conversion,merge.c,1145,-,+,,35,"	if (strbuf_read(merge_names, fd, 0) < 0)"
type_conversion,merge.c,1150,-,+,,16,	for (pos = 0; pos < merge_names->len; pos = npos) {
type_conversion,merge.c,1157,-,+,,36,			npos = ptr - merge_names->buf + 1;
type_conversion,merge.c,1159,-,+,,11,			npos = merge_names->len;
type_conversion,merge.c,1161,-,+,,7,		if (npos - pos < hexsz + 2 ||
type_conversion,merge.c,1164,-,+,,59,"		else if (memcmp(merge_names->buf + pos + hexsz, ""\t\t"", 2))"
type_conversion,merge.c,1167,-,+,,34,			char saved = merge_names->buf[pos + hexsz];
type_conversion,merge.c,1168,-,+,,21,			merge_names->buf[pos + hexsz] = '\0';
type_conversion,merge.c,1170,-,+,,21,			merge_names->buf[pos + hexsz] = saved;
type_conversion,merge.c,1174,-,+,,12,				*ptr = '\0';
type_conversion,merge.c,1237,-,+,,6,	    merge_remote_util(commit)->obj->type != OBJ_TAG)
type_conversion,merge.c,1322,-,+,,33,		struct object_id stash_oid = {0};
type_conversion,merge.c,1405,-,+,,7,		if (fast_forward == FF_NO)
type_conversion,merge.c,1442,-,+,,7,		if (fast_forward == FF_NO)
type_conversion,merge.c,1460,-,+,,5,"				0,"
type_conversion,merge.c,1496,-,+,,7,		if (fast_forward != FF_ONLY && merging_a_throwaway_tag(commit))
type_conversion,merge.c,1515,-,+,,14,	for (i = 0; i < use_strategies_nr; i++) {
type_conversion,merge.c,1543,-,+,,36,"			&head_commit->object.oid, NULL, 0,"
type_conversion,merge.c,1560,-,+,,13,	} else if (fast_forward != FF_NO && !remoteheads->next &&
type_conversion,merge.c,1608,-,+,,24,		if (allow_trivial && fast_forward != FF_ONLY) {
type_conversion,merge.c,1671,-,+,,6,	if (fast_forward == FF_ONLY)
type_conversion,merge.c,1695,-,+,,14,	for (i = 0; i < use_strategies_nr; i++) {
type_conversion,merge.c,1701,-,+,,28,		if (use_strategies_nr != 1)
type_conversion,merge.c,1728,-,+,,31,			cnt = (use_strategies_nr > 1) ? evaluate_result() : 0;
type_conversion,merge.c,1754,-,+,,27,		if (use_strategies_nr > 1)
type_conversion,merged.c,37,-,+,,18,	for (size_t i = 0; i < mi->stack_len; i++) {
type_conversion,merged.c,63,-,+,,18,	for (size_t i = 0; i < mi->stack_len; i++) {
type_conversion,merged.c,89,-,+,,28,	struct pq_entry entry = { 0 };
type_conversion,merged.c,94,-,+,,27,	if (mi->advance_index >= 0) {
type_conversion,merged.c,111,-,+,,41,"		err = merged_iter_advance_subiter(mi, mi->advance_index);"
type_conversion,merged.c,116,-,+,,23,		mi->advance_index = -1;
type_conversion,merged.c,146,-,+,,22,	mi->advance_index = entry.index;
type_conversion,merged.c,182,-,+,,22,	uint64_t last_max = 0;
type_conversion,merged.c,183,-,+,,23,	uint64_t first_min = 0;
type_conversion,merged.c,185,-,+,,18,	for (size_t i = 0; i < n; i++) {
type_conversion,merged.c,190,-,+,,11,			return REFTABLE_FORMAT_ERROR;
type_conversion,merged.c,192,-,+,,12,		if (i == 0 || min < first_min) {
type_conversion,merged.c,195,-,+,,12,		if (i == 0 || max > last_max) {
type_conversion,merged.c,214,-,+,,18,	mt->stack_len = 0;
type_conversion,merged.c,253,-,+,,20,"		.advance_index = -1,"
type_conversion,merged.c,259,-,+,,18,	for (size_t i = 0; i < mt->stack_len; i++) {
type_conversion,merged_test.c,26,-,+,,17,	uint64_t min = 0xffffffff;
type_conversion,merged_test.c,27,-,+,,17,	uint64_t max = 0;
type_conversion,merged_test.c,32,-,+,,17,"		.block_size = 256,"
type_conversion,merged_test.c,69,-,+,,17,"		.block_size = 256,"
type_conversion,merged_test.c,70,-,+,,24,"		.exact_log_message = 1,"
type_conversion,merged_test.c,101,-,+,,18,	for (size_t i = 0; i < n; i++) {
type_conversion,merged_test.c,119,-,+,,9,	for (; i < n; i++)
type_conversion,merged_test.c,128,-,+,,19,"		.update_index = 1,"
type_conversion,merged_test.c,130,-,+,,19,"		.value.val1 = { 1, 2, 3, 0 },"
type_conversion,merged_test.c,134,-,+,,19,"		.update_index = 2,"
type_conversion,merged_test.c,144,-,+,,63,"		merged_table_from_records(refs, &bs, &readers, sizes, bufs, 2);"
type_conversion,merged_test.c,156,-,+,,27,"	readers_destroy(readers, 2);"
type_conversion,merged_test.c,158,-,+,,14,	for (i = 0; i < ARRAY_SIZE(bufs); i++) {
type_conversion,merged_test.c,169,-,+,,20,"			.update_index = 1,"
type_conversion,merged_test.c,171,-,+,,20,"			.value.val1 = { 1 },"
type_conversion,merged_test.c,175,-,+,,20,"			.update_index = 1,"
type_conversion,merged_test.c,177,-,+,,20,"			.value.val1 = { 1 },"
type_conversion,merged_test.c,181,-,+,,20,"			.update_index = 1,"
type_conversion,merged_test.c,183,-,+,,20,"			.value.val1 = { 1 },"
type_conversion,merged_test.c,188,-,+,,19,"		.update_index = 2,"
type_conversion,merged_test.c,194,-,+,,20,"			.update_index = 3,"
type_conversion,merged_test.c,196,-,+,,20,"			.value.val1 = { 2 },"
type_conversion,merged_test.c,200,-,+,,20,"			.update_index = 3,"
type_conversion,merged_test.c,202,-,+,,20,"			.value.val1 = { 1 },"
type_conversion,merged_test.c,219,-,+,,63,"		merged_table_from_records(refs, &bs, &readers, sizes, bufs, 3);"
type_conversion,merged_test.c,224,-,+,,15,	size_t len = 0;
type_conversion,merged_test.c,225,-,+,,15,	size_t cap = 0;
type_conversion,merged_test.c,232,-,+,,15,	while (len < 100) { /* cap loops/recursion. */
type_conversion,merged_test.c,244,-,+,,14,	for (i = 0; i < len; i++) {
type_conversion,merged_test.c,248,-,+,,14,	for (i = 0; i < len; i++) {
type_conversion,merged_test.c,256,-,+,,27,"	readers_destroy(readers, 3);"
type_conversion,merged_test.c,275,-,+,,18,	for (size_t i = 0; i < n; i++) {
type_conversion,merged_test.c,276,-,+,,56,"		write_test_log_table(&buf[i], logs[i], sizes[i], i + 1);"
type_conversion,merged_test.c,295,-,+,,20,"			.update_index = 2,"
type_conversion,merged_test.c,298,-,+,,19,"				.old_hash = { 2 },"
type_conversion,merged_test.c,307,-,+,,20,"			.update_index = 1,"
type_conversion,merged_test.c,310,-,+,,19,"				.old_hash = { 1 },"
type_conversion,merged_test.c,311,-,+,,19,"				.new_hash = { 2 },"
type_conversion,merged_test.c,321,-,+,,20,"			.update_index = 3,"
type_conversion,merged_test.c,324,-,+,,19,"				.new_hash = { 3 },"
type_conversion,merged_test.c,334,-,+,,20,"			.update_index = 2,"
type_conversion,merged_test.c,350,-,+,,37,"		logs, &bs, &readers, sizes, bufs, 3);"
type_conversion,merged_test.c,355,-,+,,15,	size_t len = 0;
type_conversion,merged_test.c,356,-,+,,15,	size_t cap = 0;
type_conversion,merged_test.c,363,-,+,,15,	while (len < 100) { /* cap loops/recursion. */
type_conversion,merged_test.c,375,-,+,,14,	for (i = 0; i < len; i++) {
type_conversion,merged_test.c,380,-,+,,56,"	err = reftable_merged_table_seek_log_at(mt, &it, ""a"", 2);"
type_conversion,merged_test.c,388,-,+,,14,	for (i = 0; i < len; i++) {
type_conversion,merged_test.c,396,-,+,,27,"	readers_destroy(readers, 3);"
type_conversion,merged_test.c,403,-,+,,41,	struct reftable_write_options opts = { 0 };
type_conversion,merged_test.c,410,-,+,,19,"		.update_index = 1,"
type_conversion,merged_test.c,414,-,+,,47,"	struct reftable_table *tab = reftable_calloc(1, sizeof(*tab));"
type_conversion,merged_test.c,419,-,+,,32,"	reftable_writer_set_limits(w, 1, 1);"
type_conversion,merged_test.c,437,-,+,,48,"	err = reftable_new_merged_table(&merged, tab, 1, GIT_SHA1_FORMAT_ID);"
type_conversion,midx-write.c,38,-,+,,18,"	hashwrite_u8(f, 0); /* unused */"
type_conversion,midx-write.c,110,-,+,,35,"		display_progress(ctx->progress, ++ctx->pack_paths_checked);"
type_conversion,midx-write.c,149,-,+,,53,"		fill_pack_info(&ctx->info[ctx->nr], p, file_name, ctx->nr);"
type_conversion,midx-write.c,172,-,+,,6,	if (a->preferred > b->preferred)
type_conversion,midx-write.c,174,-,+,,6,	if (a->preferred < b->preferred)
type_conversion,midx-write.c,182,-,+,,9,	return a->pack_int_id - b->pack_int_id;
type_conversion,midx-write.c,194,-,+,,14,"	e->offset = nth_midxed_offset(m, pos);"
type_conversion,midx-write.c,197,-,+,,18,	e->pack_mtime = 0;
type_conversion,midx-write.c,213,-,+,,18,"	entry->offset = nth_packed_object_offset(p, cur_object);"
type_conversion,midx-write.c,214,-,+,,21,	entry->preferred = !!preferred;
type_conversion,midx-write.c,240,-,+,,19,"	uint32_t start = 0, end;"
type_conversion,midx-write.c,249,-,+,,8,"		    (preferred_pack == nth_midxed_pack_int_id(m, cur_object))) {"
type_conversion,midx-write.c,257,-,+,,41,"		midx_fanout_grow(fanout, fanout->nr + 1);"
type_conversion,midx-write.c,261,-,+,,43,		fanout->entries[fanout->nr].preferred = 0;
type_conversion,midx-write.c,273,-,+,,19,"	uint32_t start = 0, end;"
type_conversion,midx-write.c,277,-,+,,46,"		start = get_pack_fanout(pack, cur_fanout - 1);"
type_conversion,midx-write.c,281,-,+,,41,"		midx_fanout_grow(fanout, fanout->nr + 1);"
type_conversion,midx-write.c,309,-,+,,40,"	size_t alloc_objects, total_objects = 0;"
type_conversion,midx-write.c,312,-,+,,43,	uint32_t start_pack = m ? m->num_packs : 0;
type_conversion,midx-write.c,316,-,+,,12,				       info[cur_pack].p->num_objects);
type_conversion,midx-write.c,323,-,+,,49,	alloc_objects = fanout.alloc = total_objects > 3200 ? total_objects / 200 : 16;
type_conversion,midx-write.c,327,-,+,,16,	*nr_objects = 0;
type_conversion,midx-write.c,329,-,+,,36,	for (cur_fanout = 0; cur_fanout < 256; cur_fanout++) {
type_conversion,midx-write.c,330,-,+,,15,		fanout.nr = 0;
type_conversion,midx-write.c,337,-,+,,32,			int preferred = cur_pack == preferred_pack;
type_conversion,midx-write.c,343,-,+,,30,		if (-1 < preferred_pack && preferred_pack < start_pack)
type_conversion,midx-write.c,345,-,+,,11,"						    preferred_pack, 1,"
type_conversion,midx-write.c,354,-,+,,24,		for (cur_object = 0; cur_object < fanout.nr; cur_object++) {
type_conversion,midx-write.c,355,-,+,,57,"			if (cur_object && oideq(&fanout.entries[cur_object - 1].oid,"
type_conversion,midx-write.c,377,-,+,,19,	size_t written = 0;
type_conversion,midx-write.c,379,-,+,,14,	for (i = 0; i < ctx->nr; i++) {
type_conversion,midx-write.c,385,-,+,,57,"		if (i && strcmp(ctx->info[i].pack_name, ctx->info[i - 1].pack_name) <= 0)"
type_conversion,midx-write.c,390,-,+,,47,		writelen = strlen(ctx->info[i].pack_name) + 1;
type_conversion,midx-write.c,391,-,+,,40,"		hashwrite(f, ctx->info[i].pack_name, writelen);"
type_conversion,midx-write.c,410,-,+,,11,	for (i = 0; i < ctx->nr; i++) {
type_conversion,midx-write.c,431,-,+,,19,	uint32_t count = 0;
type_conversion,midx-write.c,439,-,+,,18,	for (i = 0; i < 256; i++) {
type_conversion,midx-write.c,442,-,+,,25,		while (next < last && next->oid.hash[0] == i) {
type_conversion,midx-write.c,462,-,+,,14,	for (i = 0; i < ctx->entries_nr; i++) {
type_conversion,midx-write.c,465,-,+,,7,		if (i < ctx->entries_nr - 1) {
type_conversion,midx-write.c,473,-,+,,31,"		hashwrite(f, obj->oid.hash, (int)hash_len);"
type_conversion,midx-write.c,484,-,+,,32,"	uint32_t i, nr_large_offset = 0;"
type_conversion,midx-write.c,486,-,+,,14,	for (i = 0; i < ctx->entries_nr; i++) {
type_conversion,midx-write.c,544,-,+,,14,	for (i = 0; i < ctx->entries_nr; i++)
type_conversion,midx-write.c,580,-,+,,14,	for (i = 0; i < ctx->entries_nr; i++) {
type_conversion,midx-write.c,586,-,+,,20,		data[i].offset = e->offset;
type_conversion,midx-write.c,592,-,+,,14,	for (i = 0; i < ctx->entries_nr; i++) {
type_conversion,midx-write.c,600,-,+,,14,	for (i = 0; i < ctx->nr; i++) {
type_conversion,midx-write.c,603,-,+,,23,			pack->bitmap_pos = 0;
type_conversion,midx-write.c,622,-,+,,57,"	tmp_file = write_rev_file_order(NULL, ctx->pack_order, ctx->entries_nr,"
type_conversion,midx-write.c,643,-,+,,14,	for (i = 0; i < ctx->entries_nr; i++) {
type_conversion,midx-write.c,671,-,+,,6,	if (object->type != OBJ_COMMIT)
type_conversion,midx-write.c,720,-,+,,18,		if (buf.len && *buf.buf == '+') {
type_conversion,midx-write.c,775,-,+,,34,	revs.exclude_promisor_objects = 1;
type_conversion,midx-write.c,782,-,+,,27,		*indexed_commits_nr_p = cb.commits_nr;
type_conversion,midx-write.c,801,-,+,,21,	uint16_t options = 0;
type_conversion,midx-write.c,810,-,+,,14,		options |= BITMAP_OPT_HASH_CACHE;
type_conversion,midx-write.c,813,-,+,,14,		options |= BITMAP_OPT_LOOKUP_TABLE;
type_conversion,midx-write.c,821,-,+,,14,	for (i = 0; i < pdata->nr_objects; i++)
type_conversion,midx-write.c,842,-,+,,14,	for (i = 0; i < pdata->nr_objects; i++)
type_conversion,midx-write.c,929,-,+,,11,	ctx.nr = 0;
type_conversion,midx-write.c,930,-,+,,41,	ctx.alloc = ctx.m ? ctx.m->num_packs : 16;
type_conversion,midx-write.c,935,-,+,,12,		for (i = 0; i < ctx.m->num_packs; i++) {
type_conversion,midx-write.c,960,-,+,,27,	ctx.pack_paths_checked = 0;
type_conversion,midx-write.c,962,-,+,,84,"		ctx.progress = start_delayed_progress(_(""Adding packfiles to multi-pack-index""), 0);"
type_conversion,midx-write.c,971,-,+,,26,	if ((ctx.m && ctx.nr == ctx.m->num_packs) &&
type_conversion,midx-write.c,996,-,+,,15,		for (i = 0; i < ctx.nr; i++) {
type_conversion,midx-write.c,999,-,+,,30,				ctx.preferred_pack_idx = i;
type_conversion,midx-write.c,1021,-,+,,15,		for (i = 1; i < ctx.nr; i++) {
type_conversion,midx-write.c,1026,-,+,,30,				ctx.preferred_pack_idx = i;
type_conversion,midx-write.c,1057,-,+,,52,"	ctx.entries = get_sorted_entries(ctx.m, ctx.info, ctx.nr, &ctx.entries_nr,"
type_conversion,midx-write.c,1060,-,+,,29,	ctx.large_offsets_needed = 0;
type_conversion,midx-write.c,1061,-,+,,14,	for (i = 0; i < ctx.entries_nr; i++) {
type_conversion,midx-write.c,1062,-,+,,31,		if (ctx.entries[i].offset > 0x7fffffff)
type_conversion,midx-write.c,1064,-,+,,31,		if (ctx.entries[i].offset > 0xffffffff)
type_conversion,midx-write.c,1065,-,+,,31,			ctx.large_offsets_needed = 1;
type_conversion,midx-write.c,1074,-,+,,15,		for (i = 0; i < ctx.nr && drop_index < packs_to_drop->nr; i++) {
type_conversion,midx-write.c,1080,-,+,,27,				ctx.info[i].expired = 1;
type_conversion,midx-write.c,1088,-,+,,27,				ctx.info[i].expired = 0;
type_conversion,midx-write.c,1105,-,+,,14,	for (i = 0; i < ctx.nr; i++) {
type_conversion,midx-write.c,1110,-,+,,54,			ctx.pack_perm[ctx.info[i].orig_pack_int_id] = i - dropped_packs;
type_conversion,midx-write.c,1114,-,+,,14,	for (i = 0; i < ctx.nr; i++) {
type_conversion,midx-write.c,1117,-,+,,59,		pack_name_concat_len += strlen(ctx.info[i].pack_name) + 1;
type_conversion,midx-write.c,1118,-,+,,33,		bitmapped_packs_concat_len += 2 * sizeof(uint32_t);
type_conversion,midx-write.c,1142,-,+,,15,	if (ctx.nr - dropped_packs == 0) {
type_conversion,midx-write.c,1156,-,+,,40,"	add_chunk(cf, MIDX_CHUNKID_PACKNAMES, pack_name_concat_len,"
type_conversion,midx-write.c,1169,-,+,,12,"			st_mult(ctx.num_large_offsets,"
type_conversion,midx-write.c,1179,-,+,,6,"			  bitmapped_packs_concat_len,"
type_conversion,midx-write.c,1183,-,+,,23,"	write_midx_header(f, get_num_chunks(cf), ctx.nr - dropped_packs);"
type_conversion,midx-write.c,1213,-,+,,20,		ctx.entries_nr = 0;
type_conversion,midx-write.c,1243,-,+,,14,	for (i = 0; i < ctx.nr; i++) {
type_conversion,midx-write.c,1283,-,+,,31,"	uint32_t i, *count, result = 0;"
type_conversion,midx-write.c,1295,-,+,,8,					  m->num_objects);
type_conversion,midx-write.c,1296,-,+,,11,	for (i = 0; i < m->num_objects; i++) {
type_conversion,midx-write.c,1297,-,+,,21,"		int pack_int_id = nth_midxed_pack_int_id(m, i);"
type_conversion,midx-write.c,1299,-,+,,34,"		display_progress(progress, i + 1);"
type_conversion,midx-write.c,1305,-,+,,8,					  m->num_packs);
type_conversion,midx-write.c,1306,-,+,,11,	for (i = 0; i < m->num_packs; i++) {
type_conversion,midx-write.c,1308,-,+,,34,"		display_progress(progress, i + 1);"
type_conversion,midx-write.c,1335,-,+,,9,	return result;
type_conversion,midx-write.c,1385,-,+,,11,	for (i = 0; i < m->num_packs; i++) {
type_conversion,midx-write.c,1389,-,+,,21,		include_pack[i] = 1;
type_conversion,midx-write.c,1407,-,+,,11,	for (i = 0; i < m->num_packs; i++) {
type_conversion,midx-write.c,1413,-,+,,24,		pack_info[i].mtime = m->packs[i]->mtime;
type_conversion,midx-write.c,1416,-,+,,11,	for (i = 0; i < m->num_objects; i++) {
type_conversion,midx-write.c,1423,-,+,,15,	total_size = 0;
type_conversion,midx-write.c,1424,-,+,,11,	for (i = 0; total_size < batch_size && i < m->num_packs; i++) {
type_conversion,midx-write.c,1425,-,+,,21,		int pack_int_id = pack_info[i].pack_int_id;
type_conversion,midx-write.c,1429,-,+,,52,"		if (!want_included_pack(r, m, pack_kept_objects, pack_int_id))"
type_conversion,midx-write.c,1432,-,+,,27,"		expected_size = st_mult(p->pack_size,"
type_conversion,midx-write.c,1433,-,+,,6,					pack_info[i].referenced_objects);
type_conversion,midx-write.c,1434,-,+,,20,		expected_size /= p->num_objects;
type_conversion,midx-write.c,1440,-,+,,31,		include_pack[pack_int_id] = 1;
type_conversion,midx-write.c,1449,-,+,,32,"	uint32_t i, packs_to_repack = 0;"
type_conversion,midx-write.c,1473,-,+,,11,	for (i = 0; i < m->num_packs; i++) {
type_conversion,midx-write.c,1477,-,+,,25,	if (packs_to_repack <= 1)
type_conversion,midx-write.c,1498,-,+,,16,	cmd.git_cmd = 1;
type_conversion,midx-write.c,1508,-,+,,11,	for (i = 0; i < m->num_packs; i++) {
type_conversion,midx.c,44,-,+,,20,	if (chunk_size != 4 * 256) {
type_conversion,midx.c,68,-,+,,28,"	if (chunk_size != st_mult(m->hash_len, m->num_objects)) {"
type_conversion,midx.c,81,-,+,,28,"	if (chunk_size != st_mult(m->num_objects, MIDX_CHUNK_OFFSET_WIDTH)) {"
type_conversion,midx.c,123,-,+,,64,"	midx_map = xmmap(NULL, midx_size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,midx.c,137,-,+,,6,	if (m->version != MIDX_VERSION)
type_conversion,midx.c,139,-,+,,9,		      m->version);
type_conversion,midx.c,158,-,+,,26,"				   MIDX_HEADER_SIZE, m->num_chunks,"
type_conversion,midx.c,186,-,+,,11,	for (i = 0; i < m->num_packs; i++) {
type_conversion,midx.c,189,-,+,,5,				(cur_pack_name - (const char *)m->chunk_pack_names);
type_conversion,midx.c,198,-,+,,55,"		if (i && strcmp(m->pack_names[i], m->pack_names[i - 1]) <= 0)"
type_conversion,midx.c,200,-,+,,28,"			      m->pack_names[i - 1],"
type_conversion,midx.c,232,-,+,,11,	for (i = 0; i < m->num_packs; i++) {
type_conversion,midx.c,234,-,+,,36,			m->packs[i]->multi_pack_index = 0;
type_conversion,midx.c,262,-,+,,24,	p->multi_pack_index = 1;
type_conversion,midx.c,283,-,+,,42,				  MIDX_CHUNK_BITMAPPED_PACKS_WIDTH * pack_int_id);
type_conversion,midx.c,285,-,+,,41,				 MIDX_CHUNK_BITMAPPED_PACKS_WIDTH * pack_int_id +
type_conversion,midx.c,305,-,+,,45,"	oidread(oid, m->chunk_oid_lookup + st_mult(m->hash_len, n));"
type_conversion,midx.c,314,-,+,,42,	offset_data = m->chunk_object_offsets + (off_t)pos * MIDX_CHUNK_OFFSET_WIDTH;
type_conversion,midx.c,322,-,+,,7,		if (offset32 >= m->chunk_large_offsets_len / sizeof(uint64_t))
type_conversion,midx.c,324,-,+,,63,		return get_be64(m->chunk_large_offsets + sizeof(uint64_t) * offset32);
type_conversion,midx.c,327,-,+,,9,	return offset32;
type_conversion,midx.c,333,-,+,,4,			(off_t)pos * MIDX_CHUNK_OFFSET_WIDTH);
type_conversion,midx.c,382,-,+,,22,	while (*idx_name && *idx_name == *idx_or_pack_name) {
type_conversion,midx.c,412,-,+,,19,"	uint32_t first = 0, last = m->num_packs;"
type_conversion,midx.c,415,-,+,,43,		uint32_t mid = first + (last - first) / 2;
type_conversion,midx.c,427,-,+,,18,			first = mid + 1;
type_conversion,midx.c,450,-,+,,50,"			nth_midxed_pack_int_id(m, pack_pos_to_midx(m, 0));"
type_conversion,midx.c,454,-,+,,17,	*pack_int_id = m->preferred_pack_idx;
type_conversion,midx.c,573,-,+,,9,	return b->pack_int_id - a->pack_int_id;
type_conversion,midx.c,616,-,+,,8,					  m->num_packs);
type_conversion,midx.c,617,-,+,,11,	for (i = 0; i < m->num_packs; i++) {
type_conversion,midx.c,621,-,+,,34,"		display_progress(progress, i + 1);"
type_conversion,midx.c,625,-,+,,24,	if (m->num_objects == 0) {
type_conversion,midx.c,636,-,+,,25,						 m->num_objects - 1);
type_conversion,midx.c,637,-,+,,35,	for (i = 0; i < m->num_objects - 1; i++) {
type_conversion,midx.c,641,-,+,,39,"		nth_midxed_object_oid(&oid2, m, i + 1);"
type_conversion,midx.c,645,-,+,,54,"				    i, oid_to_hex(&oid1), oid_to_hex(&oid2), i + 1);"
type_conversion,midx.c,658,-,+,,11,	for (i = 0; i < m->num_objects; i++) {
type_conversion,midx.c,665,-,+,,8,						 m->num_objects);
type_conversion,midx.c,666,-,+,,29,"	display_progress(progress, 0); /* TODO: Measure QSORT() progress */"
type_conversion,midx.c,671,-,+,,67,"		progress = start_sparse_progress(_(""Verifying object offsets""), m->num_objects);"
type_conversion,midx.c,672,-,+,,11,	for (i = 0; i < m->num_objects; i++) {
type_conversion,midx.c,677,-,+,,11,		if (i > 0 && pairs[i-1].pack_int_id != pairs[i].pack_int_id &&
type_conversion,midx.c,678,-,+,,24,		    m->packs[pairs[i-1].pack_int_id])
type_conversion,midx.c,680,-,+,,35,			close_pack_fd(m->packs[pairs[i-1].pack_int_id]);
type_conversion,midx.c,681,-,+,,38,			close_pack_index(m->packs[pairs[i-1].pack_int_id]);
type_conversion,mingw.c,768,+,-,winTime - 116444736000000000LL,,
type_conversion,mktag.c,62,-,+,,6,	if (type != *tagged_type)
type_conversion,mktag.c,65,-,+,,17,"		    type_name(*tagged_type), type_name(type));"
type_conversion,mktag.c,91,-,+,,27,"	if (strbuf_read(&buf, 0, 0) < 0)"
type_conversion,mktree.c,32,-,+,,13,	ent->len = len;
type_conversion,mktree.c,43,-,+,,36,"	return base_name_compare(a->name, a->len, a->mode,"
type_conversion,mktree.c,44,-,+,,15,"				 b->name, b->len, b->mode);"
type_conversion,mktree.c,54,-,+,,14,	for (size = i = 0; i < used; i++)
type_conversion,mktree.c,55,-,+,,11,		size += 32 + entries[i]->len;
type_conversion,mktree.c,89,-,+,,9,"	mode = strtoul(ptr, &ntr, 8);"
type_conversion,mktree.c,90,-,+,,28,	if (ptr == ntr || !ntr || *ntr != ' ')
type_conversion,mktree.c,95,-,+,,6,	    *p != '\t')
type_conversion,mktree.c,103,-,+,,11,	*ntr++ = 0; /* now at the beginning of SHA1 */
type_conversion,mktree.c,106,-,+,,24,"	if (!nul_term_line && path[0] == '""') {"
type_conversion,mktree.c,118,-,+,,6,	if (mode_type != type_from_string(ptr)) {
type_conversion,mktree.c,120,-,+,,25,"			path, ptr, type_name(mode_type));"
type_conversion,mktree.c,131,-,+,,6,	if (obj_type < 0) {
type_conversion,mktree.c,138,-,+,,7,		if (obj_type != mode_type) {
type_conversion,mktree.c,145,-,+,,39,"				path, oid_to_hex(&oid), type_name(obj_type), type_name(mode_type));"
type_conversion,mktree.c,179,-,+,,8,			if (sb.buf[0] == '\0') {
type_conversion,mv.c,47,-,+,,44,	int prefixlen = prefix ? strlen(prefix) : 0;
type_conversion,mv.c,52,-,+,,16,		int length = strlen(pathspec[i]);
type_conversion,mv.c,56,-,+,,36,		       to_copy > 0 && is_dir_sep(pathspec[i][to_copy - 1]))
type_conversion,mv.c,59,-,+,,30,"		it = xmemdupz(pathspec[i], to_copy);"
type_conversion,mv.c,82,-,+,,24,	if (len && path[len - 1] != '/') {
type_conversion,mv.c,83,-,+,,42,"		char *with_slash = xmalloc(st_add(len, 2));"
type_conversion,mv.c,85,-,+,,23,		with_slash[len++] = '/';
type_conversion,mv.c,86,-,+,,21,		with_slash[len] = 0;
type_conversion,mv.c,122,-,+,,21,	for (last = first; last < the_repository->index->cache_nr; last++) {
type_conversion,mv.c,124,-,+,,34,"		if (strncmp(path, src_w_slash, len_w_slash))"
type_conversion,mv.c,145,-,+,,15,	int length = strlen(with_slash);
type_conversion,mv.c,152,-,+,,7,		if (pos >= the_repository->index->cache_nr)
type_conversion,mv.c,155,-,+,,37,"		if (strncmp(with_slash, ce->name, length))"
type_conversion,mv.c,204,-,+,,56,"	source = internal_prefix_pathspec(prefix, argv, argc, 0);"
type_conversion,mv.c,215,-,+,,63,"	dest_path = internal_prefix_pathspec(prefix, argv + argc, 1, flags);"
type_conversion,mv.c,217,-,+,,30,"	submodule_gitfile = xcalloc(argc, sizeof(char *));"
type_conversion,mv.c,219,-,+,,6,	if (dest_path[0][0] == '\0')
type_conversion,mv.c,261,-,+,,12,		length = strlen(src);
type_conversion,mv.c,271,-,+,,18,					modes[i] |= SKIP_WORKTREE_DIR;
type_conversion,mv.c,275,-,+,,11,				if (!(modes[i] & SPARSE))
type_conversion,mv.c,289,-,+,,51,"			if (index_name_pos(the_repository->index, dst, strlen(dst)) < 0) {"
type_conversion,mv.c,290,-,+,,17,				modes[i] |= SPARSE;
type_conversion,mv.c,297,-,+,,16,			modes[i] |= SPARSE;
type_conversion,mv.c,300,-,+,,26,"		if (!strncmp(src, dst, length) &&"
type_conversion,mv.c,301,-,+,,8,		    (dst[length] == 0 || dst[length] == '/')) {
type_conversion,mv.c,327,-,+,,16,			modes[i] |= WORKING_DIRECTORY;
type_conversion,mv.c,339,-,+,,14,			dst_len = strlen(dst);
type_conversion,mv.c,383,-,+,,36,		if (is_dir_sep(dst[strlen(dst) - 1])) {
type_conversion,mv.c,389,-,+,,8,		    (dst_mode & (SKIP_WORKTREE_DIR | SPARSE)) &&
type_conversion,mv.c,390,-,+,,54,"		    index_entry_exists(the_repository->index, dst, strlen(dst))) {"
type_conversion,mv.c,455,-,+,,18,			state.force = 1;
type_conversion,mv.c,460,-,+,,9,		if (!(mode & (INDEX | SPARSE | SKIP_WORKTREE_DIR)) &&
type_conversion,mv.c,461,-,+,,9,		    !(dst_mode & (SKIP_WORKTREE_DIR | SPARSE)) &&
type_conversion,mv.c,476,-,+,,7,		if (mode & (WORKING_DIRECTORY | SKIP_WORKTREE_DIR))
type_conversion,mv.c,479,-,+,,52,"		pos = index_name_pos(the_repository->index, src, strlen(src));"
type_conversion,mv.c,481,-,+,,9,"		if (!(mode & SPARSE) && !lstat(src, &st))"
type_conversion,mv.c,485,-,+,,14,						       0);
type_conversion,mv.c,497,-,+,,9,			if ((mode & SPARSE) &&
type_conversion,mv.c,501,-,+,,13,							     strlen(dst));
type_conversion,mv.c,508,-,+,,16,			} else if ((dst_mode & (SKIP_WORKTREE_DIR | SPARSE)) &&
type_conversion,mv.c,509,-,+,,10,				   !(mode & SPARSE) &&
type_conversion,mv.c,513,-,+,,13,							     strlen(dst));
type_conversion,mv.c,548,-,+,,46,"		if (index_range_of_same_dir(a_src_dir.buf, a_src_dir.len,"
type_conversion,name-hash.c,39,-,+,,28,"			name ? name : e2->name, e1->namelen);"
type_conversion,name-hash.c,54,-,+,,68,"	return find_dir_entry__hash(istate, name, namelen, memihash(name, namelen));"
type_conversion,name-hash.c,70,-,+,,36,	while (namelen > 0 && !is_dir_sep(ce->name[namelen - 1]))
type_conversion,name-hash.c,77,-,+,,41,"	dir = find_dir_entry(istate, ce->name, namelen);"
type_conversion,name-hash.c,81,-,+,,52,"		hashmap_entry_init(&dir->ent, memihash(ce->name, namelen));"
type_conversion,name-hash.c,82,-,+,,18,		dir->namelen = namelen;
type_conversion,name-hash.c,289,-,+,,18,			prefix->len - parent->namelen);
type_conversion,name-hash.c,296,-,+,,50,"	dir = find_dir_entry__hash(istate, prefix->buf, prefix->len, hash);"
type_conversion,name-hash.c,300,-,+,,18,		dir->namelen = prefix->len;
type_conversion,name-hash.c,344,-,+,,25,	int input_prefix_len = prefix->len;
type_conversion,name-hash.c,383,-,+,,24,"	strbuf_setlen(prefix, input_prefix_len);"
type_conversion,name-hash.c,397,-,+,,25,	int input_prefix_len = prefix->len;
type_conversion,name-hash.c,411,-,+,,14,			int len = slash - name;
type_conversion,name-hash.c,415,-,+,,29,"			strbuf_add(prefix, name, len);"
type_conversion,name-hash.c,419,-,+,,27,"				strbuf_setlen(prefix, input_prefix_len);"
type_conversion,name-hash.c,426,-,+,,26,"			strbuf_setlen(prefix, input_prefix_len);"
type_conversion,name-hash.c,488,-,+,,14,	for (k = 0; k < d->istate->cache_nr; k++) {
type_conversion,name-hash.c,504,-,+,,14,	for (k = 0; k < istate->cache_nr; k++) {
type_conversion,name-hash.c,543,-,+,,7,		if (k_start > istate->cache_nr)
type_conversion,name-hash.c,544,-,+,,14,			k_start = istate->cache_nr;
type_conversion,name-hash.c,592,-,+,,58,"	hashmap_init(&istate->name_hash, cache_entry_cmp, NULL, istate->cache_nr);"
type_conversion,name-hash.c,593,-,+,,55,"	hashmap_init(&istate->dir_hash, dir_entry_cmp, NULL, istate->cache_nr);"
type_conversion,name-hash.c,607,-,+,,16,		for (nr = 0; nr < istate->cache_nr; nr++)
type_conversion,name-hash.c,611,-,+,,34,	istate->name_hash_initialized = 1;
type_conversion,name-hash.c,658,-,+,,22,		unsigned char c1 = *name1++;
type_conversion,name-hash.c,659,-,+,,22,		unsigned char c2 = *name2++;
type_conversion,name-hash.c,661,-,+,,7,		if (c1 != c2) {
type_conversion,name-hash.c,664,-,+,,8,			if (c1 != c2)
type_conversion,name-hash.c,679,-,+,,48,"	if (len == namelen && !memcmp(name, ce->name, len))"
type_conversion,name-hash.c,694,-,+,,31,"	expand_to_path(istate, name, namelen, 0);"
type_conversion,name-hash.c,695,-,+,,37,"	dir = find_dir_entry(istate, name, namelen);"
type_conversion,name-hash.c,699,-,+,,41,"		strbuf_add(canonical_path, dir->name, dir->namelen);"
type_conversion,name-hash.c,713,-,+,,18,		while (*ptr && *ptr != '/')
type_conversion,name-hash.c,716,-,+,,7,		if (*ptr == '/') {
type_conversion,name-hash.c,719,-,+,,39,"			dir = find_dir_entry(istate, name, ptr - name);"
type_conversion,name-hash.c,721,-,+,,61,"				memcpy((void *)startPtr, dir->name + (startPtr - name), ptr - startPtr);"
type_conversion,name-hash.c,732,-,+,,37,"	unsigned int hash = memihash(name, namelen);"
type_conversion,name-hash.c,735,-,+,,31,"	expand_to_path(istate, name, namelen, icase);"
type_conversion,name-hash.c,750,-,+,,34,	istate->name_hash_initialized = 0;
type_conversion,name-rev.c,43,-,+,,22,	generation_cutoff = 0;
type_conversion,name-rev.c,44,-,+,,11,	cutoff = 0;
type_conversion,name-rev.c,81,-,+,,6,	if (generation_cutoff < GENERATION_NUMBER_INFINITY)
type_conversion,name-rev.c,182,-,+,,55,"	size_t parents_to_queue_nr, parents_to_queue_alloc = 0;"
type_conversion,name-rev.c,207,-,+,,25,		parents_to_queue_nr = 0;
type_conversion,name-rev.c,262,-,+,,35,"		if (!wildmatch(filter, subpath, 0))"
type_conversion,name-rev.c,263,-,+,,11,			return subpath - path;
type_conversion,name-rev.c,312,-,+,,43,	tip_table.table[tip_table.nr].from_tag = from_tag;
type_conversion,name-rev.c,313,-,+,,40,	tip_table.table[tip_table.nr].deref = deref;
type_conversion,name-rev.c,330,-,+,,8,	cmp = b->from_tag - a->from_tag;
type_conversion,name-rev.c,397,-,+,,14,	while (o && o->type == OBJ_TAG) {
type_conversion,name-rev.c,405,-,+,,11,	if (o && o->type == OBJ_COMMIT) {
type_conversion,name-rev.c,430,-,+,,6,"				 e->from_tag, e->deref, string_pool);"
type_conversion,name-rev.c,453,-,+,,44,"	found = oid_pos(&o->oid, tip_table.table, tip_table.nr,"
type_conversion,name-rev.c,466,-,+,,6,	if (o->type != OBJ_COMMIT)
type_conversion,name-rev.c,525,-,+,,12,		else if (++counter == hexsz &&
type_conversion,name-rev.c,530,-,+,,30,			int p_len = p - p_start + 1;
type_conversion,name-rev.c,534,-,+,,13,			*(p+1) = 0;
type_conversion,name-rev.c,535,-,+,,51,"			if (!repo_get_oid(the_repository, p - (hexsz - 1), &oid)) {"
type_conversion,name-rev.c,547,-,+,,22,"				printf(""%.*s%s"", p_len - hexsz, p_start, name);"
type_conversion,name-rev.c,556,-,+,,19,"		fwrite(p_start, p - p_start, 1, stdout);"
type_conversion,name-rev.c,590,-,+,,30,"	mem_pool_init(&string_pool, 0);"
type_conversion,name-rev.c,625,-,+,,18,			if (peeled && peeled->type == OBJ_COMMIT)
type_conversion,name-rev.c,665,-,+,,9,		max = get_max_object_index();
type_conversion,name-rev.c,667,-,+,,44,			struct object *obj = get_indexed_object(i);
type_conversion,name-rev.c,668,-,+,,16,			if (!obj || obj->type != OBJ_COMMIT)
type_conversion,name-rev.c,675,-,+,,15,		for (i = 0; i < revs.nr; i++)
type_conversion,notes-cache.c,70,-,+,,14,"			    NULL, 0, UPDATE_REFS_QUIET_ON_ERR) < 0)"
type_conversion,notes-merge.c,32,-,+,,32,"	strbuf_init(&(o->commit_msg), 0);"
type_conversion,notes-merge.c,33,-,+,,17,	o->verbosity = NOTES_MERGE_VERBOSITY_DEFAULT;
type_conversion,notes-merge.c,41,-,+,,18,	while (*path && i < the_hash_algo->hexsz) {
type_conversion,notes-merge.c,42,-,+,,7,		if (*path != '/')
type_conversion,notes-merge.c,46,-,+,,15,	if (*path || i != the_hash_algo->hexsz)
type_conversion,notes-merge.c,53,-,+,,10,	switch (p->status) {
type_conversion,notes-merge.c,141,-,+,,24,	opt.flags.recursive = 1;
type_conversion,notes-merge.c,203,-,+,,24,	opt.flags.recursive = 1;
type_conversion,notes-merge.c,298,-,+,,21,		o->has_worktree = 1;
type_conversion,notes-merge.c,315,-,+,,16,	while (size > 0) {
type_conversion,notes-merge.c,317,-,+,,13,		if (ret < 0) {
type_conversion,notes-merge.c,323,-,+,,11,		size -= ret;
type_conversion,notes-merge.c,341,-,+,,6,	if (type != OBJ_BLOB)
type_conversion,notes-merge.c,367,-,+,,6,	if (status == LL_MERGE_BINARY_CONFLICT)
type_conversion,notes-merge.c,370,-,+,,7,	if ((status < 0) || !result_buf.ptr)
type_conversion,notes-merge.c,373,-,+,,49,"	write_buf_to_worktree(&p->obj, result_buf.ptr, result_buf.size);"
type_conversion,notes-merge.c,376,-,+,,9,	return status;
type_conversion,notes-merge.c,699,-,+,,14,	if (!msg || msg[2] == '\0')
type_conversion,notes-merge.c,708,-,+,,12,	baselen = path.len;
type_conversion,notes-merge.c,732,-,+,,24,"		strbuf_setlen(&path, baselen);"
type_conversion,notes-utils.c,57,-,+,,25,"	strbuf_insertstr(&buf, 0, ""notes: "");"
type_conversion,notes-utils.c,59,-,+,,38,"			t->update_ref, &commit_oid, NULL, 0,"
type_conversion,notes-utils.c,140,-,+,,28,	c->refs->strdup_strings = 1;
type_conversion,notes.c,112,-,+,,30,"			load_subtree(t, l, *tree, *n);"
type_conversion,notes.c,130,-,+,,30,"			load_subtree(t, l, *tree, *n);"
type_conversion,notes.c,172,-,+,,18,	show.no_stdin = 1;
type_conversion,notes.c,174,-,+,,18,	for (i = 0; i < 16; i++) {
type_conversion,notes.c,175,-,+,,17,	show.git_cmd = 1;
type_conversion,notes.c,180,-,+,,34,"	if (strbuf_read(&buf, show.out, 0) < 0)"
type_conversion,notes.c,224,-,+,,14,	for (i = 0; i < n; i++) {
type_conversion,notes.c,226,-,+,,16,		parent_stack[i + 1] = CLR_PTR_TYPE(parent_stack[i]->a[j]);
type_conversion,notes.c,230,-,+,,9,	while (i > 0 &&
type_conversion,notes.c,231,-,+,,62,"	       !note_tree_consolidate(parent_stack[i], parent_stack[i - 1],"
type_conversion,notes.c,244,-,+,,19,	size_t sep_len = 0;
type_conversion,notes.c,248,-,+,,64,	else if ((sep_len = strlen(separator)) && separator[sep_len - 1] == '\n')
type_conversion,notes.c,259,-,+,,11,	for (i = 0; i < d->msg_nr ; i++) {
type_conversion,notes.c,264,-,+,,25,		if ((d->stripspace == UNSPECIFIED &&
type_conversion,notes.c,265,-,+,,8,		     d->messages[i]->stripspace == STRIPSPACE) ||
type_conversion,notes.c,266,-,+,,24,		    d->stripspace == STRIPSPACE)
type_conversion,notes.c,269,-,+,,11,		switch (type) {
type_conversion,notes.c,283,-,+,,26,	d->messages[d->msg_nr - 1] = msg;
type_conversion,notes.c,290,-,+,,34,"				load_subtree(t, entry, tree, n);"
type_conversion,notes.c,295,-,+,,26,"	strbuf_init(&msg->buf , 0);"
type_conversion,notes.c,297,-,+,,33,"		if (strbuf_read(&msg->buf, 0, 1024) < 0)"
type_conversion,notes.c,299,-,+,,46,"	} else if (strbuf_read_file(&msg->buf, arg, 1024) < 0)"
type_conversion,notes.c,301,-,+,,29,"			load_subtree(t, l, tree, n);"
type_conversion,notes.c,303,-,+,,26,	d->messages[d->msg_nr - 1] = msg;
type_conversion,notes.c,316,-,+,,41,"	new_node = (struct int_node *) xcalloc(1, sizeof(struct int_node));"
type_conversion,notes.c,317,-,+,,38,"	ret = note_tree_insert(t, new_node, n + 1, l, GET_PTR_TYPE(*p),"
type_conversion,notes.c,319,-,+,,25,"	strbuf_init(&msg->buf, 0);"
type_conversion,notes.c,322,-,+,,39,"	return note_tree_insert(t, new_node, n + 1, entry, type, combine_notes);"
type_conversion,notes.c,324,-,+,,6,	if (type != OBJ_BLOB) {
type_conversion,notes.c,329,-,+,,18,	for (i = 0; i < 16; i++) {
type_conversion,notes.c,336,-,+,,26,	d->messages[d->msg_nr - 1] = msg;
type_conversion,notes.c,409,-,+,,20,	if (prefix_len >= hashsz)
type_conversion,notes.c,411,-,+,,19,	if (prefix_len * 2 < n)
type_conversion,notes.c,419,-,+,,19,		if (path_len == 2 * (hashsz - prefix_len)) {
type_conversion,notes.c,427,-,+,,7,					 hashsz - prefix_len))
type_conversion,notes.c,431,-,+,,26,		} else if (path_len == 2) {
type_conversion,notes.c,439,-,+,,58,"			if (hex_to_bytes(object_oid.hash + len++, entry.path, 1))"
type_conversion,notes.c,447,-,+,,37,"			memset(object_oid.hash + len, 0, hashsz - len - 1);"
type_conversion,notes.c,461,-,+,,33,"		if (note_tree_insert(t, node, n, l, type,"
type_conversion,notes.c,465,-,+,,8,"			    type == PTR_TYPE_NOTE ? ""note"" : ""subtree"","
type_conversion,notes.c,481,-,+,,59,"	struct note_data d = { .buf = STRBUF_INIT, .stripspace = UNSPECIFIED };"
type_conversion,notes.c,484,-,+,,13,			for (i = 0; i < prefix_len; i++) {
type_conversion,notes.c,485,-,+,,34,"				strbuf_addch(&non_note_path, *q++);"
type_conversion,notes.c,486,-,+,,34,"				strbuf_addch(&non_note_path, *q++);"
type_conversion,notes.c,524,-,+,,7,	if ((n % 2) || (n > 2 * fanout))
type_conversion,notes.c,526,-,+,,18,	for (i = 0; i < 16; i++) {
type_conversion,notes.c,535,-,+,,9,	return fanout + 1;
type_conversion,notes.c,544,-,+,,19,"	unsigned int i = 0, j = 0;"
type_conversion,notes.c,550,-,+,,15,		path[i++] = '/';
type_conversion,notes.c,567,-,+,,18,	for (i = 0; i < 16; i++) {
type_conversion,notes.c,573,-,+,,51,"			ret = for_each_note_helper(t, CLR_PTR_TYPE(p), n + 1,"
type_conversion,notes.c,592,-,+,,8,			if (n < 2 * fanout &&
type_conversion,notes.c,596,-,+,,39,					l->key_oid.hash[KEY_INDEX] * 2 + fanout;
type_conversion,notes.c,602,-,+,,25,				if (path[path_len - 1] != '/')
type_conversion,notes.c,603,-,+,,25,					path[path_len++] = '/';
type_conversion,notes.c,604,-,+,,22,				path[path_len] = '\0';
type_conversion,notes.c,609,-,+,,8,			if (n >= 2 * fanout ||
type_conversion,notes.c,613,-,+,,30,"				load_subtree(t, l, tree, n);"
type_conversion,notes.c,641,-,+,,10,	return  full_path[0] == tws->path[0] &&
type_conversion,notes.c,642,-,+,,3,		full_path[1] == tws->path[1] &&
type_conversion,notes.c,643,-,+,,3,		full_path[2] == '/';
type_conversion,notes.c,658,-,+,,59,"	struct note_data d = { .buf = STRBUF_INIT, .stripspace = UNSPECIFIED };"
type_conversion,notes.c,663,-,+,,23,"	strbuf_init(&n->buf, 256 * (32 + the_hash_algo->hexsz)); /* assume 256 entries per tree */"
type_conversion,notes.c,664,-,+,,28,	n->path[0] = n->path[1] = '\0';
type_conversion,notes.c,685,-,+,,31,"		write_tree_entry(&tws->buf, 040000, tws->path, 2, s.hash);"
type_conversion,notes.c,686,-,+,,33,		tws->path[0] = tws->path[1] = '\0';
type_conversion,notes.c,696,-,+,,19,	unsigned int n = 0;
type_conversion,notes.c,700,-,+,,16,	while (tws && 3 * n < path_len &&
type_conversion,notes.c,701,-,+,,46,"	       matches_tree_write_stack(tws, path + 3 * n)) {"
type_conversion,notes.c,712,-,+,,9,	while (3 * n + 2 < path_len && path[3 * n + 2] == '/') {
type_conversion,notes.c,713,-,+,,45,"		tree_write_stack_init_subtree(tws, path + 3 * n);"
type_conversion,notes.c,722,-,+,,43,"	write_tree_entry(&tws->buf, mode, path + 3 * n, path_len - (3 * n),"
type_conversion,notes.c,725,-,+,,25,"		strbuf_insert(&d.buf, 0, buf.buf, buf.len);"
type_conversion,notes.c,763,-,+,,22,	unsigned int mode = 0100644;
type_conversion,notes.c,765,-,+,,32,	if (note_path[note_path_len - 1] == '/') {
type_conversion,notes.c,768,-,+,,30,		note_path[note_path_len] = '\0';
type_conversion,notes.c,769,-,+,,10,		mode = 040000;
type_conversion,notes.c,797,-,+,,93,"	if (refs_delete_ref(get_main_ref_store(the_repository), NULL, ""NOTES_MERGE_PARTIAL"", NULL, 0))"
type_conversion,notes.c,814,-,+,,30,	if (!new_msg || !new_len || new_type != OBJ_BLOB) {
type_conversion,notes.c,821,-,+,,30,	if (!cur_msg || !cur_len || cur_type != OBJ_BLOB) {
type_conversion,notes.c,829,-,+,,24,	if (cur_msg[cur_len - 1] == '\n')
type_conversion,notes.c,833,-,+,,22,	buf_len = cur_len + 2 + new_len;
type_conversion,notes.c,836,-,+,,17,	buf[cur_len] = '\n';
type_conversion,notes.c,837,-,+,,16,	buf[cur_len + 1] = '\n';
type_conversion,notes.c,850,-,+,,25,"	strbuf_insertstr(&msg, 0, ""notes: "");"
type_conversion,notes.c,854,-,+,,4,"			0, UPDATE_REFS_DIE_ON_ERR);"
type_conversion,notes.c,877,-,+,,6,	if (t != OBJ_BLOB || !data || !len) {
type_conversion,notes.c,879,-,+,,10,		return t != OBJ_BLOB || !data;
type_conversion,notes.c,923,-,+,,28,	o.verbosity = verbosity + NOTES_MERGE_VERBOSITY_DEFAULT;
type_conversion,notes.c,960,-,+,,53,"	strbuf_add(&(o.commit_msg), msg.buf + 7, msg.len - 7); /* skip ""notes: "" */"
type_conversion,notes.c,967,-,+,,45,"				default_notes_ref(), &result_oid, NULL, 0,"
type_conversion,notes.c,969,-,+,,14,	for (i = 0; i < split.nr; i++)
type_conversion,notes.c,975,-,+,,5,"				0, UPDATE_REFS_DIE_ON_ERR);"
type_conversion,notes.c,1017,-,+,,18,	unsigned flag = 0;
type_conversion,notes.c,1021,-,+,,40,"	t->root = (struct int_node *) xcalloc(1, sizeof(struct int_node));"
type_conversion,notes.c,1041,-,+,,39,"	load_subtree(t, &root_tree, t->root, 0);"
type_conversion,notes.c,1051,-,+,,34,"		struct notes_tree *t = xcalloc(1, sizeof(struct notes_tree));"
type_conversion,notes.c,1086,-,+,,41,	opt->extra_notes_refs.strdup_strings = 1;
type_conversion,notes.c,1088,-,+,,41,	opt->extra_notes_refs.strdup_strings = 0;
type_conversion,notes.c,1096,-,+,,38,	display_notes_refs.strdup_strings = 1;
type_conversion,notes.c,1139,-,+,,38,"	return note_tree_insert(t, t->root, 0, l, PTR_TYPE_NOTE, combine_notes);"
type_conversion,notes.c,1151,-,+,,31,"	note_tree_remove(t, t->root, 0, &l);"
type_conversion,notes.c,1166,-,+,,37,"	found = note_tree_find(t, t->root, 0, oid->hash);"
type_conversion,notes.c,1176,-,+,,42,"	return for_each_note_helper(t, t->root, 0, 0, flags, fn, cb_data);"
type_conversion,notes.c,1192,-,+,,25,"	strbuf_init(&root.buf, 256 * (32 + the_hash_algo->hexsz)); /* assume 256 entries */"
type_conversion,notes.c,1193,-,+,,32,	root.path[0] = root.path[1] = '\0';
type_conversion,notes.c,1274,-,+,,77,"	if (!(msg = repo_read_object_file(the_repository, oid, &type, &msglen)) || type != OBJ_BLOB) {"
type_conversion,notes.c,1290,-,+,,29,	if (msglen && msg[msglen - 1] == '\n')
type_conversion,notes.c,1304,-,+,,61,	for (msg_p = msg; msg_p < msg + msglen; msg_p += linelen + 1) {
type_conversion,notes.c,1305,-,+,,13,"		linelen = strchrnul(msg_p, '\n') - msg_p;"
type_conversion,notes.c,1349,-,+,,24,"		strbuf_insertstr(sb, 0, ""refs/"");"
type_conversion,notes.c,1351,-,+,,24,"		strbuf_insertstr(sb, 0, ""refs/notes/"");"
type_conversion,object-file-convert.c,48,-,+,,26,	const unsigned hashsz = algo->rawsz;
type_conversion,object-file-convert.c,50,-,+,,22,	if (size < hashsz + 3 || buf[size - (hashsz + 1)]) {
type_conversion,object-file-convert.c,57,-,+,,25,	*len = strlen(*path) + 1;
type_conversion,object-file-convert.c,76,-,+,,8,					  end - p))
type_conversion,object-file-convert.c,80,-,+,,22,"		strbuf_add(out, p, path - p);"
type_conversion,object-file-convert.c,94,-,+,,38,	const int entry_len = from->hexsz + 7;
type_conversion,object-file-convert.c,100,-,+,,7,	if ((entry_len >= size) ||
type_conversion,object-file-convert.c,101,-,+,,32,"	    memcmp(buffer, ""object "", 7) || buffer[entry_len] != '\n')"
type_conversion,object-file-convert.c,108,-,+,,10,	size -= ((p + 1) - buffer);
type_conversion,object-file-convert.c,126,-,+,,20,"	strbuf_grow(out, (7 + to->hexsz + 1) + size + 7);"
type_conversion,object-file-convert.c,146,-,+,,43,	const int tree_entry_len = from->hexsz + 5;
type_conversion,object-file-convert.c,147,-,+,,45,	const int parent_entry_len = from->hexsz + 7;
type_conversion,object-file-convert.c,153,-,+,,29,	while ((bufptr < tail) && (*bufptr != '\n')) {
type_conversion,object-file-convert.c,154,-,+,,30,"		eol = memchr(bufptr, '\n', tail - bufptr);"
type_conversion,object-file-convert.c,158,-,+,,56,"		if (((bufptr + 5) < eol) && !memcmp(bufptr, ""tree "", 5))"
type_conversion,object-file-convert.c,170,-,+,,63,"		else if (((bufptr + 7) < eol) && !memcmp(bufptr, ""parent "", 7))"
type_conversion,object-file-convert.c,183,-,+,,65,"		else if (((bufptr + 9) < eol) && !memcmp(bufptr, ""mergetag "", 9))"
type_conversion,object-file-convert.c,188,-,+,,56,"			strbuf_add(&tag, bufptr + 9, (eol - (bufptr + 9)) + 1);"
type_conversion,object-file-convert.c,191,-,+,,31,			while ((bufptr < tail) && (*bufptr == ' ')) {
type_conversion,object-file-convert.c,192,-,+,,32,"				eol = memchr(bufptr, '\n', tail - bufptr);"
type_conversion,object-file-convert.c,197,-,+,,57,"				strbuf_add(&tag, bufptr + 1, (eol - (bufptr + 1)) + 1);"
type_conversion,object-file-convert.c,214,-,+,,64,"		else if (((bufptr + 7) < tail) && !memcmp(bufptr, ""author "", 7))"
type_conversion,object-file-convert.c,215,-,+,,45,"			strbuf_add(out, bufptr, (eol - bufptr) + 1);"
type_conversion,object-file-convert.c,216,-,+,,68,"		else if (((bufptr + 10) < tail) && !memcmp(bufptr, ""committer "", 10))"
type_conversion,object-file-convert.c,217,-,+,,45,"			strbuf_add(out, bufptr, (eol - bufptr) + 1);"
type_conversion,object-file-convert.c,218,-,+,,66,"		else if (((bufptr + 9) < tail) && !memcmp(bufptr, ""encoding "", 9))"
type_conversion,object-file-convert.c,219,-,+,,45,"			strbuf_add(out, bufptr, (eol - bufptr) + 1);"
type_conversion,object-file-convert.c,220,-,+,,63,"		else if (((bufptr + 6) < tail) && !memcmp(bufptr, ""gpgsig"", 6))"
type_conversion,object-file-convert.c,221,-,+,,45,"			strbuf_add(out, bufptr, (eol - bufptr) + 1);"
type_conversion,object-file-convert.c,228,-,+,,30,		while ((bufptr < tail) && (*bufptr == ' ')) {
type_conversion,object-file-convert.c,229,-,+,,31,"			eol = memchr(bufptr, '\n', tail - bufptr);"
type_conversion,object-file-convert.c,232,-,+,,45,"			strbuf_add(out, bufptr, (eol - bufptr) + 1);"
type_conversion,object-file-convert.c,237,-,+,,27,"		strbuf_add(out, bufptr, tail - bufptr);"
type_conversion,object-file-convert.c,251,-,+,,23,	if ((from == to) || (type == OBJ_BLOB))
type_conversion,object-file.c,72,-,+,,11,"	.hash = {0},"
type_conversion,object-file.c,84,-,+,,11,"	.hash = {0},"
type_conversion,object-file.c,180,-,+,,16,"		.format_id = 0x00000000,"
type_conversion,object-file.c,181,-,+,,12,"		.rawsz = 0,"
type_conversion,object-file.c,182,-,+,,12,"		.hexsz = 0,"
type_conversion,object-file.c,183,-,+,,12,"		.blksz = 0,"
type_conversion,object-file.c,266,-,+,,7,		if (len == hash_algos[i].rawsz)
type_conversion,object-file.c,321,-,+,,18,"	if (mkdir(path, 0777)) {"
type_conversion,object-file.c,336,-,+,,34,"		    strbuf_readlink(&sb, path, st.st_size) ||"
type_conversion,object-file.c,338,-,+,,21,"		    mkdir(sb.buf, 0777)) {"
type_conversion,object-file.c,353,-,+,,9,	while (ret == SCLD_OK && next_component) {
type_conversion,object-file.c,357,-,+,,32,		while (*slash && !is_dir_sep(*slash))
type_conversion,object-file.c,364,-,+,,21,		while (is_dir_sep(*next_component))
type_conversion,object-file.c,370,-,+,,12,		*slash = '\0';
type_conversion,object-file.c,377,-,+,,26,"		} else if (mkdir(path, 0777)) {"
type_conversion,object-file.c,428,-,+,,14,	for (i = 0; i < the_hash_algo->rawsz; i++) {
type_conversion,object-file.c,430,-,+,,22,		unsigned int val = oid->hash[i];
type_conversion,object-file.c,431,-,+,,21,"		strbuf_addch(buf, hex[val >> 4]);"
type_conversion,object-file.c,432,-,+,,31,"		strbuf_addch(buf, hex[val & 0xf]);"
type_conversion,object-file.c,536,-,+,,50,	while (pathbuf.len && pathbuf.buf[pathbuf.len - 1] == '/')
type_conversion,object-file.c,537,-,+,,41,"		strbuf_setlen(&pathbuf, pathbuf.len - 1);"
type_conversion,object-file.c,570,-,+,,6,	if (*string == '#') {
type_conversion,object-file.c,573,-,+,,13,"	} else if (*string == '""' && !unquote_c_style(out, string, &end)) {"
type_conversion,object-file.c,583,-,+,,27,"		strbuf_add(out, string, end - string);"
type_conversion,object-file.c,627,-,+,,35,"	if (strbuf_read_file(&buf, path, 1024) < 0) {"
type_conversion,object-file.c,707,-,+,,20,"	new_odb = xcalloc(1, sizeof(*new_odb));"
type_conversion,object-file.c,833,-,+,,20,		cmd->use_shell = 1;
type_conversion,object-file.c,838,-,+,,18,		cmd->git_cmd = 1;
type_conversion,object-file.c,1022,-,+,,24,	static size_t limit = 0;
type_conversion,object-file.c,1024,-,+,,43,"		limit = git_env_ulong(""GIT_MMAP_LIMIT"", 0);"
type_conversion,object-file.c,1077,-,+,,31,	const char *name = type_name(type);
type_conversion,object-file.c,1117,-,+,,35,"	r->hash_algo->update_fn(&c, hdr, hdrlen);"
type_conversion,object-file.c,1122,-,+,,17,		if (readlen < 0) {
type_conversion,object-file.c,1128,-,+,,36,"		r->hash_algo->update_fn(&c, buf, readlen);"
type_conversion,object-file.c,1242,-,+,,56,"		map = xmmap(NULL, *size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,object-file.c,1286,-,+,,27,"	if (memchr(buffer, '\0', stream->next_out - (unsigned char *)buffer))"
type_conversion,object-file.c,1302,-,+,,29,"	strbuf_add(header, buffer, stream->next_out - (unsigned char *)buffer);"
type_conversion,object-file.c,1310,-,+,,30,"		strbuf_add(header, buffer, stream->next_out - (unsigned char *)buffer);"
type_conversion,object-file.c,1311,-,+,,28,"		if (memchr(buffer, '\0', stream->next_out - (unsigned char *)buffer))"
type_conversion,object-file.c,1323,-,+,,31,	int bytes = strlen(buffer) + 1;
type_conversion,object-file.c,1328,-,+,,26,	n = stream->total_out - bytes;
type_conversion,object-file.c,1332,-,+,,10,	bytes = n;
type_conversion,object-file.c,1333,-,+,,6,	if (bytes <= size) {
type_conversion,object-file.c,1348,-,+,,30,		stream->avail_out = size - bytes;
type_conversion,object-file.c,1388,-,+,,7,		if (c == ' ')
type_conversion,object-file.c,1393,-,+,,43,"	type = type_from_string_gently(type_buf, type_len, 1);"
type_conversion,object-file.c,1395,-,+,,39,"		strbuf_add(oi->type_name, type_buf, type_len);"
type_conversion,object-file.c,1403,-,+,,9,	size = *hdr++ - '0';
type_conversion,object-file.c,1404,-,+,,13,	if (size > 9)
type_conversion,object-file.c,1408,-,+,,22,			unsigned long c = *hdr - '0';
type_conversion,object-file.c,1409,-,+,,12,			if (c > 9)
type_conversion,object-file.c,1412,-,+,,32,"			size = st_add(st_mult(size, 10), c);"
type_conversion,object-file.c,1486,-,+,,21,		*oi->disk_sizep = mapsize;
type_conversion,object-file.c,1493,-,+,,30,		else if (!allow_unknown && *oi->typep < 0)
type_conversion,object-file.c,1581,-,+,,24,			*(oi->disk_sizep) = 0;
type_conversion,object-file.c,1585,-,+,,43,"			strbuf_addstr(oi->type_name, type_name(co->type));"
type_conversion,object-file.c,1597,-,+,,39,"		if (!loose_object_info(r, real, oi, flags))"
type_conversion,object-file.c,1648,-,+,,51,"		return do_oid_object_info_extended(r, real, oi, 0);"
type_conversion,object-file.c,1649,-,+,,13,	} else if (oi->whence == OI_PACKED) {
type_conversion,object-file.c,1652,-,+,,37,		oi->u.packed.is_delta = (rtype == OBJ_REF_DELTA ||
type_conversion,object-file.c,1653,-,+,,16,					 rtype == OBJ_OFS_DELTA);
type_conversion,object-file.c,1706,-,+,,49,"		type = type_from_string_gently(type_name.buf, type_name.len,"
type_conversion,object-file.c,1708,-,+,,7,		if (type == -1)
type_conversion,object-file.c,1710,-,+,,7,		if (type != OBJ_BLOB) {
type_conversion,object-file.c,1774,-,+,,9,	return type;
type_conversion,object-file.c,1838,-,+,,7,		if (type == required_type) {
type_conversion,object-file.c,1845,-,+,,12,		else if (type == OBJ_COMMIT)
type_conversion,object-file.c,1847,-,+,,12,		else if (type == OBJ_TAG)
type_conversion,object-file.c,1853,-,+,,16,		ref_length = strlen(ref_type);
type_conversion,object-file.c,1855,-,+,,7,		if (ref_length + the_hash_algo->hexsz > isize ||
type_conversion,object-file.c,1856,-,+,,32,"		    memcmp(buffer, ref_type, ref_length) ||"
type_conversion,object-file.c,1873,-,+,,26,"	algo->update_fn(c, hdr, *hdrlen);"
type_conversion,object-file.c,1886,-,+,,38,"	*hdrlen = format_object_header(hdr, *hdrlen, type, len);"
type_conversion,object-file.c,1899,-,+,,48,"	*hdrlen = format_object_header_literally(hdr, *hdrlen, type, len);"
type_conversion,object-file.c,1910,-,+,,6,	if (object_creation_mode == OBJECT_CREATION_USES_RENAMES)
type_conversion,object-file.c,1951,-,+,,15,	int hdrlen = sizeof(hdr);
type_conversion,object-file.c,1960,-,+,,55,"	hash_object_file_literally(algo, buf, len, type_name(type), oid);"
type_conversion,object-file.c,1988,-,+,,24,	return s - filename + 1;
type_conversion,object-file.c,2003,-,+,,28,"	strbuf_add(tmp, filename, dirlen);"
type_conversion,object-file.c,2014,-,+,,29,"		strbuf_add(tmp, filename, dirlen - 1);"
type_conversion,object-file.c,2015,-,+,,23,"		if (mkdir(tmp->buf, 0777) && errno != EEXIST)"
type_conversion,object-file.c,2073,-,+,,21,	stream->avail_in = hdrlen;
type_conversion,object-file.c,2076,-,+,,26,"	algo->update_fn(c, hdr, hdrlen);"
type_conversion,object-file.c,2078,-,+,,36,"		compat->update_fn(compat_c, hdr, hdrlen);"
type_conversion,object-file.c,2099,-,+,,26,"	algo->update_fn(c, in0, stream->next_in - in0);"
type_conversion,object-file.c,2101,-,+,,36,"		compat->update_fn(compat_c, in0, stream->next_in - in0);"
type_conversion,object-file.c,2102,-,+,,36,"	if (write_in_full(fd, compressed, stream->next_out - compressed) < 0)"
type_conversion,object-file.c,2209,-,+,,19,	e.p->freshened = 1;
type_conversion,object-file.c,2243,-,+,,58,"	fd = start_loose_object_common(&tmp_file, filename.buf, 0,"
type_conversion,object-file.c,2273,-,+,,31,	if (stream.total_in != len + hdrlen)
type_conversion,object-file.c,2275,-,+,,24,		    (uintmax_t)len + hdrlen);
type_conversion,object-file.c,2302,-,+,,34,"		strbuf_add(&dir, filename.buf, dirlen);"
type_conversion,object-file.c,2330,-,+,,15,	int hdrlen = sizeof(hdr);
type_conversion,object-file.c,2336,-,+,,12,		else if (type == OBJ_BLOB)
type_conversion,object-file.c,2354,-,+,,53,"	if (write_loose_object(oid, hdr, hdrlen, buf, len, 0, flags))"
type_conversion,object-file.c,2374,-,+,,47,"		compat_type = type_from_string_gently(type, -1, 1);"
type_conversion,object-file.c,2375,-,+,,22,		if (compat_type == OBJ_BLOB)
type_conversion,object-file.c,2390,-,+,,19,	header = xmalloc(hdrlen);
type_conversion,object-file.c,2398,-,+,,61,"	status = write_loose_object(oid, header, hdrlen, buf, len, 0, 0);"
type_conversion,object-file.c,2425,-,+,,57,"	if (oid_object_info_extended(the_repository, oid, &oi, 0))"
type_conversion,object-file.c,2433,-,+,,62,"	ret = write_loose_object(oid, hdr, hdrlen, buf, len, mtime, 0);"
type_conversion,object-file.c,2458,-,+,,48,"	return oid_object_info_extended(r, oid, NULL, flags) >= 0;"
type_conversion,object-file.c,2499,-,+,,7,	if ((type == OBJ_BLOB) && path) {
type_conversion,object-file.c,2510,-,+,,17,		opts.strict = 1;
type_conversion,object-file.c,2559,-,+,,29,"	if (strbuf_read(&sbuf, fd, 4096) >= 0)"
type_conversion,object-file.c,2581,-,+,,21,		if (read_result < 0)
type_conversion,object-file.c,2584,-,+,,12,		else if (read_result != size)
type_conversion,object-file.c,2591,-,+,,61,"		void *buf = xmmap(NULL, size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,object-file.c,2630,-,+,,6,"	if (type == OBJ_BLOB && path && would_convert_to_git_filter_fd(istate, path))"
type_conversion,object-file.c,2634,-,+,,11,	else if (st->st_size <= big_file_threshold || type != OBJ_BLOB ||
type_conversion,object-file.c,2662,-,+,,34,"		if (strbuf_readlink(&sb, path, st->st_size))"
type_conversion,object-file.c,2681,-,+,,6,"	if (read_in_full(fd, header, sizeof(*header)) != sizeof(*header))"
type_conversion,object-file.c,2697,-,+,,6,	if (type < 0)
type_conversion,object-file.c,2699,-,+,,6,	if (type != expect)
type_conversion,object-file.c,2701,-,+,,17,		    type_name(expect));
type_conversion,object-file.c,2717,-,+,,18,	if (subdir_nr > 0xff)
type_conversion,object-file.c,2721,-,+,,24,"	strbuf_complete(path, '/');"
type_conversion,object-file.c,2732,-,+,,16,	oid.hash[0] = subdir_nr;
type_conversion,object-file.c,2742,-,+,,41,		if (namelen == the_hash_algo->hexsz - 2 &&
type_conversion,object-file.c,2744,-,+,,30,				  the_hash_algo->rawsz - 1)) {
type_conversion,object-file.c,2762,-,+,,32,"	strbuf_setlen(path, baselen - 1);"
type_conversion,object-file.c,2781,-,+,,35,"		r = for_each_file_in_obj_subdir(i, path, obj_cb, cruft_cb,"
type_conversion,object-file.c,2819,-,+,,7,		if (flags & FOR_EACH_OBJECT_LOCAL_ONLY)
type_conversion,object-file.c,2837,-,+,,18,	int subdir_nr = oid->hash[0];
type_conversion,object-file.c,2840,-,+,,22,	size_t word_index = subdir_nr / word_bits;
type_conversion,object-file.c,2841,-,+,,31,	size_t mask = (size_t)1u << (subdir_nr % word_bits);
type_conversion,object-file.c,2845,-,+,,6,	    subdir_nr >= bitsizeof(odb->loose_objects_subdir_seen))
type_conversion,object-file.c,2849,-,+,,6,	if (*bitmap & mask)
type_conversion,object-file.c,2856,-,+,,30,"	for_each_file_in_obj_subdir(subdir_nr, &buf,"
type_conversion,object-file.c,2892,-,+,,49,	total_read = stream->total_out - strlen(hdr) - 1;
type_conversion,object-file.c,2906,-,+,,37,"		the_hash_algo->update_fn(&c, buf, stream->next_out - buf);"
type_conversion,object-file.c,2907,-,+,,17,		total_read += stream->next_out - buf;
type_conversion,object-file.c,2954,-,+,,14,				NULL) != ULHR_OK) {
type_conversion,object-file.c,2965,-,+,,6,	if (*oi->typep == OBJ_BLOB && *size > big_file_threshold) {
type_conversion,object-name.c,53,-,+,,19,"		ds->ambiguous = ds->fn(ds->repo, current, ds->cb_data) ? 1 : 0;"
type_conversion,object-name.c,59,-,+,,26,		ds->candidate_exists = 1;
type_conversion,object-name.c,68,-,+,,19,		ds->ambiguous = 1;
type_conversion,object-name.c,73,-,+,,22,"		ds->candidate_ok = ds->fn(ds->repo, &ds->candidate, ds->cb_data);"
type_conversion,object-name.c,74,-,+,,30,		ds->disambiguate_fn_used = 1;
type_conversion,object-name.c,75,-,+,,27,		ds->candidate_checked = 1;
type_conversion,object-name.c,81,-,+,,27,		ds->candidate_checked = 0;
type_conversion,object-name.c,91,-,+,,22,		ds->candidate_ok = 0;
type_conversion,object-name.c,92,-,+,,19,		ds->ambiguous = 1;
type_conversion,object-name.c,114,-,+,,19,"				&ds->bin_pfx, ds->len, match_prefix, ds);"
type_conversion,object-name.c,120,-,+,,7,		if (*a != *b)
type_conversion,object-name.c,124,-,+,,10,		len -= 2;
type_conversion,object-name.c,125,-,+,,17,	} while (len > 1);
type_conversion,object-name.c,127,-,+,,8,		if ((*a ^ *b) & 0xf0)
type_conversion,object-name.c,135,-,+,,27,"	uint32_t num, i, first = 0;"
type_conversion,object-name.c,137,-,+,,12,	int len = ds->len > ds->repo->hash_algo->hexsz ?
type_conversion,object-name.c,138,-,+,,32,		ds->repo->hash_algo->hexsz : ds->len;
type_conversion,object-name.c,154,-,+,,19,"		if (!match_hash(len, ds->bin_pfx.hash, current->hash))"
type_conversion,object-name.c,163,-,+,,27,"	uint32_t num, i, first = 0;"
type_conversion,object-name.c,164,-,+,,12,	int len = ds->len > ds->repo->hash_algo->hexsz ?
type_conversion,object-name.c,165,-,+,,32,		ds->repo->hash_algo->hexsz : ds->len;
type_conversion,object-name.c,184,-,+,,19,"		if (!match_hash(len, ds->bin_pfx.hash, oid.hash))"
type_conversion,object-name.c,211,-,+,,10,		return SHORT_NAME_AMBIGUOUS;
type_conversion,object-name.c,214,-,+,,10,		return MISSING_OBJECT;
type_conversion,object-name.c,231,-,+,,22,"		ds->candidate_ok = (!ds->disambiguate_fn_used ||
				    ds->fn(ds->repo, &ds->candidate, ds->cb_data));"
type_conversion,object-name.c,235,-,+,,10,		return SHORT_NAME_AMBIGUOUS;
type_conversion,object-name.c,246,-,+,,17,	return kind == OBJ_COMMIT;
type_conversion,object-name.c,257,-,+,,14,	if (kind == OBJ_COMMIT)
type_conversion,object-name.c,259,-,+,,14,	if (kind != OBJ_TAG)
type_conversion,object-name.c,264,-,+,,13,	if (obj && obj->type == OBJ_COMMIT)
type_conversion,object-name.c,274,-,+,,17,	return kind == OBJ_TREE;
type_conversion,object-name.c,285,-,+,,14,	if (kind == OBJ_TREE || kind == OBJ_COMMIT)
type_conversion,object-name.c,287,-,+,,14,	if (kind != OBJ_TAG)
type_conversion,object-name.c,292,-,+,,14,	if (obj && (obj->type == OBJ_TREE || obj->type == OBJ_COMMIT))
type_conversion,object-name.c,302,-,+,,17,	return kind == OBJ_BLOB;
type_conversion,object-name.c,325,-,+,,14,	for (i = 0; i < ARRAY_SIZE(hints); i++) {
type_conversion,object-name.c,348,-,+,,21,		unsigned char c = name[i];
type_conversion,object-name.c,350,-,+,,7,		if (c >= '0' && c <= '9')
type_conversion,object-name.c,351,-,+,,10,			val = c - '0';
type_conversion,object-name.c,352,-,+,,12,		else if (c >= 'a' && c <= 'f')
type_conversion,object-name.c,353,-,+,,10,			val = c - 'a' + 10;
type_conversion,object-name.c,354,-,+,,12,		else if (c >= 'A' && c <='F') {
type_conversion,object-name.c,355,-,+,,10,			val = c - 'A' + 10;
type_conversion,object-name.c,360,-,+,,20,		ds->hex_pfx[i] = c;
type_conversion,object-name.c,363,-,+,,31,		ds->bin_pfx.hash[i >> 1] |= val;
type_conversion,object-name.c,367,-,+,,21,	ds->hex_pfx[len] = '\0';
type_conversion,object-name.c,408,-,+,,14,	if (type == OBJ_COMMIT) {
type_conversion,object-name.c,433,-,+,,21,	} else if (type == OBJ_TAG) {
type_conversion,object-name.c,463,-,+,,21,	} else if (type == OBJ_TREE) {
type_conversion,object-name.c,469,-,+,,21,	} else if (type == OBJ_BLOB) {
type_conversion,object-name.c,584,-,+,,16,	if (status == MISSING_OBJECT) {
type_conversion,object-name.c,591,-,+,,29,	if (!quietly && (status == SHORT_NAME_AMBIGUOUS)) {
type_conversion,object-name.c,639,-,+,,44,"	if (init_object_disambiguation(r, prefix, strlen(prefix), algo, &ds) < 0)"
type_conversion,object-name.c,642,-,+,,22,	ds.always_call_fn = 1;
type_conversion,object-name.c,660,-,+,,15,	unsigned r = 0;
type_conversion,object-name.c,679,-,+,,13,	if ((pos & 1) == 0)
type_conversion,object-name.c,680,-,+,,14,		return hex[oid->hash[pos >> 1] >> 4];
type_conversion,object-name.c,682,-,+,,14,		return hex[oid->hash[pos >> 1] & 0xf];
type_conversion,object-name.c,690,-,+,,24,"	while (mad->hex[i] && mad->hex[i] == get_hex_char_from_oid(oid, i))"
type_conversion,object-name.c,694,-,+,,22,		mad->cur_len = i + 1;
type_conversion,object-name.c,710,-,+,,24,"	uint32_t num, first = 0;"
type_conversion,object-name.c,727,-,+,,18,	mad->init_len = 0;
type_conversion,object-name.c,731,-,+,,27,	} else if (first < num - 1) {
type_conversion,object-name.c,732,-,+,,46,"		if (nth_midxed_object_oid(&oid, m, first + 1))"
type_conversion,object-name.c,735,-,+,,14,	if (first > 0) {
type_conversion,object-name.c,736,-,+,,46,"		if (nth_midxed_object_oid(&oid, m, first - 1))"
type_conversion,object-name.c,746,-,+,,24,"	uint32_t num, first = 0;"
type_conversion,object-name.c,766,-,+,,18,	mad->init_len = 0;
type_conversion,object-name.c,770,-,+,,27,	} else if (first < num - 1) {
type_conversion,object-name.c,771,-,+,,46,"		if (!nth_packed_object_id(&oid, p, first + 1))"
type_conversion,object-name.c,774,-,+,,14,	if (first > 0) {
type_conversion,object-name.c,775,-,+,,46,"		if (!nth_packed_object_id(&oid, p, first - 1))"
type_conversion,object-name.c,798,-,+,,30,"	strbuf_setlen(sb, sb->len + r);"
type_conversion,object-name.c,815,-,+,,25,	const unsigned hexsz = algo->hexsz;
type_conversion,object-name.c,824,-,+,,22,		len = msb(count) + 1;
type_conversion,object-name.c,840,-,+,,6,	if (len == hexsz || !len)
type_conversion,object-name.c,841,-,+,,10,		return hexsz;
type_conversion,object-name.c,844,-,+,,17,	mad.init_len = len;
type_conversion,object-name.c,845,-,+,,16,	mad.cur_len = len;
type_conversion,object-name.c,851,-,+,,41,"	if (init_object_disambiguation(r, hex, mad.cur_len, algo, &ds) < 0)"
type_conversion,object-name.c,855,-,+,,22,	ds.always_call_fn = 1;
type_conversion,object-name.c,861,-,+,,21,	hex[mad.cur_len] = 0;
type_conversion,object-name.c,862,-,+,,9,	return mad.cur_len;
type_conversion,object-name.c,872,-,+,,10,	bufno = (bufno + 1) % ARRAY_SIZE(hexbuffer);
type_conversion,object-name.c,883,-,+,,11,		switch (*path++) {
type_conversion,object-name.c,908,-,+,,20,		int suffix_len = strlen(suffix[i]);
type_conversion,object-name.c,910,-,+,,42,"		    && !strncasecmp(string, suffix[i], suffix_len))"
type_conversion,object-name.c,951,-,+,,6,"	if (len == r->hash_algo->hexsz && !get_oid_hex(str, oid)) {"
type_conversion,object-name.c,966,-,+,,13,	if (len && str[len-1] == '}') {
type_conversion,object-name.c,968,-,+,,8,			if (str[at] == '@' && str[at+1] == '{') {
type_conversion,object-name.c,969,-,+,,9,				if (str[at+2] == '-') {
type_conversion,object-name.c,1027,-,+,,15,			if ('0' <= ch && ch <= '9')
type_conversion,object-name.c,1028,-,+,,22,				nth = nth * 10 + ch - '0';
type_conversion,object-name.c,1033,-,+,,14,			at_time = nth;
type_conversion,object-name.c,1036,-,+,,14,			at_time = 0;
type_conversion,object-name.c,1039,-,+,,39,"			char *tmp = xstrndup(str + at + 2, reflog_len);"
type_conversion,object-name.c,1053,-,+,,11,				len = strlen(str);
type_conversion,object-name.c,1143,-,+,,13,		namelen = strlen(name);
type_conversion,object-name.c,1147,-,+,,7,		if (expected_type == OBJ_ANY || o->type == expected_type)
type_conversion,object-name.c,1149,-,+,,7,		if (o->type == OBJ_TAG)
type_conversion,object-name.c,1151,-,+,,12,		else if (o->type == OBJ_COMMIT)
type_conversion,object-name.c,1169,-,+,,31,	unsigned int expected_type = 0;
type_conversion,object-name.c,1180,-,+,,17,	if (len < 4 || name[len-1] != '}')
type_conversion,object-name.c,1184,-,+,,12,		int ch = *sp;
type_conversion,object-name.c,1185,-,+,,33,		if (ch == '{' && name < sp && sp[-1] == '^')
type_conversion,object-name.c,1193,-,+,,19,		expected_type = OBJ_COMMIT;
type_conversion,object-name.c,1195,-,+,,19,		expected_type = OBJ_TAG;
type_conversion,object-name.c,1197,-,+,,19,		expected_type = OBJ_TREE;
type_conversion,object-name.c,1199,-,+,,19,		expected_type = OBJ_BLOB;
type_conversion,object-name.c,1201,-,+,,19,		expected_type = OBJ_ANY;
type_conversion,object-name.c,1202,-,+,,11,	else if (sp[0] == '}')
type_conversion,object-name.c,1203,-,+,,19,		expected_type = OBJ_NONE;
type_conversion,object-name.c,1204,-,+,,11,	else if (sp[0] == '/')
type_conversion,object-name.c,1205,-,+,,19,		expected_type = OBJ_COMMIT;
type_conversion,object-name.c,1210,-,+,,23,	if (expected_type == OBJ_COMMIT)
type_conversion,object-name.c,1212,-,+,,28,	else if (expected_type == OBJ_TREE)
type_conversion,object-name.c,1215,-,+,,37,"	if (get_oid_1(r, name, sp - name - 2, &outer, lookup_flags))"
type_conversion,object-name.c,1222,-,+,,41,"		o = deref_tag(r, o, name, sp - name - 2);"
type_conversion,object-name.c,1239,-,+,,6,	if (sp[0] == '/') {
type_conversion,object-name.c,1249,-,+,,7,		if (sp[1] == '}')
type_conversion,object-name.c,1252,-,+,,29,"		prefix = xstrndup(sp + 1, name + len - 1 - (sp + 1));"
type_conversion,object-name.c,1274,-,+,,8,			if (ch == 'g' && cp[-1] == '-') {
type_conversion,object-name.c,1277,-,+,,12,"				return get_short_oid(r,
						     cp, len, oid, flags);"
type_conversion,object-name.c,1298,-,+,,12,		int ch = *cp;
type_conversion,object-name.c,1307,-,+,,22,		unsigned int num = 0;
type_conversion,object-name.c,1308,-,+,,14,		int len1 = cp - name;
type_conversion,object-name.c,1311,-,+,,25,			unsigned int digit = *cp++ - '0';
type_conversion,object-name.c,1314,-,+,,11,			num *= 10;
type_conversion,object-name.c,1320,-,+,,10,			num = 1;
type_conversion,object-name.c,1324,-,+,,42,"			return get_parent(r, name, len1, oid, num);"
type_conversion,object-name.c,1326,-,+,,47,"		return get_nth_ancestor(r, name, len1, oid, num);"
type_conversion,object-name.c,1375,-,+,,6,	if (object->type == OBJ_TAG) {
type_conversion,object-name.c,1377,-,+,,8,				   strlen(path));
type_conversion,object-name.c,1381,-,+,,6,	if (object->type != OBJ_COMMIT)
type_conversion,object-name.c,1396,-,+,,6,	if (prefix[0] == '!') {
type_conversion,object-name.c,1399,-,+,,7,		if (prefix[0] == '-') {
type_conversion,object-name.c,1402,-,+,,14,		} else if (prefix[0] != '!') {
type_conversion,object-name.c,1424,-,+,,54,"		matches = negative ^ (p && !regexec(&regex, p + 2, 0, NULL, 0));"
type_conversion,object-name.c,1463,-,+,,9,		len = target - match;
type_conversion,object-name.c,1487,-,+,,6,	if (name[0] != '@' || name[1] != '{' || name[2] != '-')
type_conversion,object-name.c,1489,-,+,,28,"	brace = memchr(name, '}', namelen);"
type_conversion,object-name.c,1495,-,+,,13,	if (nth <= 0)
type_conversion,object-name.c,1497,-,+,,17,	cb.remaining = nth;
type_conversion,object-name.c,1503,-,+,,27,		retval = brace - name + 1;
type_conversion,object-name.c,1527,-,+,,20,"		strbuf_init(&sb, dots - name);"
type_conversion,object-name.c,1528,-,+,,25,"		strbuf_add(&sb, name, dots - name);"
type_conversion,object-name.c,1562,-,+,,13,	if (len || name[1] == '{')
type_conversion,object-name.c,1566,-,+,,37,"	next = memchr(name + len + 1, '@', namelen - len - 1);"
type_conversion,object-name.c,1567,-,+,,14,	if (next && next[1] != '{')
type_conversion,object-name.c,1575,-,+,,26,"	strbuf_add(buf, ""HEAD"", 4);"
type_conversion,object-name.c,1585,-,+,,13,	int used = buf->len;
type_conversion,object-name.c,1591,-,+,,30,"	strbuf_add(buf, name + len, namelen - len);"
type_conversion,object-name.c,1592,-,+,,48,"	ret = repo_interpret_branch_name(r, buf->buf, buf->len, &tmp, &options);"
type_conversion,object-name.c,1595,-,+,,22,"		strbuf_setlen(buf, used);"
type_conversion,object-name.c,1645,-,+,,24,"	if (memchr(name, ':', at))"
type_conversion,object-name.c,1649,-,+,,35,"		char *name_str = xmemdupz(name, at);"
type_conversion,object-name.c,1682,-,+,,13,		namelen = strlen(name);
type_conversion,object-name.c,1698,-,+,,32,"	     (at = memchr(start, '@', namelen - (start - name)));"
type_conversion,object-name.c,1702,-,+,,44,"			len = interpret_empty_at(name, namelen, at - name, buf);"
type_conversion,object-name.c,1708,-,+,,49,"		len = interpret_branch_mark(r, name, namelen, at - name, buf,"
type_conversion,object-name.c,1714,-,+,,49,"		len = interpret_branch_mark(r, name, namelen, at - name, buf,"
type_conversion,object-name.c,1726,-,+,,12,	int len = strlen(name);
type_conversion,object-name.c,1735,-,+,,30,"	strbuf_add(sb, name + used, len - used);"
type_conversion,object-name.c,1751,-,+,,20,"	strbuf_splice(sb, 0, 0, ""refs/heads/"", 11);"
type_conversion,object-name.c,1753,-,+,,6,	if (*name == '-' ||
type_conversion,object-name.c,1767,-,+,,39,"	return get_oid_with_context(r, name, 0, oid, &unused);"
type_conversion,object-name.c,1889,-,+,,21,	unsigned namelen = strlen(filename);
type_conversion,object-name.c,1896,-,+,,41,"	pos = index_name_pos(istate, filename, namelen);"
type_conversion,object-name.c,1899,-,+,,6,	if (pos < istate->cache_nr) {
type_conversion,object-name.c,1903,-,+,,35,"		    !memcmp(ce->name, filename, namelen))"
type_conversion,object-name.c,1913,-,+,,45,"	pos = index_name_pos(istate, fullname.buf, fullname.len);"
type_conversion,object-name.c,1916,-,+,,6,	if (pos < istate->cache_nr) {
type_conversion,object-name.c,1948,-,+,,61,"			   startup_info->prefix ? strlen(startup_info->prefix) : 0,"
type_conversion,object-name.c,1974,-,+,,16,	int namelen = strlen(name);
type_conversion,object-name.c,1980,-,+,,33,"	strbuf_init(&oc->symlink_path, 0);"
type_conversion,object-name.c,1981,-,+,,8,"	ret = get_oid_1(repo, name, namelen, oid, flags);"
type_conversion,object-name.c,1994,-,+,,6,	if (name[0] == ':') {
type_conversion,object-name.c,1999,-,+,,38,		if (!only_to_die && namelen > 2 && name[1] == '/') {
type_conversion,object-name.c,2011,-,+,,7,		    name[2] != ':' ||
type_conversion,object-name.c,2012,-,+,,7,		    name[1] < '0' || '3' < name[1])
type_conversion,object-name.c,2015,-,+,,12,			stage = name[1] - '0';
type_conversion,object-name.c,2020,-,+,,14,			namelen = namelen - (cp - name);
type_conversion,object-name.c,2023,-,+,,14,			namelen = strlen(cp);
type_conversion,object-name.c,2034,-,+,,10,		while (pos < repo->index->cache_nr) {
type_conversion,object-name.c,2036,-,+,,26,			if (ce_namelen(ce) != namelen ||
type_conversion,object-name.c,2037,-,+,,29,"			    memcmp(ce->name, cp, namelen))"
type_conversion,object-name.c,2039,-,+,,24,			if (ce_stage(ce) == stage) {
type_conversion,object-name.c,2045,-,+,,16,				oc->mode = ce->ce_mode;
type_conversion,object-name.c,2050,-,+,,33,		if (only_to_die && name[1] && name[1] != '/')
type_conversion,object-name.c,2056,-,+,,7,		if (*cp == '{')
type_conversion,object-name.c,2058,-,+,,29,		else if (bracket_depth && *cp == '}')
type_conversion,object-name.c,2060,-,+,,30,		else if (!bracket_depth && *cp == ':')
type_conversion,object-name.c,2063,-,+,,6,	if (*cp == ':') {
type_conversion,object-name.c,2065,-,+,,13,		int len = cp - name;
type_conversion,object-name.c,2079,-,+,,11,"				ret = get_tree_entry_follow_symlinks(repo, &tree_oid,
					filename, oid, &oc->symlink_path,
					&oc->mode);"
type_conversion,object-store-ll.h,262,-,+,,60,"	return write_object_file_flags(buf, len, type, oid, NULL, 0);"
type_conversion,object.c,20,-,+,,9,	return the_repository->parsed_objects->obj_hash_size;
type_conversion,object.c,38,-,+,,6,	if (type >= ARRAY_SIZE(object_type_strings))
type_conversion,object.c,47,-,+,,12,	if (len < 0)
type_conversion,object.c,48,-,+,,9,		len = strlen(str);
type_conversion,object.c,50,-,+,,14,	for (i = 1; i < ARRAY_SIZE(object_type_strings); i++)
type_conversion,object.c,51,-,+,,47,"		if (!xstrncmpz(object_type_strings[i], str, len))"
type_conversion,object.c,67,-,+,,29,	return oidhash(oid) & (n - 1);
type_conversion,object.c,82,-,+,,8,			j = 0;
type_conversion,object.c,99,-,+,,28,"	first = i = hash_obj(oid, r->parsed_objects->obj_hash_size);"
type_conversion,object.c,104,-,+,,12,		if (i == r->parsed_objects->obj_hash_size)
type_conversion,object.c,105,-,+,,8,			i = 0;
type_conversion,object.c,140,-,+,,34,"		insert_obj_hash(obj, new_hash, new_hash_size);"
type_conversion,object.c,151,-,+,,16,	obj->parsed = 0;
type_conversion,object.c,152,-,+,,15,	obj->flags = 0;
type_conversion,object.c,159,-,+,,4,			r->parsed_objects->obj_hash_size);
type_conversion,object.c,166,-,+,,6,	if (obj->type == type)
type_conversion,object.c,168,-,+,,11,	else if (obj->type == OBJ_NONE) {
type_conversion,object.c,169,-,+,,7,		if (type == OBJ_COMMIT)
type_conversion,object.c,172,-,+,,16,			obj->type = type;
type_conversion,object.c,216,-,+,,6,	if (type == OBJ_BLOB) {
type_conversion,object.c,222,-,+,,13,	} else if (type == OBJ_TREE) {
type_conversion,object.c,227,-,+,,27,				tree->object.parsed = 0;
type_conversion,object.c,234,-,+,,13,	} else if (type == OBJ_COMMIT) {
type_conversion,object.c,246,-,+,,13,	} else if (type == OBJ_TAG) {
type_conversion,object.c,274,-,+,,21,	int skip_hash = !!(flags & PARSE_OBJECT_SKIP_HASH_CHECK);
type_conversion,object.c,275,-,+,,24,	int discard_tree = !!(flags & PARSE_OBJECT_DISCARD_TREE);
type_conversion,object.c,293,-,+,,15,	if ((!obj || obj->type == OBJ_BLOB) &&
type_conversion,object.c,294,-,+,,39,"	    oid_object_info(r, oid, NULL) == OBJ_BLOB) {"
type_conversion,object.c,309,-,+,,15,	    (!obj || obj->type == OBJ_TREE) &&
type_conversion,object.c,310,-,+,,39,"	    oid_object_info(r, oid, NULL) == OBJ_TREE) {"
type_conversion,object.c,327,-,+,,23,		if (discard_tree && type == OBJ_TREE)
type_conversion,object.c,390,-,+,,20,		alloc = (alloc + 32) * 2;
type_conversion,object.c,435,-,+,,35,	ret = array->objects[array->nr - 1].item;
type_conversion,object.c,436,-,+,,57,	object_array_release_entry(&array->objects[array->nr - 1]);
type_conversion,object.c,447,-,+,,19,	for (src = dst = 0; src < nr; src++) {
type_conversion,object.c,462,-,+,,14,	for (i = 0; i < array->nr; i++)
type_conversion,object.c,465,-,+,,29,	array->nr = array->alloc = 0;
type_conversion,object.c,477,-,+,,11,"	for (i = 0; i < nr; i++, object++)"
type_conversion,object.c,488,-,+,,14,	array->nr = 0;
type_conversion,object.c,489,-,+,,13,	for (src = 0; src < nr; src++) {
type_conversion,object.c,518,-,+,,14,		if (obj && obj->type == OBJ_COMMIT)
type_conversion,object.c,548,-,+,,55,"	hashmap_init(&o->pack_map, pack_map_entry_cmp, NULL, 0);"
type_conversion,object.c,584,-,+,,30,	o->commit_graph_attempted = 0;
type_conversion,object.c,608,-,+,,18,	for (i = 0; i < o->obj_hash_size; i++) {
type_conversion,object.c,614,-,+,,7,		if (obj->type == OBJ_TREE)
type_conversion,object.c,616,-,+,,12,		else if (obj->type == OBJ_COMMIT)
type_conversion,object.c,618,-,+,,12,		else if (obj->type == OBJ_TAG)
type_conversion,object.h,198,-,+,,22,	unsigned int mode = 0;
type_conversion,object.h,200,-,+,,6,	if (*str == ' ')
type_conversion,object.h,203,-,+,,14,	while ((c = *str++) != ' ') {
type_conversion,object.h,204,-,+,,7,		if (c < '0' || c > '7')
type_conversion,object.h,206,-,+,,25,		mode = (mode << 3) + (c - '0');
type_conversion,object.h,208,-,+,,11,	*modep = mode;
type_conversion,oid-array.c,10,-,+,,40,"		oid_set_algo(&array->oid[array->nr - 1], the_hash_algo);"
type_conversion,oid-array.c,48,-,+,,14,	array->nr = 0;
type_conversion,oid-array.c,49,-,+,,17,	array->alloc = 0;
type_conversion,oid-array.c,62,-,+,,11,	for (i = 0; i < array->nr; i++) {
type_conversion,oid-array.c,78,-,+,,11,"	for (i = 0; i < array->nr; i = oid_array_next_unique(array, i)) {"
type_conversion,oid-array.c,93,-,+,,19,	for (src = dst = 0; src < nr; src++) {
type_conversion,oidmap.c,31,-,+,,28,"	hashmap_clear_(&map->map, free_entries ? 0 : -1);"
type_conversion,oidmap.c,47,-,+,,20,"		oidmap_init(map, 0);"
type_conversion,oidmap.c,58,-,+,,20,"		oidmap_init(map, 0);"
type_conversion,oidset.c,10,-,+,,32,"		kh_resize_oid_set(&set->set, initial_size);"
type_conversion,oidset.c,48,-,+,,19,"	oidset_init(set, 0);"
type_conversion,oidset.c,77,-,+,,23,"			strbuf_setlen(&sb, name - sb.buf);"
type_conversion,oidset.c,82,-,+,,42,"		if (parse_oid_hex(sb.buf, &oid, &p) || *p != '\0')"
type_conversion,oidtree.c,20,-,+,,31,"	mem_pool_init(&ot->mem_pool, 0);"
type_conversion,oidtree.c,87,-,+,,8,		if ((k.hash[*x->last_nibble_at] ^ x->last_byte) & 0xf0)
type_conversion,oidtree.c,97,-,+,,27,	size_t klen = oidhexsz / 2;
type_conversion,oidtree.c,104,-,+,,17,	if (oidhexsz & 1) {
type_conversion,pack-bitmap-write.c,49,-,+,,11,	for (i = 0; i < writer->selected_nr; i++) {
type_conversion,pack-bitmap-write.c,79,-,+,,11,	for (i = 0; i < index_nr; ++i) {
type_conversion,pack-bitmap-write.c,101,-,+,,30,"			ewah_set(writer->commits, i);"
type_conversion,pack-bitmap-write.c,105,-,+,,28,"			ewah_set(writer->trees, i);"
type_conversion,pack-bitmap-write.c,109,-,+,,28,"			ewah_set(writer->blobs, i);"
type_conversion,pack-bitmap-write.c,113,-,+,,27,"			ewah_set(writer->tags, i);"
type_conversion,pack-bitmap-write.c,132,-,+,,54,		writer->selected_alloc = (writer->selected_alloc + 32) * 2;
type_conversion,pack-bitmap-write.c,154,-,+,,10,		return 0;
type_conversion,pack-bitmap-write.c,168,-,+,,9,	while (next < writer->selected_nr) {
type_conversion,pack-bitmap-write.c,234,-,+,,32,"	unsigned int i, num_maximal = 0;"
type_conversion,pack-bitmap-write.c,241,-,+,,20,	revs.topo_order = 1;
type_conversion,pack-bitmap-write.c,242,-,+,,27,	revs.first_parent_only = 1;
type_conversion,pack-bitmap-write.c,244,-,+,,11,	for (i = 0; i < writer->selected_nr; i++) {
type_conversion,pack-bitmap-write.c,248,-,+,,19,		ent->selected = 1;
type_conversion,pack-bitmap-write.c,249,-,+,,18,		ent->maximal = 1;
type_conversion,pack-bitmap-write.c,253,-,+,,32,"		bitmap_set(ent->commit_mask, i);"
type_conversion,pack-bitmap-write.c,319,-,+,,22,				p_ent->maximal = 1;
type_conversion,pack-bitmap-write.c,321,-,+,,22,				p_ent->maximal = 0;
type_conversion,pack-bitmap-write.c,361,-,+,,39,	bb->commits_nr = bb->commits_alloc = 0;
type_conversion,pack-bitmap-write.c,380,-,+,,25,"	if (bitmap_get(bitmap, pos))"
type_conversion,pack-bitmap-write.c,382,-,+,,21,"	bitmap_set(bitmap, pos);"
type_conversion,pack-bitmap-write.c,400,-,+,,23,"			bitmap_set(bitmap, pos);"
type_conversion,pack-bitmap-write.c,457,-,+,,27,"		bitmap_set(ent->bitmap, pos);"
type_conversion,pack-bitmap-write.c,466,-,+,,33,"			if (!bitmap_get(ent->bitmap, pos)) {"
type_conversion,pack-bitmap-write.c,467,-,+,,29,"				bitmap_set(ent->bitmap, pos);"
type_conversion,pack-bitmap-write.c,514,-,+,,9,						  writer->selected_nr);
type_conversion,pack-bitmap-write.c,525,-,+,,30,	for (i = bb.commits_nr; i > 0; i--) {
type_conversion,pack-bitmap-write.c,526,-,+,,40,		struct commit *commit = bb.commits[i-1];
type_conversion,pack-bitmap-write.c,540,-,+,,39,"			display_progress(writer->progress, nr_stored);"
type_conversion,pack-bitmap-write.c,583,-,+,,42,	static const unsigned int MIN_COMMITS = 100;
type_conversion,pack-bitmap-write.c,584,-,+,,42,	static const unsigned int MAX_COMMITS = 5000;
type_conversion,pack-bitmap-write.c,586,-,+,,42,	static const unsigned int MUST_REGION = 100;
type_conversion,pack-bitmap-write.c,587,-,+,,41,	static const unsigned int MIN_REGION = 20000;
type_conversion,pack-bitmap-write.c,592,-,+,,10,		return 0;
type_conversion,pack-bitmap-write.c,609,-,+,,9,	return (long)b->date - (long)a->date;
type_conversion,pack-bitmap-write.c,616,-,+,,19,"	unsigned int i = 0, j, next;"
type_conversion,pack-bitmap-write.c,620,-,+,,27,	if (indexed_commits_nr < 100) {
type_conversion,pack-bitmap-write.c,621,-,+,,12,		for (i = 0; i < indexed_commits_nr; ++i)
type_conversion,pack-bitmap-write.c,627,-,+,,65,"		writer->progress = start_progress(""Selecting bitmap commits"", 0);"
type_conversion,pack-bitmap-write.c,637,-,+,,15,		if (next == 0) {
type_conversion,pack-bitmap-write.c,642,-,+,,13,			for (j = 0; j <= next; ++j) {
type_conversion,pack-bitmap-write.c,645,-,+,,46,				if ((cm->object.flags & NEEDS_BITMAP) != 0) {
type_conversion,pack-bitmap-write.c,657,-,+,,15,		i += next + 1;
type_conversion,pack-bitmap-write.c,658,-,+,,38,"		display_progress(writer->progress, i);"
type_conversion,pack-bitmap-write.c,668,-,+,,20,"	hashwrite(f, buf, len);"
type_conversion,pack-bitmap-write.c,669,-,+,,9,	return len;
type_conversion,pack-bitmap-write.c,692,-,+,,14,	for (i = 0; i < writer->selected_nr; ++i) {
type_conversion,pack-bitmap-write.c,699,-,+,,19,"		hashwrite_u8(f, stored->xor_offset);"
type_conversion,pack-bitmap-write.c,700,-,+,,19,"		hashwrite_u8(f, stored->flags);"
type_conversion,pack-bitmap-write.c,729,-,+,,11,	for (i = 0; i < writer->selected_nr; i++)
type_conversion,pack-bitmap-write.c,742,-,+,,11,	for (i = 0; i < writer->selected_nr; i++)
type_conversion,pack-bitmap-write.c,746,-,+,,11,	for (i = 0; i < writer->selected_nr; i++) {
type_conversion,pack-bitmap-write.c,748,-,+,,25,		uint32_t xor_offset = selected->xor_offset;
type_conversion,pack-bitmap-write.c,784,-,+,,11,	for (i = 0; i < index_nr; ++i) {
type_conversion,pack-bitmap-write.c,802,-,+,,36,	static uint16_t default_version = 1;
type_conversion,pack-bitmap-write.c,803,-,+,,26,	static uint16_t flags = BITMAP_OPT_FULL_DAG;
type_conversion,pack-bitmap-write.c,827,-,+,,6,	if (options & BITMAP_OPT_LOOKUP_TABLE)
type_conversion,pack-bitmap-write.c,830,-,+,,11,	for (i = 0; i < writer->selected_nr; i++) {
type_conversion,pack-bitmap-write.c,833,-,+,,7,"					 index_nr, oid_access);"
type_conversion,pack-bitmap-write.c,837,-,+,,24,		stored->commit_pos = commit_pos;
type_conversion,pack-bitmap-write.c,842,-,+,,6,	if (options & BITMAP_OPT_LOOKUP_TABLE)
type_conversion,pack-bitmap-write.c,845,-,+,,6,	if (options & BITMAP_OPT_HASH_CACHE)
type_conversion,pack-bitmap.c,144,-,+,,20,	if (bitmap_size < 0) {
type_conversion,pack-bitmap.c,150,-,+,,20,	index->map_pos += bitmap_size;
type_conversion,pack-bitmap.c,173,-,+,,24,	if (index->version != 1)
type_conversion,pack-bitmap.c,179,-,+,,31,"		size_t cache_size = st_mult(bitmap_num_objects(index), sizeof(uint32_t));"
type_conversion,pack-bitmap.c,182,-,+,,16,		if ((flags & BITMAP_OPT_FULL_DAG) == 0)
type_conversion,pack-bitmap.c,186,-,+,,15,		if (flags & BITMAP_OPT_HASH_CACHE) {
type_conversion,pack-bitmap.c,187,-,+,,21,			if (cache_size > index_end - index->map - header_size)
type_conversion,pack-bitmap.c,193,-,+,,15,		if (flags & BITMAP_OPT_LOOKUP_TABLE) {
type_conversion,pack-bitmap.c,196,-,+,,21,			if (table_size > index_end - index->map - header_size)
type_conversion,pack-bitmap.c,270,-,+,,11,	for (i = 0; i < index->entry_count; ++i) {
type_conversion,pack-bitmap.c,277,-,+,,42,		if (index->map_size - index->map_pos < 6)
type_conversion,pack-bitmap.c,281,-,+,,16,"		xor_offset = read_u8(index->map, &index->map_pos);"
type_conversion,pack-bitmap.c,282,-,+,,11,"		flags = read_u8(index->map, &index->map_pos);"
type_conversion,pack-bitmap.c,292,-,+,,38,		if (xor_offset > MAX_XOR_OFFSET || xor_offset > i)
type_conversion,pack-bitmap.c,296,-,+,,37,			xor_bitmap = recent_bitmaps[(i - xor_offset) % MAX_XOR_OFFSET];
type_conversion,pack-bitmap.c,363,-,+,,24,	bitmap_git->map_pos = 0;
type_conversion,pack-bitmap.c,365,-,+,,22,"				MAP_PRIVATE, fd, 0);"
type_conversion,pack-bitmap.c,381,-,+,,11,	for (i = 0; i < bitmap_git->midx->num_packs; i++) {
type_conversion,pack-bitmap.c,405,-,+,,25,	bitmap_git->map_size = 0;
type_conversion,pack-bitmap.c,406,-,+,,24,	bitmap_git->map_pos = 0;
type_conversion,pack-bitmap.c,449,-,+,,82,"	bitmap_git->map = xmmap(NULL, bitmap_git->map_size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,pack-bitmap.c,450,-,+,,24,	bitmap_git->map_pos = 0;
type_conversion,pack-bitmap.c,456,-,+,,26,		bitmap_git->map_size = 0;
type_conversion,pack-bitmap.c,457,-,+,,25,		bitmap_git->map_pos = 0;
type_conversion,pack-bitmap.c,480,-,+,,12,		for (i = 0; i < bitmap_git->midx->num_packs; i++) {
type_conversion,pack-bitmap.c,514,-,+,,25,	bitmap_git->map_size = 0;
type_conversion,pack-bitmap.c,582,-,+,,44,"	struct bitmap_index *bitmap_git = xcalloc(1, sizeof(*bitmap_git));"
type_conversion,pack-bitmap.c,594,-,+,,44,"	struct bitmap_index *bitmap_git = xcalloc(1, sizeof(*bitmap_git));"
type_conversion,pack-bitmap.c,652,-,+,,41,"	p = bitmap_git->table_lookup + st_mult(pos, BITMAP_LOOKUP_TABLE_TRIPLET_WIDTH);"
type_conversion,pack-bitmap.c,687,-,+,,9,	return found;
type_conversion,pack-bitmap.c,700,-,+,,68,"	unsigned char *p = bsearch(&commit_pos, bitmap_git->table_lookup, bitmap_git->entry_count,"
type_conversion,pack-bitmap.c,721,-,+,,52,"	static size_t xor_items_nr = 0, xor_items_alloc = 0;"
type_conversion,pack-bitmap.c,736,-,+,,17,	xor_items_nr = 0;
type_conversion,pack-bitmap.c,743,-,+,,22,		if (xor_items_nr + 1 >= bitmap_git->entry_count) {
type_conversion,pack-bitmap.c,777,-,+,,40,		xor_item = &xor_items[xor_items_nr - 1];
type_conversion,pack-bitmap.c,779,-,+,,52,		if (bitmap_git->map_size - bitmap_git->map_pos < bitmap_header_size) {
type_conversion,pack-bitmap.c,786,-,+,,15,"		xor_flags = read_u8(bitmap_git->map, &bitmap_git->map_pos);"
type_conversion,pack-bitmap.c,797,-,+,,51,	if (bitmap_git->map_size - bitmap_git->map_pos < bitmap_header_size) {
type_conversion,pack-bitmap.c,827,-,+,,10,"	flags = read_u8(bitmap_git->map, &bitmap_git->map_pos);"
type_conversion,pack-bitmap.c,869,-,+,,10,		return bitmap_pos + bitmap_num_objects(bitmap_git);
type_conversion,pack-bitmap.c,885,-,+,,9,	return pos;
type_conversion,pack-bitmap.c,897,-,+,,9,	return got;
type_conversion,pack-bitmap.c,923,-,+,,37,			eindex->alloc = (eindex->alloc + 16) * 3 / 2;
type_conversion,pack-bitmap.c,928,-,+,,16,		bitmap_pos = eindex->count;
type_conversion,pack-bitmap.c,937,-,+,,9,	return bitmap_pos + bitmap_num_objects(bitmap_git);
type_conversion,pack-bitmap.c,956,-,+,,25,"	bitmap_set(data->base, bitmap_pos);"
type_conversion,pack-bitmap.c,971,-,+,,43,"	if (data->seen && bitmap_get(data->seen, bitmap_pos))"
type_conversion,pack-bitmap.c,974,-,+,,29,"	if (bitmap_get(data->base, bitmap_pos))"
type_conversion,pack-bitmap.c,983,-,+,,25,"	bitmap_set(data->base, bitmap_pos);"
type_conversion,pack-bitmap.c,1020,-,+,,44,"	if ((data->seen && bitmap_get(data->seen, bitmap_pos)) ||"
type_conversion,pack-bitmap.c,1021,-,+,,30,"	     bitmap_get(data->base, bitmap_pos)) {"
type_conversion,pack-bitmap.c,1123,-,+,,31,	revs->ignore_missing_links = 1;
type_conversion,pack-bitmap.c,1131,-,+,,7,		if (object->type != OBJ_COMMIT ||
type_conversion,pack-bitmap.c,1145,-,+,,14,	tmp_blobs = revs->blob_objects;
type_conversion,pack-bitmap.c,1146,-,+,,14,	tmp_trees = revs->tree_objects;
type_conversion,pack-bitmap.c,1147,-,+,,13,	tmp_tags = revs->blob_objects;
type_conversion,pack-bitmap.c,1148,-,+,,23,	revs->blob_objects = 0;
type_conversion,pack-bitmap.c,1149,-,+,,23,	revs->tree_objects = 0;
type_conversion,pack-bitmap.c,1150,-,+,,22,	revs->tag_objects = 0;
type_conversion,pack-bitmap.c,1163,-,+,,19,	revs->boundary = 1;
type_conversion,pack-bitmap.c,1168,-,+,,19,	revs->boundary = 0;
type_conversion,pack-bitmap.c,1182,-,+,,11,	for (i = 0; i < cb.boundary.nr; i++) {
type_conversion,pack-bitmap.c,1195,-,+,,31,	revs->ignore_missing_links = 0;
type_conversion,pack-bitmap.c,1222,-,+,,7,		if (object->type == OBJ_COMMIT &&
type_conversion,pack-bitmap.c,1256,-,+,,52,"		if (pos < 0 || base == NULL || !bitmap_get(base, pos)) {"
type_conversion,pack-bitmap.c,1294,-,+,,11,	for (i = 0; i < eindex->count; ++i) {
type_conversion,pack-bitmap.c,1297,-,+,,35,"		if (!bitmap_get(objects, st_add(bitmap_num_objects(bitmap_git), i)))"
type_conversion,pack-bitmap.c,1301,-,+,,8,		if ((obj->type == OBJ_BLOB && !revs->blob_objects) ||
type_conversion,pack-bitmap.c,1302,-,+,,8,		    (obj->type == OBJ_TREE && !revs->tree_objects) ||
type_conversion,pack-bitmap.c,1303,-,+,,8,		    (obj->type == OBJ_TAG && !revs->tag_objects))
type_conversion,pack-bitmap.c,1306,-,+,,64,"		show_reach(&obj->oid, obj->type, 0, eindex->hashes[i], NULL, 0);"
type_conversion,pack-bitmap.c,1342,-,+,,13,	size_t i = 0;
type_conversion,pack-bitmap.c,1352,-,+,,11,	for (i = 0; i < objects->word_alloc &&
type_conversion,pack-bitmap.c,1360,-,+,,20,		for (offset = 0; offset < BITS_IN_EWORD; ++offset) {
type_conversion,pack-bitmap.c,1363,-,+,,20,"			uint32_t hash = 0, index_pos;"
type_conversion,pack-bitmap.c,1366,-,+,,28,			if ((word >> offset) == 0)
type_conversion,pack-bitmap.c,1375,-,+,,43,"				index_pos = pack_pos_to_midx(m, pos + offset);"
type_conversion,pack-bitmap.c,1382,-,+,,59,"				index_pos = pack_pos_to_index(bitmap_git->pack, pos + offset);"
type_conversion,pack-bitmap.c,1383,-,+,,54,"				ofs = pack_pos_to_offset(bitmap_git->pack, pos + offset);"
type_conversion,pack-bitmap.c,1408,-,+,,66,"			if (find_pack_entry_one(object->oid.hash, bitmap_git->pack) > 0)"
type_conversion,pack-bitmap.c,1426,-,+,,7,		if (p->item->type != type)
type_conversion,pack-bitmap.c,1433,-,+,,22,"		bitmap_set(result, pos);"
type_conversion,pack-bitmap.c,1462,-,+,,11,"	for (i = 0, init_type_iterator(&it, bitmap_git, type);"
type_conversion,pack-bitmap.c,1463,-,+,,7,"	     i < to_filter->word_alloc && ewah_iterator_next(&mask, &it);"
type_conversion,pack-bitmap.c,1465,-,+,,7,		if (i < tips->word_alloc)
type_conversion,pack-bitmap.c,1475,-,+,,11,	for (i = 0; i < eindex->count; i++) {
type_conversion,pack-bitmap.c,1476,-,+,,23,"		size_t pos = st_add(i, bitmap_num_objects(bitmap_git));"
type_conversion,pack-bitmap.c,1477,-,+,,7,		if (eindex->objects[i]->type == type &&
type_conversion,pack-bitmap.c,1526,-,+,,64,"		if (oid_object_info_extended(the_repository, &obj->oid, &oi, 0) < 0)"
type_conversion,pack-bitmap.c,1546,-,+,,11,"	for (i = 0, init_type_iterator(&it, bitmap_git, OBJ_BLOB);"
type_conversion,pack-bitmap.c,1547,-,+,,7,"	     i < to_filter->word_alloc && ewah_iterator_next(&mask, &it);"
type_conversion,pack-bitmap.c,1552,-,+,,20,		for (offset = 0; offset < BITS_IN_EWORD; offset++) {
type_conversion,pack-bitmap.c,1555,-,+,,28,			if ((word >> offset) == 0)
type_conversion,pack-bitmap.c,1558,-,+,,10,			pos = i * BITS_IN_EWORD + offset;
type_conversion,pack-bitmap.c,1560,-,+,,26,"			if (!bitmap_get(tips, pos) &&"
type_conversion,pack-bitmap.c,1562,-,+,,29,"				bitmap_unset(to_filter, pos);"
type_conversion,pack-bitmap.c,1566,-,+,,11,	for (i = 0; i < eindex->count; i++) {
type_conversion,pack-bitmap.c,1567,-,+,,23,"		size_t pos = st_add(i, bitmap_num_objects(bitmap_git));"
type_conversion,pack-bitmap.c,1568,-,+,,7,		if (eindex->objects[i]->type == OBJ_BLOB &&
type_conversion,pack-bitmap.c,1571,-,+,,35,"		    get_size_by_pos(bitmap_git, pos) >= limit)"
type_conversion,pack-bitmap.c,1597,-,+,,6,	if (object_type < OBJ_COMMIT || object_type > OBJ_TAG)
type_conversion,pack-bitmap.c,1600,-,+,,6,	if (object_type != OBJ_TAG)
type_conversion,pack-bitmap.c,1602,-,+,,6,	if (object_type != OBJ_COMMIT)
type_conversion,pack-bitmap.c,1604,-,+,,6,	if (object_type != OBJ_TREE)
type_conversion,pack-bitmap.c,1606,-,+,,6,	if (object_type != OBJ_BLOB)
type_conversion,pack-bitmap.c,1615,-,+,,17,	if (!filter || filter->choice == LOFC_DISABLED)
type_conversion,pack-bitmap.c,1618,-,+,,6,	if (filter->choice == LOFC_BLOB_NONE) {
type_conversion,pack-bitmap.c,1625,-,+,,6,	if (filter->choice == LOFC_BLOB_LIMIT) {
type_conversion,pack-bitmap.c,1633,-,+,,6,	if (filter->choice == LOFC_TREE_DEPTH &&
type_conversion,pack-bitmap.c,1634,-,+,,36,	    filter->tree_exclude_depth == 0) {
type_conversion,pack-bitmap.c,1642,-,+,,6,	if (filter->choice == LOFC_OBJECT_TYPE) {
type_conversion,pack-bitmap.c,1650,-,+,,6,	if (filter->choice == LOFC_COMBINE) {
type_conversion,pack-bitmap.c,1652,-,+,,15,		for (i = 0; i < filter->sub_nr; i++) {
type_conversion,pack-bitmap.c,1678,-,+,,8,	pos = objects_nr / BITS_IN_EWORD;
type_conversion,pack-bitmap.c,1684,-,+,,36,	for (i = pos * BITS_IN_EWORD; i < objects_nr; i++)
type_conversion,pack-bitmap.c,1687,-,+,,18,	for (i = 0; i < eindex->count; ++i) {
type_conversion,pack-bitmap.c,1689,-,+,,25,"			bitmap_unset(result, objects_nr + i);"
type_conversion,pack-bitmap.c,1724,-,+,,11,	for (i = 0; i < revs->pending.nr; ++i) {
type_conversion,pack-bitmap.c,1727,-,+,,7,		if (object->type == OBJ_NONE)
type_conversion,pack-bitmap.c,1730,-,+,,10,		while (object->type == OBJ_TAG) {
type_conversion,pack-bitmap.c,1786,-,+,,33,			revs->ignore_missing_links = 1;
type_conversion,pack-bitmap.c,1789,-,+,,33,			revs->ignore_missing_links = 0;
type_conversion,pack-bitmap.c,1853,-,+,,6,	if (type < 0)
type_conversion,pack-bitmap.c,1856,-,+,,6,	if (type == OBJ_REF_DELTA || type == OBJ_OFS_DELTA) {
type_conversion,pack-bitmap.c,1920,-,+,,26,"		if (!bitmap_get(reuse, base_bitmap_pos))"
type_conversion,pack-bitmap.c,1937,-,+,,15,	size_t pos = pack->bitmap_pos / BITS_IN_EWORD;
type_conversion,pack-bitmap.c,1957,-,+,,16,		       pos < pack->bitmap_nr / BITS_IN_EWORD &&
type_conversion,pack-bitmap.c,1967,-,+,,17,		for (offset = 0; offset < BITS_IN_EWORD; offset++) {
type_conversion,pack-bitmap.c,1971,-,+,,26,			if (word >> offset == 0)
type_conversion,pack-bitmap.c,1977,-,+,,18,			if (bit_pos < pack->bitmap_pos)
type_conversion,pack-bitmap.c,1979,-,+,,19,			if (bit_pos >= pack->bitmap_pos + pack->bitmap_nr)
type_conversion,pack-bitmap.c,1986,-,+,,51,"				midx_pos = pack_pos_to_midx(bitmap_git->midx, bit_pos);"
type_conversion,pack-bitmap.c,1994,-,+,,56,"				pack_pos = cast_size_t_to_uint32_t(st_sub(bit_pos, pack->bitmap_pos));"
type_conversion,pack-bitmap.c,2044,-,+,,20,"	size_t packs_nr = 0, packs_alloc = 0;"
type_conversion,pack-bitmap.c,2046,-,+,,24,	uint32_t objects_nr = 0;
type_conversion,pack-bitmap.c,2056,-,+,,19,		for (i = 0; i < bitmap_git->midx->num_packs; i++) {
type_conversion,pack-bitmap.c,2058,-,+,,55,"			if (nth_bitmapped_pack(r, bitmap_git->midx, &pack, i) < 0) {"
type_conversion,pack-bitmap.c,2094,-,+,,32,		packs[packs_nr].bitmap_pos = 0;
type_conversion,pack-bitmap.c,2099,-,+,,15,	word_alloc = objects_nr / BITS_IN_EWORD;
type_conversion,pack-bitmap.c,2100,-,+,,6,	if (objects_nr % BITS_IN_EWORD)
type_conversion,pack-bitmap.c,2104,-,+,,11,	for (i = 0; i < packs_nr; i++)
type_conversion,pack-bitmap.c,2132,-,+,,40,"	return idx >= 0 && bitmap_get(bitmap, idx);"
type_conversion,pack-bitmap.c,2158,-,+,,15,"	uint32_t i = 0, count = 0;"
type_conversion,pack-bitmap.c,2164,-,+,,9,"	while (i < objects->word_alloc && ewah_iterator_next(&filter, &it)) {"
type_conversion,pack-bitmap.c,2169,-,+,,11,	for (i = 0; i < eindex->count; ++i) {
type_conversion,pack-bitmap.c,2170,-,+,,7,		if (eindex->objects[i]->type == type &&
type_conversion,pack-bitmap.c,2172,-,+,,18,"			       st_add(bitmap_num_objects(bitmap_git), i)))"
type_conversion,pack-bitmap.c,2215,-,+,,33,"	if (bitmap_get(tdata->commits, pos)) {"
type_conversion,pack-bitmap.c,2219,-,+,,31,"	if (bitmap_get(tdata->trees, pos)) {"
type_conversion,pack-bitmap.c,2223,-,+,,31,"	if (bitmap_get(tdata->blobs, pos)) {"
type_conversion,pack-bitmap.c,2227,-,+,,30,"	if (bitmap_get(tdata->tags, pos)) {"
type_conversion,pack-bitmap.c,2232,-,+,,6,	if (bitmap_type == OBJ_NONE)
type_conversion,pack-bitmap.c,2240,-,+,,6,	if (bitmap_type != obj->type)
type_conversion,pack-bitmap.c,2243,-,+,,17,"		    type_name(obj->type),"
type_conversion,pack-bitmap.c,2244,-,+,,17,		    type_name(bitmap_type));
type_conversion,pack-bitmap.c,2259,-,+,,26,"	bitmap_set(tdata->base, bitmap_pos);"
type_conversion,pack-bitmap.c,2274,-,+,,26,"	bitmap_set(tdata->base, bitmap_pos);"
type_conversion,pack-bitmap.c,2290,-,+,,26,	if (revs->pending.nr != 1)
type_conversion,pack-bitmap.c,2311,-,+,,22,	revs->tag_objects = 1;
type_conversion,pack-bitmap.c,2312,-,+,,23,	revs->tree_objects = 1;
type_conversion,pack-bitmap.c,2313,-,+,,23,	revs->blob_objects = 1;
type_conversion,pack-bitmap.c,2327,-,+,,15,	tdata.seen = 0;
type_conversion,pack-bitmap.c,2383,-,+,,11,	for (i = 0; i < bitmap_num_objects(bitmap_git); i++) {
type_conversion,pack-bitmap.c,2405,-,+,,17,	uint32_t pos = 0;
type_conversion,pack-bitmap.c,2414,-,+,,20,		for (offset = 0; offset < BITS_IN_EWORD; ++offset) {
type_conversion,pack-bitmap.c,2415,-,+,,28,			if ((word >> offset) == 0)
type_conversion,pack-bitmap.c,2421,-,+,,18,			if (bit_pos > 0)
type_conversion,pack-bitmap.c,2422,-,+,,32,"				bitmap_set(dest, bit_pos - 1);"
type_conversion,pack-bitmap.c,2448,-,+,,11,	for (i = 0; i < num_objects; ++i) {
type_conversion,pack-bitmap.c,2461,-,+,,50,"			reposition[i] = oe_in_pack_pos(mapping, oe) + 1;"
type_conversion,pack-bitmap.c,2521,-,+,,16,	off_t total = 0;
type_conversion,pack-bitmap.c,2527,-,+,,11,	for (i = 0; i < result->word_alloc &&
type_conversion,pack-bitmap.c,2536,-,+,,20,		for (offset = 0; offset < BITS_IN_EWORD; offset++) {
type_conversion,pack-bitmap.c,2537,-,+,,28,			if ((word >> offset) == 0)
type_conversion,pack-bitmap.c,2544,-,+,,67,"				uint32_t midx_pos = pack_pos_to_midx(bitmap_git->midx, base + offset);"
type_conversion,pack-bitmap.c,2560,-,+,,50,"				total += pack_pos_to_offset(pack, pack_pos + 1) - offset;"
type_conversion,pack-bitmap.c,2562,-,+,,25,				size_t pos = base + offset;
type_conversion,pack-bitmap.c,2563,-,+,,57,"				total += pack_pos_to_offset(bitmap_git->pack, pos + 1) -"
type_conversion,pack-bitmap.c,2564,-,+,,44,"					 pack_pos_to_offset(bitmap_git->pack, pos);"
type_conversion,pack-bitmap.c,2576,-,+,,16,	off_t total = 0;
type_conversion,pack-bitmap.c,2583,-,+,,18,	for (i = 0; i < eindex->count; i++) {
type_conversion,pack-bitmap.c,2587,-,+,,12,"				st_add(bitmap_num_objects(bitmap_git), i)))"
type_conversion,pack-bitmap.c,2590,-,+,,64,"		if (oid_object_info_extended(the_repository, &obj->oid, &oi, 0) < 0)"
type_conversion,pack-bitmap.c,2602,-,+,,16,	off_t total = 0;
type_conversion,pack-bitmap.c,2661,-,+,,21,"	data = xmmap(NULL, st.st_size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,pack-bitmap.c,2663,-,+,,37,"	if (!hashfile_checksum_valid(data, st.st_size))"
type_conversion,pack-bitmap.c,2667,-,+,,15,"	munmap(data, st.st_size);"
type_conversion,pack-bitmap.h,14,-,+,,45,"static const char BITMAP_IDX_SIGNATURE[] = {'B', 'I', 'T', 'M'};"
type_conversion,pack-check.c,31,-,+,,28,"	uint32_t data_crc = crc32(0, NULL, 0);"
type_conversion,pack-check.c,36,-,+,,15,		if (avail > len)
type_conversion,pack-check.c,37,-,+,,12,			avail = len;
type_conversion,pack-check.c,38,-,+,,20,"		data_crc = crc32(data_crc, data, avail);"
type_conversion,pack-check.c,44,-,+,,15,	index_crc += 2 + 256 + (size_t)p->num_objects * (the_hash_algo->rawsz/4) + nr;
type_conversion,pack-check.c,56,-,+,,21,	off_t index_size = p->index_size;
type_conversion,pack-check.c,60,-,+,,17,"	off_t offset = 0, pack_sig_ofs = 0;"
type_conversion,pack-check.c,74,-,+,,19,			pack_sig_ofs = p->pack_size - r->hash_algo->rawsz;
type_conversion,pack-check.c,76,-,+,,17,			remaining -= (unsigned int)(offset - pack_sig_ofs);
type_conversion,pack-check.c,97,-,+,,11,	for (i = 0; i < nr_objects; i++) {
type_conversion,pack-check.c,103,-,+,,11,	for (i = 0; i < nr_objects; i++) {
type_conversion,pack-check.c,117,-,+,,26,			off_t len = entries[i+1].offset - offset;
type_conversion,pack-check.c,130,-,+,,7,		if (type == OBJ_BLOB && big_file_threshold <= size) {
type_conversion,pack-check.c,160,-,+,,27,		if (((base_count + i) & 1023) == 0)
type_conversion,pack-check.c,161,-,+,,31,"			display_progress(progress, base_count + i);"
type_conversion,pack-check.c,165,-,+,,29,"	display_progress(progress, base_count + i);"
type_conversion,pack-mtimes.c,53,-,+,,62,"	data = xmmap(NULL, mtimes_size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,pack-mtimes.c,64,-,+,,24,	if (header.version != 1) {
type_conversion,pack-mtimes.c,70,-,+,,26,	if (!(header.hash_id == 1 || header.hash_id == 2)) {
type_conversion,pack-mtimes.c,78,-,+,,66,"	expected_size = st_add(expected_size, st_mult(sizeof(uint32_t), num_objects));"
type_conversion,pack-mtimes.c,79,-,+,,63,"	expected_size = st_add(expected_size, 2 * (header.hash_id == 1 ? GIT_SHA1_RAWSZ : GIT_SHA256_RAWSZ));"
type_conversion,pack-objects.c,12,-,+,,42,"	uint32_t i, mask = (pdata->index_size - 1);"
type_conversion,pack-objects.c,17,-,+,,18,		uint32_t pos = pdata->index[i] - 1;
type_conversion,pack-objects.c,24,-,+,,12,		i = (i + 1) & mask;
type_conversion,pack-objects.c,33,-,+,,10,	v = v - 1;
type_conversion,pack-objects.c,39,-,+,,13,	return v + 1;
type_conversion,pack-objects.c,47,-,+,,55,	pdata->index_size = closest_pow2(pdata->nr_objects * 3);
type_conversion,pack-objects.c,48,-,+,,26,	if (pdata->index_size < 1024)
type_conversion,pack-objects.c,49,-,+,,23,		pdata->index_size = 1024;
type_conversion,pack-objects.c,56,-,+,,11,	for (i = 0; i < pdata->nr_objects; i++) {
type_conversion,pack-objects.c,57,-,+,,42,		return &pack->ext_bases[e->delta_idx - 1];
type_conversion,pack-objects.c,59,-,+,,40,		return &pack->objects[e->delta_idx - 1];
type_conversion,pack-objects.c,65,-,+,,26,		pdata->index[ix] = i + 1;
type_conversion,pack-objects.c,66,-,+,,10,		return e->delta_size_;
type_conversion,pack-objects.c,86,-,+,,10,		return e->size_;
type_conversion,pack-objects.c,96,-,+,,44,		e->delta_idx = (delta - pack->objects) + 1;
type_conversion,pack-objects.c,98,-,+,,18,		e->delta_idx = 0;
type_conversion,pack-objects.c,106,-,+,,48,		return &pack->objects[e->delta_sibling_idx - 1];
type_conversion,pack-objects.c,115,-,+,,46,		return &pack->objects[e->delta_child_idx - 1];
type_conversion,pack-objects.c,124,-,+,,50,		e->delta_child_idx = (delta - pack->objects) + 1;
type_conversion,pack-objects.c,126,-,+,,24,		e->delta_child_idx = 0;
type_conversion,pack-objects.c,127,-,+,,11,	for (i = 0; i < pack->nr_objects; i++)
type_conversion,pack-objects.c,134,-,+,,52,		e->delta_sibling_idx = (delta - pack->objects) + 1;
type_conversion,pack-objects.c,136,-,+,,26,		e->delta_sibling_idx = 0;
type_conversion,pack-objects.c,144,-,+,,14,		e->size_ = size;
type_conversion,pack-objects.c,145,-,+,,19,		e->size_valid = 1;
type_conversion,pack-objects.c,147,-,+,,19,		e->size_valid = 0;
type_conversion,pack-objects.c,158,-,+,,20,		e->delta_size_ = size;
type_conversion,pack-objects.c,159,-,+,,25,		e->delta_size_valid = 1;
type_conversion,pack-objects.c,167,-,+,,25,		e->delta_size_valid = 0;
type_conversion,pack-objects.c,175,-,+,,41,		pdata->nr_alloc = (pdata->nr_alloc  + 1024) * 3 / 2;
type_conversion,pack-objects.c,198,-,+,,26,	if (pdata->index_size * 3 <= pdata->nr_objects * 4)
type_conversion,pack-objects.c,207,-,+,,23,		pdata->index[pos] = pdata->nr_objects;
type_conversion,pack-objects.c,211,-,+,,38,		pdata->in_pack[pdata->nr_objects - 1] = NULL;
type_conversion,pack-objects.c,214,-,+,,41,		pdata->tree_depth[pdata->nr_objects - 1] = 0;
type_conversion,pack-objects.c,217,-,+,,36,		pdata->layer[pdata->nr_objects - 1] = 0;
type_conversion,pack-objects.c,220,-,+,,42,		pdata->cruft_mtime[pdata->nr_objects - 1] = 0;
type_conversion,pack-objects.c,237,-,+,,25,	base->preferred_base = 1;
type_conversion,pack-objects.c,238,-,+,,17,	base->filled = 1;
type_conversion,pack-objects.c,239,-,+,,40,static uint16_t write_bitmap_options = BITMAP_OPT_HASH_CACHE;
type_conversion,pack-objects.c,240,-,+,,20,	delta->ext_base = 1;
type_conversion,pack-objects.c,241,-,+,,47,
type_conversion,pack-objects.c,245,-,+,,41,static unsigned long delta_cache_size = 0;
type_conversion,pack-objects.c,247,-,+,,51,static unsigned long cache_max_small_delta_size = 1000;
type_conversion,pack-objects.c,249,-,+,,44,static unsigned long window_memory_limit = 0;
type_conversion,pack-objects.c,286,-,+,,52,		indexed_commits_alloc = (indexed_commits_alloc + 32) * 2;
type_conversion,pack-objects.c,310,-,+,,35,"			       buf, size, &delta_size, 0);"
type_conversion,pack-objects.c,354,-,+,,23,	unsigned long olen = 0;
type_conversion,pack-objects.c,362,-,+,,18,		if (readlen == -1)
type_conversion,pack-objects.c,366,-,+,,21,		stream.avail_in = readlen;
type_conversion,pack-objects.c,367,-,+,,41,		while ((stream.avail_in || readlen == 0) &&
type_conversion,pack-objects.c,372,-,+,,23,"			hashwrite(f, obuf, stream.next_out - obuf);"
type_conversion,pack-objects.c,373,-,+,,12,			olen += stream.next_out - obuf;
type_conversion,pack-objects.c,377,-,+,,18,		if (readlen == 0) {
type_conversion,pack-objects.c,414,-,+,,22,		stream.total_in == len) ? 0 : -1;
type_conversion,pack-objects.c,428,-,+,,15,		if (avail > len)
type_conversion,pack-objects.c,430,-,+,,20,"		hashwrite(f, in, avail);"
type_conversion,pack-objects.c,441,-,+,,10,		return lhs->size_ > rhs;
type_conversion,pack-objects.c,461,-,+,,7,		if (oe_type(entry) == OBJ_BLOB &&
type_conversion,pack-objects.c,479,-,+,,25,		entry->z_delta_size = 0;
type_conversion,pack-objects.c,496,-,+,,13,		datalen = entry->z_delta_size;
type_conversion,pack-objects.c,504,-,+,,48,"	hdrlen = encode_in_pack_object_header(header, sizeof(header),"
type_conversion,pack-objects.c,507,-,+,,6,	if (type == OBJ_OFS_DELTA) {
type_conversion,pack-objects.c,514,-,+,,36,		unsigned pos = sizeof(dheader) - 1;
type_conversion,pack-objects.c,515,-,+,,24,		dheader[pos] = ofs & 127;
type_conversion,pack-objects.c,517,-,+,,21,			dheader[--pos] = 128 | (--ofs & 127);
type_conversion,pack-objects.c,518,-,+,,16,		if (limit && hdrlen + sizeof(dheader) - pos + datalen + hashsz >= limit) {
type_conversion,pack-objects.c,522,-,+,,11,			return 0;
type_conversion,pack-objects.c,525,-,+,,49,"		hashwrite(f, dheader + pos, sizeof(dheader) - pos);"
type_conversion,pack-objects.c,526,-,+,,31,		hdrlen += sizeof(dheader) - pos;
type_conversion,pack-objects.c,527,-,+,,13,	} else if (type == OBJ_REF_DELTA) {
type_conversion,pack-objects.c,532,-,+,,16,		if (limit && hdrlen + hashsz + datalen + hashsz >= limit) {
type_conversion,pack-objects.c,536,-,+,,11,			return 0;
type_conversion,pack-objects.c,542,-,+,,16,		if (limit && hdrlen + datalen + hashsz >= limit) {
type_conversion,pack-objects.c,546,-,+,,11,			return 0;
type_conversion,pack-objects.c,554,-,+,,21,"		hashwrite(f, buf, datalen);"
type_conversion,pack-objects.c,558,-,+,,9,	return hdrlen + datalen;
type_conversion,pack-objects.c,580,-,+,,48,"	hdrlen = encode_in_pack_object_header(header, sizeof(header),"
type_conversion,pack-objects.c,589,-,+,,40,"	datalen = pack_pos_to_offset(p, pos + 1) - offset;"
type_conversion,pack-objects.c,596,-,+,,10,"		return write_no_reuse_object(f, entry, limit, usable_delta);"
type_conversion,pack-objects.c,599,-,+,,12,	offset += entry->in_pack_header_size;
type_conversion,pack-objects.c,600,-,+,,13,	datalen -= entry->in_pack_header_size;
type_conversion,pack-objects.c,607,-,+,,10,"		return write_no_reuse_object(f, entry, limit, usable_delta);"
type_conversion,pack-objects.c,610,-,+,,6,	if (type == OBJ_OFS_DELTA) {
type_conversion,pack-objects.c,612,-,+,,36,		unsigned pos = sizeof(dheader) - 1;
type_conversion,pack-objects.c,613,-,+,,24,		dheader[pos] = ofs & 127;
type_conversion,pack-objects.c,615,-,+,,21,			dheader[--pos] = 128 | (--ofs & 127);
type_conversion,pack-objects.c,616,-,+,,16,		if (limit && hdrlen + sizeof(dheader) - pos + datalen + hashsz >= limit) {
type_conversion,pack-objects.c,618,-,+,,11,			return 0;
type_conversion,pack-objects.c,621,-,+,,49,"		hashwrite(f, dheader + pos, sizeof(dheader) - pos);"
type_conversion,pack-objects.c,622,-,+,,31,		hdrlen += sizeof(dheader) - pos;
type_conversion,pack-objects.c,624,-,+,,13,	} else if (type == OBJ_REF_DELTA) {
type_conversion,pack-objects.c,625,-,+,,16,		if (limit && hdrlen + hashsz + datalen + hashsz >= limit) {
type_conversion,pack-objects.c,627,-,+,,11,			return 0;
type_conversion,pack-objects.c,634,-,+,,16,		if (limit && hdrlen + datalen + hashsz >= limit) {
type_conversion,pack-objects.c,636,-,+,,11,			return 0;
type_conversion,pack-objects.c,643,-,+,,9,	return hdrlen + datalen;
type_conversion,pack-objects.c,660,-,+,,11,		limit = 0;
type_conversion,pack-objects.c,661,-,+,,30,	else if (pack_size_limit <= write_offset)
type_conversion,pack-objects.c,666,-,+,,11,		limit = 1;
type_conversion,pack-objects.c,668,-,+,,29,		limit = pack_size_limit - write_offset;
type_conversion,pack-objects.c,685,-,+,,11,	else if (oe_type(entry) == OBJ_REF_DELTA ||
type_conversion,pack-objects.c,686,-,+,,4,		 oe_type(entry) == OBJ_OFS_DELTA)
type_conversion,pack-objects.c,690,-,+,,11,	else if (oe_type(entry) != entry->in_pack_type)
type_conversion,pack-objects.c,700,-,+,,9,"		len = write_no_reuse_object(f, entry, limit, usable_delta);"
type_conversion,pack-objects.c,704,-,+,,10,		return 0;
type_conversion,pack-objects.c,733,-,+,,32,	recursing = (e->idx.offset == 1);
type_conversion,pack-objects.c,745,-,+,,19,		e->idx.offset = 1; /* now recurse */
type_conversion,pack-objects.c,754,-,+,,20,			e->idx.offset = recursing;
type_conversion,pack-objects.c,762,-,+,,19,		e->idx.offset = recursing;
type_conversion,pack-objects.c,781,-,+,,19,		entry->tagged = 1;
type_conversion,pack-objects.c,785,-,+,,20,			entry->tagged = 1;
type_conversion,pack-objects.c,794,-,+,,10,		return 0;
type_conversion,pack-objects.c,802,-,+,,19,"	if (e->filled || oe_layer(&to_pack, e) != write_layer)"
type_conversion,pack-objects.c,805,-,+,,14,	e->filled = 1;
type_conversion,pack-objects.c,867,-,+,,11,	for (i = 0; i < to_pack.nr_objects; i++) {
type_conversion,pack-objects.c,886,-,+,,7,		if (oe_type(&objects[i]) != OBJ_COMMIT &&
type_conversion,pack-objects.c,887,-,+,,7,		    oe_type(&objects[i]) != OBJ_TAG)
type_conversion,pack-objects.c,896,-,+,,7,		if (oe_type(&objects[i]) != OBJ_TREE)
type_conversion,pack-objects.c,905,-,+,,29,"		if (!objects[i].filled && oe_layer(&to_pack, &objects[i]) == write_layer)"
type_conversion,pack-objects.c,912,-,+,,24,	uint32_t max_layers = 1;
type_conversion,pack-objects.c,918,-,+,,11,	for (i = 0; i < to_pack.nr_objects; i++) {
type_conversion,pack-objects.c,919,-,+,,23,		objects[i].tagged = 0;
type_conversion,pack-objects.c,920,-,+,,23,		objects[i].filled = 0;
type_conversion,pack-objects.c,930,-,+,,35,	for (i = to_pack.nr_objects; i > 0;) {
type_conversion,pack-objects.c,946,-,+,,16,		max_layers = compute_pack_layers(&to_pack);
type_conversion,pack-objects.c,951,-,+,,11,	wo_end = 0;
type_conversion,pack-objects.c,1029,-,+,,46,"	offset = pack_pos_to_offset(reuse_packfile, pos);"
type_conversion,pack-objects.c,1030,-,+,,50,"	next = pack_pos_to_offset(reuse_packfile, pos + 1);"
type_conversion,pack-objects.c,1039,-,+,,6,	if (type == OBJ_OFS_DELTA) {
type_conversion,pack-objects.c,1063,-,+,,47,"			len = encode_in_pack_object_header(header, sizeof(header),"
type_conversion,pack-objects.c,1079,-,+,,47,"			len = encode_in_pack_object_header(header, sizeof(header),"
type_conversion,pack-objects.c,1082,-,+,,29,			i = sizeof(ofs_header) - 1;
type_conversion,pack-objects.c,1083,-,+,,26,			ofs_header[i] = ofs & 127;
type_conversion,pack-objects.c,1085,-,+,,23,				ofs_header[--i] = 128 | (--ofs & 127);
type_conversion,pack-objects.c,1087,-,+,,35,			ofs_len = sizeof(ofs_header) - i;
type_conversion,pack-objects.c,1106,-,+,,15,	size_t pos = reuse_packfile->bitmap_pos;
type_conversion,pack-objects.c,1115,-,+,,16,		if (offset + reuse_packfile->bitmap_nr < BITS_IN_EWORD)
type_conversion,pack-objects.c,1116,-,+,,20,			last = offset + reuse_packfile->bitmap_nr;
type_conversion,pack-objects.c,1121,-,+,,26,			if (word >> offset == 0)
type_conversion,pack-objects.c,1142,-,+,,8,	end = reuse_packfile->bitmap_pos + reuse_packfile->bitmap_nr;
type_conversion,pack-objects.c,1146,-,+,,10,		return reuse_packfile->bitmap_pos / BITS_IN_EWORD;
type_conversion,pack-objects.c,1155,-,+,,6,	if (reuse_packfile->bitmap_pos < pos) {
type_conversion,pack-objects.c,1156,-,+,,64,"		off_t pack_start_off = pack_pos_to_offset(reuse_packfile->p, 0);"
type_conversion,pack-objects.c,1158,-,+,,14,							pos - reuse_packfile->bitmap_pos);
type_conversion,pack-objects.c,1160,-,+,,20,		written += pos - reuse_packfile->bitmap_pos;
type_conversion,pack-objects.c,1169,-,+,,36,"		display_progress(progress_state, written);"
type_conversion,pack-objects.c,1180,-,+,,13,	size_t i = reuse_packfile->bitmap_pos / BITS_IN_EWORD;
type_conversion,pack-objects.c,1182,-,+,,21,	off_t pack_start = hashfile_total(f) - sizeof(struct pack_header);
type_conversion,pack-objects.c,1193,-,+,,20,		for (offset = 0; offset < BITS_IN_EWORD; ++offset) {
type_conversion,pack-objects.c,1194,-,+,,28,			if ((word >> offset) == 0)
type_conversion,pack-objects.c,1198,-,+,,14,			if (pos + offset < reuse_packfile->bitmap_pos)
type_conversion,pack-objects.c,1200,-,+,,14,			if (pos + offset >= reuse_packfile->bitmap_pos + reuse_packfile->bitmap_nr)
type_conversion,pack-objects.c,1208,-,+,,18,"					      pos + offset - reuse_packfile->bitmap_pos,"
type_conversion,pack-objects.c,1210,-,+,,37,"			display_progress(progress_state, ++written);"
type_conversion,pack-objects.c,1231,-,+,,25,"		write_in_full(1, "" "", 1);"
type_conversion,pack-objects.c,1233,-,+,,26,"		write_in_full(1, ""\n"", 1);"
type_conversion,pack-objects.c,1243,-,+,,15,"	uint32_t i = 0, j;"
type_conversion,pack-objects.c,1247,-,+,,22,	time_t last_mtime = 0;
type_conversion,pack-objects.c,1251,-,+,,57,"		progress_state = start_progress(_(""Writing objects""), nr_result);"
type_conversion,pack-objects.c,1268,-,+,,16,			for (j = 0; j < reuse_packfiles_nr; j++) {
type_conversion,pack-objects.c,1277,-,+,,16,		nr_written = 0;
type_conversion,pack-objects.c,1280,-,+,,8,"			if (write_one(f, e, &offset) == WRITE_ONE_BREAK)"
type_conversion,pack-objects.c,1282,-,+,,37,"			display_progress(progress_state, written);"
type_conversion,pack-objects.c,1304,-,+,,62,"			int fd = finalize_hashfile(f, hash, FSYNC_COMPONENT_PACK, 0);"
type_conversion,pack-objects.c,1309,-,+,,9,				if (write_bitmap_index != WRITE_BITMAP_QUIET)
type_conversion,pack-objects.c,1388,-,+,,12,		for (j = 0; j < nr_written; j++) {
type_conversion,pack-objects.c,1442,-,+,,27,		entry->preferred_base = 1;
type_conversion,pack-objects.c,1493,-,+,,20,		unsigned flags = 0;
type_conversion,pack-objects.c,1576,-,+,,19,		*found_offset = 0;
type_conversion,pack-objects.c,1605,-,+,,16,			for (i = 0; i < uri_protocols.nr; i++) {
type_conversion,pack-objects.c,1609,-,+,,9,				    *p == ':') {
type_conversion,pack-objects.c,1634,-,+,,27,		entry->preferred_base = 1;
type_conversion,pack-objects.c,1642,-,+,,24,	entry->no_try_delta = no_try_delta;
type_conversion,pack-objects.c,1655,-,+,,23,	off_t found_offset = 0;
type_conversion,pack-objects.c,1657,-,+,,35,"	display_progress(progress_state, ++nr_seen);"
type_conversion,pack-objects.c,1665,-,+,,8,			if (write_bitmap_index != WRITE_BITMAP_QUIET)
type_conversion,pack-objects.c,1683,-,+,,35,"	display_progress(progress_state, ++nr_seen);"
type_conversion,pack-objects.c,1706,-,+,,9,	return oid->hash[0] % ARRAY_SIZE(pbase_tree_cache);
type_conversion,pack-objects.c,1710,-,+,,9,	return (ix+1) % ARRAY_SIZE(pbase_tree_cache);
type_conversion,pack-objects.c,1758,-,+,,6,	if (type != OBJ_TREE) {
type_conversion,pack-objects.c,1816,-,+,,9,		cmp = tree_entry_len(&entry) != cmplen ? 1 :
type_conversion,pack-objects.c,1822,-,+,,7,		if (name[cmplen] != '/') {
type_conversion,pack-objects.c,1893,-,+,,17,		if (cmplen == 0) {
type_conversion,pack-objects.c,1950,-,+,,14,	for (i = 0; i < ARRAY_SIZE(pbase_tree_cache); i++) {
type_conversion,pack-objects.c,2022,-,+,,22,"				   to_fetch.oid, to_fetch.nr);"
type_conversion,pack-objects.c,2054,-,+,,15,		if (used == 0)
type_conversion,pack-objects.c,2057,-,+,,7,		if (type < 0)
type_conversion,pack-objects.c,2059,-,+,,25,		entry->in_pack_type = type;
type_conversion,pack-objects.c,2066,-,+,,11,		switch (entry->in_pack_type) {
type_conversion,pack-objects.c,2071,-,+,,33,			entry->in_pack_header_size = used;
type_conversion,pack-objects.c,2072,-,+,,8,			if (oe_type(entry) < OBJ_COMMIT || oe_type(entry) > OBJ_BLOB)
type_conversion,pack-objects.c,2076,-,+,,8,		case OBJ_REF_DELTA:
type_conversion,pack-objects.c,2080,-,+,,8,"						 entry->in_pack_offset + used,"
type_conversion,pack-objects.c,2086,-,+,,8,		case OBJ_OFS_DELTA:
type_conversion,pack-objects.c,2088,-,+,,12,"				       entry->in_pack_offset + used, NULL);"
type_conversion,pack-objects.c,2089,-,+,,13,			used_0 = 0;
type_conversion,pack-objects.c,2091,-,+,,10,			ofs = c & 127;
type_conversion,pack-objects.c,2092,-,+,,11,			while (c & 128) {
type_conversion,pack-objects.c,2093,-,+,,12,				ofs += 1;
type_conversion,pack-objects.c,2100,-,+,,25,				ofs = (ofs << 7) + (c & 127);
type_conversion,pack-objects.c,2103,-,+,,15,			if (ofs <= 0 || ofs >= entry->in_pack_offset) {
type_conversion,pack-objects.c,2116,-,+,,33,			entry->in_pack_header_size = used + used_0;
type_conversion,pack-objects.c,2146,-,+,,40,			delta_pos = entry->in_pack_offset + entry->in_pack_header_size;
type_conversion,pack-objects.c,2148,-,+,,26,			if (canonical_size == 0)
type_conversion,pack-objects.c,2222,-,+,,54,	unsigned *idx = &to_pack.objects[entry->delta_idx - 1].delta_child_idx;
type_conversion,pack-objects.c,2228,-,+,,53,		struct object_entry *oe = &to_pack.objects[*idx - 1];
type_conversion,pack-objects.c,2236,-,+,,17,	entry->depth = 0;
type_conversion,pack-objects.c,2274,-,+,,34,"	for (cur = entry, total_depth = 0;"
type_conversion,pack-objects.c,2277,-,+,,7,		if (cur->dfs_state == DFS_DONE) {
type_conversion,pack-objects.c,2283,-,+,,19,			total_depth += cur->depth;
type_conversion,pack-objects.c,2292,-,+,,7,		if (cur->dfs_state != DFS_NONE)
type_conversion,pack-objects.c,2302,-,+,,21,			cur->dfs_state = DFS_DONE;
type_conversion,pack-objects.c,2323,-,+,,20,		cur->dfs_state = DFS_ACTIVE;
type_conversion,pack-objects.c,2324,-,+,,32,		if (DELTA(cur)->dfs_state == DFS_ACTIVE) {
type_conversion,pack-objects.c,2326,-,+,,21,			cur->dfs_state = DFS_DONE;
type_conversion,pack-objects.c,2347,-,+,,7,		if (cur->dfs_state == DFS_DONE)
type_conversion,pack-objects.c,2349,-,+,,12,		else if (cur->dfs_state != DFS_ACTIVE)
type_conversion,pack-objects.c,2371,-,+,,34,		cur->depth = (total_depth--) % (depth + 1);
type_conversion,pack-objects.c,2375,-,+,,20,		cur->dfs_state = DFS_DONE;
type_conversion,pack-objects.c,2386,-,+,,7,						to_pack.nr_objects);
type_conversion,pack-objects.c,2389,-,+,,11,	for (i = 0; i < to_pack.nr_objects; i++)
type_conversion,pack-objects.c,2393,-,+,,11,	for (i = 0; i < to_pack.nr_objects; i++) {
type_conversion,pack-objects.c,2398,-,+,,26,			entry->no_try_delta = 1;
type_conversion,pack-objects.c,2399,-,+,,40,"		display_progress(progress_state, i + 1);"
type_conversion,pack-objects.c,2407,-,+,,11,	for (i = 0; i < to_pack.nr_objects; i++)
type_conversion,pack-objects.c,2431,-,+,,6,	if (a_type > b_type)
type_conversion,pack-objects.c,2433,-,+,,6,	if (a_type < b_type)
type_conversion,pack-objects.c,2439,-,+,,6,	if (a->preferred_base > b->preferred_base)
type_conversion,pack-objects.c,2441,-,+,,6,	if (a->preferred_base < b->preferred_base)
type_conversion,pack-objects.c,2503,-,+,,10,		return lhs->size_ < rhs;
type_conversion,pack-objects.c,2532,-,+,,6,	if (e->type_ != OBJ_OFS_DELTA && e->type_ != OBJ_REF_DELTA) {
type_conversion,pack-objects.c,2549,-,+,,14,	if (used == 0)
type_conversion,pack-objects.c,2569,-,+,,6,	if (oe_type(trg_entry) != oe_type(src_entry))
type_conversion,pack-objects.c,2583,-,+,,6,	    trg_entry->in_pack_type != OBJ_REF_DELTA &&
type_conversion,pack-objects.c,2584,-,+,,6,	    trg_entry->in_pack_type != OBJ_OFS_DELTA)
type_conversion,pack-objects.c,2594,-,+,,23,		max_size = trg_size/2 - the_hash_algo->rawsz;
type_conversion,pack-objects.c,2595,-,+,,15,		ref_depth = 1;
type_conversion,pack-objects.c,2600,-,+,,34,	max_size = (uint64_t)max_size * (max_depth - src->depth) /
type_conversion,pack-objects.c,2601,-,+,,32,						(max_depth - ref_depth + 1);
type_conversion,pack-objects.c,2602,-,+,,18,	if (max_size == 0)
type_conversion,pack-objects.c,2605,-,+,,57,	sizediff = src_size < trg_size ? trg_size - src_size : 0;
type_conversion,pack-objects.c,2608,-,+,,28,	if (trg_size < src_size / 32)
type_conversion,pack-objects.c,2677,-,+,,20,		    src->depth + 1 >= trg->depth) {
type_conversion,pack-objects.c,2705,-,+,,28,	trg->depth = src->depth + 1;
type_conversion,pack-objects.c,2715,-,+,,55,"		const unsigned int c = check_delta_limit(child, n + 1);"
type_conversion,pack-objects.c,2733,-,+,,13,	n->depth = 0;
type_conversion,pack-objects.c,2740,-,+,,20,"	uint32_t i, idx = 0, count = 0;"
type_conversion,pack-objects.c,2742,-,+,,28,	unsigned long mem_usage = 0;
type_conversion,pack-objects.c,2760,-,+,,37,"			display_progress(progress_state, *processed);"
type_conversion,pack-objects.c,2769,-,+,,18,		       count > 1) {
type_conversion,pack-objects.c,2770,-,+,,33,			const uint32_t tail = (idx + window - count) % window;
type_conversion,pack-objects.c,2788,-,+,,42,"			max_depth -= check_delta_limit(entry, 0);"
type_conversion,pack-objects.c,2796,-,+,,31,			uint32_t other_idx = idx + j;
type_conversion,pack-objects.c,2798,-,+,,21,			if (other_idx >= window)
type_conversion,pack-objects.c,2799,-,+,,18,				other_idx -= window;
type_conversion,pack-objects.c,2803,-,+,,26,"			ret = try_delta(n, m, max_depth, &mem_usage);"
type_conversion,pack-objects.c,2807,-,+,,17,				best_base = other_idx;
type_conversion,pack-objects.c,2829,-,+,,27,				entry->z_delta_size = size;
type_conversion,pack-objects.c,2832,-,+,,25,				delta_cache_size += entry->z_delta_size;
type_conversion,pack-objects.c,2836,-,+,,27,				entry->z_delta_size = 0;
type_conversion,pack-objects.c,2844,-,+,,23,		if (DELTA(entry) && max_depth <= n->depth)
type_conversion,pack-objects.c,2854,-,+,,16,			int dist = (window + idx - best_base) % window;
type_conversion,pack-objects.c,2866,-,+,,15,		if (count + 1 < window)
type_conversion,pack-objects.c,2868,-,+,,14,		if (idx >= window)
type_conversion,pack-objects.c,2869,-,+,,10,			idx = 0;
type_conversion,pack-objects.c,2872,-,+,,18,	for (i = 0; i < window; ++i) {
type_conversion,pack-objects.c,2985,-,+,,35,		unsigned sub_size = list_size / (delta_search_threads - i);
type_conversion,pack-objects.c,2988,-,+,,18,		if (sub_size < 2*window && i+1 < delta_search_threads)
type_conversion,pack-objects.c,2989,-,+,,15,			sub_size = 0;
type_conversion,pack-objects.c,3000,-,+,,48,		       list[sub_size]->hash == list[sub_size-1]->hash)
type_conversion,pack-objects.c,3035,-,+,,23,		unsigned sub_size = 0;
type_conversion,pack-objects.c,3048,-,+,,25,			if (p[i].remaining > 2*window &&
type_conversion,pack-objects.c,3052,-,+,,35,			sub_size = victim->remaining / 2;
type_conversion,pack-objects.c,3066,-,+,,36,				sub_size = victim->remaining / 2;
type_conversion,pack-objects.c,3123,-,+,,7,		if (tag->tagged->type != OBJ_TAG)
type_conversion,pack-objects.c,3165,-,+,,18,	nr_deltas = n = 0;
type_conversion,pack-objects.c,3167,-,+,,11,	for (i = 0; i < to_pack.nr_objects; i++) {
type_conversion,pack-objects.c,3177,-,+,,42,"		    oe_size_less_than(&to_pack, entry, 50))"
type_conversion,pack-objects.c,3185,-,+,,8,			if (oe_type(entry) < 0)
type_conversion,pack-objects.c,3189,-,+,,8,			if (oe_type(entry) < 0) {
type_conversion,pack-objects.c,3201,-,+,,23,	if (nr_deltas && n > 1) {
type_conversion,pack-objects.c,3202,-,+,,22,		unsigned nr_done = 0;
type_conversion,pack-objects.c,3206,-,+,,8,							nr_deltas);
type_conversion,pack-objects.c,3232,-,+,,26,"		max_delta_cache_size = git_config_int(k, v, ctx->kvi);"
type_conversion,pack-objects.c,3236,-,+,,32,"		cache_max_small_delta_size = git_config_int(k, v, ctx->kvi);"
type_conversion,pack-objects.c,3241,-,+,,28,			write_bitmap_options |= BITMAP_OPT_HASH_CACHE;
type_conversion,pack-objects.c,3243,-,+,,28,			write_bitmap_options &= ~BITMAP_OPT_HASH_CACHE;
type_conversion,pack-objects.c,3248,-,+,,28,			write_bitmap_options |= BITMAP_OPT_LOOKUP_TABLE;
type_conversion,pack-objects.c,3250,-,+,,28,			write_bitmap_options &= ~BITMAP_OPT_LOOKUP_TABLE;
type_conversion,pack-objects.c,3285,-,+,,27,"		pack_idx_opts.version = git_config_int(k, v, ctx->kvi);"
type_conversion,pack-objects.c,3286,-,+,,31,		if (pack_idx_opts.version > 2)
type_conversion,pack-objects.c,3312,-,+,,7,		    *oid_end != ' ' ||
type_conversion,pack-objects.c,3314,-,+,,7,		    *pack_end != ' ')
type_conversion,pack-objects.c,3320,-,+,,31,"		ex->pack_hash_hex = xcalloc(1, pack_end - oid_end);"
type_conversion,pack-objects.c,3321,-,+,,63,"		memcpy(ex->pack_hash_hex, oid_end + 1, pack_end - oid_end - 1);"
type_conversion,pack-objects.c,3340,-,+,,35,"	display_progress(progress_state, ++nr_seen);"
type_conversion,pack-objects.c,3357,-,+,,14,		} else if (type == OBJ_COMMIT) {
type_conversion,pack-objects.c,3362,-,+,,37,"			add_pending_oid(revs, NULL, oid, 0);"
type_conversion,pack-objects.c,3368,-,+,,33,"	create_object_entry(oid, type, 0, 0, 0, p, ofs);"
type_conversion,pack-objects.c,3396,-,+,,21,	oe->no_try_delta = name && no_try_delta(name);
type_conversion,pack-objects.c,3438,-,+,,25,	revs.no_kept_objects = 1;
type_conversion,pack-objects.c,3440,-,+,,22,	revs.blob_objects = 1;
type_conversion,pack-objects.c,3441,-,+,,22,	revs.tree_objects = 1;
type_conversion,pack-objects.c,3442,-,+,,21,	revs.tag_objects = 1;
type_conversion,pack-objects.c,3443,-,+,,30,	revs.ignore_missing_links = 1;
type_conversion,pack-objects.c,3449,-,+,,7,		if (*buf.buf == '^')
type_conversion,pack-objects.c,3499,-,+,,26,		p->pack_keep_in_core = 1;
type_conversion,pack-objects.c,3540,-,+,,35,"	display_progress(progress_state, ++nr_seen);"
type_conversion,pack-objects.c,3546,-,+,,26,			entry->no_try_delta = no_try_delta(name);
type_conversion,pack-objects.c,3551,-,+,,16,		if (!pack && type == OBJ_BLOB && !has_loose_object(oid)) {
type_conversion,pack-objects.c,3590,-,+,,53,"	add_cruft_object_entry(&obj->oid, obj->type, NULL, 0, name, cruft_expiration);"
type_conversion,pack-objects.c,3613,-,+,,11,			       mtime);
type_conversion,pack-objects.c,3633,-,+,,67,"		progress_state = start_progress(_(""Enumerating cruft objects""), 0);"
type_conversion,pack-objects.c,3649,-,+,,21,	revs.tag_objects = 1;
type_conversion,pack-objects.c,3650,-,+,,22,	revs.tree_objects = 1;
type_conversion,pack-objects.c,3651,-,+,,22,	revs.blob_objects = 1;
type_conversion,pack-objects.c,3656,-,+,,30,	revs.ignore_missing_links = 1;
type_conversion,pack-objects.c,3659,-,+,,67,"		progress_state = start_progress(_(""Enumerating cruft objects""), 0);"
type_conversion,pack-objects.c,3672,-,+,,26,		p->pack_keep_in_core = 0;
type_conversion,pack-objects.c,3673,-,+,,38,"	mark_pack_kept_in_core(fresh_packs, 1);"
type_conversion,pack-objects.c,3678,-,+,,66,"		progress_state = start_progress(_(""Traversing cruft objects""), 0);"
type_conversion,pack-objects.c,3679,-,+,,12,	nr_seen = 0;
type_conversion,pack-objects.c,3698,-,+,,7,		if (*buf.buf == '-')
type_conversion,pack-objects.c,3727,-,+,,27,			p->pack_keep_in_core = 1;
type_conversion,pack-objects.c,3731,-,+,,39,"	mark_pack_kept_in_core(&fresh_packs, 1);"
type_conversion,pack-objects.c,3732,-,+,,41,"	mark_pack_kept_in_core(&discard_packs, 0);"
type_conversion,pack-objects.c,3751,-,+,,20,"		if (!fgets(line, sizeof(line), stdin)) {"
type_conversion,pack-objects.c,3761,-,+,,7,		if (line[0] == '-') {
type_conversion,pack-objects.c,3799,-,+,,11,		depth = *name ? 1 : 0;
type_conversion,pack-objects.c,3817,-,+,,45,"	if (!has_object(the_repository, &obj->oid, 0))"
type_conversion,pack-objects.c,3831,-,+,,45,"	if (!has_object(the_repository, &obj->oid, 0) && is_promisor_object(&obj->oid))"
type_conversion,pack-objects.c,3884,-,+,,12,"			mtime = nth_packed_mtime(pack, pos);"
type_conversion,pack-objects.c,3891,-,+,,18,"				       NULL, mtime);"
type_conversion,pack-objects.c,3901,-,+,,8,				   FOR_EACH_OBJECT_PACK_ORDER |
type_conversion,pack-objects.c,3902,-,+,,8,				   FOR_EACH_OBJECT_LOCAL_ONLY |
type_conversion,pack-objects.c,3903,-,+,,8,				   FOR_EACH_OBJECT_SKIP_IN_CORE_KEPT_PACKS |
type_conversion,pack-objects.c,3904,-,+,,8,				   FOR_EACH_OBJECT_SKIP_ON_DISK_KEPT_PACKS))
type_conversion,pack-objects.c,3913,-,+,,6,	if (type < 0) {
type_conversion,pack-objects.c,3926,-,+,,43,"		add_cruft_object_entry(oid, type, NULL, 0, NULL,"
type_conversion,pack-objects.c,3996,-,+,,33,	uint32_t loosened_objects_nr = 0;
type_conversion,pack-objects.c,4006,-,+,,12,		for (i = 0; i < p->num_objects; i++) {
type_conversion,pack-objects.c,4010,-,+,,48,"			    !loosened_object_can_be_discarded(&oid, p->mtime)) {"
type_conversion,pack-objects.c,4029,-,+,,9,	return allow_pack_reuse != NO_PACK_REUSE &&
type_conversion,pack-objects.c,4047,-,+,,10,						   allow_pack_reuse == MULTI_PACK_REUSE);
type_conversion,pack-objects.c,4050,-,+,,28,		reuse_packfile_objects = bitmap_popcount(reuse_packfile_bitmap);
type_conversion,pack-objects.c,4056,-,+,,36,"		display_progress(progress_state, nr_seen);"
type_conversion,pack-objects.c,4088,-,+,,6,	if (object->type == OBJ_COMMIT)
type_conversion,pack-objects.c,4113,-,+,,37,"		.allow_exclude_promisor_objects = 1,"
type_conversion,pack-objects.c,4128,-,+,,21,"	while (fgets(line, sizeof(line), stdin) != NULL) {"
type_conversion,pack-objects.c,4129,-,+,,13,		int len = strlen(line);
type_conversion,pack-objects.c,4130,-,+,,14,		if (len && line[len - 1] == '\n')
type_conversion,pack-objects.c,4131,-,+,,18,			line[--len] = 0;
type_conversion,pack-objects.c,4134,-,+,,7,		if (*line == '-') {
type_conversion,pack-objects.c,4176,-,+,,32,		revs->ignore_missing_links = 1;
type_conversion,pack-objects.c,4210,-,+,,15,		for (i = 0; i < names->nr; i++)
type_conversion,pack-objects.c,4214,-,+,,7,		if (i < names->nr) {
type_conversion,pack-objects.c,4215,-,+,,27,			p->pack_keep_in_core = 1;
type_conversion,pack-objects.c,4245,-,+,,19,"	popts->version = strtoul(val, &c, 10);"
type_conversion,pack-objects.c,4246,-,+,,23,	if (popts->version > 2)
type_conversion,pack-objects.c,4248,-,+,,6,"	if (*c == ',' && c[1])"
type_conversion,pack-objects.c,4249,-,+,,24,"		popts->off32_limit = strtoul(c+1, &c, 0);"
type_conversion,pack-objects.c,4260,-,+,,35,		unpack_unreachable_expiration = 0;
type_conversion,pack-objects.c,4275,-,+,,22,		cruft_expiration = 0;
type_conversion,pack-objects.c,4401,-,+,,6,	if (DFS_NUM_STATES > (1 << OE_DFS_STATE_BITS))
type_conversion,pack-objects.c,4441,-,+,,30,			(1U << OE_Z_DELTA_BITS) - 1);
type_conversion,pack-objects.c,4442,-,+,,58,		cache_max_small_delta_size = (1U << OE_Z_DELTA_BITS) - 1;
type_conversion,pack-objects.c,4497,-,+,,43,	if (pack_size_limit && pack_size_limit < 1024*1024) {
type_conversion,pack-objects.c,4499,-,+,,21,		pack_size_limit = 1024*1024;
type_conversion,pack-objects.c,4508,-,+,,35,		unpack_unreachable_expiration = 0;
type_conversion,pack-objects.c,4580,-,+,,61,"		progress_state = start_progress(_(""Enumerating objects""), 0);"
type_conversion,pack-objects.c,4596,-,+,,26,"		get_object_list(&revs, rp.nr, rp.v);"
type_conversion,pack-objects.h,192,-,+,,21,"	uint32_t c, hash = 0;"
type_conversion,pack-objects.h,195,-,+,,10,		return 0;
type_conversion,pack-objects.h,202,-,+,,14,	while ((c = *name++) != 0) {
type_conversion,pack-objects.h,212,-,+,,25,	return e->type_valid ? e->type_ : OBJ_BAD;
type_conversion,pack-objects.h,218,-,+,,6,	if (type >= OBJ_ANY)
type_conversion,pack-objects.h,221,-,+,,18,	e->type_valid = type >= OBJ_NONE;
type_conversion,pack-objects.h,255,-,+,,21,			e->in_pack_idx = p->index;
type_conversion,pack-objects.h,278,-,+,,10,		return 0;
type_conversion,pack-objects.h,295,-,+,,10,		return 0;
type_conversion,pack-redundant.c,68,-,+,,18,	(*list)->size = 0;
type_conversion,pack-redundant.c,78,-,+,,34,	if ((ret->size = list->size) == 0)
type_conversion,pack-redundant.c,112,-,+,,21,		if (list->size == 0)
type_conversion,pack-redundant.c,210,-,+,,15,	size_t ret = 0;
type_conversion,pack-redundant.c,241,-,+,,18,"	size_t p1_off = 0, p2_off = 0, p1_step, p2_step;"
type_conversion,pack-redundant.c,255,-,+,,21,	p1_step = hashsz + ((p1->pack->index_version < 2) ? 4 : 0);
type_conversion,pack-redundant.c,256,-,+,,21,	p2_step = hashsz + ((p2->pack->index_version < 2) ? 4 : 0);
type_conversion,pack-redundant.c,258,-,+,,18,	while (p1_off < p1->pack->num_objects * p1_step &&
type_conversion,pack-redundant.c,259,-,+,,18,	       p2_off < p2->pack->num_objects * p2_step)
type_conversion,pack-redundant.c,284,-,+,,15,	size_t ret = 0;
type_conversion,pack-redundant.c,285,-,+,,18,"	size_t p1_off = 0, p2_off = 0, p1_step, p2_step;"
type_conversion,pack-redundant.c,293,-,+,,21,	p1_step = hashsz + ((p1->index_version < 2) ? 4 : 0);
type_conversion,pack-redundant.c,294,-,+,,21,	p2_step = hashsz + ((p2->index_version < 2) ? 4 : 0);
type_conversion,pack-redundant.c,296,-,+,,18,	while (p1_off < p1->num_objects * p1_step &&
type_conversion,pack-redundant.c,297,-,+,,18,	       p2_off < p2->num_objects * p2_step)
type_conversion,pack-redundant.c,320,-,+,,15,	size_t ret = 0;
type_conversion,pack-redundant.c,323,-,+,,10,		return 0;
type_conversion,pack-redundant.c,337,-,+,,14,	off_t ret = 0;
type_conversion,pack-redundant.c,374,-,+,,10,	if (n < 2)
type_conversion,pack-redundant.c,379,-,+,,11,"	for (n = 0, p = *pl; p; p = p->next)"
type_conversion,pack-redundant.c,385,-,+,,14,	for (i = 0; i < n - 1; i++)
type_conversion,pack-redundant.c,387,-,+,,10,	ary[n - 1]->next = NULL;
type_conversion,pack-redundant.c,418,-,+,,23,	if (missing->size == 0) {
type_conversion,pack-redundant.c,436,-,+,,46,		if (non_unique->remaining_objects->size == 0)
type_conversion,pack-redundant.c,441,-,+,,67,		for (pl = non_unique->next; pl && pl->remaining_objects->size > 0;  pl = pl->next)
type_conversion,pack-redundant.c,510,-,+,,15,"	size_t off = 0, step;"
type_conversion,pack-redundant.c,524,-,+,,32,	step = the_hash_algo->rawsz + ((p->index_version < 2) ? 4 : 0);
type_conversion,pack-redundant.c,525,-,+,,15,	while (off < p->num_objects * step) {
type_conversion,pack-redundant.c,541,-,+,,25,	if (strlen(filename) < 40)
type_conversion,pack-redundant.c,596,-,+,,7,		if (*arg == '-')
type_conversion,pack-redundant.c,628,-,+,,21,"		while (fgets(buf, sizeof(buf), stdin)) {"
type_conversion,pack-redundant.c,658,-,+,,43,			(unsigned long)pack_set_bytecount(min)/1024);
type_conversion,pack-redundant.c,672,-,+,,43,			(unsigned long)pack_set_bytecount(red)/(1024*1024));
type_conversion,pack-revindex.c,88,-,+,,12,		for (i = 0; i < n; i++)
type_conversion,pack-revindex.c,90,-,+,,12,		for (i = 1; i < BUCKETS; i++)
type_conversion,pack-revindex.c,91,-,+,,20,			pos[i] += pos[i-1];
type_conversion,pack-revindex.c,106,-,+,,16,		for (i = n - 1; i != UINT_MAX; i--)
type_conversion,pack-revindex.c,145,-,+,,64,			(uint32_t *)(index + 8 + (size_t)p->num_objects * (hashsz + 4));
type_conversion,pack-revindex.c,147,-,+,,12,		for (i = 0; i < num_ent; i++) {
type_conversion,pack-revindex.c,150,-,+,,29,				p->revindex[i].offset = off;
type_conversion,pack-revindex.c,152,-,+,,29,				p->revindex[i].offset = get_be64(off_64);
type_conversion,pack-revindex.c,158,-,+,,12,		for (i = 0; i < num_ent; i++) {
type_conversion,pack-revindex.c,159,-,+,,57,			const uint32_t hl = *((uint32_t *)(index + (hashsz + 4) * i));
type_conversion,pack-revindex.c,169,-,+,,47,	p->revindex[num_ent].offset = p->pack_size - hashsz;
type_conversion,pack-revindex.c,170,-,+,,28,	p->revindex[num_ent].nr = -1;
type_conversion,pack-revindex.c,234,-,+,,65,"	if (revindex_size - RIDX_MIN_SIZE != st_mult(sizeof(uint32_t), num_objects)) {"
type_conversion,pack-revindex.c,239,-,+,,64,"	data = xmmap(NULL, revindex_size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,pack-revindex.c,246,-,+,,29,	if (ntohl(hdr->version) != 1) {
type_conversion,pack-revindex.c,251,-,+,,31,	if (!(ntohl(hdr->hash_id) == 1 || ntohl(hdr->hash_id) == 2)) {
type_conversion,pack-revindex.c,332,-,+,,18,	for (size_t i = 0; i < p->num_objects; i++) {
type_conversion,pack-revindex.c,350,-,+,,57,"	if (m->chunk_revindex_len != st_mult(sizeof(uint32_t), m->num_objects)) {"
type_conversion,pack-revindex.c,409,-,+,,20,	m->revindex_len = 0;
type_conversion,pack-revindex.c,421,-,+,,7,	lo = 0;
type_conversion,pack-revindex.c,422,-,+,,24,	hi = p->num_objects + 1;
type_conversion,pack-revindex.c,425,-,+,,40,		const unsigned mi = lo + (hi - lo) / 2;
type_conversion,pack-revindex.c,434,-,+,,14,			lo = mi + 1;
type_conversion,pack-revindex.c,464,-,+,,10,		return p->pack_size - the_hash_algo->rawsz;
type_conversion,pack-revindex.c,491,-,+,,43,"	uint32_t versus = pack_pos_to_midx(midx, (uint32_t*)vb - (const uint32_t *)midx->revindex_data);"
type_conversion,pack-revindex.c,495,-,+,,27,	uint32_t key_preferred = key->pack == key->preferred_pack;
type_conversion,pack-revindex.c,496,-,+,,30,	uint32_t versus_preferred = versus_pack == key->preferred_pack;
type_conversion,pack-revindex.c,541,-,+,,41,"	found = bsearch(key, m->revindex_data, m->num_objects,"
type_conversion,pack-revindex.c,548,-,+,,9,	*pos = found - m->revindex_data;
type_conversion,pack-write.c,18,-,+,,18,	opts->version = 2;
type_conversion,pack-write.c,19,-,+,,22,	opts->off32_limit = 0x7fffffff;
type_conversion,pack-write.c,41,-,+,,25,	if ((offset >> 31) || (opts->off32_limit < offset))
type_conversion,pack-write.c,45,-,+,,11,	ofsval = offset;
type_conversion,pack-write.c,46,-,+,,43,"	return !!bsearch(&ofsval, opts->anomaly, opts->anomaly_nr,"
type_conversion,pack-write.c,60,-,+,,26,	off_t last_obj_offset = 0;
type_conversion,pack-write.c,93,-,+,,61,"	index_version = need_large_offset(last_obj_offset, opts) ? 2 : opts->version;"
type_conversion,pack-write.c,96,-,+,,23,	if (index_version >= 2) {
type_conversion,pack-write.c,100,-,+,,22,"		hashwrite(f, &hdr, sizeof(hdr));"
type_conversion,pack-write.c,112,-,+,,8,			if (obj->oid.hash[0] != i)
type_conversion,pack-write.c,116,-,+,,21,"		hashwrite_be32(f, next - sorted_by_sha);"
type_conversion,pack-write.c,126,-,+,,23,		if (index_version < 2)
type_conversion,pack-write.c,127,-,+,,22,"			hashwrite_be32(f, obj->offset);"
type_conversion,pack-write.c,135,-,+,,23,	if (index_version >= 2) {
type_conversion,pack-write.c,136,-,+,,34,		unsigned int nr_large_offset = 0;
type_conversion,pack-write.c,151,-,+,,13,"			offset = (need_large_offset(obj->offset, opts)
				  ? (0x80000000 | nr_large_offset++)
				  : obj->offset);"
type_conversion,pack-write.c,152,-,+,,9,				  ? (0x80000000 | nr_large_offset++)
type_conversion,pack-write.c,161,-,+,,22,			uint64_t offset = obj->offset;
type_conversion,pack-write.c,163,-,+,,27,"			if (!need_large_offset(offset, opts))"
type_conversion,pack-write.c,203,-,+,,11,	for (i = 0; i < nr_objects; i++)
type_conversion,pack-write.c,226,-,+,,11,	for (i = 0; i < nr_objects; i++)
type_conversion,pack-write.c,306,-,+,,11,	for (i = 0; i < nr_objects; i++) {
type_conversion,pack-write.c,354,-,+,,21,"	hashwrite(f, &hdr, sizeof(hdr));"
type_conversion,pack-write.c,355,-,+,,9,	return sizeof(hdr);
type_conversion,pack-write.c,390,-,+,,21,"	if (lseek(pack_fd, 0, SEEK_SET) != 0)"
type_conversion,pack-write.c,393,-,+,,20,	if (read_result < 0)
type_conversion,pack-write.c,395,-,+,,11,	else if (read_result != sizeof(hdr))
type_conversion,pack-write.c,398,-,+,,21,"	if (lseek(pack_fd, 0, SEEK_SET) != 0)"
type_conversion,pack-write.c,406,-,+,,16,	buf = xmalloc(buf_sz);
type_conversion,pack-write.c,407,-,+,,15,	aligned_sz = buf_sz - sizeof(hdr);
type_conversion,pack-write.c,410,-,+,,51,		m = (partial_pack_hash && partial_pack_offset < aligned_sz) ?
type_conversion,pack-write.c,411,-,+,,26,			partial_pack_offset : aligned_sz;
type_conversion,pack-write.c,412,-,+,,27,"		n = xread(pack_fd, buf, m);"
type_conversion,pack-write.c,415,-,+,,11,		if (n < 0)
type_conversion,pack-write.c,417,-,+,,48,"		the_hash_algo->update_fn(&new_hash_ctx, buf, n);"
type_conversion,pack-write.c,426,-,+,,48,"		the_hash_algo->update_fn(&old_hash_ctx, buf, n);"
type_conversion,pack-write.c,428,-,+,,30,		if (partial_pack_offset == 0) {
type_conversion,pack-write.c,456,-,+,,41,	const int len = the_hash_algo->hexsz + 6;
type_conversion,pack-write.c,465,-,+,,37,"	if (read_in_full(ip_out, packname, len) == len && packname[len-1] == '\n') {"
type_conversion,pack-write.c,470,-,+,,21,		packname[len-1] = 0;
type_conversion,pack-write.c,494,-,+,,6,	if (type < OBJ_COMMIT || type > OBJ_REF_DELTA)
type_conversion,pack-write.c,497,-,+,,6,	c = (type << 4) | (size & 15);
type_conversion,pack-write.c,502,-,+,,12,		*hdr++ = c | 0x80;
type_conversion,pack-write.c,503,-,+,,14,		c = size & 0x7f;
type_conversion,pack-write.c,554,-,+,,61,"	*idx_tmp_name = (char *)write_idx_file(NULL, written_list, nr_written,"
type_conversion,packed-backend.c,177,-,+,,29,"		if (munmap(snapshot->buf, snapshot->eof - snapshot->buf))"
type_conversion,packed-backend.c,207,-,+,,42,"	struct packed_ref_store *refs = xcalloc(1, sizeof(*refs));"
type_conversion,packed-backend.c,258,-,+,,12,	if (len < 80)
type_conversion,packed-backend.c,271,-,+,,21,	else if (eol - p < 80)
type_conversion,packed-backend.c,290,-,+,,7,		if (*r1 == '\n')
type_conversion,packed-backend.c,291,-,+,,11,			return *r2 == '\n' ? 0 : -1;
type_conversion,packed-backend.c,292,-,+,,7,		if (*r1 != *r2) {
type_conversion,packed-backend.c,293,-,+,,8,			if (*r2 == '\n')
type_conversion,packed-backend.c,296,-,+,,12,				return (unsigned char)*r1 < (unsigned char)*r2 ? -1 : +1;
type_conversion,packed-backend.c,314,-,+,,7,		if (*r1 == '\n')
type_conversion,packed-backend.c,318,-,+,,7,		if (*r1 != *r2)
type_conversion,packed-backend.c,319,-,+,,11,			return (unsigned char)*r1 < (unsigned char)*r2 ? -1 : +1;
type_conversion,packed-backend.c,332,-,+,,17,"	size_t alloc = 0, nr = 0;"
type_conversion,packed-backend.c,344,-,+,,8,	len = eof - pos;
type_conversion,packed-backend.c,353,-,+,,27,"		eol = memchr(pos, '\n', eof - pos);"
type_conversion,packed-backend.c,357,-,+,,7,		if (eol - pos < the_hash_algo->hexsz + 2)
type_conversion,packed-backend.c,359,-,+,,12,"					 pos, eof - pos);"
type_conversion,packed-backend.c,361,-,+,,20,		if (eol < eof && *eol == '^') {
type_conversion,packed-backend.c,368,-,+,,37,"			eol = memchr(peeled_start, '\n', eof - peeled_start);"
type_conversion,packed-backend.c,377,-,+,,21,		records[nr].len = eol - pos;
type_conversion,packed-backend.c,381,-,+,,12,		    nr > 1 &&
type_conversion,packed-backend.c,382,-,+,,44,"		    cmp_packed_ref_records(&records[nr - 2],"
type_conversion,packed-backend.c,383,-,+,,23,					   &records[nr - 1]) >= 0)
type_conversion,packed-backend.c,401,-,+,,29,"	for (dst = new_buffer, i = 0; i < nr; i++) {"
type_conversion,packed-backend.c,425,-,+,,21,	while (p > buf && (p[-1] != '\n' || p[0] == '^'))
type_conversion,packed-backend.c,436,-,+,,23,	while (++p < end && (p[-1] != '\n' || p[0] == '^'))
type_conversion,packed-backend.c,469,-,+,,6,	if (*(eof - 1) != '\n' || eof - last_line < the_hash_algo->hexsz + 2)
type_conversion,packed-backend.c,471,-,+,,17,"				 last_line, eof - last_line);"
type_conversion,packed-backend.c,514,-,+,,13,	} else if (mmap_strategy == MMAP_NONE || size <= SMALL_FILE_SIZE) {
type_conversion,packed-backend.c,517,-,+,,20,		if (bytes_read < 0 || bytes_read != size)
type_conversion,packed-backend.c,521,-,+,,65,"		snapshot->buf = xmmap(NULL, size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,packed-backend.c,562,-,+,,26,		mid = lo + (hi - lo) / 2;
type_conversion,packed-backend.c,650,-,+,,38,"	struct snapshot *snapshot = xcalloc(1, sizeof(*snapshot));"
type_conversion,packed-backend.c,661,-,+,,39,	if (snapshot->buf < snapshot->eof && *snapshot->buf == '#') {
type_conversion,packed-backend.c,666,-,+,,9,			     snapshot->eof - snapshot->buf);
type_conversion,packed-backend.c,670,-,+,,12,					      snapshot->eof - snapshot->buf);
type_conversion,packed-backend.c,672,-,+,,33,"		tmp = xmemdupz(snapshot->buf, eol - snapshot->buf);"
type_conversion,packed-backend.c,677,-,+,,7,					 snapshot->eof - snapshot->buf);
type_conversion,packed-backend.c,710,-,+,,6,	if (mmap_strategy != MMAP_OK && snapshot->mmapped) {
type_conversion,packed-backend.c,715,-,+,,17,		size_t size = snapshot->eof - snapshot->start;
type_conversion,packed-backend.c,767,-,+,,10,	*type = 0;
type_conversion,packed-backend.c,778,-,+,,37,"		die_invalid_line(refs->path, rec, snapshot->eof - rec);"
type_conversion,packed-backend.c,849,-,+,,60,"			trace2_counter_add(TRACE2_COUNTER_ID_PACKED_REFS_JUMPS, 1);"
type_conversion,packed-backend.c,861,-,+,,6,	if (iter->eof - p < the_hash_algo->hexsz + 2 ||
type_conversion,packed-backend.c,865,-,+,,17,"				 iter->pos, iter->eof - iter->pos);"
type_conversion,packed-backend.c,867,-,+,,24,"	eol = memchr(p, '\n', iter->eof - p);"
type_conversion,packed-backend.c,870,-,+,,22,"				      iter->pos, iter->eof - iter->pos);"
type_conversion,packed-backend.c,872,-,+,,36,"	strbuf_add(&iter->refname_buf, p, eol - p);"
type_conversion,packed-backend.c,882,-,+,,6,	if (iter->snapshot->peeled == PEELED_FULLY ||
type_conversion,packed-backend.c,883,-,+,,7,	    (iter->snapshot->peeled == PEELED_TAGS &&
type_conversion,packed-backend.c,889,-,+,,31,	if (iter->pos < iter->eof && *iter->pos == '^') {
type_conversion,packed-backend.c,891,-,+,,7,		if (iter->eof - p < the_hash_algo->hexsz + 1 ||
type_conversion,packed-backend.c,893,-,+,,7,		    *p++ != '\n')
type_conversion,packed-backend.c,895,-,+,,18,"					 iter->pos, iter->eof - iter->pos);"
type_conversion,packed-backend.c,923,-,+,,21,		if (iter->flags & DO_FOR_EACH_PER_WORKTREE_ONLY &&
type_conversion,packed-backend.c,927,-,+,,23,		if (!(iter->flags & DO_FOR_EACH_INCLUDE_BROKEN) &&
type_conversion,packed-backend.c,1064,-,+,,11,"	for (i = 1, j = 1; i < iter->jump_nr; i++) {"
type_conversion,packed-backend.c,1078,-,+,,19,	iter->jump_cur = 0;
type_conversion,packed-backend.c,1093,-,+,,16,	if (!(flags & DO_FOR_EACH_INCLUDE_BROKEN))
type_conversion,packed-backend.c,1124,-,+,,34,"	strbuf_init(&iter->refname_buf, 0);"
type_conversion,packed-backend.c,1176,-,+,,15,"			    flags, timeout_value) < 0) {"
type_conversion,packed-backend.c,1314,-,+,,7,					 DO_FOR_EACH_INCLUDE_BROKEN);
type_conversion,packed-backend.c,1318,-,+,,6,	i = 0;
type_conversion,packed-backend.c,1415,-,+,,21,"			int peel_error = peel_object(&update->new_oid,
						     &peeled);"
type_conversion,packed-backend.c,1504,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,packed-backend.c,1524,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,packed-backend.c,1613,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,packfile.c,66,-,+,,10,"		sz_fmt(getpagesize()),"
type_conversion,packfile.c,101,-,+,,17,	if (idx_size < 4 * 256 + hashsz + hashsz) {
type_conversion,packfile.c,105,-,+,,62,"	idx_map = xmmap(NULL, idx_size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,packfile.c,122,-,+,,17,	if (idx_size < 4 * 256 + hashsz + hashsz)
type_conversion,packfile.c,129,-,+,,17,		if (version < 2 || version > 2)
type_conversion,packfile.c,135,-,+,,13,		version = 1;
type_conversion,packfile.c,137,-,+,,7,	nr = 0;
type_conversion,packfile.c,139,-,+,,16,	if (version > 1)
type_conversion,packfile.c,141,-,+,,18,	for (i = 0; i < 256; i++) {
type_conversion,packfile.c,148,-,+,,17,	if (version == 1) {
type_conversion,packfile.c,156,-,+,,26,"		if (idx_size != st_add(4 * 256 + hashsz + hashsz, st_mult(nr, hashsz + 4)))"
type_conversion,packfile.c,158,-,+,,24,	} else if (version == 2) {
type_conversion,packfile.c,172,-,+,,28,"		size_t min_size = st_add(8 + 4*256 + hashsz + hashsz, st_mult(nr, hashsz + 4 + 4));"
type_conversion,packfile.c,175,-,+,,45,"			max_size = st_add(max_size, st_mult(nr - 1, 8));"
type_conversion,packfile.c,184,-,+,,25,		    (sizeof(off_t) <= 4))
type_conversion,packfile.c,186,-,+,,26,"		p->crc_offset = st_add(8 + 4 * 256, st_mult(nr, hashsz));"
type_conversion,packfile.c,189,-,+,,21,	p->index_version = version;
type_conversion,packfile.c,219,-,+,,11,			return 0;
type_conversion,packfile.c,232,-,+,,52,"	struct packed_git *p = xmalloc(st_add(sizeof(*p), extra));"
type_conversion,packfile.c,241,-,+,,38,"	size_t alloc = st_add(strlen(path), 1);"
type_conversion,packfile.c,242,-,+,,42,	struct packed_git *p = alloc_packed_git(alloc);
type_conversion,packfile.c,398,-,+,,14,	for (i = 0; i < ARRAY_SIZE(exts); i++) {
type_conversion,packfile.c,487,-,+,,11,			return lim.rlim_cur;
type_conversion,packfile.c,494,-,+,,7,		if (0 < open_max)
type_conversion,packfile.c,495,-,+,,11,			return open_max;
type_conversion,packfile.c,517,-,+,,9,	return 1; /* see the caller ;-) */
type_conversion,packfile.c,551,-,+,,7,		if (25 < max_fds)
type_conversion,packfile.c,552,-,+,,29,			pack_max_fds = max_fds - 25;
type_conversion,packfile.c,554,-,+,,19,			pack_max_fds = 1;
type_conversion,packfile.c,575,-,+,,20,	if (read_result < 0)
type_conversion,packfile.c,577,-,+,,6,	if (read_result != sizeof(hdr))
type_conversion,packfile.c,592,-,+,,48,"	read_result = pread_in_full(p->pack_fd, hash, hashsz,"
type_conversion,packfile.c,593,-,+,,21,					p->pack_size - hashsz);
type_conversion,packfile.c,594,-,+,,20,	if (read_result < 0)
type_conversion,packfile.c,596,-,+,,21,	if (read_result != hashsz)
type_conversion,packfile.c,598,-,+,,73,	idx_hash = ((unsigned char *)p->index_data) + p->index_size - hashsz * 2;
type_conversion,packfile.c,622,-,+,,7,		&& (offset + the_hash_algo->rawsz) <= (win_off + win->len);
type_conversion,packfile.c,639,-,+,,6,	if (offset > (p->pack_size - the_hash_algo->rawsz))
type_conversion,packfile.c,641,-,+,,15,	if (offset < 0)
type_conversion,packfile.c,652,-,+,,51,			size_t window_align = packed_git_window_size / 2;
type_conversion,packfile.c,659,-,+,,19,			win->offset = (offset / window_align) * window_align;
type_conversion,packfile.c,661,-,+,,8,			if (len > packed_git_window_size)
type_conversion,packfile.c,662,-,+,,11,				len = packed_git_window_size;
type_conversion,packfile.c,674,-,+,,36,			if (!win->offset && win->len == p->pack_size
type_conversion,packfile.c,725,-,+,,23,	p = alloc_packed_git(alloc);
type_conversion,packfile.c,730,-,+,,18,		p->pack_keep = 1;
type_conversion,packfile.c,734,-,+,,22,		p->pack_promisor = 1;
type_conversion,packfile.c,738,-,+,,17,		p->is_cruft = 1;
type_conversion,packfile.c,750,-,+,,18,	p->pack_local = local;
type_conversion,packfile.c,779,-,+,,18,"		report_garbage(seen_bits, list->items[first].string);"
type_conversion,packfile.c,791,-,+,,14,	for (i = 0; i < list->nr; i++) {
type_conversion,packfile.c,794,-,+,,48,"		    strncmp(path, list->items[first].string, baselen)) {"
type_conversion,packfile.c,805,-,+,,27,			baselen = dot - path + 1;
type_conversion,packfile.c,813,-,+,,40,"	report_helper(list, seen_bits, first, list->nr);"
type_conversion,packfile.c,935,-,+,,11,		count = 0;
type_conversion,packfile.c,937,-,+,,13,			count += m->num_objects;
type_conversion,packfile.c,941,-,+,,13,			count += p->num_objects;
type_conversion,packfile.c,944,-,+,,48,		r->objects->approximate_object_count_valid = 1;
type_conversion,packfile.c,961,-,+,,7,	st = a->pack_local - b->pack_local;
type_conversion,packfile.c,1008,-,+,,39,	r->objects->packed_git_initialized = 1;
type_conversion,packfile.c,1029,-,+,,47,	r->objects->approximate_object_count_valid = 0;
type_conversion,packfile.c,1030,-,+,,39,	r->objects->packed_git_initialized = 0;
type_conversion,packfile.c,1065,-,+,,12,		for (i = 0; i < m->num_packs; i++)
type_conversion,packfile.c,1083,-,+,,23,	unsigned long used = 0;
type_conversion,packfile.c,1085,-,+,,6,	c = buf[used++];
type_conversion,packfile.c,1086,-,+,,21,	*type = (c >> 4) & 7;
type_conversion,packfile.c,1087,-,+,,13,	size = c & 15;
type_conversion,packfile.c,1088,-,+,,10,	shift = 4;
type_conversion,packfile.c,1089,-,+,,13,	while (c & 0x80) {
type_conversion,packfile.c,1090,-,+,,41,		if (len <= used || (bitsizeof(long) - 7) < shift) {
type_conversion,packfile.c,1092,-,+,,18,			size = used = 0;
type_conversion,packfile.c,1095,-,+,,7,		c = buf[used++];
type_conversion,packfile.c,1096,-,+,,41,"		size = st_add(size, st_left_shift(c & 0x7f, shift));"
type_conversion,packfile.c,1097,-,+,,12,		shift += 7;
type_conversion,packfile.c,1143,-,+,,10,		return 0;
type_conversion,packfile.c,1181,-,+,,9,	return type;
type_conversion,packfile.c,1215,-,+,,6,	if (type == OBJ_OFS_DELTA) {
type_conversion,packfile.c,1216,-,+,,19,		unsigned used = 0;
type_conversion,packfile.c,1218,-,+,,17,		base_offset = c & 127;
type_conversion,packfile.c,1219,-,+,,10,		while (c & 128) {
type_conversion,packfile.c,1220,-,+,,19,			base_offset += 1;
type_conversion,packfile.c,1222,-,+,,12,				return 0;  /* overflow */
type_conversion,packfile.c,1224,-,+,,40,			base_offset = (base_offset << 7) + (c & 127);
type_conversion,packfile.c,1227,-,+,,22,		if (base_offset <= 0 || base_offset >= delta_obj_offset)
type_conversion,packfile.c,1228,-,+,,11,			return 0;  /* out of bound */
type_conversion,packfile.c,1229,-,+,,14,		*curpos += used;
type_conversion,packfile.c,1230,-,+,,13,	} else if (type == OBJ_REF_DELTA) {
type_conversion,packfile.c,1252,-,+,,6,	if (type == OBJ_REF_DELTA) {
type_conversion,packfile.c,1256,-,+,,13,	} else if (type == OBJ_OFS_DELTA) {
type_conversion,packfile.c,1281,-,+,,10,		return OBJ_BAD;
type_conversion,packfile.c,1285,-,+,,14,	if (type <= OBJ_NONE)
type_conversion,packfile.c,1286,-,+,,10,		return OBJ_BAD;
type_conversion,packfile.c,1303,-,+,,9,	while (type == OBJ_OFS_DELTA || type == OBJ_REF_DELTA) {
type_conversion,packfile.c,1321,-,+,,7,		if (type <= OBJ_NONE) {
type_conversion,packfile.c,1325,-,+,,8,			if (type > OBJ_NONE)
type_conversion,packfile.c,1353,-,+,,7,		if (type > OBJ_NONE)
type_conversion,packfile.c,1513,-,+,,68,"		hashmap_init(&delta_base_cache, delta_base_cache_hash_cmp, NULL, 0);"
type_conversion,packfile.c,1540,-,+,,7,		if (type == OBJ_OFS_DELTA || type == OBJ_REF_DELTA) {
type_conversion,packfile.c,1549,-,+,,22,			if (*oi->sizep == 0) {
type_conversion,packfile.c,1567,-,+,,49,"		*oi->disk_sizep = pack_pos_to_offset(p, pos + 1) - obj_offset;"
type_conversion,packfile.c,1577,-,+,,31,			const char *tn = type_name(ptot);
type_conversion,packfile.c,1581,-,+,,7,		if (ptot < 0) {
type_conversion,packfile.c,1588,-,+,,7,		if (type == OBJ_OFS_DELTA || type == OBJ_REF_DELTA) {
type_conversion,packfile.c,1604,-,+,,9,	return type;
type_conversion,packfile.c,1621,-,+,,28,	stream.avail_out = size + 1;
type_conversion,packfile.c,1647,-,+,,17,	buffer[size] = '\0';
type_conversion,packfile.c,1710,-,+,,43,"			len = pack_pos_to_offset(p, pack_pos + 1) - obj_offset;"
type_conversion,packfile.c,1724,-,+,,7,		if (type != OBJ_OFS_DELTA && type != OBJ_REF_DELTA)
type_conversion,packfile.c,1813,-,+,,53,"				if (oid_object_info_extended(r, &base_oid, &oi, 0) < 0)"
type_conversion,packfile.c,1893,-,+,,33,		index_lookup_width = hashsz + 4;
type_conversion,packfile.c,1896,-,+,,24,		index_lookup_width = hashsz;
type_conversion,packfile.c,1902,-,+,,22,"			    index_lookup, index_lookup_width, result);"
type_conversion,packfile.c,1920,-,+,,48,"		oidread(oid, index + st_add(st_mult(hashsz + 4, n), 4));"
type_conversion,packfile.c,1923,-,+,,32,"		oidread(oid, index + st_mult(hashsz, n));"
type_conversion,packfile.c,1951,-,+,,19,"		index += st_add(8, st_mult(p->num_objects, hashsz + 4));"
type_conversion,packfile.c,1954,-,+,,11,			return off;
type_conversion,packfile.c,1955,-,+,,27,"		index += st_add(st_mult(p->num_objects, 4),"
type_conversion,packfile.c,1956,-,+,,19,"				st_mult(off & 0x7fffffff, 8));"
type_conversion,packfile.c,1958,-,+,,10,		return get_be64(index);
type_conversion,packfile.c,1971,-,+,,11,			return 0;
type_conversion,packfile.c,1977,-,+,,9,	return 0;
type_conversion,packfile.c,1993,-,+,,31,		if (!w->offset && w->len == p->pack_size)
type_conversion,packfile.c,2074,-,+,,38,	r->objects->kept_pack_cache.flags = 0;
type_conversion,packfile.c,2083,-,+,,15,"		size_t nr = 0, alloc = 0;"
type_conversion,packfile.c,2154,-,+,,6,	if (flags & FOR_EACH_OBJECT_PACK_ORDER) {
type_conversion,packfile.c,2159,-,+,,11,	for (i = 0; i < p->num_objects; i++) {
type_conversion,packfile.c,2175,-,+,,7,		if (flags & FOR_EACH_OBJECT_PACK_ORDER)
type_conversion,packfile.c,2200,-,+,,8,		if ((flags & FOR_EACH_OBJECT_LOCAL_ONLY) && !p->pack_local)
type_conversion,packfile.c,2202,-,+,,8,		if ((flags & FOR_EACH_OBJECT_PROMISOR_ONLY) &&
type_conversion,packfile.c,2205,-,+,,8,		if ((flags & FOR_EACH_OBJECT_SKIP_IN_CORE_KEPT_PACKS) &&
type_conversion,packfile.c,2208,-,+,,8,		if ((flags & FOR_EACH_OBJECT_SKIP_ON_DISK_KEPT_PACKS) &&
type_conversion,packfile.c,2248,-,+,,6,	if (obj->type == OBJ_TREE) {
type_conversion,packfile.c,2263,-,+,,13,	} else if (obj->type == OBJ_COMMIT) {
type_conversion,packfile.c,2270,-,+,,13,	} else if (obj->type == OBJ_TAG) {
type_conversion,packfile.c,2286,-,+,,13,					       FOR_EACH_OBJECT_PROMISOR_ONLY |
type_conversion,packfile.c,2287,-,+,,13,					       FOR_EACH_OBJECT_PACK_ORDER);
type_conversion,pager.c,94,-,+,,9,		*cp = '\0';
type_conversion,pager.c,96,-,+,,10,			*cp = '=';
type_conversion,pager.c,107,-,+,,29,	pager_process->use_shell = 1;
type_conversion,pager.c,185,-,+,,30,			term_columns_at_startup = ws.ws_col;
type_conversion,pager.c,221,-,+,,28,	for (width = 1; number >= 10; width++)
type_conversion,pager.c,222,-,+,,13,		number /= 10;
type_conversion,parallel-checkout.c,68,-,+,,6,	if (parallel_checkout.status != PC_UNINITIALIZED)
type_conversion,parallel-checkout.c,76,-,+,,6,	if (parallel_checkout.status == PC_UNINITIALIZED)
type_conversion,parallel-checkout.c,98,-,+,,60,	packed_item_size = sizeof(struct pc_item_fixed_portion) + ce->ce_namelen +
type_conversion,parallel-checkout.c,99,-,+,,68,		(ca->working_tree_encoding ? strlen(ca->working_tree_encoding) : 0);
type_conversion,parallel-checkout.c,156,-,+,,6,	if (parallel_checkout.status != PC_ACCEPTING_ENTRIES ||
type_conversion,parallel-checkout.c,184,-,+,,6,				 *parallel_checkout.progress_cnt);
type_conversion,parallel-checkout.c,199,-,+,,11,	for (i = 0; i < parallel_checkout.nr; i++) {
type_conversion,parallel-checkout.c,201,-,+,,7,		if (pc_item->status == PC_ITEM_WRITTEN)
type_conversion,parallel-checkout.c,205,-,+,,11,	for (i = 0; i < parallel_checkout.nr; i++) {
type_conversion,parallel-checkout.c,259,-,+,,16,"	if (lseek(fd, 0, SEEK_SET) != 0)"
type_conversion,parallel-checkout.c,261,-,+,,20,"	if (ftruncate(fd, 0))"
type_conversion,parallel-checkout.c,313,-,+,,14,	if (wrote < 0)
type_conversion,parallel-checkout.c,334,-,+,,46,	unsigned int mode = (pc_item->ce->ce_mode & 0100) ? 0777 : 0666;
type_conversion,parallel-checkout.c,339,-,+,,37,"	strbuf_add(&path, state->base_dir, state->base_dir_len);"
type_conversion,parallel-checkout.c,340,-,+,,39,"	strbuf_add(&path, pc_item->ce->name, pc_item->ce->ce_namelen);"
type_conversion,parallel-checkout.c,350,-,+,,47,"	if (dir_sep && !has_dirs_only_path(path.buf, dir_sep - path.buf,"
type_conversion,parallel-checkout.c,412,-,+,,20,	size_t name_len = pc_item->ce->ce_namelen;
type_conversion,parallel-checkout.c,414,-,+,,41,					   strlen(working_tree_encoding) : 0;
type_conversion,parallel-checkout.c,456,-,+,,11,	for (i = 0; i < nr; i++)
type_conversion,parallel-checkout.c,466,-,+,,44,"	size_t base_batch_size, batch_beginning = 0;"
type_conversion,parallel-checkout.c,474,-,+,,17,		cp->git_cmd = 1;
type_conversion,parallel-checkout.c,477,-,+,,23,		cp->clean_on_exit = 1;
type_conversion,parallel-checkout.c,485,-,+,,43,	base_batch_size = parallel_checkout.nr / num_workers;
type_conversion,parallel-checkout.c,486,-,+,,55,	workers_with_one_extra_item = parallel_checkout.nr % num_workers;
type_conversion,parallel-checkout.c,551,-,+,,6,	if (len < PC_ITEM_RESULT_BASE_SIZE)
type_conversion,parallel-checkout.c,561,-,+,,6,	if (res->status == PC_ITEM_WRITTEN) {
type_conversion,parallel-checkout.c,582,-,+,,6,	if (res->status != PC_ITEM_COLLIDED)
type_conversion,parallel-checkout.c,599,-,+,,23,"		int nr = poll(pfds, num_workers, -1);"
type_conversion,parallel-checkout.c,614,-,+,,8,			if (pfd->revents & POLLIN) {
type_conversion,parallel-checkout.c,616,-,+,,13,"						      sizeof(packet_buffer), 0);"
type_conversion,parallel-checkout.c,627,-,+,,15,			} else if (pfd->revents & POLLHUP) {
type_conversion,parallel-checkout.c,630,-,+,,15,			} else if (pfd->revents & (POLLNVAL | POLLERR)) {
type_conversion,parallel-checkout.c,645,-,+,,11,	for (i = 0; i < parallel_checkout.nr; i++) {
type_conversion,parallel-checkout.c,648,-,+,,7,		if (pc_item->status != PC_ITEM_COLLIDED)
type_conversion,parallel-checkout.c,658,-,+,,6,	if (parallel_checkout.status != PC_ACCEPTING_ENTRIES)
type_conversion,parallel-checkout.c,665,-,+,,29,	if (parallel_checkout.nr < num_workers)
type_conversion,parallel-checkout.c,666,-,+,,17,		num_workers = parallel_checkout.nr;
type_conversion,parallel-checkout.c,668,-,+,,49,	if (num_workers <= 1 || parallel_checkout.nr < threshold) {
type_conversion,parse-options-cb.c,26,-,+,,7,"		v = strtol(arg, (char **)&arg, 10);"
type_conversion,parse-options-cb.c,32,-,+,,12,		else if (v > the_hash_algo->hexsz)
type_conversion,parse-options-cb.c,170,-,+,,13,	size_t n = 0;
type_conversion,parse-options-cb.c,172,-,+,,16,	for (; opt && opt->type != OPTION_END; opt++)
type_conversion,parse-options.c,34,-,+,,6,	if (flags & OPT_SHORT)
type_conversion,parse-options.c,36,-,+,,11,	else if (flags & OPT_UNSET)
type_conversion,parse-options.c,38,-,+,,11,	else if (flags == OPT_LONG)
type_conversion,parse-options.c,53,-,+,,30,	} else if (p->argc == 1 && (opt->flags & PARSE_OPT_LASTARG_DEFAULT)) {
type_conversion,parse-options.c,77,-,+,,20,	const int unset = flags & OPT_UNSET;
type_conversion,parse-options.c,82,-,+,,16,	if (unset && (opt->flags & PARSE_OPT_NONEG))
type_conversion,parse-options.c,84,-,+,,8,	if (!(flags & OPT_SHORT) && p->opt && (opt->flags & PARSE_OPT_NOARG))
type_conversion,parse-options.c,119,-,+,,32,		*(int *)opt->value = unset ? 0 : opt->defval;
type_conversion,parse-options.c,125,-,+,,12,		else if (opt->flags & PARSE_OPT_OPTARG && !p->opt)
type_conversion,parse-options.c,135,-,+,,12,		else if (opt->flags & PARSE_OPT_OPTARG && !p->opt)
type_conversion,parse-options.c,138,-,+,,10,"			err = get_arg(p, opt, flags, (const char **)opt->value);"
type_conversion,parse-options.c,151,-,+,,12,		else if (opt->flags & PARSE_OPT_NOARG)
type_conversion,parse-options.c,153,-,+,,12,		else if (opt->flags & PARSE_OPT_OPTARG && !p->opt)
type_conversion,parse-options.c,161,-,+,,7,		if (opt->flags & PARSE_OPT_CMDMODE)
type_conversion,parse-options.c,173,-,+,,7,		if (opt->flags & PARSE_OPT_OPTARG && !p->opt) {
type_conversion,parse-options.c,174,-,+,,25,			*(int *)opt->value = opt->defval;
type_conversion,parse-options.c,182,-,+,,24,"		*(int *)opt->value = strtol(arg, (char **)&s, 10);"
type_conversion,parse-options.c,190,-,+,,35,			*(unsigned long *)opt->value = 0;
type_conversion,parse-options.c,193,-,+,,7,		if (opt->flags & PARSE_OPT_OPTARG && !p->opt) {
type_conversion,parse-options.c,194,-,+,,35,			*(unsigned long *)opt->value = opt->defval;
type_conversion,parse-options.c,223,-,+,,9,	for (; opts->type != OPTION_END; opts++) {
type_conversion,parse-options.c,227,-,+,,9,		if (!(opts->flags & PARSE_OPT_CMDMODE) || !value_ptr)
type_conversion,parse-options.c,246,-,+,,6,	if (flags & OPT_SHORT)
type_conversion,parse-options.c,248,-,+,,31,"	return xstrfmt(""--%s%s%s%s"", flags & OPT_UNSET ? ""no-"" : """","
type_conversion,parse-options.c,266,-,+,,8,		    (elem->opt->flags | opt->flags) & PARSE_OPT_CMDMODE)
type_conversion,parse-options.c,292,-,+,,9,	for (; options->type != OPTION_END; options++) {
type_conversion,parse-options.c,293,-,+,,30,		if (options->short_name == *p->opt) {
type_conversion,parse-options.c,302,-,+,,7,		if (options->type == OPTION_NUMBER)
type_conversion,parse-options.c,306,-,+,,16,		size_t len = 1;
type_conversion,parse-options.c,317,-,+,,9,"			rc = (*numopt->ll_callback)(p, numopt, arg, 0);"
type_conversion,parse-options.c,363,-,+,,6,	if (p->flags & PARSE_OPT_KEEP_UNKNOWN_OPT)
type_conversion,parse-options.c,366,-,+,,8,"	    !(abbrev->flags == flags && is_alias(p, abbrev->option, option))) {"
type_conversion,parse-options.c,395,-,+,,13,			flags |= OPT_UNSET;
type_conversion,parse-options.c,398,-,+,,9,	for (; options->type != OPTION_END; options++) {
type_conversion,parse-options.c,401,-,+,,23,		int allow_unset = !(options->flags & PARSE_OPT_NONEG);
type_conversion,parse-options.c,403,-,+,,7,		if (options->type == OPTION_SUBCOMMAND)
type_conversion,parse-options.c,409,-,+,,17,			opt_flags |= OPT_UNSET;
type_conversion,parse-options.c,413,-,+,,9,		if (((flags ^ opt_flags) & OPT_UNSET) && !allow_unset)
type_conversion,parse-options.c,417,-,+,,8,			if (*rest == '=')
type_conversion,parse-options.c,421,-,+,,33,"			return get_value(p, options, flags ^ opt_flags);"
type_conversion,parse-options.c,425,-,+,,38,"		if (!strncmp(long_name, arg_start, arg_end - arg_start))"
type_conversion,parse-options.c,426,-,+,,32,"			register_abbrev(p, options, flags ^ opt_flags,"
type_conversion,parse-options.c,431,-,+,,32,"			register_abbrev(p, options, OPT_UNSET ^ opt_flags,"
type_conversion,parse-options.c,461,-,+,,9,	for (; options->type != OPTION_END; options++) {
type_conversion,parse-options.c,462,-,+,,9,		if (!(options->flags & PARSE_OPT_NODASH))
type_conversion,parse-options.c,464,-,+,,30,		if (options->short_name == arg[0] && arg[1] == '\0')
type_conversion,parse-options.c,473,-,+,,9,	for (; options->type != OPTION_END; options++)
type_conversion,parse-options.c,474,-,+,,7,		if (options->type == OPTION_SUBCOMMAND &&
type_conversion,parse-options.c,485,-,+,,20,	if (strlen(arg) < 3)
type_conversion,parse-options.c,493,-,+,,9,	for (; options->type != OPTION_END; options++) {
type_conversion,parse-options.c,509,-,+,,9,	for (; opts->type != OPTION_END; opts++) {
type_conversion,parse-options.c,510,-,+,,8,		if ((opts->flags & PARSE_OPT_LASTARG_DEFAULT) &&
type_conversion,parse-options.c,511,-,+,,8,		    (opts->flags & PARSE_OPT_OPTARG))
type_conversion,parse-options.c,520,-,+,,7,		if (opts->flags & PARSE_OPT_NODASH &&
type_conversion,parse-options.c,521,-,+,,9,		    ((opts->flags & PARSE_OPT_OPTARG) ||
type_conversion,parse-options.c,522,-,+,,10,		     !(opts->flags & PARSE_OPT_NOARG) ||
type_conversion,parse-options.c,523,-,+,,10,		     !(opts->flags & PARSE_OPT_NONEG) ||
type_conversion,parse-options.c,527,-,+,,7,		if (opts->type == OPTION_SET_INT && !opts->defval &&
type_conversion,parse-options.c,528,-,+,,28,		    opts->long_name && !(opts->flags & PARSE_OPT_NONEG))
type_conversion,parse-options.c,536,-,+,,9,			if ((opts->flags & PARSE_OPT_OPTARG) ||
type_conversion,parse-options.c,537,-,+,,10,			    !(opts->flags & PARSE_OPT_NOARG))
type_conversion,parse-options.c,577,-,+,,9,	for (; options->type != OPTION_END; options++)
type_conversion,parse-options.c,578,-,+,,7,		if (options->type == OPTION_SUBCOMMAND)
type_conversion,parse-options.c,590,-,+,,8,	if (!(flags & PARSE_OPT_ONE_SHOT)) {
type_conversion,parse-options.c,597,-,+,,17,	ctx->cpidx = ((flags & PARSE_OPT_KEEP_ARGV0) != 0);
type_conversion,parse-options.c,599,-,+,,25,	ctx->has_subcommands = has_subcommands(options);
type_conversion,parse-options.c,600,-,+,,32,	if (!ctx->has_subcommands && (flags & PARSE_OPT_SUBCOMMAND_OPTIONAL))
type_conversion,parse-options.c,603,-,+,,7,		if (flags & PARSE_OPT_STOP_AT_NON_OPTION)
type_conversion,parse-options.c,605,-,+,,9,		if (!(flags & PARSE_OPT_SUBCOMMAND_OPTIONAL)) {
type_conversion,parse-options.c,606,-,+,,8,			if (flags & PARSE_OPT_KEEP_UNKNOWN_OPT)
type_conversion,parse-options.c,608,-,+,,8,			if (flags & PARSE_OPT_KEEP_DASHDASH)
type_conversion,parse-options.c,612,-,+,,7,	if ((flags & PARSE_OPT_KEEP_UNKNOWN_OPT) &&
type_conversion,parse-options.c,613,-,+,,7,	    (flags & PARSE_OPT_STOP_AT_NON_OPTION) &&
type_conversion,parse-options.c,614,-,+,,8,	    !(flags & PARSE_OPT_ONE_SHOT))
type_conversion,parse-options.c,616,-,+,,7,	if ((flags & PARSE_OPT_ONE_SHOT) &&
type_conversion,parse-options.c,617,-,+,,7,	    (flags & PARSE_OPT_KEEP_ARGV0))
type_conversion,parse-options.c,637,-,+,,9,	for (; opts->type != OPTION_END; opts++) {
type_conversion,parse-options.c,644,-,+,,5,			(opts->flags & (PARSE_OPT_HIDDEN | PARSE_OPT_NOCOMPLETE)))
type_conversion,parse-options.c,646,-,+,,7,		if (opts->flags & PARSE_OPT_NONEG)
type_conversion,parse-options.c,686,-,+,,9,	for (; opts->type != OPTION_END; opts++) {
type_conversion,parse-options.c,693,-,+,,5,			(opts->flags & (PARSE_OPT_HIDDEN | PARSE_OPT_NOCOMPLETE | PARSE_OPT_FROM_ALIAS)))
type_conversion,parse-options.c,707,-,+,,8,			if (opts->flags & PARSE_OPT_NOARG)
type_conversion,parse-options.c,709,-,+,,8,			if (opts->flags & PARSE_OPT_OPTARG)
type_conversion,parse-options.c,711,-,+,,8,			if (opts->flags & PARSE_OPT_LASTARG_DEFAULT)
type_conversion,parse-options.c,718,-,+,,7,		if (opts->flags & PARSE_OPT_COMP_ARG)
type_conversion,parse-options.c,728,-,+,,9,	return PARSE_OPT_COMPLETE;
type_conversion,parse-options.c,747,-,+,,15,	for (nr = 0; options[nr].type != OPTION_END; nr++) {
type_conversion,parse-options.c,748,-,+,,7,		if (options[nr].type == OPTION_ALIAS)
type_conversion,parse-options.c,767,-,+,,7,		if (newopt[i].type != OPTION_ALIAS)
type_conversion,parse-options.c,784,-,+,,8,			if (options[j].type == OPTION_ALIAS)
type_conversion,parse-options.c,791,-,+,,23,			newopt[i].flags |= PARSE_OPT_FROM_ALIAS;
type_conversion,parse-options.c,814,-,+,,14,	for (i = 0; options[i].type != OPTION_END; i++) {
type_conversion,parse-options.c,815,-,+,,7,		if (options[i].flags & PARSE_OPT_FROM_ALIAS)
type_conversion,parse-options.c,830,-,+,,24,	int internal_help = !(ctx->flags & PARSE_OPT_NO_INTERNAL_HELP);
type_conversion,parse-options.c,838,-,+,,7,		if (ctx->flags & PARSE_OPT_ONE_SHOT &&
type_conversion,parse-options.c,842,-,+,,7,		if (*arg != '-' || !arg[1]) {
type_conversion,parse-options.c,843,-,+,,8,"			if (parse_nodash_opt(ctx, arg, options) == 0)"
type_conversion,parse-options.c,846,-,+,,9,				if (ctx->flags & PARSE_OPT_STOP_AT_NON_OPTION)
type_conversion,parse-options.c,855,-,+,,9,				if (ctx->flags & PARSE_OPT_SUBCOMMAND_OPTIONAL)
type_conversion,parse-options.c,892,-,+,,7,		if (arg[1] != '-') {
type_conversion,parse-options.c,900,-,+,,26,				if (internal_help && *ctx->opt == 'h')
type_conversion,parse-options.c,918,-,+,,27,					if (internal_help && *ctx->opt == 'h')
type_conversion,parse-options.c,927,-,+,,30,					*(char *)ctx->argv[0] = '-';
type_conversion,parse-options.c,942,-,+,,10,			if (!(ctx->flags & PARSE_OPT_KEEP_DASHDASH)) {
type_conversion,parse-options.c,948,-,+,,10,			if (!(ctx->flags & PARSE_OPT_KEEP_UNKNOWN_OPT)) {
type_conversion,parse-options.c,975,-,+,,7,		if (ctx->flags & PARSE_OPT_ONE_SHOT)
type_conversion,parse-options.c,978,-,+,,8,		    (ctx->flags & PARSE_OPT_SUBCOMMAND_OPTIONAL) &&
type_conversion,parse-options.c,979,-,+,,8,		    (ctx->flags & PARSE_OPT_KEEP_UNKNOWN_OPT)) {
type_conversion,parse-options.c,989,-,+,,9,		if (!(ctx->flags & PARSE_OPT_KEEP_UNKNOWN_OPT))
type_conversion,parse-options.c,1002,-,+,,6,	if (ctx->flags & PARSE_OPT_ONE_SHOT)
type_conversion,parse-options.c,1038,-,+,,9,		    !(flags & PARSE_OPT_SUBCOMMAND_OPTIONAL)) {
type_conversion,parse-options.c,1044,-,+,,7,		if (ctx.argv[0][1] == '-') {
type_conversion,parse-options.c,1069,-,+,,17,	int literal = (opts->flags & PARSE_OPT_LITERAL_ARGHELP) ||
type_conversion,parse-options.c,1071,-,+,,6,	if (opts->flags & PARSE_OPT_OPTARG)
type_conversion,parse-options.c,1099,-,+,,9,	for (; opts->type != OPTION_END; opts++) {
type_conversion,parse-options.c,1158,-,+,,21,	if (!err && ctx && ctx->flags & PARSE_OPT_SHELL_EVAL)
type_conversion,parse-options.c,1170,-,+,,15,		for (j = 0; j < list.nr; j++) {
type_conversion,parse-options.c,1190,-,+,,9,	for (; opts->type != OPTION_END; opts++) {
type_conversion,parse-options.c,1195,-,+,,7,		if (opts->type == OPTION_SUBCOMMAND)
type_conversion,parse-options.c,1197,-,+,,7,		if (opts->type == OPTION_GROUP) {
type_conversion,parse-options.c,1204,-,+,,17,		if (!full && (opts->flags & PARSE_OPT_HIDDEN))
type_conversion,parse-options.c,1212,-,+,,9,		pos = usage_indent(outfile);
type_conversion,parse-options.c,1214,-,+,,8,			if (opts->flags & PARSE_OPT_NODASH)
type_conversion,parse-options.c,1215,-,+,,12,"				pos += fprintf(outfile, ""%c"", opts->short_name);"
type_conversion,parse-options.c,1217,-,+,,12,"				pos += fprintf(outfile, ""-%c"", opts->short_name);"
type_conversion,parse-options.c,1220,-,+,,11,"			pos += fprintf(outfile, "", "");"
type_conversion,parse-options.c,1223,-,+,,9,			if ((opts->flags & PARSE_OPT_NONEG) ||
type_conversion,parse-options.c,1225,-,+,,12,"				pos += fprintf(outfile, ""--%s"", long_name);"
type_conversion,parse-options.c,1227,-,+,,12,"				pos += fprintf(outfile, ""--[no-]%s"", long_name);"
type_conversion,parse-options.c,1230,-,+,,7,		if (opts->type == OPTION_NUMBER)
type_conversion,parse-options.c,1231,-,+,,11,"			pos += utf8_fprintf(outfile, _(""-NUM""));"
type_conversion,parse-options.c,1233,-,+,,8,		if ((opts->flags & PARSE_OPT_LITERAL_ARGHELP) ||
type_conversion,parse-options.c,1234,-,+,,9,		    !(opts->flags & PARSE_OPT_NOARG))
type_conversion,parse-options.c,1235,-,+,,11,"			pos += usage_argh(opts, outfile);"
type_conversion,parse-options.c,1237,-,+,,7,		if (opts->type == OPTION_ALIAS) {
type_conversion,parse-options.c,1249,-,+,,15,"			fwrite(cp, 1, np - cp, outfile);"
type_conversion,parse-options.c,1250,-,+,,10,			pos = 0;
type_conversion,parse-options.c,1257,-,+,,10,			pos = usage_indent(outfile);
type_conversion,parse-options.c,1258,-,+,,11,"			pos += fprintf(outfile, ""--%s"", positive_name);"
type_conversion,parse-options.c,1266,-,+,,21,	if (!err && ctx && ctx->flags & PARSE_OPT_SHELL_EVAL)
type_conversion,parse.c,8,-,+,,10,		return 1;
type_conversion,parse.c,10,-,+,,10,		return 1024;
type_conversion,parse.c,12,-,+,,10,		return 1024 * 1024;
type_conversion,parse.c,14,-,+,,10,		return 1024 * 1024 * 1024;
type_conversion,parse.c,15,-,+,,9,	return 0;
type_conversion,parse.c,25,-,+,,13,		if (max < 0)
type_conversion,parse.c,36,-,+,,12,		factor = get_unit_factor(end);
type_conversion,parse.c,41,-,+,,14,		if ((val < 0 && -max / factor > val) ||
type_conversion,parse.c,42,-,+,,14,		    (val > 0 && max / factor < val)) {
type_conversion,parse.c,97,-,+,,9,	*ret = tmp;
type_conversion,patch-delta.c,41,-,+,,7,		if (cmd & 0x80) {
type_conversion,patch-delta.c,42,-,+,,27,"			unsigned long cp_off = 0, cp_size = 0;"
type_conversion,patch-delta.c,57,-,+,,19,			if (cp_size == 0) cp_size = 0x10000;
type_conversion,patch-delta.c,66,-,+,,8,			if (cmd > size || cmd > top - data)
type_conversion,patch-delta.c,68,-,+,,22,"			memcpy(out, data, cmd);"
type_conversion,patch-delta.c,71,-,+,,12,			size -= cmd;
type_conversion,patch-delta.c,84,-,+,,29,	if (data != top || size != 0) {
type_conversion,patch-delta.c,92,-,+,,14,	*dst_size = out - dst_buf;
type_conversion,patch-id.c,21,-,+,,14,	while ((c = *src++) != '\0') {
type_conversion,patch-id.c,23,-,+,,13,			*dst++ = c;
type_conversion,patch-id.c,25,-,+,,9,	return dst - line;
type_conversion,patch-id.c,35,-,+,,6,"	n = strspn(q, digits);"
type_conversion,patch-id.c,36,-,+,,6,"	if (q[n] == ',') {"
type_conversion,patch-id.c,39,-,+,,7,"		n = strspn(q, digits);"
type_conversion,patch-id.c,44,-,+,,16,	if (n == 0 || q[n] != ' ' || q[n+1] != '+')
type_conversion,patch-id.c,48,-,+,,6,"	n = strspn(r, digits);"
type_conversion,patch-id.c,49,-,+,,6,"	if (r[n] == ',') {"
type_conversion,patch-id.c,52,-,+,,7,"		n = strspn(r, digits);"
type_conversion,patch-id.c,82,-,+,,35,"		    starts_with(line, ""\\ "") && 12 < strlen(line)) {"
type_conversion,patch-id.c,118,-,+,,30,					*oid1_end = *oid2_end = '\0';
type_conversion,patch-id.c,156,-,+,,7,		if (line[0] == '-' || line[0] == ' ')
type_conversion,patch-id.c,158,-,+,,7,		if (line[0] == '+' || line[0] == ' ')
type_conversion,patch-id.c,162,-,+,,35,		len = verbatim ? strlen(line) : remove_space(line);
type_conversion,patch-id.c,164,-,+,,40,"		the_hash_algo->update_fn(&ctx, line, len);"
type_conversion,patch-ids.c,67,-,+,,34,	ids->diffopts.flags.recursive = 1;
type_conversion,patch-ids.c,69,-,+,,60,"	hashmap_init(&ids->patches, patch_id_neq, &ids->diffopts, 256);"
type_conversion,path.c,27,-,+,,10,	*mode = st.st_mode;
type_conversion,path.c,38,-,+,,10,	index = (index + 1) % ARRAY_SIZE(pathname_array);
type_conversion,path.c,47,-,+,,10,		while (*path == '/')
type_conversion,path.c,57,-,+,,21,"		strbuf_remove(sb, 0, path - sb->buf);"
type_conversion,path.c,62,-,+,,12,	int len = strlen(dir);
type_conversion,path.c,63,-,+,,28,"	return !strncmp(buf, dir, len) &&"
type_conversion,path.c,64,-,+,,15,		(is_dir_sep(buf[len]) || buf[len] == '\0');
type_conversion,path.c,70,-,+,,12,	int len = strlen(dir);
type_conversion,path.c,71,-,+,,24,"	if (strncmp(buf, dir, len) || !is_dir_sep(buf[len]))"
type_conversion,path.c,73,-,+,,20,	while (is_dir_sep(buf[len]))
type_conversion,path.c,80,-,+,,15,	int newlen = strlen(newdir);
type_conversion,path.c,81,-,+,,47,	int need_sep = (buf->buf[len] && !is_dir_sep(buf->buf[len])) &&
type_conversion,path.c,82,-,+,,15,		!is_dir_sep(newdir[newlen - 1]);
type_conversion,path.c,85,-,+,,21,"	strbuf_splice(buf, 0, len, newdir, newlen);"
type_conversion,path.c,87,-,+,,22,		buf->buf[newlen] = '/';
type_conversion,path.c,100,-,+,,4,"	{ 0, 1, 1, ""branches"" },"
type_conversion,path.c,101,-,+,,4,"	{ 0, 1, 1, ""common"" },"
type_conversion,path.c,102,-,+,,4,"	{ 0, 1, 1, ""hooks"" },"
type_conversion,path.c,103,-,+,,4,"	{ 0, 1, 1, ""info"" },"
type_conversion,path.c,104,-,+,,4,"	{ 0, 0, 0, ""info/sparse-checkout"" },"
type_conversion,path.c,105,-,+,,4,"	{ 1, 1, 1, ""logs"" },"
type_conversion,path.c,106,-,+,,4,"	{ 1, 0, 0, ""logs/HEAD"" },"
type_conversion,path.c,107,-,+,,4,"	{ 0, 1, 0, ""logs/refs/bisect"" },"
type_conversion,path.c,108,-,+,,4,"	{ 0, 1, 0, ""logs/refs/rewritten"" },"
type_conversion,path.c,109,-,+,,4,"	{ 0, 1, 0, ""logs/refs/worktree"" },"
type_conversion,path.c,110,-,+,,4,"	{ 0, 1, 1, ""lost-found"" },"
type_conversion,path.c,111,-,+,,4,"	{ 0, 1, 1, ""objects"" },"
type_conversion,path.c,112,-,+,,4,"	{ 0, 1, 1, ""refs"" },"
type_conversion,path.c,113,-,+,,4,"	{ 0, 1, 0, ""refs/bisect"" },"
type_conversion,path.c,114,-,+,,4,"	{ 0, 1, 0, ""refs/rewritten"" },"
type_conversion,path.c,115,-,+,,4,"	{ 0, 1, 0, ""refs/worktree"" },"
type_conversion,path.c,116,-,+,,4,"	{ 0, 1, 1, ""remotes"" },"
type_conversion,path.c,117,-,+,,4,"	{ 0, 1, 1, ""worktrees"" },"
type_conversion,path.c,118,-,+,,4,"	{ 0, 1, 1, ""rr-cache"" },"
type_conversion,path.c,119,-,+,,4,"	{ 0, 1, 1, ""svn"" },"
type_conversion,path.c,120,-,+,,4,"	{ 0, 0, 1, ""config"" },"
type_conversion,path.c,121,-,+,,4,"	{ 1, 0, 1, ""gc.pid"" },"
type_conversion,path.c,122,-,+,,4,"	{ 0, 0, 1, ""packed-refs"" },"
type_conversion,path.c,123,-,+,,4,"	{ 0, 0, 1, ""shallow"" },"
type_conversion,path.c,124,-,+,,4,"	{ 0, 0, 0, NULL }"
type_conversion,path.c,156,-,+,,34,"	struct trie *new_node = xcalloc(1, sizeof(*new_node));"
type_conversion,path.c,157,-,+,,18,	new_node->len = strlen(key);
type_conversion,path.c,159,-,+,,32,		new_node->contents = xmalloc(new_node->len);
type_conversion,path.c,160,-,+,,35,"		memcpy(new_node->contents, key, new_node->len);"
type_conversion,path.c,184,-,+,,7,		if (root->contents[i] == key[i])
type_conversion,path.c,197,-,+,,10,						   child->len);
type_conversion,path.c,282,-,+,,7,		if (key[i] == '/' && key[i+1] == '/') {
type_conversion,path.c,286,-,+,,7,		if (root->contents[i] != key[i])
type_conversion,path.c,301,-,+,,9,	while (key[0] == '/' && key[1] == '/')
type_conversion,path.c,310,-,+,,22,	if (result >= 0 || (*key != '/' && *key != 0))
type_conversion,path.c,343,-,+,,22,	if (dir->is_dir && (unmatched[0] == 0 || unmatched[0] == '/'))
type_conversion,path.c,344,-,+,,10,		return dir->is_common;
type_conversion,path.c,346,-,+,,22,	if (!dir->is_dir && unmatched[0] == 0)
type_conversion,path.c,347,-,+,,10,		return dir->is_common;
type_conversion,path.c,375,-,+,,8,	len = sb.len;
type_conversion,path.c,380,-,+,,22,"		strbuf_setlen(&sb, len);"
type_conversion,path.c,393,-,+,,22,"		strbuf_splice(buf, 0, buf->len,"
type_conversion,path.c,396,-,+,,22,"		strbuf_splice(buf, 0, buf->len,"
type_conversion,path.c,424,-,+,,50,	if (buf->len && !is_dir_sep(buf->buf[buf->len - 1]))
type_conversion,path.c,426,-,+,,15,	gitdir_len = buf->len;
type_conversion,path.c,528,-,+,,49,	if(buf->len && !is_dir_sep(buf->buf[buf->len - 1]))
type_conversion,path.c,576,-,+,,38,"	strbuf_complete(&git_submodule_dir, '/');"
type_conversion,path.c,581,-,+,,26,"		update_common_dir(buf, git_submodule_dir.len, git_submodule_common_dir.buf);"
type_conversion,path.c,624,-,+,,50,	if (buf->len && !is_dir_sep(buf->buf[buf->len - 1]))
type_conversion,path.c,664,-,+,,47,"		len = readlink(path, buffer, sizeof(buffer)-1);"
type_conversion,path.c,665,-,+,,14,"		if (len >= 5 && !memcmp(""refs/"", buffer, 5))"
type_conversion,path.c,676,-,+,,48,"	len = read_in_full(fd, buffer, sizeof(buffer)-1);"
type_conversion,path.c,679,-,+,,12,	if (len < 0)
type_conversion,path.c,681,-,+,,16,	buffer[len] = '\0';
type_conversion,path.c,731,-,+,,6,	if (path[0] == '~') {
type_conversion,path.c,734,-,+,,25,		size_t username_len = first_slash - username;
type_conversion,path.c,735,-,+,,23,		if (username_len == 0) {
type_conversion,path.c,793,-,+,,13,		int len = strlen(path);
type_conversion,path.c,795,-,+,,24,		while ((1 < len) && (path[len-1] == '/'))
type_conversion,path.c,807,-,+,,32,"		strbuf_add(&used_path, path, len);"
type_conversion,path.c,808,-,+,,37,"		strbuf_add(&validated_path, path, len);"
type_conversion,path.c,810,-,+,,7,		if (used_path.buf[0] == '~') {
type_conversion,path.c,912,-,+,,17,"	if (mkdir(dir, 0777) < 0) {"
type_conversion,path.c,941,-,+,,33,	int in_len = in ? strlen(in) : 0;
type_conversion,path.c,942,-,+,,45,	int prefix_len = prefix ? strlen(prefix) : 0;
type_conversion,path.c,959,-,+,,41,	while (i < prefix_len && j < in_len && prefix[i] == in[j]) {
type_conversion,path.c,960,-,+,,18,		if (is_dir_sep(prefix[i])) {
type_conversion,path.c,961,-,+,,22,			while (is_dir_sep(prefix[i]))
type_conversion,path.c,963,-,+,,22,			while (is_dir_sep(in[j]))
type_conversion,path.c,984,-,+,,25,		} else if (is_dir_sep(in[j])) {
type_conversion,path.c,986,-,+,,22,			while (is_dir_sep(in[j]))
type_conversion,path.c,998,-,+,,18,		if (is_dir_sep(prefix[i])) {
type_conversion,path.c,1000,-,+,,22,			while (is_dir_sep(prefix[i]))
type_conversion,path.c,1016,-,+,,18,"	strbuf_grow(sb, in_len);"
type_conversion,path.c,1019,-,+,,18,		if (is_dir_sep(prefix[i])) {
type_conversion,path.c,1021,-,+,,22,			while (is_dir_sep(prefix[i]))
type_conversion,path.c,1027,-,+,,18,	if (!is_dir_sep(prefix[prefix_len - 1]))
type_conversion,path.c,1050,-,+,,18,		if (is_dir_sep(prefix[i])) {
type_conversion,path.c,1051,-,+,,20,			if (!is_dir_sep(in[j]))
type_conversion,path.c,1053,-,+,,22,			while (is_dir_sep(prefix[i]))
type_conversion,path.c,1055,-,+,,22,			while (is_dir_sep(in[j]))
type_conversion,path.c,1058,-,+,,14,		} else if (in[j] != prefix[i]) {
type_conversion,path.c,1068,-,+,,18,	    !is_dir_sep(prefix[i-1]) && !is_dir_sep(in[j])
type_conversion,path.c,1071,-,+,,20,	while (is_dir_sep(in[j]))
type_conversion,path.c,1120,-,+,,18,		if (is_dir_sep(c))
type_conversion,path.c,1121,-,+,,8,			c = '/';
type_conversion,path.c,1126,-,+,,20,	while (is_dir_sep(*src))
type_conversion,path.c,1140,-,+,,7,		if (c == '.') {
type_conversion,path.c,1144,-,+,,26,			} else if (is_dir_sep(src[1])) {
type_conversion,path.c,1147,-,+,,23,				while (is_dir_sep(*src))
type_conversion,path.c,1150,-,+,,15,			} else if (src[1] == '.') {
type_conversion,path.c,1155,-,+,,27,				} else if (is_dir_sep(src[2])) {
type_conversion,path.c,1158,-,+,,24,					while (is_dir_sep(*src))
type_conversion,path.c,1166,-,+,,10,		while ((c = *src++) != '\0' && !is_dir_sep(c))
type_conversion,path.c,1168,-,+,,18,		if (is_dir_sep(c)) {
type_conversion,path.c,1169,-,+,,13,			*dst++ = '/';
type_conversion,path.c,1170,-,+,,22,			while (is_dir_sep(c))
type_conversion,path.c,1186,-,+,,24,		while (dst0 < dst && dst[-1] != '/')
type_conversion,path.c,1188,-,+,,21,		if (prefix_len && *prefix_len > dst - dst0)
type_conversion,path.c,1189,-,+,,18,			*prefix_len = dst - dst0;
type_conversion,path.c,1191,-,+,,9,	*dst = '\0';
type_conversion,path.c,1241,-,+,,14,	for (i = 0; i < prefixes->nr; i++) {
type_conversion,path.c,1243,-,+,,13,		int len = strlen(ceil);
type_conversion,path.c,1249,-,+,,18,		if (len > 0 && ceil[len - 1] == '/')
type_conversion,path.c,1252,-,+,,27,"		if (strncmp(path, ceil, len) ||"
type_conversion,path.c,1253,-,+,,7,		    path[len] != '/' || !path[len + 1])
type_conversion,path.c,1266,-,+,,27,	while (len && is_dir_sep(path[len - 1]))
type_conversion,path.c,1278,-,+,,17,"	int path_len = strlen(path), suffix_len = strlen(suffix);"
type_conversion,path.c,1282,-,+,,11,			return -1;
type_conversion,path.c,1284,-,+,,18,		if (is_dir_sep(path[path_len - 1])) {
type_conversion,path.c,1285,-,+,,20,			if (!is_dir_sep(suffix[suffix_len - 1]))
type_conversion,path.c,1286,-,+,,12,				return -1;
type_conversion,path.c,1290,-,+,,12,		else if (path[--path_len] != suffix[--suffix_len])
type_conversion,path.c,1291,-,+,,11,			return -1;
type_conversion,path.c,1294,-,+,,30,	if (path_len && !is_dir_sep(path[path_len - 1]))
type_conversion,path.c,1295,-,+,,10,		return -1;
type_conversion,path.c,1296,-,+,,9,"	return chomp_trailing_dir_sep(path, path_len);"
type_conversion,path.c,1305,-,+,,58,"	return stripped_path_suffix_offset(path, components) != -1;"
type_conversion,path.c,1317,-,+,,19,"	return offset == -1 ? NULL : xstrndup(path, offset);"
type_conversion,path.c,1333,-,+,,13,	if (!p || (*p != '/' && *p != '~'))
type_conversion,path.c,1341,-,+,,8,			if (ch == '.')
type_conversion,path.c,1343,-,+,,13,			else if (ch == '/') {
type_conversion,path.c,1349,-,+,,13,			else if (ch == 0) {
type_conversion,path.c,1358,-,+,,12,		else if (ch == 0)
type_conversion,path.c,1360,-,+,,12,		else if (ch == '/') {
type_conversion,path.c,1415,-,+,,6,	if (c == '.') {
type_conversion,path.c,1417,-,+,,8,		if (((c = *(name++)) != 'g' && c != 'G') ||
type_conversion,path.c,1418,-,+,,8,		    ((c = *(name++)) != 'i' && c != 'I') ||
type_conversion,path.c,1419,-,+,,8,		    ((c = *(name++)) != 't' && c != 'T'))
type_conversion,path.c,1421,-,+,,13,	} else if (c == 'g' || c == 'G') {
type_conversion,path.c,1423,-,+,,8,		if (((c = *(name++)) != 'i' && c != 'I') ||
type_conversion,path.c,1424,-,+,,8,		    ((c = *(name++)) != 't' && c != 'T') ||
type_conversion,path.c,1425,-,+,,7,		    *(name++) != '~' ||
type_conversion,path.c,1426,-,+,,7,		    *(name++) != '1')
type_conversion,path.c,1433,-,+,,34,		if (!c || is_xplatform_dir_sep(c) || c == ':')
type_conversion,path.c,1435,-,+,,7,		if (c != '.' && c != ' ')
type_conversion,path.c,1448,-,+,,7,"	if ((name[0] == '.' && !strncasecmp(name + 1, dotgit_name, len))) {"
type_conversion,path.c,1449,-,+,,13,		i = len + 1;
type_conversion,path.c,1453,-,+,,14,			if (!c || c == ':')
type_conversion,path.c,1455,-,+,,8,			if (c != ' ' && c != '.')
type_conversion,path.c,1464,-,+,,38,"	if (!strncasecmp(name, dotgit_name, 6) && name[6] == '~' &&"
type_conversion,path.c,1465,-,+,,6,	    name[7] >= '1' && name[7] <= '4') {
type_conversion,path.c,1466,-,+,,7,		i = 8;
type_conversion,path.c,1474,-,+,,33,"	for (i = 0, saw_tilde = 0; i < 8; i++)"
type_conversion,path.c,1475,-,+,,7,		if (name[i] == '\0')
type_conversion,path.c,1478,-,+,,8,			if (name[i] < '0' || name[i] > '9')
type_conversion,path.c,1480,-,+,,14,		} else if (name[i] == '~') {
type_conversion,path.c,1481,-,+,,8,			if (name[++i] < '1' || name[i] > '9')
type_conversion,path.c,1484,-,+,,19,		} else if (i >= 6)
type_conversion,path.c,1486,-,+,,12,		else if (name[i] & 0x80) {
type_conversion,path.c,1492,-,+,,34,		} else if (tolower(name[i]) != dotgit_ntfs_shortname_prefix[i])
type_conversion,path.c,1531,-,+,,16,	return str && str[0] == '-';
type_conversion,pathspec.c,48,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,pathspec.c,50,-,+,,7,		if (sw_action == PS_IGNORE_SKIP_WORKTREE &&
type_conversion,pathspec.c,69,-,+,,23,"	char *seen = xcalloc(pathspec->nr, 1);"
type_conversion,pathspec.c,77,-,+,,23,"	char *seen = xcalloc(pathspec->nr, 1);"
type_conversion,pathspec.c,80,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,pathspec.c,104,-,+,,23,"	{ PATHSPEC_FROMTOP,  '/', ""top"" },"
type_conversion,pathspec.c,105,-,+,,22,"	{ PATHSPEC_LITERAL, '\0', ""literal"" },"
type_conversion,pathspec.c,106,-,+,,22,"	{ PATHSPEC_GLOB,    '\0', ""glob"" },"
type_conversion,pathspec.c,107,-,+,,22,"	{ PATHSPEC_ICASE,   '\0', ""icase"" },"
type_conversion,pathspec.c,108,-,+,,23,"	{ PATHSPEC_EXCLUDE,  '!', ""exclude"" },"
type_conversion,pathspec.c,109,-,+,,22,"	{ PATHSPEC_ATTR,    '\0', ""attr"" },"
type_conversion,pathspec.c,127,-,+,,6,	if (element[1] != '(') {
type_conversion,pathspec.c,130,-,+,,19,		for (int i = 0; i < ARRAY_SIZE(pathspec_magic); i++) {
type_conversion,pathspec.c,133,-,+,,27,				if (sb->buf[sb->len - 1] != '(')
type_conversion,pathspec.c,140,-,+,,16,"		size_t len = strchr(element, ')') - element;"
type_conversion,pathspec.c,152,-,+,,7,		if (i[0] == '\\' && i[1]) {
type_conversion,pathspec.c,157,-,+,,20,"		if (strchr(stop, *i))"
type_conversion,pathspec.c,160,-,+,,9,	return i - s;
type_conversion,pathspec.c,165,-,+,,35,"	if (isalnum(ch) || strchr("",-_"", ch))"
type_conversion,pathspec.c,177,-,+,,7,		if (*src == '\\') {
type_conversion,pathspec.c,184,-,+,,46,"			die(""cannot use '%c' for value matching"", *src);"
type_conversion,pathspec.c,187,-,+,,9,	*dst = '\0';
type_conversion,pathspec.c,217,-,+,,11,		switch (*attr) {
type_conversion,pathspec.c,230,-,+,,8,			if (attr[attr_len] != '=')
type_conversion,pathspec.c,233,-,+,,38,				const char *v = &attr[attr_len + 1];
type_conversion,pathspec.c,339,-,+,,31,	for (pos = elem + 2; *pos && *pos != ')'; pos = nextat) {
type_conversion,pathspec.c,343,-,+,,7,"		if (pos[len] == ',')"
type_conversion,pathspec.c,353,-,+,,18,"			*prefix_len = strtol(pos + 7, &endptr, 10);"
type_conversion,pathspec.c,354,-,+,,8,			if (endptr - pos != len)
type_conversion,pathspec.c,360,-,+,,46,"			char *attr_body = xmemdupz(pos + 5, len - 5);"
type_conversion,pathspec.c,367,-,+,,15,		for (i = 0; i < ARRAY_SIZE(pathspec_magic); i++) {
type_conversion,pathspec.c,375,-,+,,37,		if (ARRAY_SIZE(pathspec_magic) <= i)
type_conversion,pathspec.c,380,-,+,,6,	if (*pos != ')')
type_conversion,pathspec.c,398,-,+,,31,	for (pos = elem + 1; *pos && *pos != ':'; pos++) {
type_conversion,pathspec.c,403,-,+,,7,		if (ch == '^') {
type_conversion,pathspec.c,411,-,+,,15,		for (i = 0; i < ARRAY_SIZE(pathspec_magic); i++) {
type_conversion,pathspec.c,412,-,+,,8,			if (pathspec_magic[i].mnemonic == ch) {
type_conversion,pathspec.c,418,-,+,,37,		if (ARRAY_SIZE(pathspec_magic) <= i)
type_conversion,pathspec.c,420,-,+,,8,"			    ch, elem);"
type_conversion,pathspec.c,423,-,+,,6,	if (*pos == ':')
type_conversion,pathspec.c,433,-,+,,6,	if (elem[0] != ':' || get_literal_global())
type_conversion,pathspec.c,435,-,+,,11,	else if (elem[1] == '(')
type_conversion,pathspec.c,450,-,+,,19,"	unsigned magic = 0, element_magic = 0;"
type_conversion,pathspec.c,468,-,+,,29,		magic |= get_global_magic(element_magic);
type_conversion,pathspec.c,505,-,+,,14,	item->len = strlen(item->match);
type_conversion,pathspec.c,541,-,+,,7,		    item->match[item->nowildcard_len] == '*' &&
type_conversion,pathspec.c,565,-,+,,14,	for (i = 0; i < ARRAY_SIZE(pathspec_magic); i++) {
type_conversion,pathspec.c,574,-,+,,18,"				    m->name, m->mnemonic);"
type_conversion,pathspec.c,626,-,+,,38,		item->nowildcard_len = item->len = strlen(prefix);
type_conversion,pathspec.c,634,-,+,,7,		if (*argv[n] == '\0')
type_conversion,pathspec.c,643,-,+,,40,	prefixlen = prefix ? strlen(prefix) : 0;
type_conversion,pathspec.c,661,-,+,,29,			pathspec->has_wildcard = 1;
type_conversion,pathspec.c,671,-,+,,32,"		init_pathspec_item(item + n, 0, prefix, plen, ""."");"
type_conversion,pathspec.c,699,-,+,,25,"		if (!nul_term_line && buf.buf[0] == '""') {"
type_conversion,pathspec.c,770,-,+,,35,"		name = to_free = xmemdupz(name, namelen);"
type_conversion,pathspec.c,785,-,+,,15,			matched = (match_mode == MATCH_SET);
type_conversion,pathspec.c,787,-,+,,15,			matched = (match_mode == MATCH_UNSET);
type_conversion,pathspec.c,789,-,+,,15,			matched = (match_mode == MATCH_UNSPECIFIED);
type_conversion,pathspec.c,791,-,+,,15,			matched = (match_mode == MATCH_VALUE &&
type_conversion,pathspec.c,820,-,+,,18,	for (i = 0; i < pathspec->nr; i++) {
type_conversion,pathspec.c,845,-,+,,60,"			if (strspn(item.original + item.nowildcard_len, ""*"") == item.len - item.nowildcard_len &&"
type_conversion,pathspec.c,849,-,+,,15,			for (pos = 0; pos < istate->cache_nr; pos++) {
type_conversion,pathspec.c,860,-,+,,9,				if (item.nowildcard_len > ce_namelen(ce) &&
type_conversion,pathspec.c,871,-,+,,43,"				if (!strncmp(item.original, ce->name, item.nowildcard_len) &&"
type_conversion,pathspec.c,872,-,+,,44,"				    wildmatch(item.original, ce->name, 0)) {"
type_conversion,pathspec.c,878,-,+,,40,"			   !matches_skip_worktree(pathspec, i, &skip_worktree_seen))"
type_conversion,pathspec.h,176,-,+,,9,	return (*seen_ptr)[item];
type_conversion,pkt-line.c,31,-,+,,20,	} else if (len && *buf == '\1') {
type_conversion,pkt-line.c,32,-,+,,46,"		trace_verbatim(&trace_pack, buf + 1, len - 1);"
type_conversion,pkt-line.c,54,-,+,,14,		sideband = *buf == '\1';
type_conversion,pkt-line.c,62,-,+,,9,		len = strlen(buf);
type_conversion,pkt-line.c,69,-,+,,24,"	strbuf_init(&out, len+32);"
type_conversion,pkt-line.c,75,-,+,,14,	for (i = 0; i < len; i++) {
type_conversion,pkt-line.c,77,-,+,,7,		if (buf[i] == '\n')
type_conversion,pkt-line.c,79,-,+,,7,		if (buf[i] >= 0x20 && buf[i] <= 0x7e)
type_conversion,pkt-line.c,80,-,+,,23,"			strbuf_addch(&out, buf[i]);"
type_conversion,pkt-line.c,82,-,+,,30,"			strbuf_addf(&out, ""\\%o"", buf[i]);"
type_conversion,pkt-line.c,96,-,+,,23,"	packet_trace(""0000"", 4, 1);"
type_conversion,pkt-line.c,97,-,+,,32,"	if (write_in_full(fd, ""0000"", 4) < 0)"
type_conversion,pkt-line.c,103,-,+,,23,"	packet_trace(""0001"", 4, 1);"
type_conversion,pkt-line.c,104,-,+,,32,"	if (write_in_full(fd, ""0001"", 4) < 0)"
type_conversion,pkt-line.c,110,-,+,,23,"	packet_trace(""0002"", 4, 1);"
type_conversion,pkt-line.c,111,-,+,,32,"	if (write_in_full(fd, ""0002"", 4) < 0)"
type_conversion,pkt-line.c,117,-,+,,23,"	packet_trace(""0000"", 4, 1);"
type_conversion,pkt-line.c,118,-,+,,32,"	if (write_in_full(fd, ""0000"", 4) < 0)"
type_conversion,pkt-line.c,125,-,+,,23,"	packet_trace(""0000"", 4, 1);"
type_conversion,pkt-line.c,126,-,+,,26,"	strbuf_add(buf, ""0000"", 4);"
type_conversion,pkt-line.c,131,-,+,,23,"	packet_trace(""0001"", 4, 1);"
type_conversion,pkt-line.c,132,-,+,,26,"	strbuf_add(buf, ""0001"", 4);"
type_conversion,pkt-line.c,161,-,+,,41,"	set_packet_header(&out->buf[orig_len], n);"
type_conversion,pkt-line.c,162,-,+,,44,"	packet_trace(out->buf + orig_len + 4, n - 4, 1);"
type_conversion,pkt-line.c,172,-,+,,44,"	if (write_in_full(fd, buf.buf, buf.len) < 0) {"
type_conversion,pkt-line.c,214,-,+,,20,"	packet_trace(buf, size, 1);"
type_conversion,pkt-line.c,215,-,+,,23,	packet_size = size + 4;
type_conversion,pkt-line.c,217,-,+,,28,"	set_packet_header(header, packet_size);"
type_conversion,pkt-line.c,226,-,+,,36,"	if (write_in_full(fd_out, header, 4) < 0 ||"
type_conversion,pkt-line.c,227,-,+,,41,"	    write_in_full(fd_out, buf, size) < 0) {"
type_conversion,pkt-line.c,260,-,+,,20,"	packet_trace(buf, size, 1);"
type_conversion,pkt-line.c,261,-,+,,23,	packet_size = size + 4;
type_conversion,pkt-line.c,263,-,+,,28,"	set_packet_header(header, packet_size);"
type_conversion,pkt-line.c,264,-,+,,27,"	fwrite_or_die(f, header, 4);"
type_conversion,pkt-line.c,284,-,+,,23,"	packet_trace(""0000"", 4, 1);"
type_conversion,pkt-line.c,285,-,+,,27,"	fwrite_or_die(f, ""0000"", 4);"
type_conversion,pkt-line.c,306,-,+,,24,		if (bytes_to_write < 0) {
type_conversion,pkt-line.c,310,-,+,,25,		if (bytes_to_write == 0)
type_conversion,pkt-line.c,312,-,+,,42,"		err = packet_write_gently(fd_out, buf, bytes_to_write);"
type_conversion,pkt-line.c,322,-,+,,25,	size_t bytes_written = 0;
type_conversion,pkt-line.c,330,-,+,,25,		if (bytes_to_write == 0)
type_conversion,pkt-line.c,350,-,+,,9,		ret = size < *src_size ? size : *src_size;
type_conversion,pkt-line.c,351,-,+,,25,"		memcpy(dst, *src_buf, ret);"
type_conversion,pkt-line.c,353,-,+,,16,		*src_size -= ret;
type_conversion,pkt-line.c,355,-,+,,31,"		ret = read_in_full(fd, dst, size);"
type_conversion,pkt-line.c,356,-,+,,13,		if (ret < 0) {
type_conversion,pkt-line.c,357,-,+,,8,			if (options & PACKET_READ_GENTLE_ON_READ_ERROR)
type_conversion,pkt-line.c,364,-,+,,13,	if (ret != size) {
type_conversion,pkt-line.c,365,-,+,,7,		if (options & PACKET_READ_GENTLE_ON_EOF)
type_conversion,pkt-line.c,368,-,+,,7,		if (options & PACKET_READ_GENTLE_ON_READ_ERROR)
type_conversion,pkt-line.c,373,-,+,,9,	return ret;
type_conversion,pkt-line.c,378,-,+,,13,	if (size < 4)
type_conversion,pkt-line.c,380,-,+,,16,	return	hexval(lenbuf_hex[0]) << 12 |
type_conversion,pkt-line.c,381,-,+,,10,		hexval(lenbuf_hex[1]) <<  8 |
type_conversion,pkt-line.c,382,-,+,,10,		hexval(lenbuf_hex[2]) <<  4 |
type_conversion,pkt-line.c,383,-,+,,10,		hexval(lenbuf_hex[3]);
type_conversion,pkt-line.c,395,-,+,,8,"	len = strspn(buffer, ""0123456789abcdefABCDEF"");"
type_conversion,pkt-line.c,397,-,+,,35,	if (!(len == 40 || len == 64) || buffer[len] != ' ')
type_conversion,pkt-line.c,421,-,+,,56,"	if (get_packet_data(fd, src_buffer, src_len, linelen, 4, options) < 0) {"
type_conversion,pkt-line.c,429,-,+,,7,		if (options & PACKET_READ_GENTLE_ON_READ_ERROR)
type_conversion,pkt-line.c,434,-,+,,24,"		packet_trace(""0000"", 4, 0);"
type_conversion,pkt-line.c,438,-,+,,24,"		packet_trace(""0001"", 4, 0);"
type_conversion,pkt-line.c,442,-,+,,24,"		packet_trace(""0002"", 4, 0);"
type_conversion,pkt-line.c,446,-,+,,7,		if (options & PACKET_READ_GENTLE_ON_READ_ERROR)
type_conversion,pkt-line.c,454,-,+,,7,		if (options & PACKET_READ_GENTLE_ON_READ_ERROR)
type_conversion,pkt-line.c,460,-,+,,55,"	if (get_packet_data(fd, src_buffer, src_len, buffer, len, options) < 0) {"
type_conversion,pkt-line.c,465,-,+,,7,	if ((options & PACKET_READ_CHOMP_NEWLINE) &&
type_conversion,pkt-line.c,466,-,+,,13,	    len && buffer[len-1] == '\n') {
type_conversion,pkt-line.c,467,-,+,,7,		if (options & PACKET_READ_USE_SIDEBAND) {
type_conversion,pkt-line.c,468,+,+,*buffer & 0xff,15,			int band = *buffer & 0xff;
type_conversion,pkt-line.c,493,-,+,,16,	buffer[len] = 0;
type_conversion,pkt-line.c,494,-,+,,6,	if (options & PACKET_READ_REDACT_URI_PATH &&
type_conversion,pkt-line.c,498,-,+,,28,"		strbuf_insert(&tracebuf, 0, buffer, len);"
type_conversion,pkt-line.c,499,-,+,,28,"		strbuf_splice(&tracebuf, uri_path_start - buffer,"
type_conversion,pkt-line.c,501,-,+,,30,"		packet_trace(tracebuf.buf, tracebuf.len, 0);"
type_conversion,pkt-line.c,504,-,+,,24,"		packet_trace(buffer, len, 0);"
type_conversion,pkt-line.c,507,-,+,,7,	if ((options & PACKET_READ_DIE_ON_ERR_PACKET) &&
type_conversion,pkt-line.c,527,-,+,,43,"	int len = packet_read(fd, packet_buffer, sizeof(packet_buffer),"
type_conversion,pkt-line.c,536,-,+,,43,"	int len = packet_read(fd, packet_buffer, sizeof(packet_buffer),"
type_conversion,pkt-line.c,564,-,+,,18,		sb_out->len += packet_len;
type_conversion,pkt-line.c,568,-,+,,21,		if (orig_alloc == 0)
type_conversion,pkt-line.c,572,-,+,,10,		return packet_len;
type_conversion,pkt-line.c,574,-,+,,9,	return sb_out->len - orig_len;
type_conversion,pkt-line.c,594,-,+,,31,"			write_or_die(out, buf + 1, len - 1);"
type_conversion,pkt-line.c,597,-,+,,22,			if (scratch.len > 0)
type_conversion,pkt-line.c,600,-,+,,11,			return sideband_type;
type_conversion,pkt-line.c,616,-,+,,24,	reader->buffer_size = sizeof(packet_buffer);
type_conversion,pkt-line.c,620,-,+,,32,"	strbuf_init(&reader->scratch, 0);"
type_conversion,pkt-line.c,648,-,+,,40,"		if (demultiplex_sideband(reader->me, reader->status,"
type_conversion,pkt-line.c,654,-,+,,6,	if (reader->status == PACKET_READ_NORMAL)
type_conversion,pkt-line.c,679,-,+,,25,	writer->use_sideband = 0;
type_conversion,pq.c,27,-,+,,35,	pq->heap[0] = pq->heap[pq->len - 1];
type_conversion,pq.c,31,-,+,,9,	while (i < pq->len) {
type_conversion,pq.c,35,-,+,,7,"		if (j < pq->len && pq_less(&pq->heap[j], &pq->heap[i])) {"
type_conversion,pq.c,38,-,+,,7,"		if (k < pq->len && pq_less(&pq->heap[k], &pq->heap[min])) {"
type_conversion,pq.c,60,-,+,,16,	i = pq->len - 1;
type_conversion,pq.h,38,-,+,,19,	return pq.len == 0;
type_conversion,pq_test.c,21,-,+,,14,	for (i = 1; i < pq.len; i++) {
type_conversion,pq_test.c,32,-,+,,29,"	int N = ARRAY_SIZE(recs) - 1, i;"
type_conversion,preload-index.c,52,-,+,,6,	if (nr + p->offset > index->cache_nr)
type_conversion,preload-index.c,53,-,+,,26,		nr = index->cache_nr - p->offset;
type_conversion,preload-index.c,74,-,+,,13,			pd->n += last_nr - nr;
type_conversion,preload-index.c,95,-,+,,42,"		display_progress(pd->progress, pd->n + last_nr);"
type_conversion,preload-index.c,115,-,+,,25,"	if ((index->cache_nr > 1) && (threads < 2) && git_env_bool(""GIT_TEST_PRELOAD_INDEX"", 0))"
type_conversion,preload-index.c,131,-,+,,63,"		pd.progress = start_delayed_progress(_(""Refreshing index""), index->cache_nr);"
type_conversion,pretty.c,47,-,+,,9,	return fmt == CMIT_FMT_USERFORMAT && !*user_format;
type_conversion,pretty.c,55,-,+,,25,		rev->use_terminator = 1;
type_conversion,pretty.c,71,-,+,,14,	for (i = 0; i < builtin_formats_len; i++) {
type_conversion,pretty.c,76,-,+,,32,	for (i = builtin_formats_len; i < commit_formats_len; i++) {
type_conversion,pretty.c,139,-,+,,27,	size_t found_match_len = 0;
type_conversion,pretty.c,142,-,+,,6,	if (num_redirections >= commit_formats_len)
type_conversion,pretty.c,147,-,+,,14,	for (i = 0; i < commit_formats_len; i++) {
type_conversion,pretty.c,181,-,+,,24,	rev->use_terminator = 0;
type_conversion,pretty.c,201,-,+,,24,	rev->use_terminator = commit_format->is_tformat;
type_conversion,pretty.c,205,-,+,,6,	if (commit_format->format == CMIT_FMT_USERFORMAT) {
type_conversion,pretty.c,223,-,+,,7,		if (c == '\n')
type_conversion,pretty.c,240,-,+,,15,	while ((ch = *s++) != '\0') {
type_conversion,pretty.c,249,-,+,,10,	switch (ch) {
type_conversion,pretty.c,283,-,+,,21,	for (i = sb->len - 1; i >= 0; i--)
type_conversion,pretty.c,284,-,+,,7,		if (sb->buf[i] == '\n')
type_conversion,pretty.c,286,-,+,,19,	return sb->len - (i + 1);
type_conversion,pretty.c,294,-,+,,19,"	strbuf_grow(out, len + 2);"
type_conversion,pretty.c,298,-,+,,11,		switch (s[i]) {
type_conversion,pretty.c,304,-,+,,22,"			strbuf_addch(out, s[i]);"
type_conversion,pretty.c,332,-,+,,16,	if (non_ascii(ch) || !isprint(ch))
type_conversion,pretty.c,340,-,+,,21,	if (isspace(ch) || ch == '=' || ch == '?' || ch == '_')
type_conversion,pretty.c,360,-,+,,6,	if (type != RFC2047_ADDRESS)
type_conversion,pretty.c,364,-,+,,26,	return !(isalnum(ch) || ch == '!' || ch == '*' || ch == '+' || ch == '-' || ch == '/');
type_conversion,pretty.c,372,-,+,,12,		int ch = line[i];
type_conversion,pretty.c,375,-,+,,38,		if ((i + 1 < len) && (ch == '=' && line[i+1] == '?'))
type_conversion,pretty.c,389,-,+,,24,"	strbuf_grow(sb, len * 3 + strlen(encoding) + 100);"
type_conversion,pretty.c,391,-,+,,33,	line_len += strlen(encoding) + 5; /* 5 for =??q? */
type_conversion,pretty.c,403,-,+,,55,"		int is_special = (chrlen > 1) || is_rfc2047_special(*p, type);"
type_conversion,pretty.c,420,-,+,,34,			line_len = strlen(encoding) + 5 + 1; /* =??q? plus SP */
type_conversion,pretty.c,424,-,+,,33,"			strbuf_addf(sb, encoded_fmt, p[i]);"
type_conversion,pretty.c,433,-,+,,21,	timestamp_t date = 0;
type_conversion,pretty.c,434,-,+,,12,	long tz = 0;
type_conversion,pretty.c,439,-,+,,10,		date = 0;
type_conversion,pretty.c,444,-,+,,9,			tz = 0;
type_conversion,pretty.c,446,-,+,,25,"	return show_date(date, tz, mode);"
type_conversion,pretty.c,480,-,+,,46,"		strbuf_add_with_color(sb, line_color, buf, match.rm_so);"
type_conversion,pretty.c,482,-,+,,11,				      match.rm_eo - match.rm_so);
type_conversion,pretty.c,488,-,+,,46,"		strbuf_add_with_color(sb, line_color, buf, eol - buf);"
type_conversion,pretty.c,491,-,+,,23,"		strbuf_add(sb, buf, eol - buf);"
type_conversion,pretty.c,515,-,+,,6,	if (pp->fmt == CMIT_FMT_ONELINE)
type_conversion,pretty.c,519,-,+,,37,"	if (split_ident_line(&ident, line, line_end - line))"
type_conversion,pretty.c,523,-,+,,12,	maillen = ident.mail_end - ident.mail_begin;
type_conversion,pretty.c,525,-,+,,12,	namelen = ident.name_end - ident.name_begin;
type_conversion,pretty.c,543,-,+,,14,			maillen = pp->from_ident->mail_end - mailbuf;
type_conversion,pretty.c,545,-,+,,14,			namelen = pp->from_ident->name_end - namebuf;
type_conversion,pretty.c,550,-,+,,39,"		    needs_rfc2047_encoding(namebuf, namelen)) {"
type_conversion,pretty.c,554,-,+,,44,"		} else if (needs_rfc822_quoting(namebuf, namelen)) {"
type_conversion,pretty.c,556,-,+,,40,"			add_rfc822_quoted(&quoted, namebuf, namelen);"
type_conversion,pretty.c,557,-,+,,45,"			strbuf_add_wrapped_bytes(sb, quoted.buf, quoted.len,"
type_conversion,pretty.c,561,-,+,,42,"			strbuf_add_wrapped_bytes(sb, namebuf, namelen,"
type_conversion,pretty.c,565,-,+,,7,		if (max_length <
type_conversion,pretty.c,566,-,+,,7,"		    last_line_length(sb) + strlen("" <"") + maillen + strlen("">""))"
type_conversion,pretty.c,580,-,+,,7,		if (pp->fmt == CMIT_FMT_FULLER)
type_conversion,pretty.c,581,-,+,,29,"			strbuf_addchars(sb, ' ', 4);"
type_conversion,pretty.c,640,-,+,,7,	if ((pp->fmt == CMIT_FMT_ONELINE) || (cmit_fmt_is_mail(pp->fmt)) ||
type_conversion,pretty.c,674,-,+,,14,		if (!cp || *++cp == '\n')
type_conversion,pretty.c,677,-,+,,10,	start = cp - buf;
type_conversion,pretty.c,681,-,+,,8,	len = cp + 1 - (buf + start);
type_conversion,pretty.c,683,-,+,,54,"	strbuf_attach(&tmp, buf, strlen(buf), strlen(buf) + 1);"
type_conversion,pretty.c,790,-,+,,12,	namelen = s.name_end - s.name_begin;
type_conversion,pretty.c,792,-,+,,12,	maillen = s.mail_end - s.mail_begin;
type_conversion,pretty.c,794,-,+,,6,	if (part == 'N' || part == 'E' || part == 'L') /* mailmap lookup */
type_conversion,pretty.c,796,-,+,,6,	if (part == 'n' || part == 'N') {	/* name */
type_conversion,pretty.c,798,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,800,-,+,,6,	if (part == 'e' || part == 'E') {	/* email */
type_conversion,pretty.c,802,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,804,-,+,,6,	if (part == 'l' || part == 'L') {	/* local-part */
type_conversion,pretty.c,807,-,+,,14,			maillen = at - mail;
type_conversion,pretty.c,809,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,815,-,+,,6,"	if (part == 't') {	/* date, UNIX timestamp */"
type_conversion,pretty.c,816,-,+,,32,"		strbuf_add(sb, s.date_begin, s.date_end - s.date_begin);"
type_conversion,pretty.c,817,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,820,-,+,,10,	switch (part) {
type_conversion,pretty.c,823,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,826,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,829,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,832,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,835,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,838,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,841,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,850,-,+,,6,	if (part == 'n' || part == 'e' || part == 't' || part == 'd'
type_conversion,pretty.c,851,-,+,,9,	    || part == 'D' || part == 'r' || part == 'i')
type_conversion,pretty.c,852,-,+,,10,		return placeholder_len;
type_conversion,pretty.c,854,-,+,,9,	return 0; /* unknown placeholder */
type_conversion,pretty.c,911,-,+,,29,		for (eol = i; msg[eol] && msg[eol] != '\n'; eol++)
type_conversion,pretty.c,917,-,+,,26,			context->author.off = name - msg;
type_conversion,pretty.c,918,-,+,,26,			context->author.len = msg + eol - name;
type_conversion,pretty.c,920,-,+,,29,			context->committer.off = name - msg;
type_conversion,pretty.c,921,-,+,,29,			context->committer.len = msg + eol - name;
type_conversion,pretty.c,925,-,+,,25,	context->message_off = i;
type_conversion,pretty.c,926,-,+,,34,	context->commit_header_parsed = 1;
type_conversion,pretty.c,931,-,+,,10,	return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||
type_conversion,pretty.c,932,-,+,,4,		(c >= '0' && c <= '9') || c == '.' || c == '_';
type_conversion,pretty.c,942,-,+,,14,	for (i = 0; i < len; i++) {
type_conversion,pretty.c,947,-,+,,21,"			strbuf_addch(sb, msg[i]);"
type_conversion,pretty.c,948,-,+,,8,			if (msg[i] == '.')
type_conversion,pretty.c,949,-,+,,12,				while (msg[i+1] == '.')
type_conversion,pretty.c,956,-,+,,12,	trimlen = 0;
type_conversion,pretty.c,958,-,+,,22,		(sb->buf[sb->len - 1 - trimlen] == '.'
type_conversion,pretty.c,959,-,+,,24,		|| sb->buf[sb->len - 1 - trimlen] == '-'))
type_conversion,pretty.c,979,-,+,,19,"		strbuf_grow(sb, linelen + 2);"
type_conversion,pretty.c,982,-,+,,24,"		strbuf_add(sb, line, linelen);"
type_conversion,pretty.c,994,-,+,,19,	c->subject_off = msg - start;
type_conversion,pretty.c,998,-,+,,16,	c->body_off = msg - start;
type_conversion,pretty.c,1000,-,+,,29,	c->commit_message_parsed = 1;
type_conversion,pretty.c,1048,-,+,,45,"	return format_person_part(sb, part, ident, strlen(ident), dmode);"
type_conversion,pretty.c,1058,-,+,,6,	if (placeholder[1] == '(') {
type_conversion,pretty.c,1064,-,+,,11,			return 0;
type_conversion,pretty.c,1068,-,+,,32,				return end - placeholder + 1;
type_conversion,pretty.c,1074,-,+,,32,				return end - placeholder + 1;
type_conversion,pretty.c,1077,-,+,,30,"		if (color_parse_mem(begin, end - begin, color) < 0)"
type_conversion,pretty.c,1080,-,+,,30,		return end - placeholder + 1;
type_conversion,pretty.c,1100,-,+,,9,	return rest - placeholder;
type_conversion,pretty.c,1110,-,+,,10,	switch (*ch++) {
type_conversion,pretty.c,1115,-,+,,7,		if (*ch == '<') {
type_conversion,pretty.c,1118,-,+,,14,		} else if (*ch == '>') {
type_conversion,pretty.c,1125,-,+,,10,		return 0;
type_conversion,pretty.c,1129,-,+,,6,	if (*ch == '|') {
type_conversion,pretty.c,1134,-,+,,6,	if (*ch == '(') {
type_conversion,pretty.c,1140,-,+,,11,			return 0;
type_conversion,pretty.c,1141,-,+,,11,"		width = strtol(start, &next, 10);"
type_conversion,pretty.c,1149,-,+,,11,			return 0;
type_conversion,pretty.c,1152,-,+,,11,			return 0;
type_conversion,pretty.c,1157,-,+,,12,				return 0;
type_conversion,pretty.c,1162,-,+,,7,"		if (*end == ',') {"
type_conversion,pretty.c,1166,-,+,,12,				return 0;
type_conversion,pretty.c,1174,-,+,,12,				return 0;
type_conversion,pretty.c,1178,-,+,,30,		return end - placeholder + 1;
type_conversion,pretty.c,1180,-,+,,9,	return 0;
type_conversion,pretty.c,1192,-,+,,7,		if (*p == '=') {
type_conversion,pretty.c,1197,-,+,,8,"			if (*p != ',' && *p != ')')"
type_conversion,pretty.c,1200,-,+,,16,			*valuelen = 0;
type_conversion,pretty.c,1203,-,+,,6,"	if (*p == ',') {"
type_conversion,pretty.c,1207,-,+,,6,	if (*p == ')') {
type_conversion,pretty.c,1287,-,+,,7,		if (**arg == ')')
type_conversion,pretty.c,1296,-,+,,28,			if (len && argval[len - 1] == ':')
type_conversion,pretty.c,1341,-,+,,19,		size_t arglen = 0;
type_conversion,pretty.c,1345,-,+,,25,		for (i = 0; !found && i < ARRAY_SIZE(option); i++) {
type_conversion,pretty.c,1361,-,+,,14,						return 0;
type_conversion,pretty.c,1363,-,+,,10,					if (endptr - argval != arglen)
type_conversion,pretty.c,1364,-,+,,14,						return 0;
type_conversion,pretty.c,1373,-,+,,14,						return 0;
type_conversion,pretty.c,1384,-,+,,9,	return arg - start;
type_conversion,pretty.c,1442,-,+,,10,	switch (placeholder[0]) {
type_conversion,pretty.c,1448,-,+,,11,"			return 7; /* consumed 7 bytes, ""C(auto)"" */"
type_conversion,pretty.c,1450,-,+,,14,"			int ret = parse_color(sb, placeholder, c);"
type_conversion,pretty.c,1458,-,+,,11,			return ret;
type_conversion,pretty.c,1461,-,+,,7,		if (placeholder[1] == '(') {
type_conversion,pretty.c,1462,-,+,,26,"			unsigned long width = 0, indent1 = 0, indent2 = 0;"
type_conversion,pretty.c,1467,-,+,,12,				return 0;
type_conversion,pretty.c,1470,-,+,,9,"				if (*next == ',') {"
type_conversion,pretty.c,1472,-,+,,10,"					if (*next == ',') {"
type_conversion,pretty.c,1477,-,+,,9,				if (*next != ')')
type_conversion,pretty.c,1478,-,+,,13,					return 0;
type_conversion,pretty.c,1489,-,+,,12,				return 0;
type_conversion,pretty.c,1491,-,+,,31,			return end - placeholder + 1;
type_conversion,pretty.c,1493,-,+,,11,			return 0;
type_conversion,pretty.c,1509,-,+,,12,				return 0;
type_conversion,pretty.c,1513,-,+,,17,		cmd.git_cmd = 1;
type_conversion,pretty.c,1516,-,+,,7,		if (*arg == ':') {
type_conversion,pretty.c,1521,-,+,,7,		if (*arg != ')') {
type_conversion,pretty.c,1523,-,+,,11,			return 0;
type_conversion,pretty.c,1527,-,+,,28,"		pipe_command(&cmd, NULL, 0, &out, 0, &err, 0);"
type_conversion,pretty.c,1532,-,+,,30,		return arg - placeholder + 1;
type_conversion,pretty.c,1539,-,+,,10,	switch (placeholder[0]) {
type_conversion,pretty.c,1544,-,+,,10,		return 1;
type_conversion,pretty.c,1550,-,+,,10,		return 1;
type_conversion,pretty.c,1553,-,+,,10,		return 1;
type_conversion,pretty.c,1558,-,+,,10,		return 1;
type_conversion,pretty.c,1565,-,+,,10,		return 1;
type_conversion,pretty.c,1573,-,+,,10,		return 1;
type_conversion,pretty.c,1576,-,+,,10,		return 1;
type_conversion,pretty.c,1579,-,+,,10,		return 1;
type_conversion,pretty.c,1588,-,+,,11,			return 1;
type_conversion,pretty.c,1592,-,+,,11,			return 0;
type_conversion,pretty.c,1595,-,+,,11,			return 0;
type_conversion,pretty.c,1597,-,+,,10,		return 1;
type_conversion,pretty.c,1599,-,+,,10,		switch(placeholder[1]) {
type_conversion,pretty.c,1606,-,+,,11,"						    c->pretty_ctx->date_mode_explicit,"
type_conversion,pretty.c,1607,-,+,,12,						    (placeholder[1] == 'd'));
type_conversion,pretty.c,1608,-,+,,11,			return 2;
type_conversion,pretty.c,1612,-,+,,11,			return 2;
type_conversion,pretty.c,1617,-,+,,11,"			return format_reflog_person(sb,
						    placeholder[1],
						    c->pretty_ctx->reflog_info,
						    c->pretty_ctx->date_mode);"
type_conversion,pretty.c,1622,-,+,,10,		return 0;	/* unknown %g placeholder */
type_conversion,pretty.c,1626,-,+,,11,			return 1;
type_conversion,pretty.c,1628,-,+,,10,		return 0;
type_conversion,pretty.c,1631,-,+,,6,	if (placeholder[0] == 'G') {
type_conversion,pretty.c,1634,-,+,,11,		switch (placeholder[1]) {
type_conversion,pretty.c,1640,-,+,,12,			switch (c->signature_check.result) {
type_conversion,pretty.c,1658,-,+,,22,"				strbuf_addch(sb, c->signature_check.result);"
type_conversion,pretty.c,1681,-,+,,11,			return 0;
type_conversion,pretty.c,1683,-,+,,10,		return 2;
type_conversion,pretty.c,1688,-,+,,16,		size_t ret = 0;
type_conversion,pretty.c,1690,-,+,,7,		if (*arg == ':') {
type_conversion,pretty.c,1694,-,+,,7,		if (*arg == ')') {
type_conversion,pretty.c,1696,-,+,,30,			ret = arg - placeholder + 1;
type_conversion,pretty.c,1711,-,+,,10,	switch (placeholder[0]) {
type_conversion,pretty.c,1714,-,+,,29,"				   msg + c->author.off, c->author.len,"
type_conversion,pretty.c,1718,-,+,,32,"				   msg + c->committer.off, c->committer.len,"
type_conversion,pretty.c,1723,-,+,,10,		return 1;
type_conversion,pretty.c,1727,-,+,,10,		return 1;
type_conversion,pretty.c,1734,-,+,,10,	switch (placeholder[0]) {
type_conversion,pretty.c,1737,-,+,,10,		return 1;
type_conversion,pretty.c,1740,-,+,,54,"		format_sanitized_subject(sb, msg + c->subject_off, eol - (msg + c->subject_off));"
type_conversion,pretty.c,1741,-,+,,10,		return 1;
type_conversion,pretty.c,1744,-,+,,10,		return 1;
type_conversion,pretty.c,1752,-,+,,16,		size_t ret = 0;
type_conversion,pretty.c,1756,-,+,,7,		if (*arg == ':') {
type_conversion,pretty.c,1761,-,+,,7,		if (*arg == ')') {
type_conversion,pretty.c,1763,-,+,,30,			ret = arg - placeholder + 1;
type_conversion,pretty.c,1771,-,+,,9,	return 0;	/* unknown placeholder */
type_conversion,pretty.c,1779,-,+,,26,	size_t total_consumed = 0;
type_conversion,pretty.c,1792,-,+,,18,		int modifier = *placeholder == 'C';
type_conversion,pretty.c,1800,-,+,,7,		if (*placeholder != '%')
type_conversion,pretty.c,1807,-,+,,6,	if (c->flush_type == flush_left_and_steal) {
type_conversion,pretty.c,1811,-,+,,8,			if (*ch == ' ') {
type_conversion,pretty.c,1817,-,+,,8,			if (*ch != 'm')
type_conversion,pretty.c,1820,-,+,,35,			while (p > sb->buf && ch - p < 10 && *p != '\033')
type_conversion,pretty.c,1822,-,+,,8,			if (*p != '\033' ||
type_conversion,pretty.c,1823,-,+,,8,			    ch + 1 - p != display_mode_esc_sequence_len(p))
type_conversion,pretty.c,1829,-,+,,29,"			strbuf_insert(&local_sb, 0, p, ch + 1 - p);"
type_conversion,pretty.c,1832,-,+,,21,"		strbuf_setlen(sb, ch + 1 - sb->buf);"
type_conversion,pretty.c,1859,-,+,,37,"		size_t sb_len = sb->len, offset = 0;"
type_conversion,pretty.c,1860,-,+,,7,		if (c->flush_type == flush_left)
type_conversion,pretty.c,1861,-,+,,13,			offset = padding - len;
type_conversion,pretty.c,1862,-,+,,12,		else if (c->flush_type == flush_both)
type_conversion,pretty.c,1863,-,+,,13,			offset = (padding - len) / 2;
type_conversion,pretty.c,1868,-,+,,13,		padding = padding - len + local_sb.len;
type_conversion,pretty.c,1869,-,+,,28,"		strbuf_addchars(sb, ' ', padding);"
type_conversion,pretty.c,1890,-,+,,10,	switch (placeholder[0]) {
type_conversion,pretty.c,1903,-,+,,6,	if (magic != NO_MAGIC) {
type_conversion,pretty.c,1906,-,+,,11,		switch (placeholder[0]) {
type_conversion,pretty.c,1914,-,+,,11,			return 0;
type_conversion,pretty.c,1919,-,+,,6,	if (context->flush_type == no_flush)
type_conversion,pretty.c,1923,-,+,,6,	if (magic == NO_MAGIC)
type_conversion,pretty.c,1926,-,+,,31,	if ((orig_len == sb->len) && magic == DEL_LF_BEFORE_EMPTY) {
type_conversion,pretty.c,1927,-,+,,39,		while (sb->len && sb->buf[sb->len - 1] == '\n')
type_conversion,pretty.c,1928,-,+,,32,"			strbuf_setlen(sb, sb->len - 1);"
type_conversion,pretty.c,1930,-,+,,7,		if (magic == ADD_LF_BEFORE_NON_EMPTY)
type_conversion,pretty.c,1932,-,+,,12,		else if (magic == ADD_SP_BEFORE_NON_EMPTY)
type_conversion,pretty.c,1935,-,+,,20,	return consumed + 1;
type_conversion,pretty.c,1950,-,+,,7,		if (*fmt == '+' || *fmt == '-' || *fmt == ' ')
type_conversion,pretty.c,1953,-,+,,11,		switch (*fmt) {
type_conversion,pretty.c,1955,-,+,,15,			w->notes = 1;
type_conversion,pretty.c,1958,-,+,,16,			w->source = 1;
type_conversion,pretty.c,1962,-,+,,18,			w->decorate = 1;
type_conversion,pretty.c,1966,-,+,,19,				w->decorate = 1;
type_conversion,pretty.c,1996,-,+,,36,"	rewrap_message_tail(sb, &context, 0, 0, 0);"
type_conversion,pretty.c,2017,-,+,,42,"			strbuf_attach(sb, out, outsz, outsz + 1);"
type_conversion,pretty.c,2044,-,+,,7,		if (pp->fmt == CMIT_FMT_RAW) {
type_conversion,pretty.c,2045,-,+,,25,"			strbuf_add(sb, line, linelen);"
type_conversion,pretty.c,2050,-,+,,8,			if (linelen != the_hash_algo->hexsz + 8)
type_conversion,pretty.c,2058,-,+,,49,"			strbuf_grow(sb, num * (GIT_MAX_HEXSZ + 10) + 20);"
type_conversion,pretty.c,2069,-,+,,20,"			strbuf_grow(sb, linelen + 80);"
type_conversion,pretty.c,2073,-,+,,8,		    (pp->fmt == CMIT_FMT_FULL || pp->fmt == CMIT_FMT_FULLER)) {
type_conversion,pretty.c,2074,-,+,,20,"			strbuf_grow(sb, linelen + 80);"
type_conversion,pretty.c,2089,-,+,,22,"	strbuf_init(&title, 80);"
type_conversion,pretty.c,2093,-,+,,30,"	strbuf_grow(sb, title.len + 1024);"
type_conversion,pretty.c,2096,-,+,,40,"	    needs_rfc2047_encoding(title.buf, title.len))"
type_conversion,pretty.c,2100,-,+,,43,"		strbuf_add_wrapped_bytes(sb, title.buf, title.len,"
type_conversion,pretty.c,2106,-,+,,15,		for (i = 0; i < pp->in_body_headers.nr; i++) {
type_conversion,pretty.c,2129,-,+,,15,		for (i = 0; i < pp->in_body_headers.nr; i++) {
type_conversion,pretty.c,2143,-,+,,18,	size_t remain = end - start;
type_conversion,pretty.c,2160,-,+,,35,"	while ((tab = memchr(line, '\t', linelen)) != NULL) {"
type_conversion,pretty.c,2173,-,+,,41,"		append_line_with_color(sb, opt, line, tab - line, color,"
type_conversion,pretty.c,2178,-,+,,28,"		strbuf_addchars(sb, ' ', tabwidth - (width % tabwidth));"
type_conversion,pretty.c,2190,-,+,,40,"	append_line_with_color(sb, opt, line, linelen, color, GREP_CONTEXT_BODY,"
type_conversion,pretty.c,2205,-,+,,27,"	strbuf_addchars(sb, ' ', indent);"
type_conversion,pretty.c,2210,-,+,,41,"		append_line_with_color(sb, opt, line, linelen, pp->color,"
type_conversion,pretty.c,2244,-,+,,8,			if (pp->fmt == CMIT_FMT_SHORT)
type_conversion,pretty.c,2249,-,+,,19,"		strbuf_grow(sb, linelen + indent + 20);"
type_conversion,pretty.c,2257,-,+,,8,			if (pp->fmt == CMIT_FMT_MBOXRD &&
type_conversion,pretty.c,2261,-,+,,42,"			append_line_with_color(sb, opt, line, linelen,"
type_conversion,pretty.c,2280,-,+,,6,	if (pp->fmt == CMIT_FMT_USERFORMAT) {
type_conversion,pretty.c,2290,-,+,,6,	if (pp->fmt == CMIT_FMT_ONELINE || cmit_fmt_is_mail(pp->fmt))
type_conversion,pretty.c,2300,-,+,,31,		for (in_body = i = 0; (ch = msg[i]); i++) {
type_conversion,pretty.c,2306,-,+,,23,				if (ch == '\n' && msg[i+1] == '\n')
type_conversion,pretty.c,2317,-,+,,6,	if (pp->fmt != CMIT_FMT_ONELINE && !cmit_fmt_is_mail(pp->fmt)) {
type_conversion,pretty.c,2325,-,+,,6,	if (pp->fmt == CMIT_FMT_ONELINE) {
type_conversion,pretty.c,2332,-,+,,6,	if (pp->fmt != CMIT_FMT_ONELINE)
type_conversion,pretty.c,2337,-,+,,6,	if (pp->fmt != CMIT_FMT_ONELINE)
type_conversion,pretty.h,65,-,+,,10,	return (fmt == CMIT_FMT_EMAIL || fmt == CMIT_FMT_MBOXRD);
type_conversion,prio-queue.c,9,-,+,,9,		cmp = queue->array[i].ctr - queue->array[j].ctr;
type_conversion,prio-queue.c,33,-,+,,25,	queue->insertion_ctr = 0;
type_conversion,procinfo.c,72,-,+,,9,"	ppid = strtol(ppid_lhs, &p, 10);"
type_conversion,procinfo.c,75,-,+,,20,		size_t commlen = comm_rhs - comm;
type_conversion,progress.c,57,-,+,,29,uint64_t progress_test_ns = 0;
type_conversion,progress.c,85,-,+,,25,	v.it_interval.tv_sec = 1;
type_conversion,progress.c,86,-,+,,26,	v.it_interval.tv_usec = 0;
type_conversion,progress.c,93,-,+,,25,"	struct itimerval v = {{0,},};"
type_conversion,progress.c,114,-,+,,23,	int last_count_len = counters_sb->len;
type_conversion,progress.c,122,-,+,,26,		unsigned percent = n * 100 / progress->total;
type_conversion,progress.c,142,-,+,,42,			size_t clear_len = counters_sb->len < last_count_len ?
type_conversion,progress.c,143,-,+,,6,					last_count_len - counters_sb->len + 1 :
type_conversion,progress.c,144,-,+,,6,					0;
type_conversion,progress.c,146,-,+,,31,			size_t progress_line_len = progress->title_len +
type_conversion,progress.c,147,-,+,,26,						counters_sb->len + 2;
type_conversion,progress.c,153,-,+,,24,			} else if (!done && cols < progress_line_len) {
type_conversion,progress.c,154,-,+,,17,"				clear_len = progress->title_len + 1 < cols ?
					    cols - progress->title_len - 1 : 0;"
type_conversion,progress.c,175,-,+,,29,"	strbuf_humanise_bytes(buf, total);"
type_conversion,progress.c,177,-,+,,35,"	strbuf_humanise_rate(buf, rate * 1024);"
type_conversion,progress.c,202,-,+,,37,		tp->prev_total = tp->curr_total = total;
type_conversion,progress.c,204,-,+,,29,"		strbuf_init(&tp->display, 0);"
type_conversion,progress.c,207,-,+,,19,	tp->curr_total = total;
type_conversion,progress.c,210,-,+,,30,	if (now_ns - tp->prev_ns <= 500000000)
type_conversion,progress.c,229,-,+,,37,	misecs = ((now_ns - tp->prev_ns) * 4398) >> 32;
type_conversion,progress.c,231,-,+,,18,	count = total - tp->prev_total;
type_conversion,progress.c,232,-,+,,19,	tp->prev_total = total;
type_conversion,progress.c,241,-,+,,23,	tp->idx = (tp->idx + 1) % TP_IDX_MAX;
type_conversion,progress.c,244,-,+,,30,	if (progress->last_value != -1 && progress_update)
type_conversion,progress.c,260,-,+,,25,	progress->last_value = -1;
type_conversion,progress.c,261,+,+,progress->last_percent = -1,27,	progress->last_percent = -1;
type_conversion,progress.c,266,-,+,,38,"	strbuf_init(&progress->counters_sb, 0);"
type_conversion,progress.c,279,-,+,,55,"		delay_in_secs = git_env_ulong(""GIT_PROGRESS_DELAY"", 2);"
type_conversion,progress.c,286,-,+,,44,"	return start_progress_delay(title, total, get_default_delay(), 0);"
type_conversion,progress.c,291,-,+,,44,"	return start_progress_delay(title, total, 0, 0);"
type_conversion,progress.c,305,-,+,,44,"	return start_progress_delay(title, total, 0, 1);"
type_conversion,progress.c,311,-,+,,44,"	return start_progress_delay(title, total, get_default_delay(), 1);"
type_conversion,progress.c,329,-,+,,45,		misecs = ((now_ns - progress->start_ns) * 4398) >> 32;
type_conversion,progress.c,330,-,+,,46,		rate = tp->curr_total / (misecs ? misecs : 1);
type_conversion,progress.c,331,-,+,,35,"		throughput_string(&tp->display, tp->curr_total, rate);"
type_conversion,progress.c,364,-,+,,30,	if (progress->last_value != -1)
type_conversion,promisor-remote.c,36,-,+,,18,	child.git_cmd = 1;
type_conversion,promisor-remote.c,67,-,+,,6,	if (*remote_name == '/') {
type_conversion,promisor-remote.c,165,-,+,,11,"		xcalloc(1, sizeof(*r->promisor_remote_config));"
type_conversion,promisor-remote.c,222,-,+,,27,"	int *remaining = xcalloc(oid_nr, sizeof(*remaining));"
type_conversion,prompt.c,24,-,+,,37,"	if (strbuf_read(&buffer, pass.out, 20) < 0)"
type_conversion,protocol-caps.c,81,-,+,,33,	struct requested_info info = { 0 };
type_conversion,protocol-caps.c,87,-,+,,9,	while (packet_reader_read(request) == PACKET_READ_NORMAL) {
type_conversion,protocol-caps.c,89,-,+,,16,			info.size = 1;
type_conversion,protocol-caps.c,101,-,+,,6,	if (request->status != PACKET_READ_FLUSH) {
type_conversion,protocol.c,28,-,+,,7,		if (version == protocol_unknown_version)
type_conversion,protocol.c,39,-,+,,7,		if (env == protocol_unknown_version)
type_conversion,protocol.c,70,-,+,,9,				if (v > version)
type_conversion,protocol.c,90,-,+,,7,		if (version == protocol_unknown_version)
type_conversion,protocol.c,92,-,+,,7,		if (version == protocol_v0)
type_conversion,prune-packed.c,14,-,+,,34,"	display_progress(progress, nr + 1);"
type_conversion,prune-packed.c,38,-,+,,70,"		progress = start_delayed_progress(_(""Removing duplicate objects""), 256);"
type_conversion,prune-packed.c,44,-,+,,29,"	display_progress(progress, 256);"
type_conversion,prune.c,64,-,+,,65,"		progress = start_delayed_progress(_(""Checking connectivity""), 0);"
type_conversion,prune.c,101,-,+,,11,"		       (type > 0) ? type_name(type) : ""unknown"");"
type_conversion,prune.c,193,-,+,,35,		revs.exclude_promisor_objects = 1;
type_conversion,publicbasics.c,59,-,+,,7,	case 0:
type_conversion,pull.c,42,-,+,,6,	if (v != REBASE_INVALID)
type_conversion,pull.c,64,-,+,,9,	return *value == REBASE_INVALID ? -1 : 0;
type_conversion,pull.c,75,-,+,,33,static int recurse_submodules = RECURSE_SUBMODULES_DEFAULT;
type_conversion,pull.c,76,-,+,,37,static int recurse_submodules_cli = RECURSE_SUBMODULES_DEFAULT;
type_conversion,pull.c,368,-,+,,24,"		recurse_submodules = git_config_bool(var, value) ?
			RECURSE_SUBMODULES_ON : RECURSE_SUBMODULES_OFF;"
type_conversion,pull.c,535,-,+,,32,	if (recurse_submodules_cli != RECURSE_SUBMODULES_DEFAULT)
type_conversion,pull.c,537,-,+,,8,		case RECURSE_SUBMODULES_ON:
type_conversion,pull.c,540,-,+,,8,		case RECURSE_SUBMODULES_OFF:
type_conversion,pull.c,543,-,+,,8,		case RECURSE_SUBMODULES_ON_DEMAND:
type_conversion,pull.c,580,-,+,,16,	cmd.git_cmd = 1;
type_conversion,pull.c,581,-,+,,27,	cmd.close_object_store = 1;
type_conversion,pull.c,614,-,+,,105,"	if (refs_update_ref(get_main_ref_store(the_repository), ""initial pull"", ""HEAD"", merge_head, curr_head, 0, UPDATE_REFS_DIE_ON_ERR))"
type_conversion,pull.c,624,-,+,,15,	cp.git_cmd = 1;
type_conversion,pull.c,625,-,+,,16,	cp.no_stdin = 1;
type_conversion,pull.c,637,-,+,,15,	cp.git_cmd = 1;
type_conversion,pull.c,638,-,+,,16,	cp.no_stdin = 1;
type_conversion,pull.c,693,-,+,,16,	cmd.git_cmd = 1;
type_conversion,pull.c,792,-,+,,16,	cp.no_stdin = 1;
type_conversion,pull.c,793,-,+,,17,	cp.no_stderr = 1;
type_conversion,pull.c,794,-,+,,15,	cp.git_cmd = 1;
type_conversion,pull.c,884,-,+,,6,	if (opt_rebase == REBASE_MERGES)
type_conversion,pull.c,886,-,+,,11,	else if (opt_rebase == REBASE_INTERACTIVE)
type_conversion,pull.c,909,-,+,,16,	cmd.git_cmd = 1;
type_conversion,pull.c,921,-,+,,24,	if (merge_heads->nr > 1)
type_conversion,pull.c,947,-,+,,14,	for (i = 0; i < merge_heads->nr; i++) {
type_conversion,pull.c,1002,-,+,,32,	if (recurse_submodules_cli != RECURSE_SUBMODULES_DEFAULT)
type_conversion,pull.c,1027,-,+,,7,"		if (opt_rebase >= 0 && opt_ff && !strcmp(opt_ff, ""--ff-only""))"
type_conversion,pull.c,1031,-,+,,6,	if (opt_rebase < 0)
type_conversion,pull.c,1098,-,+,,24,		if (merge_heads.nr > 1)
type_conversion,pull.c,1103,-,+,,23,	if (merge_heads.nr > 1) {
type_conversion,pull.c,1131,-,+,,30,		if ((recurse_submodules == RECURSE_SUBMODULES_ON ||
type_conversion,pull.c,1132,-,+,,30,		     recurse_submodules == RECURSE_SUBMODULES_ON_DEMAND) &&
type_conversion,pull.c,1144,-,+,,38,		if (!ret && (recurse_submodules == RECURSE_SUBMODULES_ON ||
type_conversion,pull.c,1145,-,+,,31,			     recurse_submodules == RECURSE_SUBMODULES_ON_DEMAND))
type_conversion,pull.c,1151,-,+,,38,		if (!ret && (recurse_submodules == RECURSE_SUBMODULES_ON ||
type_conversion,pull.c,1152,-,+,,31,			     recurse_submodules == RECURSE_SUBMODULES_ON_DEMAND))
type_conversion,push.c,42,-,+,,10,		return PUSH_COLOR_RESET;
type_conversion,push.c,44,-,+,,10,		return PUSH_COLOR_ERROR;
type_conversion,push.c,60,-,+,,33,static int recurse_submodules = RECURSE_SUBMODULES_DEFAULT;
type_conversion,push.c,86,-,+,,6,	if (push_default == PUSH_DEFAULT_UPSTREAM &&
type_conversion,push.c,175,-,+,,6,	if (push_default == PUSH_DEFAULT_UNSPECIFIED)
type_conversion,push.c,179,-,+,,6,	if (git_branch_track != BRANCH_TRACK_SIMPLE)
type_conversion,push.c,478,-,+,,25,		*recurse_submodules = RECURSE_SUBMODULES_OFF;
type_conversion,push.c,481,-,+,,31,			if (*recurse_submodules == RECURSE_SUBMODULES_ONLY) {
type_conversion,push.c,483,-,+,,27,				*recurse_submodules = RECURSE_SUBMODULES_ON_DEMAND;
type_conversion,push.c,544,-,+,,13,"		int val = git_config_bool(k, v) ?
			RECURSE_SUBMODULES_ON_DEMAND : RECURSE_SUBMODULES_OFF;"
type_conversion,push.c,643,-,+,,28,	if (recurse_submodules == RECURSE_SUBMODULES_CHECK)
type_conversion,push.c,645,-,+,,33,	else if (recurse_submodules == RECURSE_SUBMODULES_ON_DEMAND)
type_conversion,push.c,647,-,+,,33,	else if (recurse_submodules == RECURSE_SUBMODULES_ONLY)
type_conversion,push.c,685,-,+,,31,		cas.use_force_if_includes = 1;
type_conversion,qsort_s.c,17,-,+,,11,	if (n <= 1)
type_conversion,qsort_s.c,20,-,+,,11,	n1 = n / 2;
type_conversion,qsort_s.c,30,-,+,,14,	while (n1 > 0 && n2 > 0) {
type_conversion,qsort_s.c,43,-,+,,11,	if (n1 > 0)
type_conversion,quote.c,11,-,+,,10,	return (c == '\'' || c == '!');
type_conversion,quote.c,40,-,+,,22,"			strbuf_addch(dst, *src++);"
type_conversion,quote.c,60,-,+,,41,"		if (!isalnum(*p) && !strchr(ok_punct, *p)) {"
type_conversion,quote.c,88,-,+,,19,"	strbuf_grow(dst, 255);"
type_conversion,quote.c,127,-,+,,6,	if (*src != '\'')
type_conversion,quote.c,133,-,+,,7,		if (c != '\'') {
type_conversion,quote.c,138,-,+,,11,		switch (*++src) {
type_conversion,quote.c,140,-,+,,11,			*dst = 0;
type_conversion,quote.c,151,-,+,,33,			if (need_bs_quote(src[1]) && src[2] == '\'') {
type_conversion,quote.c,160,-,+,,11,			*dst = 0;
type_conversion,quote.c,235,-,+,,9,	return cq_lookup[(unsigned char)c] + quote_path_fully > 0;
type_conversion,quote.c,244,-,+,,15,	if (maxlen < 0) {
type_conversion,quote.c,245,-,+,,14,		for (len = 0; !cq_must_quote(s[len]); len++);
type_conversion,quote.c,247,-,+,,23,		for (len = 0; len < maxlen && !cq_must_quote(s[len]); len++);
type_conversion,quote.c,283,-,+,,22,"	size_t len, count = 0;"
type_conversion,quote.c,290,-,+,,14,		if (len == maxlen || (maxlen < 0 && !p[len]))
type_conversion,quote.c,299,-,+,,8,		ch = (unsigned char)*p++;
type_conversion,quote.c,300,-,+,,17,		if (maxlen >= 0)
type_conversion,quote.c,301,-,+,,20,			maxlen -= len + 1;
type_conversion,quote.c,302,-,+,,7,		if (cq_lookup[ch] >= ' ') {
type_conversion,quote.c,313,-,+,,10,		return 0;
type_conversion,quote.c,322,-,+,,37,"	return quote_c_style_counted(name, -1, sb, fp, flags);"
type_conversion,quote.c,329,-,+,,40,"	if (quote_c_style(prefix, NULL, NULL, 0) ||"
type_conversion,quote.c,330,-,+,,38,"	    quote_c_style(path, NULL, NULL, 0)) {"
type_conversion,quote.c,346,-,+,,33,"		quote_c_style(name, NULL, fp, 0);"
type_conversion,quote.c,380,-,+,,29,"	quote_c_style_counted(rel, strlen(rel), out, NULL,"
type_conversion,quote.c,406,-,+,,6,"	if (*quoted++ != '""')"
type_conversion,quote.c,414,-,+,,11,		switch (*quoted++) {
type_conversion,quote.c,425,-,+,,17,		switch ((ch = *quoted++)) {
type_conversion,quote.c,440,-,+,,14,			if ((ch = *quoted++) < '0' || '7' < ch)
type_conversion,quote.c,443,-,+,,14,			if ((ch = *quoted++) < '0' || '7' < ch)
type_conversion,quote.c,463,-,+,,18,	const char sq = '\'';
type_conversion,quote.c,464,-,+,,18,	const char bq = '\\';
type_conversion,quote.c,467,-,+,,19,"	strbuf_addch(sb, sq);"
type_conversion,quote.c,469,-,+,,7,		if (c == sq || c == bq)
type_conversion,quote.c,470,-,+,,21,"			strbuf_addch(sb, bq);"
type_conversion,quote.c,471,-,+,,20,"		strbuf_addch(sb, c);"
type_conversion,quote.c,473,-,+,,19,"	strbuf_addch(sb, sq);"
type_conversion,quote.c,478,-,+,,18,	const char sq = '\'';
type_conversion,quote.c,479,-,+,,18,	const char bq = '\\';
type_conversion,quote.c,483,-,+,,19,"	strbuf_addch(sb, sq);"
type_conversion,quote.c,485,-,+,,7,		if (*c == sq || *c == bq)
type_conversion,quote.c,486,-,+,,21,"			strbuf_addch(sb, bq);"
type_conversion,quote.c,487,-,+,,20,"		strbuf_addch(sb, *c);"
type_conversion,quote.c,490,-,+,,19,"	strbuf_addch(sb, sq);"
type_conversion,quote.c,495,-,+,,18,	const char sq = '\'';
type_conversion,quote.c,496,-,+,,18,	const char bq = '\\';
type_conversion,quote.c,497,-,+,,18,	const char nl = '\n';
type_conversion,quote.c,500,-,+,,19,"	strbuf_addch(sb, sq);"
type_conversion,quote.c,502,-,+,,7,		if (c == nl) {
type_conversion,quote.c,503,-,+,,21,"			strbuf_addch(sb, bq);"
type_conversion,quote.c,507,-,+,,7,		if (c == sq || c == bq)
type_conversion,quote.c,508,-,+,,21,"			strbuf_addch(sb, bq);"
type_conversion,quote.c,509,-,+,,20,"		strbuf_addch(sb, c);"
type_conversion,quote.c,511,-,+,,19,"	strbuf_addch(sb, sq);"
type_conversion,quote.c,520,-,+,,11,		switch (c) {
type_conversion,quote.c,527,-,+,,21,"			strbuf_addch(sb, c);"
type_conversion,quote.c,553,-,+,,6,	if (*src == '^') {
type_conversion,quote.c,556,-,+,,20,"		strbuf_addch(sb, *src++);"
type_conversion,quote.c,558,-,+,,6,	if (*src == '*')
type_conversion,quote.c,560,-,+,,20,"		strbuf_addch(sb, *src++);"
type_conversion,quote.c,563,-,+,,11,		switch (c) {
type_conversion,quote.c,569,-,+,,21,"			strbuf_addch(sb, c);"
type_conversion,quote.c,574,-,+,,8,			if (*src == '\0')
type_conversion,quote.c,576,-,+,,21,"			strbuf_addch(sb, c);"
type_conversion,quote.c,580,-,+,,21,"			strbuf_addch(sb, c);"
type_conversion,range-diff.c,69,-,+,,16,	cp.no_stdin = 1;
type_conversion,range-diff.c,70,-,+,,15,	cp.git_cmd = 1;
type_conversion,range-diff.c,74,-,+,,37,"	if (strbuf_read(&contents, cp.out, 0) < 0) {"
type_conversion,range-diff.c,84,-,+,,16,"	for (; size > 0; size -= len, line += len) {"
type_conversion,range-diff.c,90,-,+,,11,			*eol = '\0';
type_conversion,range-diff.c,93,-,+,,10,			len = size;
type_conversion,range-diff.c,127,-,+,,12,			a_len = strlen(a);
type_conversion,range-diff.c,132,-,+,,12,				*eol = '\n';
type_conversion,range-diff.c,133,-,+,,15,			orig_len = len;
type_conversion,range-diff.c,134,-,+,,10,"			len = parse_git_diff_header(&root, &linenr, 0, line,
						    len, size, &patch);"
type_conversion,range-diff.c,135,-,+,,11,"						    len, size, &patch);"
type_conversion,range-diff.c,136,-,+,,14,			if (len < 0) {
type_conversion,range-diff.c,148,-,+,,31,	range_diff_opts.dual_color = simple_color < 1;
type_conversion,range-diff.c,149,-,+,,30,	range_diff_opts.left_only = left_only;
type_conversion,range-diff.c,150,-,+,,31,	range_diff_opts.right_only = right_only;
type_conversion,range-diff.c,173,-,+,,28,				   line[strlen(line) - 1] == ':') {
type_conversion,range-diff.c,177,-,+,,31,"					    (int)(strlen(line) - 1), line);"
type_conversion,range-diff.c,182,-,+,,39,"				strbuf_add(&buf, line, p - line + 1);"
type_conversion,range-diff.c,202,-,+,,12,		else if (line[0] == '>') {
type_conversion,range-diff.c,205,-,+,,14,		} else if (line[0] == '<') {
type_conversion,range-diff.c,208,-,+,,14,		} else if (line[0] == '#') {
type_conversion,range-diff.c,249,-,+,,14,	for (i = 0; i < a->nr; i++) {
type_conversion,range-diff.c,260,-,+,,14,	for (i = 0; i < b->nr; i++) {
type_conversion,range-diff.c,293,-,+,,31,"	diffsize_consume(data, NULL, 0);"
type_conversion,range-diff.c,298,-,+,,19,	xpparam_t pp = { 0 };
type_conversion,range-diff.c,299,-,+,,23,	xdemitconf_t cfg = { 0 };
type_conversion,range-diff.c,304,-,+,,13,	mf1.size = strlen(a);
type_conversion,range-diff.c,306,-,+,,13,	mf2.size = strlen(b);
type_conversion,range-diff.c,308,-,+,,15,	cfg.ctxlen = 3;
type_conversion,range-diff.c,321,-,+,,10,	int n = a->nr + b->nr;
type_conversion,range-diff.c,329,-,+,,14,	for (i = 0; i < a->nr; i++) {
type_conversion,range-diff.c,332,-,+,,15,		for (j = 0; j < b->nr; j++) {
type_conversion,range-diff.c,346,-,+,,12,		for (j = b->nr; j < n; j++)
type_conversion,range-diff.c,350,-,+,,14,	for (j = 0; j < b->nr; j++) {
type_conversion,range-diff.c,355,-,+,,12,		for (i = a->nr; i < n; i++)
type_conversion,range-diff.c,359,-,+,,11,	for (i = a->nr; i < n; i++)
type_conversion,range-diff.c,360,-,+,,12,		for (j = b->nr; j < n; j++)
type_conversion,range-diff.c,365,-,+,,14,	for (i = 0; i < a->nr; i++)
type_conversion,range-diff.c,366,-,+,,22,		if (a2b[i] >= 0 && a2b[i] < b->nr) {
type_conversion,range-diff.c,405,-,+,,12,		status = '<';
type_conversion,range-diff.c,408,-,+,,12,		status = '>';
type_conversion,range-diff.c,411,-,+,,12,		status = '!';
type_conversion,range-diff.c,414,-,+,,12,		status = '=';
type_conversion,range-diff.c,418,-,+,,21,"	strbuf_addstr(buf, status == '!' ? color_old : color);"
type_conversion,range-diff.c,425,-,+,,6,	if (status == '!')
type_conversion,range-diff.c,427,-,+,,20,"	strbuf_addch(buf, status);"
type_conversion,range-diff.c,428,-,+,,6,	if (status == '!')
type_conversion,range-diff.c,439,-,+,,7,		if (status == '!')
type_conversion,range-diff.c,447,-,+,,29,"	fwrite(buf->buf, buf->len, 1, diffopt->file);"
type_conversion,range-diff.c,459,-,+,,37,"	fill_filespec(spec, null_oid(), 0, 0100644);"
type_conversion,range-diff.c,462,-,+,,24,	spec->should_munmap = 0;
type_conversion,range-diff.c,463,-,+,,19,	spec->is_stdin = 1;
type_conversion,range-diff.c,488,-,+,,37,	int patch_no_width = decimal_width(1 + (a->nr > b->nr ? a->nr : b->nr));
type_conversion,range-diff.c,501,-,+,,37,	opts.flags.suppress_diff_headers = 1;
type_conversion,range-diff.c,503,-,+,,3,		range_diff_opts->dual_color;
type_conversion,range-diff.c,504,-,+,,47,	opts.flags.suppress_hunk_header_line_count = 1;
type_conversion,range-diff.c,518,-,+,,9,	while (i < a->nr || j < b->nr) {
type_conversion,range-diff.c,520,-,+,,12,		a_util = i < a->nr ? a->items[i].util : NULL;
type_conversion,range-diff.c,521,-,+,,12,		b_util = j < b->nr ? b->items[j].util : NULL;
type_conversion,range-diff.c,524,-,+,,10,		while (i < a->nr && a_util->shown)
type_conversion,range-diff.c,525,-,+,,13,			a_util = ++i < a->nr ? a->items[i].util : NULL;
type_conversion,range-diff.c,528,-,+,,7,		if (i < a->nr && a_util->matching < 0) {
type_conversion,range-diff.c,537,-,+,,10,		while (j < b->nr && b_util->matching < 0) {
type_conversion,range-diff.c,541,-,+,,13,			b_util = ++j < b->nr ? b->items[j].util : NULL;
type_conversion,range-diff.c,545,-,+,,7,		if (j < b->nr) {
type_conversion,range-diff.c,601,-,+,,15,		for (i = 0; i < revs.pending.nr; i++)
type_conversion,range-diff.c,606,-,+,,15,		for (i = 0; i < revs.pending.nr; i++) {
type_conversion,range-diff.c,609,-,+,,8,			if (obj->type == OBJ_COMMIT)
type_conversion,reachable.c,30,-,+,,19,	if ((cp->count & 1023) == 0)
type_conversion,reachable.c,68,-,+,,25,"		strbuf_complete(&buf, '/');"
type_conversion,reachable.c,70,-,+,,19,		for (size_t i = 0; i < ARRAY_SIZE(path); i++) {
type_conversion,reachable.c,131,-,+,,18,	cmd.use_shell = 1;
type_conversion,reachable.c,170,-,+,,11,	for (i = 0; i < programs->nr; i++) {
type_conversion,reachable.c,209,-,+,,6,	if (type < 0)
type_conversion,reachable.c,225,-,+,,34,"		    oid_to_hex(oid), type_name(type));"
type_conversion,reachable.c,233,-,+,,31,"		data->cb(obj, pack, offset, mtime);"
type_conversion,reachable.c,271,-,+,,31,"	add_recent_object(oid, NULL, 0, st.st_mtime, data);"
type_conversion,reachable.c,281,-,+,,22,	timestamp_t mtime = p->mtime;
type_conversion,reachable.c,293,-,+,,11,"		mtime = nth_packed_mtime(p, pos);"
type_conversion,reachable.c,313,-,+,,39,"	oidset_init(&data.extra_recent_oids, 0);"
type_conversion,reachable.c,321,-,+,,10,	flags = FOR_EACH_OBJECT_LOCAL_ONLY | FOR_EACH_OBJECT_PACK_ORDER;
type_conversion,reachable.c,323,-,+,,12,		flags |= FOR_EACH_OBJECT_SKIP_IN_CORE_KEPT_PACKS;
type_conversion,reachable.c,358,-,+,,22,	revs->tag_objects = 1;
type_conversion,reachable.c,359,-,+,,23,	revs->blob_objects = 1;
type_conversion,reachable.c,360,-,+,,23,	revs->tree_objects = 1;
type_conversion,reachable.c,363,-,+,,37,"	add_index_objects_to_pending(revs, 0);"
type_conversion,reachable.c,378,-,+,,32,"		add_reflogs_to_pending(revs, 0);"
type_conversion,reachable.c,381,-,+,,13,	cp.count = 0;
type_conversion,reachable.c,394,-,+,,32,		revs->ignore_missing_links = 1;
type_conversion,read-cache-ll.h,99,-,+,,27,	int mem_pool_allocated = dst->mem_pool_allocated;
type_conversion,read-cache-ll.h,110,-,+,,28,	dst->mem_pool_allocated = mem_pool_allocated;
type_conversion,read-cache.c,95,-,+,,27,	ce->mem_pool_allocated = 1;
type_conversion,read-cache.c,102,-,+,,33,"	ce = mem_pool_calloc(mem_pool, 1, cache_entry_size(len));"
type_conversion,read-cache.c,103,-,+,,27,	ce->mem_pool_allocated = 1;
type_conversion,read-cache.c,118,-,+,,28,"		mem_pool_init(*pool_ptr, 0);"
type_conversion,read-cache.c,152,-,+,,16,	int namelen = strlen(new_name);
type_conversion,read-cache.c,154,-,+,,45,"	new_entry = make_empty_cache_entry(istate, namelen);"
type_conversion,read-cache.c,157,-,+,,26,	new_entry->ce_namelen = namelen;
type_conversion,read-cache.c,158,-,+,,21,	new_entry->index = 0;
type_conversion,read-cache.c,159,-,+,,36,"	memcpy(new_entry->name, new_name, namelen + 1);"
type_conversion,read-cache.c,206,-,+,,25,		return (ce->ce_mode & (trust_executable_bit ? 0755 : 0644)) | S_IFREG;
type_conversion,read-cache.c,234,-,+,,59,"		if (!index_fd(istate, &oid, fd, st, OBJ_BLOB, ce->name, 0))"
type_conversion,read-cache.c,304,-,+,,25,	unsigned int changed = 0;
type_conversion,read-cache.c,316,-,+,,8,		    (0100 & (ce->ce_mode ^ st->st_mode)))
type_conversion,read-cache.c,330,-,+,,10,		return changed;
type_conversion,read-cache.c,335,-,+,,13,"	changed |= match_stat_data(&ce->ce_stat_data, st);"
type_conversion,read-cache.c,343,-,+,,9,	return changed;
type_conversion,read-cache.c,409,-,+,,12,"	changed = ce_match_stat_basic(ce, st);"
type_conversion,read-cache.c,431,-,+,,15,"			changed |= ce_modified_check_fs(istate, ce, st);"
type_conversion,read-cache.c,434,-,+,,9,	return changed;
type_conversion,read-cache.c,468,-,+,,63,	    (S_ISGITLINK(ce->ce_mode) || ce->ce_stat_data.sd_size != 0))
type_conversion,read-cache.c,482,-,+,,28,"	cmp = name_compare(name1, len1, name2, len2);"
type_conversion,read-cache.c,499,-,+,,45,"	return cache_name_stage_compare(ce1->name, ce1->ce_namelen, ce_stage(ce1),"
type_conversion,read-cache.c,500,-,+,,18,"				  ce2->name, ce2->ce_namelen, ce_stage(ce2));"
type_conversion,read-cache.c,511,-,+,,9,	last = istate->cache_nr;
type_conversion,read-cache.c,525,-,+,,6,	if (search_mode == EXPAND_SPARSE && istate->sparse_index &&
type_conversion,read-cache.c,538,-,+,,24,		    ce_namelen(ce) < namelen &&
type_conversion,read-cache.c,572,-,+,,6,	if (pos >= istate->cache_nr)
type_conversion,read-cache.c,589,-,+,,15,	for (i = j = 0; i < istate->cache_nr; i++) {
type_conversion,read-cache.c,611,-,+,,41,"	int pos = index_name_pos(istate, path, strlen(path));"
type_conversion,read-cache.c,616,-,+,,9,"	while (pos < istate->cache_nr && !strcmp(istate->cache[pos]->name, path))"
type_conversion,read-cache.c,623,-,+,,9,"	return namelen != ce_namelen(ce) || memcmp(path, ce->name, namelen);"
type_conversion,read-cache.c,637,-,+,,6,	if (pos >= istate->cache_nr ||
type_conversion,read-cache.c,642,-,+,,22,	if (ce_stage(ce) == 1 && pos + 1 < istate->cache_nr &&
type_conversion,read-cache.c,643,-,+,,47,			ce_stage((ce = istate->cache[pos + 1])) == 2 &&
type_conversion,read-cache.c,652,-,+,,30,"	return ce_namelen(alias) != len || memcmp(ce->name, alias->name, len);"
type_conversion,read-cache.c,677,-,+,,45,"	new_entry = make_empty_cache_entry(istate, len);"
type_conversion,read-cache.c,678,-,+,,39,"	memcpy(new_entry->name, alias->name, len);"
type_conversion,read-cache.c,687,-,+,,28,"	if (write_object_file("""", 0, OBJ_BLOB, &oid))"
type_conversion,read-cache.c,712,-,+,,12,	namelen = strlen(path);
type_conversion,read-cache.c,716,-,+,,21,		while (namelen && path[namelen-1] == '/')
type_conversion,read-cache.c,719,-,+,,38,"	ce = make_empty_cache_entry(istate, namelen);"
type_conversion,read-cache.c,720,-,+,,25,"	memcpy(ce->name, path, namelen);"
type_conversion,read-cache.c,721,-,+,,19,	ce->ce_namelen = namelen;
type_conversion,read-cache.c,811,-,+,,17,"	return xcalloc(1, cache_entry_size(len));"
type_conversion,read-cache.c,824,-,+,,9,"	return verify_path_internal(path, mode) == PATH_OK;"
type_conversion,read-cache.c,837,-,+,,6,"	if (verify_path_internal(path, mode) == PATH_INVALID) {"
type_conversion,read-cache.c,842,-,+,,8,	len = strlen(path);
type_conversion,read-cache.c,843,-,+,,38,"	ce = make_empty_cache_entry(istate, len);"
type_conversion,read-cache.c,846,-,+,,25,"	memcpy(ce->name, path, len);"
type_conversion,read-cache.c,847,-,+,,33,	ce->ce_flags = create_ce_flags(stage);
type_conversion,read-cache.c,848,-,+,,19,	ce->ce_namelen = len;
type_conversion,read-cache.c,871,-,+,,8,	len = strlen(path);
type_conversion,read-cache.c,872,-,+,,40,"	ce = make_empty_transient_cache_entry(len, ce_mem_pool);"
type_conversion,read-cache.c,875,-,+,,25,"	memcpy(ce->name, path, len);"
type_conversion,read-cache.c,876,-,+,,33,	ce->ce_flags = create_ce_flags(stage);
type_conversion,read-cache.c,877,-,+,,19,	ce->ce_namelen = len;
type_conversion,read-cache.c,895,-,+,,10,	switch (flip) {
type_conversion,read-cache.c,897,-,+,,18,		ce->ce_mode |= 0111;
type_conversion,read-cache.c,900,-,+,,18,		ce->ce_mode &= ~0111;
type_conversion,read-cache.c,916,-,+,,26,"	return ce_namelen(b) == len && !memcmp(a->name, b->name, len);"
type_conversion,read-cache.c,936,-,+,,6,	if (*rest == '\0' || is_dir_sep(*rest))
type_conversion,read-cache.c,939,-,+,,10,	switch (*rest) {
type_conversion,read-cache.c,951,-,+,,7,		if (rest[1] != 'i' && rest[1] != 'I')
type_conversion,read-cache.c,953,-,+,,7,		if (rest[2] != 't' && rest[2] != 'T')
type_conversion,read-cache.c,955,-,+,,7,		if (rest[3] == '\0' || is_dir_sep(rest[3]))
type_conversion,read-cache.c,960,-,+,,9,			    (*rest == '\0' || is_dir_sep(*rest)))
type_conversion,read-cache.c,965,-,+,,7,		if (rest[1] == '\0' || is_dir_sep(rest[1]))
type_conversion,read-cache.c,974,-,+,,11,	char c = 0;
type_conversion,read-cache.c,986,-,+,,18,		if (is_dir_sep(c)) {
type_conversion,read-cache.c,1011,-,+,,9,"			if ((c == '.' && !verify_dotfile(path, mode)) ||"
type_conversion,read-cache.c,1012,-,+,,19,			    is_dir_sep(c))
type_conversion,read-cache.c,1018,-,+,,8,			if (c == '\0')
type_conversion,read-cache.c,1021,-,+,,14,		} else if (c == '\\' && protect_ntfs) {
type_conversion,read-cache.c,1046,-,+,,9,	while (pos < istate->cache_nr) {
type_conversion,read-cache.c,1049,-,+,,7,		if (len >= ce_namelen(p))
type_conversion,read-cache.c,1051,-,+,,29,"		if (memcmp(name, p->name, len))"
type_conversion,read-cache.c,1053,-,+,,22,		if (ce_stage(p) != stage)
type_conversion,read-cache.c,1055,-,+,,7,		if (p->name[len] != '/')
type_conversion,read-cache.c,1079,-,+,,14,	for (k = 0; s1[k] == s2[k]; k++)
type_conversion,read-cache.c,1080,-,+,,7,		if (s1[k] == '\0')
type_conversion,read-cache.c,1084,-,+,,9,	return (unsigned char)s1[k] - (unsigned char)s2[k];
type_conversion,read-cache.c,1114,-,+,,25,	if (istate->cache_nr > 0) {
type_conversion,read-cache.c,1116,-,+,,37,"			istate->cache[istate->cache_nr - 1]->name,"
type_conversion,read-cache.c,1119,-,+,,8,			if (name[len_eq_last] != '/') {
type_conversion,read-cache.c,1161,-,+,,8,			if (*--slash == '/')
type_conversion,read-cache.c,1166,-,+,,9,		len = slash - name;
type_conversion,read-cache.c,1168,-,+,,44,"		pos = index_name_stage_pos(istate, name, len, stage, EXPAND_SPARSE);"
type_conversion,read-cache.c,1194,-,+,,10,		while (pos < istate->cache_nr) {
type_conversion,read-cache.c,1197,-,+,,9,			    (p->name[len] != '/') ||
type_conversion,read-cache.c,1200,-,+,,23,			if (ce_stage(p) == stage && !(p->ce_flags & CE_REMOVE))
type_conversion,read-cache.c,1261,-,+,,25,	if (istate->cache_nr > 0 &&
type_conversion,read-cache.c,1262,-,+,,53,"		strcmp(ce->name, istate->cache[istate->cache_nr - 1]->name) > 0)"
type_conversion,read-cache.c,1263,-,+,,33,		pos = index_pos_to_insert_pos(istate->cache_nr);
type_conversion,read-cache.c,1289,-,+,,6,	if (pos < istate->cache_nr && ce_stage(ce) == 0) {
type_conversion,read-cache.c,1299,-,+,,6,"	if (verify_path_internal(ce->name, ce->ce_mode) == PATH_INVALID)"
type_conversion,read-cache.c,1318,-,+,,9,		pos = istate->cache_nr;
type_conversion,read-cache.c,1332,-,+,,25,	if (istate->cache_nr > pos + 1)
type_conversion,read-cache.c,1446,-,+,,51,"	memcpy(updated->name, ce->name, ce->ce_namelen + 1);"
type_conversion,read-cache.c,1499,-,+,,43,	int really = (flags & REFRESH_REALLY) != 0;
type_conversion,read-cache.c,1500,-,+,,53,	int allow_unmerged = (flags & REFRESH_UNMERGED) != 0;
type_conversion,read-cache.c,1501,-,+,,41,	int quiet = (flags & REFRESH_QUIET) != 0;
type_conversion,read-cache.c,1502,-,+,,52,	int not_new = (flags & REFRESH_IGNORE_MISSING) != 0;
type_conversion,read-cache.c,1503,-,+,,65,	int ignore_submodules = (flags & REFRESH_IGNORE_SUBMODULES) != 0;
type_conversion,read-cache.c,1504,-,+,,71,	int ignore_skip_worktree = (flags & REFRESH_IGNORE_SKIP_WORKTREE) != 0;
type_conversion,read-cache.c,1521,-,+,,9,						  istate->cache_nr);
type_conversion,read-cache.c,1534,-,+,,34,"	preload_index(istate, pathspec, 0);"
type_conversion,read-cache.c,1537,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,read-cache.c,1562,-,+,,12,			while ((i < istate->cache_nr) &&
type_conversion,read-cache.c,1585,-,+,,30,"		display_progress(progress, i);"
type_conversion,read-cache.c,1620,-,+,,29,"	display_progress(progress, istate->cache_nr);"
type_conversion,read-cache.c,1650,-,+,,14,			version = r->settings.index_version;
type_conversion,read-cache.c,1659,-,+,,12,"	version = strtoul(envversion, &endp, 10);"
type_conversion,read-cache.c,1692,-,+,,37,	unsigned char data[GIT_MAX_RAWSZ + 2 * sizeof(uint16_t)];
type_conversion,read-cache.c,1771,-,+,,7,		if (*ext < 'A' || 'Z' < *ext)
type_conversion,read-cache.c,1803,-,+,,20,	size_t copy_len = 0;
type_conversion,read-cache.c,1811,-,+,,37,	int expand_name_field = version == 4;
type_conversion,read-cache.c,1814,-,+,,10,	flags = get_be16(flagsp);
type_conversion,read-cache.c,1819,-,+,,20,		extended_flags = get_be16(flagsp + sizeof(uint16_t)) << 16;
type_conversion,read-cache.c,1823,-,+,,12,		flags |= extended_flags;
type_conversion,read-cache.c,1824,-,+,,34,		name = (const char *)(flagsp + 2 * sizeof(uint16_t));
type_conversion,read-cache.c,1836,-,+,,19,			previous_len = previous_ce->ce_namelen;
type_conversion,read-cache.c,1876,-,+,,19,	ce->ce_namelen = len;
type_conversion,read-cache.c,1877,-,+,,14,	ce->index = 0;
type_conversion,read-cache.c,1883,-,+,,43,"		memcpy(ce->name + copy_len, name, len + 1 - copy_len);"
type_conversion,read-cache.c,1884,-,+,,15,		*ent_size = (name - ((char *)ondisk)) + len + 1 - copy_len;
type_conversion,read-cache.c,1886,-,+,,32,"		memcpy(ce->name, name, len + 1);"
type_conversion,read-cache.c,1899,-,+,,11,	for (i = 1; i < istate->cache_nr; i++) {
type_conversion,read-cache.c,1900,-,+,,46,		struct cache_entry *ce = istate->cache[i - 1];
type_conversion,read-cache.c,1967,-,+,,9,	return entries * (sizeof(struct cache_entry) + CACHE_ENTRY_PATH_LENGTH);
type_conversion,read-cache.c,1972,-,+,,19,	long per_entry = sizeof(struct cache_entry) - sizeof(struct ondisk_cache_entry);
type_conversion,read-cache.c,1978,-,+,,23,	return ondisk_size + entries * per_entry;
type_conversion,read-cache.c,2013,-,+,,61,	while (src_offset <= p->mmap_size - the_hash_algo->rawsz - 8) {
type_conversion,read-cache.c,2024,-,+,,7,					 extsize) < 0) {
type_conversion,read-cache.c,2028,-,+,,17,		src_offset += 8;
type_conversion,read-cache.c,2029,-,+,,17,		src_offset += extsize;
type_conversion,read-cache.c,2067,-,+,,25,	if (istate->version == 4) {
type_conversion,read-cache.c,2076,-,+,,9,"					0, istate->cache_nr, mmap, src_offset, NULL);"
type_conversion,read-cache.c,2114,-,+,,48,"			p->offset, p->ieot->entries[i].nr, p->mmap, p->ieot->entries[i].offset, NULL);"
type_conversion,read-cache.c,2125,-,+,,27,	unsigned long consumed = 0;
type_conversion,read-cache.c,2132,-,+,,37,"	mem_pool_init(istate->ce_mem_pool, 0);"
type_conversion,read-cache.c,2160,-,+,,26,		if (istate->version == 4) {
type_conversion,read-cache.c,2162,-,+,,41,				estimate_cache_size_from_compressed(nr));
type_conversion,read-cache.c,2165,-,+,,36,"				estimate_cache_size(mmap_size, nr));"
type_conversion,read-cache.c,2215,-,+,,28,	size_t extension_offset = 0;
type_conversion,read-cache.c,2220,-,+,,10,		return istate->cache_nr;
type_conversion,read-cache.c,2222,-,+,,26,	istate->timestamp.sec = 0;
type_conversion,read-cache.c,2223,-,+,,27,	istate->timestamp.nsec = 0;
type_conversion,read-cache.c,2228,-,+,,26,			istate->initialized = 1;
type_conversion,read-cache.c,2241,-,+,,67,"	mmap = xmmap_gently(NULL, mmap_size, PROT_READ, MAP_PRIVATE, fd, 0);"
type_conversion,read-cache.c,2256,-,+,,24,	istate->initialized = 1;
type_conversion,read-cache.c,2340,-,+,,9,	return istate->cache_nr;
type_conversion,read-cache.c,2369,-,+,,10,		return istate->cache_nr;
type_conversion,read-cache.c,2491,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,read-cache.c,2512,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,read-cache.c,2533,-,+,,32,		opt.flags.exit_with_status = 1;
type_conversion,read-cache.c,2535,-,+,,22,			opt.flags.quick = 1;
type_conversion,read-cache.c,2545,-,+,,35,		return opt.flags.has_changes != 0;
type_conversion,read-cache.c,2549,-,+,,21,		for (i = 0; sb && i < istate->cache_nr; i++) {
type_conversion,read-cache.c,2621,-,+,,30,		ce->ce_stat_data.sd_size = 0;
type_conversion,read-cache.c,2659,-,+,,38,	static unsigned char padding[8] = { 0x00 };
type_conversion,read-cache.c,2663,-,+,,20,		ce->ce_namelen = 0;
type_conversion,read-cache.c,2672,-,+,,24,"		hashwrite(f, ondisk, size);"
type_conversion,read-cache.c,2673,-,+,,26,"		hashwrite(f, ce->name, len);"
type_conversion,read-cache.c,2680,-,+,,9,		      common < previous_name->len &&
type_conversion,read-cache.c,2681,-,+,,9,		      ce->name[common] == previous_name->buf[common]);
type_conversion,read-cache.c,2684,-,+,,36,		to_remove = previous_name->len - common;
type_conversion,read-cache.c,2685,-,+,,31,"		prefix_size = encode_varint(to_remove, to_remove_vi);"
type_conversion,read-cache.c,2688,-,+,,24,"		hashwrite(f, ondisk, size);"
type_conversion,read-cache.c,2689,-,+,,30,"		hashwrite(f, to_remove_vi, prefix_size);"
type_conversion,read-cache.c,2690,-,+,,52,"		hashwrite(f, ce->name + common, ce_namelen(ce) - common);"
type_conversion,read-cache.c,2691,-,+,,25,"		hashwrite(f, padding, 1);"
type_conversion,read-cache.c,2693,-,+,,32,"		strbuf_splice(previous_name, common, to_remove,"
type_conversion,read-cache.c,2694,-,+,,46,"			      ce->name + common, ce_namelen(ce) - common);"
type_conversion,read-cache.c,2725,-,+,,6,	if (st.st_size < sizeof(struct cache_header) + the_hash_algo->rawsz)
type_conversion,read-cache.c,2728,-,+,,52,"	n = pread_in_full(fd, hash, the_hash_algo->rawsz, st.st_size - the_hash_algo->rawsz);"
type_conversion,read-cache.c,2729,-,+,,6,	if (n != the_hash_algo->rawsz)
type_conversion,read-cache.c,2750,-,+,,16,	int entries = istate->cache_nr;
type_conversion,read-cache.c,2828,-,+,,16,	int entries = istate->cache_nr;
type_conversion,read-cache.c,2832,-,+,,24,	int drop_cache_tree = istate->drop_cache_tree;
type_conversion,read-cache.c,2861,-,+,,25,	if (istate->version == 3 || istate->version == 2)
type_conversion,read-cache.c,2862,-,+,,21,		istate->version = extended ? 3 : 2;
type_conversion,read-cache.c,2864,-,+,,16,	hdr_version = istate->version;
type_conversion,read-cache.c,2870,-,+,,21,"	hashwrite(f, &hdr, sizeof(hdr));"
type_conversion,read-cache.c,2890,-,+,,8,			if (ieot_blocks > istate->cache_nr)
type_conversion,read-cache.c,2891,-,+,,19,				ieot_blocks = istate->cache_nr;
type_conversion,read-cache.c,2899,-,+,,19,"			ieot = xcalloc(1, sizeof(struct index_entry_offset_table)"
type_conversion,read-cache.c,2900,-,+,,8,				+ (ieot_blocks * sizeof(struct index_entry_offset)));
type_conversion,read-cache.c,2931,-,+,,37,			ieot->entries[ieot->nr].offset = offset;
type_conversion,read-cache.c,2939,-,+,,29,				previous_name->buf[0] = 0;
type_conversion,read-cache.c,2953,-,+,,36,		ieot->entries[ieot->nr].offset = offset;
type_conversion,read-cache.c,2985,-,+,,76,"		err = write_index_ext_header(f, eoie_c, CACHE_EXT_INDEXENTRYOFFSETTABLE, sb.len) < 0;"
type_conversion,read-cache.c,2986,-,+,,24,"		hashwrite(f, sb.buf, sb.len);"
type_conversion,read-cache.c,2993,-,+,,6,	if (write_extensions & WRITE_SPLIT_INDEX_EXTENSION &&
type_conversion,read-cache.c,3002,-,+,,13,					       sb.len) < 0;
type_conversion,read-cache.c,3003,-,+,,24,"		hashwrite(f, sb.buf, sb.len);"
type_conversion,read-cache.c,3008,-,+,,6,	if (write_extensions & WRITE_CACHE_TREE_EXTENSION &&
type_conversion,read-cache.c,3013,-,+,,59,"		err = write_index_ext_header(f, eoie_c, CACHE_EXT_TREE, sb.len) < 0;"
type_conversion,read-cache.c,3014,-,+,,24,"		hashwrite(f, sb.buf, sb.len);"
type_conversion,read-cache.c,3019,-,+,,6,	if (write_extensions & WRITE_RESOLVE_UNDO_EXTENSION &&
type_conversion,read-cache.c,3025,-,+,,11,					     sb.len) < 0;
type_conversion,read-cache.c,3026,-,+,,24,"		hashwrite(f, sb.buf, sb.len);"
type_conversion,read-cache.c,3031,-,+,,6,	if (write_extensions & WRITE_UNTRACKED_CACHE_EXTENSION &&
type_conversion,read-cache.c,3037,-,+,,11,					     sb.len) < 0;
type_conversion,read-cache.c,3038,-,+,,24,"		hashwrite(f, sb.buf, sb.len);"
type_conversion,read-cache.c,3043,-,+,,6,	if (write_extensions & WRITE_FSMONITOR_EXTENSION &&
type_conversion,read-cache.c,3048,-,+,,64,"		err = write_index_ext_header(f, eoie_c, CACHE_EXT_FSMONITOR, sb.len) < 0;"
type_conversion,read-cache.c,3049,-,+,,24,"		hashwrite(f, sb.buf, sb.len);"
type_conversion,read-cache.c,3055,-,+,,71,"		if (write_index_ext_header(f, eoie_c, CACHE_EXT_SPARSE_DIRECTORIES, 0) < 0)"
type_conversion,read-cache.c,3068,-,+,,37,"		write_eoie_extension(&sb, eoie_c, offset);"
type_conversion,read-cache.c,3069,-,+,,70,"		err = write_index_ext_header(f, NULL, CACHE_EXT_ENDOFINDEXENTRIES, sb.len) < 0;"
type_conversion,read-cache.c,3070,-,+,,24,"		hashwrite(f, sb.buf, sb.len);"
type_conversion,read-cache.c,3124,-,+,,17,	int was_full = istate->sparse_index == INDEX_EXPANDED;
type_conversion,read-cache.c,3156,-,+,,28,	istate->updated_workdir = 0;
type_conversion,read-cache.c,3157,-,+,,33,	istate->updated_skipworktree = 0;
type_conversion,read-cache.c,3288,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,read-cache.c,3294,-,+,,37,	return (int64_t)istate->cache_nr * max_split < (int64_t)not_shared * 100;
type_conversion,read-cache.c,3330,-,+,,12,			int v = si->base_oid.hash[0];
type_conversion,read-cache.c,3395,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,read-cache.c,3404,-,+,,43,"		new_ce = make_empty_cache_entry(istate, len);"
type_conversion,read-cache.c,3405,-,+,,34,"		memcpy(new_ce->name, ce->name, len);"
type_conversion,read-cache.c,3406,-,+,,38,		new_ce->ce_flags = create_ce_flags(0) | CE_CONFLICTED;
type_conversion,read-cache.c,3407,-,+,,24,		new_ce->ce_namelen = len;
type_conversion,read-cache.c,3429,-,+,,17,	if (namelen && name[namelen - 1] == '/')
type_conversion,read-cache.c,3435,-,+,,6,	if (pos < istate->cache_nr) {
type_conversion,read-cache.c,3437,-,+,,25,		if (ce_namelen(ce) == namelen &&
type_conversion,read-cache.c,3438,-,+,,31,"		    !memcmp(ce->name, name, namelen))"
type_conversion,read-cache.c,3452,-,+,,8,	len = strlen(path);
type_conversion,read-cache.c,3461,-,+,,20,		     (pos < 0 && i < istate->cache_nr &&
type_conversion,read-cache.c,3464,-,+,,38,			if (ce_stage(istate->cache[i]) == 2)
type_conversion,read-cache.c,3471,-,+,,15,	if (!data || type != OBJ_BLOB) {
type_conversion,read-cache.c,3494,-,+,,23,	mem_pool_allocated = new_entry->mem_pool_allocated;
type_conversion,read-cache.c,3496,-,+,,24,"	memcpy(new_entry, ce, size);"
type_conversion,read-cache.c,3497,-,+,,34,	new_entry->mem_pool_allocated = mem_pool_allocated;
type_conversion,read-cache.c,3548,-,+,,10,		return 0;
type_conversion,read-cache.c,3553,-,+,,10,		return 0;
type_conversion,read-cache.c,3559,-,+,,10,		return 0;
type_conversion,read-cache.c,3566,-,+,,11,	offset = get_be32(index);
type_conversion,read-cache.c,3568,-,+,,10,		return 0;
type_conversion,read-cache.c,3570,-,+,,10,		return 0;
type_conversion,read-cache.c,3592,-,+,,43,"		memcpy(&extsize, mmap + src_offset + 4, 4);"
type_conversion,read-cache.c,3596,-,+,,20,		if (src_offset + 8 + extsize < src_offset)
type_conversion,read-cache.c,3597,-,+,,11,			return 0;
type_conversion,read-cache.c,3599,-,+,,51,"		the_hash_algo->update_fn(&c, mmap + src_offset, 8);"
type_conversion,read-cache.c,3601,-,+,,17,		src_offset += 8;
type_conversion,read-cache.c,3602,-,+,,17,		src_offset += extsize;
type_conversion,read-cache.c,3606,-,+,,10,		return 0;
type_conversion,read-cache.c,3610,-,+,,10,		return 0;
type_conversion,read-cache.c,3621,-,+,,20,"	put_be32(&buffer, offset);"
type_conversion,read-cache.c,3641,-,+,,54,	while (offset <= mmap_size - the_hash_algo->rawsz - 8) {
type_conversion,read-cache.c,3647,-,+,,13,		offset += 8;
type_conversion,read-cache.c,3648,-,+,,13,		offset += extsize;
type_conversion,read-cache.c,3662,-,+,,8,	nr = (extsize - sizeof(uint32_t)) / (sizeof(uint32_t) + sizeof(uint32_t));
type_conversion,read-cache.c,3668,-,+,,13,		       + (nr * sizeof(struct index_entry_offset)));
type_conversion,read-cache.c,3671,-,+,,29,		ieot->entries[i].offset = get_be32(index);
type_conversion,read-cache.c,3673,-,+,,25,		ieot->entries[i].nr = get_be32(index);
type_conversion,read-cache.c,3693,-,+,,21,"		put_be32(&buffer, ieot->entries[i].offset);"
type_conversion,read-cache.c,3697,-,+,,21,"		put_be32(&buffer, ieot->entries[i].nr);"
type_conversion,read-cache.c,3708,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,read-cache.c,3720,-,+,,22,"				   to_fetch.oid, to_fetch.nr);"
type_conversion,read-cache.c,3736,-,+,,8,	len = strlen(pathname);
type_conversion,read-cache.c,3737,-,+,,50,"	ce = make_empty_cache_entry(istate, base->len + len);"
type_conversion,read-cache.c,3740,-,+,,33,	ce->ce_flags = create_ce_flags(1);
type_conversion,read-cache.c,3741,-,+,,31,	ce->ce_namelen = base->len + len;
type_conversion,read-cache.c,3743,-,+,,41,"	memcpy(ce->name + base->len, pathname, len+1);"
type_conversion,read-cache.c,3799,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,read-cache.c,3819,-,+,,21,	for (i = 0; !fn && i < istate->cache_nr; i++) {
type_conversion,read-cache.c,3821,-,+,,23,		if (ce_stage(ce) == 1)
type_conversion,read-cache.c,3840,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,read-cache.c,3843,-,+,,8,		case 0:
type_conversion,read-cache.c,3848,-,+,,8,		case 1:
type_conversion,read-cache.c,3871,-,+,,6,	if (p->status != DIFF_STATUS_UNMERGED)
type_conversion,read-cache.c,3872,-,+,,10,		return p->status;
type_conversion,read-cache.c,3905,-,+,,40,"			die(_(""unexpected diff status %c""), p->status);"
type_conversion,read-cache.c,3947,-,+,,48,	rev.diffopt.flags.override_submodule_config = 1;
type_conversion,read-cache.h,18,-,+,,25,		return create_ce_mode(0666);
type_conversion,read-tree.c,170,-,+,,6,	if (1 < opts.merge + opts.reset + prefix_set)
type_conversion,read-tree.c,174,-,+,,21,	if (opts.prefix && opts.prefix[0] == '/')
type_conversion,read-tree.c,197,-,+,,24,		stage = opts.merge = 1;
type_conversion,read-tree.c,215,-,+,,6,	if (1 < opts.index_only + opts.update)
type_conversion,read-tree.c,221,-,+,,27,		opts.preserve_ignored = 0;
type_conversion,read-tree.c,239,-,+,,28,			opts.initial_checkout = is_index_unborn(the_repository->index);
type_conversion,read-tree.c,258,-,+,,33,		opts.skip_cache_tree_update = 1;
type_conversion,read-tree.c,267,-,+,,19,"	if (unpack_trees(nr_trees, t, &opts))"
type_conversion,reader.c,47,-,+,,10,	switch (typ) {
type_conversion,reader.c,65,-,+,,12,	if (off + sz > r->size) {
type_conversion,reader.c,66,-,+,,8,		sz = r->size - off;
type_conversion,reader.c,91,-,+,,24,"	if (memcmp(f, ""REFT"", 4)) {"
type_conversion,reader.c,92,-,+,,9,		err = REFTABLE_FORMAT_ERROR;
type_conversion,reader.c,97,-,+,,29,"	if (memcmp(footer, header, header_size(r->version))) {"
type_conversion,reader.c,98,-,+,,9,		err = REFTABLE_FORMAT_ERROR;
type_conversion,reader.c,121,-,+,,10,			err = REFTABLE_FORMAT_ERROR;
type_conversion,reader.c,133,-,+,,45,	r->object_id_len = r->obj_offsets.offset & ((1 << 5) - 1);
type_conversion,reader.c,143,-,+,,23,"	computed_crc = crc32(0, footer, f - footer);"
type_conversion,reader.c,147,-,+,,9,		err = REFTABLE_FORMAT_ERROR;
type_conversion,reader.c,152,-,+,,31,	r->ref_offsets.is_present = (first_block_typ == BLOCK_TYPE_REF);
type_conversion,reader.c,153,-,+,,26,	r->ref_offsets.offset = 0;
type_conversion,reader.c,154,-,+,,31,	r->log_offsets.is_present = (first_block_typ == BLOCK_TYPE_LOG ||
type_conversion,reader.c,155,-,+,,34,				     r->log_offsets.offset > 0);
type_conversion,reader.c,156,-,+,,54,	r->obj_offsets.is_present = r->obj_offsets.offset > 0;
type_conversion,reader.c,158,-,+,,9,		err = REFTABLE_FORMAT_ERROR;
type_conversion,reader.c,176,-,+,,23,	uint32_t read_size = header_size(2) + 1; /* read v2 because it's larger.  */
type_conversion,reader.c,179,-,+,,6,	if (read_size > file_size) {
type_conversion,reader.c,180,-,+,,9,		err = REFTABLE_FORMAT_ERROR;
type_conversion,reader.c,184,-,+,,49,"	err = block_source_read_block(source, &header, 0, read_size);"
type_conversion,reader.c,185,-,+,,6,	if (err != read_size) {
type_conversion,reader.c,186,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,reader.c,190,-,+,,34,"	if (memcmp(header.data, ""REFT"", 4)) {"
type_conversion,reader.c,191,-,+,,9,		err = REFTABLE_FORMAT_ERROR;
type_conversion,reader.c,194,-,+,,15,	r->version = header.data[4];
type_conversion,reader.c,196,-,+,,9,		err = REFTABLE_FORMAT_ERROR;
type_conversion,reader.c,200,-,+,,24,	r->size = file_size - footer_size(r->version);
type_conversion,reader.c,203,-,+,,15,	r->hash_id = 0;
type_conversion,reader.c,206,-,+,,11,				      footer_size(r->version));
type_conversion,reader.c,208,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,reader.c,235,-,+,,18,	if (res == 0 && reftable_record_type(rec) == BLOCK_TYPE_REF) {
type_conversion,reader.c,253,-,+,,13,	if (off == 0) {
type_conversion,reader.c,259,-,+,,12,		result = get_be24(data + 1);
type_conversion,reader.c,270,-,+,,22,	uint8_t block_typ = 0;
type_conversion,reader.c,272,-,+,,24,	uint32_t header_off = next_off ? 0 : header_size(r->version);
type_conversion,reader.c,278,-,+,,46,"	err = reader_get_block(r, &block, next_off, guess_block_size);"
type_conversion,reader.c,288,-,+,,6,	if (want_typ != BLOCK_TYPE_ANY && block_typ != want_typ) {
type_conversion,reader.c,295,-,+,,47,"		err = reader_get_block(r, &block, next_off, block_size);"
type_conversion,reader.c,317,-,+,,44,	uint64_t next_block_off = ti->block_off + ti->br.full_block_size;
type_conversion,reader.c,335,-,+,,6,	if (reftable_record_type(rec) != ti->typ)
type_conversion,reader.c,336,-,+,,10,		return REFTABLE_API_ERROR;
type_conversion,reader.c,413,-,+,,14,		if (off == 0) {
type_conversion,reader.c,464,-,+,,30,		next.br.uncompressed_cap = 0;
type_conversion,reader.c,560,-,+,,9,					   0);
type_conversion,reader.c,568,-,+,,7,		if (next.typ == reftable_record_type(rec)) {
type_conversion,reader.c,573,-,+,,7,		if (next.typ != BLOCK_TYPE_INDEX) {
type_conversion,reader.c,574,-,+,,10,			err = REFTABLE_FORMAT_ERROR;
type_conversion,reader.c,584,-,+,,49,"		struct table_iter *malloced = reftable_calloc(1, sizeof(*malloced));"
type_conversion,reader.c,608,-,+,,12,	if (idx > 0)
type_conversion,reader.c,683,-,+,,47,"	struct reftable_reader *rd = reftable_calloc(1, sizeof(*rd));"
type_conversion,reader.c,732,-,+,,10,			      r->object_id_len)) {
type_conversion,reader.c,758,-,+,,42,"	struct table_iter *ti = reftable_calloc(1, sizeof(*ti));"
type_conversion,reader.c,774,-,+,,32,"	strbuf_add(&filter->oid, oid, oid_len);"
type_conversion,readwrite_test.c,32,-,+,,45,"	n = block_source_read_block(&source, &out, 0, sizeof(in));"
type_conversion,readwrite_test.c,37,-,+,,45,"	n = block_source_read_block(&source, &out, 1, 2);"
type_conversion,readwrite_test.c,50,-,+,,17,"		.block_size = block_size,"
type_conversion,readwrite_test.c,62,-,+,,32,"	reftable_writer_set_limits(w, update_index, update_index);"
type_conversion,readwrite_test.c,70,-,+,,22,		ref.update_index = update_index;
type_conversion,readwrite_test.c,86,-,+,,22,		log.update_index = update_index;
type_conversion,readwrite_test.c,100,-,+,,13,		int off = i * opts.block_size;
type_conversion,readwrite_test.c,116,-,+,,17,"		.block_size = 4096,"
type_conversion,readwrite_test.c,122,-,+,,20,"			.update_index = 0xa,"
type_conversion,readwrite_test.c,127,-,+,,22,"					   .tz_offset = 100,"
type_conversion,readwrite_test.c,128,-,+,,17,"					   .time = 0x5e430672,"
type_conversion,readwrite_test.c,138,-,+,,57,		log.value.update.old_hash[i] = (uint8_t)(git_rand() % 256);
type_conversion,readwrite_test.c,139,-,+,,57,		log.value.update.new_hash[i] = (uint8_t)(git_rand() % 256);
type_conversion,readwrite_test.c,141,-,+,,32,"	reftable_writer_set_limits(w, update_index, update_index);"
type_conversion,readwrite_test.c,153,-,+,,20,	char msg[256] = { 0 };
type_conversion,readwrite_test.c,160,-,+,,19,"		.update_index = 0xa,"
type_conversion,readwrite_test.c,164,-,+,,19,"				.old_hash = { 1 },"
type_conversion,readwrite_test.c,165,-,+,,19,"				.new_hash = { 2 },"
type_conversion,readwrite_test.c,168,-,+,,18,"				.tz_offset = 100,"
type_conversion,readwrite_test.c,169,-,+,,13,"				.time = 0x5e430672,"
type_conversion,readwrite_test.c,177,-,+,,33,"	memset(msg, 'x', sizeof(msg) - 1);"
type_conversion,readwrite_test.c,178,-,+,,32,"	reftable_writer_set_limits(w, update_index, update_index);"
type_conversion,readwrite_test.c,188,-,+,,33,"	char **names = reftable_calloc(N + 1, sizeof(*names));"
type_conversion,readwrite_test.c,191,-,+,,17,"		.block_size = 256,"
type_conversion,readwrite_test.c,204,-,+,,32,"	reftable_writer_set_limits(w, 0, N);"
type_conversion,readwrite_test.c,211,-,+,,22,		ref.update_index = i;
type_conversion,readwrite_test.c,220,-,+,,22,		log.update_index = i;
type_conversion,readwrite_test.c,284,-,+,,17,"		.block_size = 256,"
type_conversion,readwrite_test.c,293,-,+,,24,	char message[100] = { 0 };
type_conversion,readwrite_test.c,300,-,+,,19,"				.new_hash = { 1 },"
type_conversion,readwrite_test.c,301,-,+,,19,"				.old_hash = { 2 },"
type_conversion,readwrite_test.c,309,-,+,,14,	for (i = 0; i < sizeof(message) - 1; i++)
type_conversion,readwrite_test.c,310,-,+,,39,		message[i] = (uint8_t)(git_rand() % 64 + ' ');
type_conversion,readwrite_test.c,312,-,+,,32,"	reftable_writer_set_limits(w, 1, 1);"
type_conversion,readwrite_test.c,445,-,+,,36,"	write_table(&names, &buf, N, 256, hash_id);"
type_conversion,readwrite_test.c,454,-,+,,33,		rd.ref_offsets.index_offset = 0;
type_conversion,readwrite_test.c,513,-,+,,38,"	char **want_names = reftable_calloc(N + 1, sizeof(*want_names));"
type_conversion,readwrite_test.c,518,-,+,,17,"		.block_size = 256,"
type_conversion,readwrite_test.c,538,-,+,,21,		char fill[51] = { 0 };
type_conversion,readwrite_test.c,543,-,+,,21,"		memset(fill, 'x', 50);"
type_conversion,readwrite_test.c,546,-,+,,14,		name[40] = 0;
type_conversion,readwrite_test.c,619,-,+,,41,	struct reftable_write_options opts = { 0 };
type_conversion,readwrite_test.c,629,-,+,,32,"	reftable_writer_set_limits(w, 1, 1);"
type_conversion,readwrite_test.c,656,-,+,,17,"		.block_size = 75,"
type_conversion,readwrite_test.c,662,-,+,,19,"		.update_index = 1,"
type_conversion,readwrite_test.c,664,-,+,,18,"		.value.val1 = {42},"
type_conversion,readwrite_test.c,669,-,+,,32,"	reftable_writer_set_limits(w, 1, 1);"
type_conversion,readwrite_test.c,691,-,+,,17,"		.block_size = 75,"
type_conversion,readwrite_test.c,697,-,+,,19,"		.update_index = 1,"
type_conversion,readwrite_test.c,699,-,+,,18,"		.value.val1 = {42},"
type_conversion,readwrite_test.c,704,-,+,,32,"	reftable_writer_set_limits(w, 1, 1);"
type_conversion,readwrite_test.c,712,-,+,,24,		ref.value.val1[15] = i;
type_conversion,readwrite_test.c,726,-,+,,41,	struct reftable_write_options opts = { 0 };
type_conversion,readwrite_test.c,732,-,+,,19,"		.update_index = 1,"
type_conversion,readwrite_test.c,737,-,+,,32,"	reftable_writer_set_limits(w, 1, 1);"
type_conversion,readwrite_test.c,749,-,+,,41,	struct reftable_write_options opts = { 0 };
type_conversion,readwrite_test.c,756,-,+,,20,"			.update_index = 1,"
type_conversion,readwrite_test.c,763,-,+,,20,"			.update_index = 1,"
type_conversion,readwrite_test.c,772,-,+,,32,"	reftable_writer_set_limits(w, 1, 1);"
type_conversion,readwrite_test.c,785,-,+,,17,"		.block_size = 100,"
type_conversion,readwrite_test.c,796,-,+,,37,"	reftable_writer_set_limits(writer, 1, 1);"
type_conversion,readwrite_test.c,799,-,+,,20,"			.update_index = 1,"
type_conversion,readwrite_test.c,801,-,+,,19,"			.value.val1 = {i},"
type_conversion,readwrite_test.c,814,-,+,,20,"			.update_index = 1,"
type_conversion,readwrite_test.c,817,-,+,,19,"				.old_hash = { i },"
type_conversion,readwrite_test.c,818,-,+,,19,"				.new_hash = { i },"
type_conversion,readwrite_test.c,862,-,+,,17,"		.block_size = 100,"
type_conversion,readwrite_test.c,873,-,+,,37,"	reftable_writer_set_limits(writer, 1, 1);"
type_conversion,readwrite_test.c,874,-,+,,18,	for (size_t i = 0; i < 200; i++) {
type_conversion,readwrite_test.c,876,-,+,,20,"			.update_index = 1,"
type_conversion,readwrite_test.c,878,-,+,,19,"			.value.val1 = {i},"
type_conversion,readwrite_test.c,928,-,+,,26,	uint8_t zeros[1024] = { 0 };
type_conversion,rebase-interactive.c,70,-,+,,23,	unsigned edit_todo = !(shortrevisions && shortonto);
type_conversion,rebase-interactive.c,77,-,+,,7,"					 command_count),"
type_conversion,rebase-interactive.c,83,-,+,,6,	if (get_missing_commit_check_level() == MISSING_COMMIT_CHECK_ERROR)
type_conversion,rebase-interactive.c,110,-,+,,21,	unsigned initial = shortrevisions && shortonto;
type_conversion,rebase-interactive.c,134,-,+,,38,	if (initial && new_todo->buf.len == 0)
type_conversion,rebase-interactive.c,180,-,+,,6,	if (check_level == MISSING_COMMIT_CHECK_IGNORE)
type_conversion,rebase-interactive.c,187,-,+,,44,"			*commit_seen_at(&commit_seen, commit) = 1;"
type_conversion,rebase-interactive.c,199,-,+,,44,"			*commit_seen_at(&commit_seen, commit) = 1;"
type_conversion,rebase-interactive.c,207,-,+,,6,	if (check_level == MISSING_COMMIT_CHECK_ERROR)
type_conversion,rebase-interactive.c,236,-,+,,63,"	if (strbuf_read_file(&backup.buf, rebase_path_todo_backup(), 0) > 0) {"
type_conversion,rebase.c,163,-,+,,22,	replay.allow_ff = !(opts->flags & REBASE_FORCE);
type_conversion,rebase.c,168,-,+,,35,	replay.drop_redundant_commits = (opts->empty == EMPTY_DROP);
type_conversion,rebase.c,169,-,+,,35,	replay.keep_redundant_commits = (opts->empty == EMPTY_KEEP);
type_conversion,rebase.c,170,-,+,,19,	replay.quiet = !(opts->flags & REBASE_NO_QUIET);
type_conversion,rebase.c,171,-,+,,19,	replay.verbose = opts->flags & REBASE_VERBOSE;
type_conversion,rebase.c,185,-,+,,18,	for (size_t i = 0; i < opts->strategy_opts.nr; i++)
type_conversion,rebase.c,203,-,+,,50,"	if (strbuf_read_file(&todo_list.buf, todo_file, 0) < 0)"
type_conversion,rebase.c,291,-,+,,9,"				    make_script_args.nr, make_script_args.v,"
type_conversion,rebase.c,305,-,+,,4,"			opts->autosquash, opts->update_refs, &todo_list);"
type_conversion,rebase.c,320,-,+,,19,	unsigned flags = 0;
type_conversion,rebase.c,325,-,+,,53,	flags |= opts->keep_empty ? TODO_LIST_KEEP_EMPTY : 0;
type_conversion,rebase.c,326,-,+,,61,	flags |= abbreviate_commands ? TODO_LIST_ABBREVIATE_CMDS : 0;
type_conversion,rebase.c,327,-,+,,59,	flags |= opts->rebase_merges ? TODO_LIST_REBASE_MERGES : 0;
type_conversion,rebase.c,328,-,+,,65,	flags |= opts->rebase_cousins > 0 ? TODO_LIST_REBASE_COUSINS : 0;
type_conversion,rebase.c,329,-,+,,61,	flags |= opts->root_with_onto ? TODO_LIST_ROOT_WITH_ONTO : 0;
type_conversion,rebase.c,330,-,+,,73,	flags |= opts->reapply_cherry_picks ? TODO_LIST_REAPPLY_CHERRY_PICKS : 0;
type_conversion,rebase.c,331,-,+,,11,	flags |= opts->flags & REBASE_NO_QUIET ? TODO_LIST_WARN_SKIPPED_CHERRY_PICKS : 0;
type_conversion,rebase.c,360,-,+,,17,		cmd.git_cmd = 1;
type_conversion,rebase.c,375,-,+,,9,	return opts->type == REBASE_MERGE;
type_conversion,rebase.c,445,-,+,,18,		opts->flags &= ~REBASE_NO_QUIET;
type_conversion,rebase.c,447,-,+,,18,		opts->flags |= REBASE_NO_QUIET;
type_conversion,rebase.c,450,-,+,,18,		opts->flags |= REBASE_VERBOSE;
type_conversion,rebase.c,454,-,+,,18,		opts->flags |= REBASE_FORCE;
type_conversion,rebase.c,493,-,+,,8,	if (!(opts->flags & REBASE_NO_QUIET))
type_conversion,rebase.c,495,-,+,,6,	if (opts->flags & REBASE_VERBOSE)
type_conversion,rebase.c,525,-,+,,25,	run_auto_maintenance(!(opts->flags & (REBASE_NO_QUIET|REBASE_VERBOSE)));
type_conversion,rebase.c,526,-,+,,6,	if (opts->type == REBASE_MERGE) {
type_conversion,rebase.c,578,-,+,,15,	am.git_cmd = 1;
type_conversion,rebase.c,582,-,+,,6,	if (opts->action == ACTION_CONTINUE) {
type_conversion,rebase.c,593,-,+,,6,	if (opts->action == ACTION_SKIP) {
type_conversion,rebase.c,602,-,+,,6,	if (opts->action == ACTION_SHOW_CURRENT_PATCH) {
type_conversion,rebase.c,618,-,+,,25,	format_patch.git_cmd = 1;
type_conversion,rebase.c,695,-,+,,6,	if (opts->type == REBASE_MERGE) {
type_conversion,rebase.c,697,-,+,,9,		if (!(opts->flags & REBASE_INTERACTIVE_EXPLICIT))
type_conversion,rebase.c,707,-,+,,13,	} else if (opts->type == REBASE_APPLY)
type_conversion,rebase.c,714,-,+,,11,	else if (opts->type == REBASE_MERGE)
type_conversion,rebase.c,749,-,+,,19,			opts->flags |= REBASE_DIFFSTAT;
type_conversion,rebase.c,751,-,+,,19,			opts->flags &= ~REBASE_DIFFSTAT;
type_conversion,rebase.c,901,-,+,,6,	if (opts->type != REBASE_UNSPECIFIED && opts->type != REBASE_APPLY)
type_conversion,rebase.c,917,-,+,,6,	if (opts->type != REBASE_UNSPECIFIED && opts->type != REBASE_MERGE)
type_conversion,rebase.c,934,-,+,,6,	if (opts->type != REBASE_UNSPECIFIED && opts->type != REBASE_MERGE)
type_conversion,rebase.c,938,-,+,,17,	opts->flags |= REBASE_INTERACTIVE_EXPLICIT;
type_conversion,rebase.c,1082,-,+,,27,"			PARSE_OPT_NOARG, NULL, REBASE_DIFFSTAT },"
type_conversion,rebase.c,1150,-,+,,39,"			PARSE_OPT_OPTARG, NULL, (intptr_t) """" },"
type_conversion,rebase.c,1204,-,+,,9,		if (!(options.action == ACTION_ABORT) && is_directory(buf.buf)) {
type_conversion,rebase.c,1213,-,+,,22,				options.flags |= REBASE_INTERACTIVE_EXPLICIT;
type_conversion,rebase.c,1218,-,+,,6,	if (options.type != REBASE_UNSPECIFIED)
type_conversion,rebase.c,1231,-,+,,6,	if (options.action != ACTION_NONE && total_argc != 2) {
type_conversion,rebase.c,1255,-,+,,6,	if (options.action != ACTION_NONE && !in_progress)
type_conversion,rebase.c,1258,-,+,,6,	if (options.action == ACTION_EDIT_TODO && !is_merge(&options))
type_conversion,rebase.c,1344,-,+,,7,		if (options.type == REBASE_MERGE) {
type_conversion,rebase.c,1392,-,+,,7,	if ((options.flags & REBASE_INTERACTIVE_EXPLICIT) ||
type_conversion,rebase.c,1393,-,+,,7,	    (options.action != ACTION_NONE) ||
type_conversion,rebase.c,1394,-,+,,25,	    (options.exec.nr > 0) ||
type_conversion,rebase.c,1399,-,+,,20,		options.flags |= REBASE_FORCE;
type_conversion,rebase.c,1401,-,+,,14,	for (i = 0; i < options.git_am_opts.nr; i++) {
type_conversion,rebase.c,1418,-,+,,14,	for (i = 0; i < options.exec.nr; i++)
type_conversion,rebase.c,1422,-,+,,8,	if (!(options.flags & REBASE_NO_QUIET))
type_conversion,rebase.c,1425,-,+,,6,	if (options.empty != EMPTY_UNSPECIFIED)
type_conversion,rebase.c,1456,-,+,,6,	if (options.type == REBASE_APPLY) {
type_conversion,rebase.c,1484,-,+,,19,	if (isatty(2) && options.flags & REBASE_NO_QUIET)
type_conversion,rebase.c,1487,-,+,,32,	if (options.git_am_opts.nr || options.type == REBASE_APPLY) {
type_conversion,rebase.c,1489,-,+,,37,		for (i = options.git_am_opts.nr - 1; i >= 0; i--)
type_conversion,rebase.c,1493,-,+,,17,		if (i >= 0 || options.type == REBASE_APPLY) {
type_conversion,rebase.c,1521,-,+,,5,			(options.flags & REBASE_INTERACTIVE_EXPLICIT);
type_conversion,rebase.c,1524,-,+,,6,	if (options.type == REBASE_UNSPECIFIED) {
type_conversion,rebase.c,1534,-,+,,6,	if (options.type == REBASE_MERGE &&
type_conversion,rebase.c,1550,-,+,,6,	if (options.empty == EMPTY_UNSPECIFIED) {
type_conversion,rebase.c,1551,-,+,,7,		if (options.flags & REBASE_INTERACTIVE_EXPLICIT)
type_conversion,rebase.c,1553,-,+,,30,		else if (options.exec.nr > 0)
type_conversion,rebase.c,1566,-,+,,20,		options.flags |= REBASE_FORCE;
type_conversion,rebase.c,1594,-,+,,24,"			if (commit_tree("""", 0, the_hash_algo->empty_tree, NULL,"
type_conversion,rebase.c,1728,-,+,,9,		if (!(options.flags & REBASE_FORCE)) {
type_conversion,rebase.c,1736,-,+,,10,			if (!(options.flags & REBASE_NO_QUIET))
type_conversion,rebase.c,1746,-,+,,16,		} else if (!(options.flags & REBASE_NO_QUIET))
type_conversion,rebase.c,1762,-,+,,6,	if (options.flags & REBASE_DIFFSTAT) {
type_conversion,rebase.c,1765,-,+,,7,		if (options.flags & REBASE_VERBOSE) {
type_conversion,rebase.c,1793,-,+,,6,	if (options.flags & REBASE_NO_QUIET)
type_conversion,receive-pack.c,382,-,+,,8,			if (*prefix == 'a')
type_conversion,receive-pack.c,383,-,+,,29,				ref_pattern->want_add = 1;
type_conversion,receive-pack.c,384,-,+,,13,			else if (*prefix == 'd')
type_conversion,receive-pack.c,385,-,+,,32,				ref_pattern->want_delete = 1;
type_conversion,receive-pack.c,386,-,+,,13,			else if (*prefix == 'm')
type_conversion,receive-pack.c,387,-,+,,32,				ref_pattern->want_modify = 1;
type_conversion,receive-pack.c,388,-,+,,13,			else if (*prefix == '!')
type_conversion,receive-pack.c,389,-,+,,33,				ref_pattern->negative_ref = 1;
type_conversion,receive-pack.c,394,-,+,,27,		ref_pattern->want_add = 1;
type_conversion,receive-pack.c,395,-,+,,30,		ref_pattern->want_delete = 1;
type_conversion,receive-pack.c,396,-,+,,30,		ref_pattern->want_modify = 1;
type_conversion,receive-pack.c,398,-,+,,8,	len = strlen(prefix);
type_conversion,receive-pack.c,399,-,+,,16,	while (len && prefix[len - 1] == '/')
type_conversion,receive-pack.c,401,-,+,,45,"	ref_pattern->ref_prefix = xmemdupz(prefix, len);"
type_conversion,receive-pack.c,435,-,+,,21,		    (!*remains || *remains == '/')) {
type_conversion,receive-pack.c,451,-,+,,42,"	sz += vsnprintf(msg + sz, sizeof(msg) - sz, err, params);"
type_conversion,receive-pack.c,452,-,+,,6,	if (sz > (sizeof(msg) - 1))
type_conversion,receive-pack.c,453,-,+,,22,		sz = sizeof(msg) - 1;
type_conversion,receive-pack.c,454,-,+,,14,	msg[sz++] = '\n';
type_conversion,receive-pack.c,457,-,+,,28,"		send_sideband(1, 2, msg, sz, use_sideband);"
type_conversion,receive-pack.c,459,-,+,,18,"		xwrite(2, msg, sz);"
type_conversion,receive-pack.c,487,-,+,,6,	if (use_keepalive == KEEPALIVE_ALWAYS)
type_conversion,receive-pack.c,499,-,+,,21,"			ret = poll(&pfd, 1, 1000 * keepalive_in_sec);"
type_conversion,receive-pack.c,509,-,+,,40,"				write_or_die(1, buf, sizeof(buf) - 1);"
type_conversion,receive-pack.c,515,-,+,,13,		if (sz <= 0)
type_conversion,receive-pack.c,518,-,+,,7,		if (use_keepalive == KEEPALIVE_AFTER_NUL && !keepalive_active) {
type_conversion,receive-pack.c,519,-,+,,39,"			const char *p = memchr(data, '\0', sz);"
type_conversion,receive-pack.c,528,-,+,,49,"				send_sideband(1, 2, p + 1, sz - (p - data + 1), use_sideband);"
type_conversion,receive-pack.c,564,-,+,,14,	for (i = 0; i < sizeof(key); i++) {
type_conversion,receive-pack.c,565,-,+,,15,		k_ipad[i] = key[i] ^ 0x36;
type_conversion,receive-pack.c,566,-,+,,15,		k_opad[i] = key[i] ^ 0x5c;
type_conversion,receive-pack.c,605,-,+,,11,	for (i = 0; i < n; i++)
type_conversion,receive-pack.c,606,-,+,,10,		res |= a[i] ^ b[i];
type_conversion,receive-pack.c,649,-,+,,6,	if (*nonce <= '0' || '9' < *nonce) {
type_conversion,receive-pack.c,654,-,+,,25,	if (bohmac == nonce || bohmac[0] != '-') {
type_conversion,receive-pack.c,680,-,+,,6,	    labs(nonce_stamp_slop) <= nonce_stamp_slop_limit) {
type_conversion,receive-pack.c,719,-,+,,7,		if (options_seen > push_options->nr
type_conversion,receive-pack.c,725,-,+,,6,	if (options_seen != push_options->nr)
type_conversion,receive-pack.c,748,-,+,,10,"		bogs = parse_signed_buffer(push_cert.buf, push_cert.len);"
type_conversion,receive-pack.c,749,-,+,,46,"		sigcheck.payload = xmemdupz(push_cert.buf, bogs);"
type_conversion,receive-pack.c,750,-,+,,26,		sigcheck.payload_len = bogs;
type_conversion,receive-pack.c,752,-,+,,21,				push_cert.len - bogs);
type_conversion,receive-pack.c,764,-,+,,9,			     sigcheck.result);
type_conversion,receive-pack.c,802,-,+,,26,	proc.stdout_to_stderr = 1;
type_conversion,receive-pack.c,807,-,+,,12,		for (i = 0; i < feed_state->push_options->nr; i++)
type_conversion,receive-pack.c,846,-,+,,40,"		if (write_in_full(proc.in, buf, n) < 0)"
type_conversion,receive-pack.c,908,-,+,,26,"	strbuf_init(&state.buf, 0);"
type_conversion,receive-pack.c,935,-,+,,18,	proc.no_stdin = 1;
type_conversion,receive-pack.c,936,-,+,,26,	proc.stdout_to_stderr = 1;
type_conversion,receive-pack.c,977,-,+,,7,		if (status != PACKET_READ_NORMAL) {
type_conversion,receive-pack.c,979,-,+,,8,			if (status == PACKET_READ_EOF && !response) {
type_conversion,receive-pack.c,994,-,+,,10,		*p++ = '\0';
type_conversion,receive-pack.c,1012,-,+,,29,"					report->next = xcalloc(1, sizeof(struct ref_push_report));"
type_conversion,receive-pack.c,1020,-,+,,12,				*p++ = '\0';
type_conversion,receive-pack.c,1031,-,+,,29,				report->forced_update = 1;
type_conversion,receive-pack.c,1034,-,+,,30,				hint->run_proc_receive = 0;
type_conversion,receive-pack.c,1043,-,+,,11,			*p++ = '\0';
type_conversion,receive-pack.c,1082,-,+,,9,		    !(cmd->run_proc_receive & RUN_PROC_RECEIVE_RETURNED)) {
type_conversion,receive-pack.c,1135,-,+,,46,"	packet_reader_init(&reader, proc.out, NULL, 0,"
type_conversion,receive-pack.c,1157,-,+,,8,			if (status != PACKET_READ_NORMAL) {
type_conversion,receive-pack.c,1159,-,+,,9,				if (status == PACKET_READ_EOF)
type_conversion,receive-pack.c,1166,-,+,,15,				linelen = strlen(reader.line);
type_conversion,receive-pack.c,1238,-,+,,18,	if (errmsg.len >0) {
type_conversion,receive-pack.c,1241,-,+,,21,		p += errmsg.len - 1;
type_conversion,receive-pack.c,1242,-,+,,7,		if (*p == '\n')
type_conversion,receive-pack.c,1243,-,+,,9,			*p = '\0';
type_conversion,receive-pack.c,1293,-,+,,18,	uint32_t mask = 1 << (cmd->index % 32);
type_conversion,receive-pack.c,1298,-,+,,14,	for (i = 0; i < si->shallow->nr; i++)
type_conversion,receive-pack.c,1318,-,+,,14,	for (i = 0; i < extra.nr; i++)
type_conversion,receive-pack.c,1352,-,+,,19,	child.no_stdin = 1;
type_conversion,receive-pack.c,1353,-,+,,27,	child.stdout_to_stderr = 1;
type_conversion,receive-pack.c,1354,-,+,,18,	child.git_cmd = 1;
type_conversion,receive-pack.c,1364,-,+,,19,	child.no_stdin = 1;
type_conversion,receive-pack.c,1365,-,+,,27,	child.stdout_to_stderr = 1;
type_conversion,receive-pack.c,1366,-,+,,18,	child.git_cmd = 1;
type_conversion,receive-pack.c,1377,-,+,,19,	child.no_stdin = 1;
type_conversion,receive-pack.c,1378,-,+,,20,	child.no_stdout = 1;
type_conversion,receive-pack.c,1379,-,+,,27,	child.stdout_to_stderr = 0;
type_conversion,receive-pack.c,1380,-,+,,18,	child.git_cmd = 1;
type_conversion,receive-pack.c,1389,-,+,,19,	child.no_stdin = 1;
type_conversion,receive-pack.c,1390,-,+,,20,	child.no_stdout = 1;
type_conversion,receive-pack.c,1391,-,+,,27,	child.stdout_to_stderr = 0;
type_conversion,receive-pack.c,1392,-,+,,18,	child.git_cmd = 1;
type_conversion,receive-pack.c,1477,-,+,,8,			if (deny_current_branch == DENY_UNCONFIGURED)
type_conversion,receive-pack.c,1512,-,+,,9,				if (deny_delete_current == DENY_UNCONFIGURED)
type_conversion,receive-pack.c,1535,-,+,,7,		    old_object->type != OBJ_COMMIT ||
type_conversion,receive-pack.c,1536,-,+,,7,		    new_object->type != OBJ_COMMIT) {
type_conversion,receive-pack.c,1573,-,+,,26,				cmd->did_not_exist = 1;
type_conversion,receive-pack.c,1579,-,+,,9,"					   0, ""push"", &err)) {"
type_conversion,receive-pack.c,1599,-,+,,9,"					   0, ""push"","
type_conversion,receive-pack.c,1634,-,+,,18,	proc.no_stdin = 1;
type_conversion,receive-pack.c,1635,-,+,,26,	proc.stdout_to_stderr = 1;
type_conversion,receive-pack.c,1658,-,+,,22,		cmd->skip_update = 1;
type_conversion,receive-pack.c,1667,-,+,,21,	cmd->skip_update = 1;
type_conversion,receive-pack.c,1675,-,+,,25,	dst_cmd->skip_update = 1;
type_conversion,receive-pack.c,1998,-,+,,10,			    !(cmd->run_proc_receive & RUN_PROC_RECEIVE_RETURNED) &&
type_conversion,receive-pack.c,2022,-,+,,6,	    *p++ != ' ' ||
type_conversion,receive-pack.c,2024,-,+,,6,	    *p++ != ' ')
type_conversion,receive-pack.c,2028,-,+,,11,	reflen = linelen - (p - line);
type_conversion,receive-pack.c,2062,-,+,,39,"		const char *eol = memchr(boc, '\n', eoc - boc);"
type_conversion,receive-pack.c,2063,-,+,,35,"		tail = queue_command(tail, boc, eol ? eol - boc : eoc - boc);"
type_conversion,receive-pack.c,2076,-,+,,7,		if (packet_reader_read(reader) != PACKET_READ_NORMAL)
type_conversion,receive-pack.c,2088,-,+,,13,		linelen = strlen(reader->line);
type_conversion,receive-pack.c,2093,-,+,,17,			size_t len = 0;
type_conversion,receive-pack.c,2130,-,+,,9,				if (reader->status == PACKET_READ_FLUSH) {
type_conversion,receive-pack.c,2134,-,+,,9,				if (reader->status != PACKET_READ_NORMAL) {
type_conversion,receive-pack.c,2161,-,+,,7,		if (packet_reader_read(reader) != PACKET_READ_NORMAL)
type_conversion,receive-pack.c,2236,-,+,,31,	if (ntohl(hdr.hdr_entries) < unpack_limit) {
type_conversion,receive-pack.c,2247,-,+,,21,		child.no_stdout = 1;
type_conversion,receive-pack.c,2249,-,+,,19,		child.git_cmd = 1;
type_conversion,receive-pack.c,2281,-,+,,19,		child.git_cmd = 1;
type_conversion,receive-pack.c,2336,-,+,,14,	for (i = 0; i < si->shallow->nr; i++) {
type_conversion,receive-pack.c,2381,-,+,,26,		cmd->index = ref->nr - 1;
type_conversion,receive-pack.c,2397,-,+,,23,			cmd->skip_update = 1;
type_conversion,receive-pack.c,2421,-,+,,32,"		send_sideband(1, 1, buf.buf, buf.len, use_sideband);"
type_conversion,receive-pack.c,2466,-,+,,32,"		send_sideband(1, 1, buf.buf, buf.len, use_sideband);"
type_conversion,receive-pack.c,2553,-,+,,39,"	packet_reader_init(&reader, 0, NULL, 0,"
type_conversion,receive-pack.c,2595,-,+,,21,				proc.no_stdin = 1;
type_conversion,receive-pack.c,2596,-,+,,29,				proc.stdout_to_stderr = 1;
type_conversion,record.c,27,-,+,,17,	if (in->len == 0)
type_conversion,record.c,29,-,+,,8,	val = in->buf[ptr] & 0x7f;
type_conversion,record.c,31,-,+,,9,	while (in->buf[ptr] & 0x80) {
type_conversion,record.c,33,-,+,,7,		if (ptr > in->len) {
type_conversion,record.c,36,-,+,,16,		val = (val + 1) << 7 | (uint64_t)(in->buf[ptr] & 0x7f);
type_conversion,record.c,45,-,+,,22,	uint8_t buf[10] = { 0 };
type_conversion,record.c,48,-,+,,27,	buf[i] = (uint8_t)(val & 0x7f);
type_conversion,record.c,56,-,+,,35,		buf[i] = 0x80 | (uint8_t)(val & 0x7f);
type_conversion,record.c,60,-,+,,20,	n = sizeof(buf) - i - 1;
type_conversion,record.c,61,-,+,,18,	if (dest->len < n)
type_conversion,record.c,63,-,+,,33,"	memcpy(dest->buf, &buf[i + 1], n);"
type_conversion,record.c,69,-,+,,10,	switch (typ) {
type_conversion,record.c,103,-,+,,18,	int start_len = in.len;
type_conversion,record.c,104,-,+,,19,	uint64_t tsize = 0;
type_conversion,record.c,114,-,+,,27,"	string_view_consume(&in, tsize);"
type_conversion,record.c,116,-,+,,9,	return start_len - in.len;
type_conversion,record.c,122,-,+,,10,	int l = strlen(str);
type_conversion,record.c,123,-,+,,26,"	int n = put_var_int(&s, l);"
type_conversion,record.c,127,-,+,,14,	if (s.len < l)
type_conversion,record.c,129,-,+,,21,"	memcpy(s.buf, str, l);"
type_conversion,record.c,132,-,+,,9,	return start.len - s.len;
type_conversion,record.c,141,-,+,,34,	uint64_t suffix_len = key.len - prefix_len;
type_conversion,record.c,157,-,+,,29,"	string_view_consume(&dest, suffix_len);"
type_conversion,record.c,159,-,+,,9,	return start.len - dest.len;
type_conversion,record.c,180,-,+,,35,	*extra = (uint8_t)(*suffix_len & 0x7);
type_conversion,record.c,183,-,+,,9,	return start_len - in.len;
type_conversion,record.c,189,-,+,,18,	int start_len = in.len;
type_conversion,record.c,190,-,+,,24,	uint64_t prefix_len = 0;
type_conversion,record.c,191,-,+,,24,	uint64_t suffix_len = 0;
type_conversion,record.c,205,-,+,,27,"	string_view_consume(&in, suffix_len);"
type_conversion,record.c,207,-,+,,9,	return start_len - in.len;
type_conversion,record.c,224,-,+,,23,	size_t refname_cap = 0;
type_conversion,record.c,240,-,+,,31,		ref->refname[refname_len] = 0;
type_conversion,record.c,249,-,+,,44,"		memcpy(ref->value.val1, src->value.val1, hash_size);"
type_conversion,record.c,252,-,+,,56,"		memcpy(ref->value.val2.value, src->value.val2.value, hash_size);"
type_conversion,record.c,254,-,+,,40,"		       src->value.val2.target_value, hash_size);"
type_conversion,record.c,265,-,+,,10,		return '0' + c;
type_conversion,record.c,266,-,+,,9,	return 'a' + (c - 10);
type_conversion,record.c,275,-,+,,27,			dest[2 * i] = hexdigit(src[i] >> 4);
type_conversion,record.c,276,-,+,,31,			dest[2 * i + 1] = hexdigit(src[i] & 0xf);
type_conversion,record.c,278,-,+,,25,		dest[2 * hash_size] = 0;
type_conversion,record.c,285,-,+,,34,	char hex[GIT_MAX_HEXSZ + 1] = { 0 }; /* BUG */
type_conversion,record.c,343,-,+,,9,	return r->value_type;
type_conversion,record.c,367,-,+,,15,		if (s.len < 2 * hash_size) {
type_conversion,record.c,370,-,+,,38,"		memcpy(s.buf, r->value.val2.value, hash_size);"
type_conversion,record.c,372,-,+,,45,"		memcpy(s.buf, r->value.val2.target_value, hash_size);"
type_conversion,record.c,376,-,+,,15,		if (s.len < hash_size) {
type_conversion,record.c,379,-,+,,32,"		memcpy(s.buf, r->value.val1, hash_size);"
type_conversion,record.c,388,-,+,,9,	return start.len - s.len;
type_conversion,record.c,397,-,+,,26,	uint64_t update_index = 0;
type_conversion,record.c,399,-,+,,23,	size_t refname_cap = 0;
type_conversion,record.c,417,-,+,,24,	r->refname[key.len] = 0;
type_conversion,record.c,421,-,+,,10,	switch (val_type) {
type_conversion,record.c,422,-,+,,7,	case REFTABLE_REF_VAL1:
type_conversion,record.c,423,-,+,,16,		if (in.len < hash_size) {
type_conversion,record.c,427,-,+,,33,"		memcpy(r->value.val1, in.buf, hash_size);"
type_conversion,record.c,431,-,+,,7,	case REFTABLE_REF_VAL2:
type_conversion,record.c,432,-,+,,16,		if (in.len < 2 * hash_size) {
type_conversion,record.c,436,-,+,,39,"		memcpy(r->value.val2.value, in.buf, hash_size);"
type_conversion,record.c,439,-,+,,46,"		memcpy(r->value.val2.target_value, in.buf, hash_size);"
type_conversion,record.c,443,-,+,,7,	case REFTABLE_REF_SYMREF: {
type_conversion,record.c,452,-,+,,7,	case REFTABLE_REF_DELETION:
type_conversion,record.c,459,-,+,,9,	return start.len - in.len;
type_conversion,record.c,508,-,+,,37,"	strbuf_add(dest, rec->hash_prefix, rec->hash_prefix_len);"
type_conversion,record.c,522,-,+,,34,	char hex[GIT_MAX_HEXSZ + 1] = { 0 };
type_conversion,record.c,546,-,+,,46,"		memcpy(obj->hash_prefix, src->hash_prefix, obj->hash_prefix_len);"
type_conversion,record.c,557,-,+,,10,		return r->offset_len;
type_conversion,record.c,558,-,+,,9,	return 0;
type_conversion,record.c,568,-,+,,18,	uint64_t last = 0;
type_conversion,record.c,570,-,+,,23,"		n = put_var_int(&s, r->offset_len);"
type_conversion,record.c,577,-,+,,10,		return start.len - s.len;
type_conversion,record.c,592,-,+,,9,	return start.len - s.len;
type_conversion,record.c,601,-,+,,19,	uint64_t count = val_type;
type_conversion,record.c,610,-,+,,23,	r->hash_prefix_len = key.len;
type_conversion,record.c,612,-,+,,6,	if (val_type == 0) {
type_conversion,record.c,623,-,+,,15,	if (count == 0)
type_conversion,record.c,624,-,+,,10,		return start.len - in.len;
type_conversion,record.c,627,-,+,,18,	r->offset_len = count;
type_conversion,record.c,636,-,+,,9,	while (j < count) {
type_conversion,record.c,637,-,+,,20,		uint64_t delta = 0;
type_conversion,record.c,647,-,+,,9,	return start.len - in.len;
type_conversion,record.c,665,-,+,,47,"	    memcmp(ra->hash_prefix, rb->hash_prefix, ra->hash_prefix_len))"
type_conversion,record.c,668,-,+,,39,"	    memcmp(ra->offsets, rb->offsets, ra->offset_len * sizeof(uint64_t)))"
type_conversion,record.c,681,-,+,,8,"		     a->hash_prefix_len > b->hash_prefix_len ?
		     a->hash_prefix_len : b->hash_prefix_len);"
type_conversion,record.c,710,-,+,,34,	char hex[GIT_MAX_HEXSZ + 1] = { 0 };
type_conversion,record.c,723,-,+,,10,		       log->value.update.tz_offset);
type_conversion,record.c,743,-,+,,12,	int len = strlen(rec->refname);
type_conversion,record.c,745,-,+,,16,	uint64_t ts = 0;
type_conversion,record.c,747,-,+,,44,"	strbuf_add(dest, (uint8_t *)rec->refname, len + 1);"
type_conversion,record.c,784,-,+,,38,"		       src->value.update.new_hash, hash_size);"
type_conversion,record.c,786,-,+,,38,"		       src->value.update.old_hash, hash_size);"
type_conversion,record.c,817,-,+,,9,	return reftable_log_record_is_deletion(log) ? 0 : 1;
type_conversion,record.c,829,-,+,,14,	if (s.len < 2 * hash_size)
type_conversion,record.c,832,-,+,,42,"	memcpy(s.buf, r->value.update.old_hash, hash_size);"
type_conversion,record.c,833,-,+,,54,"	memcpy(s.buf + hash_size, r->value.update.new_hash, hash_size);"
type_conversion,record.c,852,-,+,,14,	if (s.len < 2)
type_conversion,record.c,855,-,+,,18,"	put_be16(s.buf, r->value.update.tz_offset);"
type_conversion,record.c,864,-,+,,9,	return start.len - s.len;
type_conversion,record.c,873,-,+,,17,	uint64_t max = 0;
type_conversion,record.c,874,-,+,,16,	uint64_t ts = 0;
type_conversion,record.c,877,-,+,,17,	if (key.len <= 9 || key.buf[key.len - 9] != 0)
type_conversion,record.c,878,-,+,,10,		return REFTABLE_FORMAT_ERROR;
type_conversion,record.c,881,-,+,,40,"	memcpy(r->refname, key.buf, key.len - 8);"
type_conversion,record.c,886,-,+,,6,	if (val_type != r->value_type) {
type_conversion,record.c,890,-,+,,34,			r->value.update.message_cap = 0;
type_conversion,record.c,900,-,+,,6,	if (val_type == REFTABLE_LOG_DELETION)
type_conversion,record.c,903,-,+,,15,	if (in.len < 2 * hash_size)
type_conversion,record.c,904,-,+,,10,		return REFTABLE_FORMAT_ERROR;
type_conversion,record.c,906,-,+,,43,"	memcpy(r->value.update.old_hash, in.buf, hash_size);"
type_conversion,record.c,907,-,+,,55,"	memcpy(r->value.update.new_hash, in.buf + hash_size, hash_size);"
type_conversion,record.c,925,-,+,,58,"			reftable_realloc(r->value.update.name, scratch->len + 1);"
type_conversion,record.c,927,-,+,,40,		r->value.update.name[scratch->len] = 0;
type_conversion,record.c,939,-,+,,59,"			reftable_realloc(r->value.update.email, scratch->len + 1);"
type_conversion,record.c,941,-,+,,41,		r->value.update.email[scratch->len] = 0;
type_conversion,record.c,944,-,+,,7,	ts = 0;
type_conversion,record.c,950,-,+,,15,	if (in.len < 2)
type_conversion,record.c,953,-,+,,30,	r->value.update.tz_offset = get_be16(in.buf);
type_conversion,record.c,964,-,+,,42,	r->value.update.message[scratch->len] = 0;
type_conversion,record.c,966,-,+,,9,	return start.len - in.len;
type_conversion,record.c,969,-,+,,9,	return REFTABLE_FORMAT_ERROR;
type_conversion,record.c,1005,-,+,,9,	return b->update_index - a->update_index;
type_conversion,record.c,1013,-,+,,8,	      a->value_type == b->value_type))
type_conversion,record.c,1022,-,+,,10,		       a->value.update.tz_offset == b->value.update.tz_offset &&
type_conversion,record.c,1028,-,+,,37,"			       b->value.update.old_hash, hash_size) &&"
type_conversion,record.c,1030,-,+,,37,"			       b->value.update.new_hash, hash_size);"
type_conversion,record.c,1087,-,+,,9,	return 0;
type_conversion,record.c,1103,-,+,,9,	return start.len - out.len;
type_conversion,record.c,1122,-,+,,9,	return start.len - in.len;
type_conversion,record.c,1210,-,+,,6,	if (a->type != b->type)
type_conversion,record.c,1218,-,+,,6,	if (a->type != b->type)
type_conversion,record.c,1227,-,+,,24,"		return !memcmp(a, b, hash_size);"
type_conversion,record.c,1240,-,+,,6,	    a->value_type != b->value_type)
type_conversion,record.c,1268,-,+,,9,	return ref->value_type == REFTABLE_REF_DELETION;
type_conversion,record.c,1286,-,+,,10,	return (log->value_type == REFTABLE_LOG_DELETION);
type_conversion,record.c,1291,-,+,,10,	switch (rec->type) {
type_conversion,record.c,1307,-,+,,10,	switch (rec->type) {
type_conversion,record.c,1325,-,+,,10,	switch (typ) {
type_conversion,record.c,1331,-,+,,37,"		strbuf_init(&rec->u.idx.last_key, 0);"
type_conversion,record.c,1340,-,+,,19,"	printf(""'%c': "", rec->type);"
type_conversion,record.h,31,-,+,,12,	s->len -= n;
type_conversion,record_test.c,37,-,+,,24,"	uint64_t inputs[] = { 0,"
type_conversion,record_test.c,38,-,+,,10,"			      1,"
type_conversion,record_test.c,39,-,+,,10,"			      27,"
type_conversion,record_test.c,40,-,+,,10,"			      127,"
type_conversion,record_test.c,41,-,+,,10,"			      128,"
type_conversion,record_test.c,42,-,+,,10,"			      257,"
type_conversion,record_test.c,43,-,+,,10,"			      4096,"
type_conversion,record_test.c,45,-,+,,54,			      ((uint64_t)1 << 63) + ((uint64_t)1 << 63) - 1 };
type_conversion,record_test.c,47,-,+,,14,	for (i = 0; i < ARRAY_SIZE(inputs); i++) {
type_conversion,record_test.c,56,-,+,,18,		uint64_t got = 0;
type_conversion,record_test.c,59,-,+,,13,		out.len = n;
type_conversion,record_test.c,80,-,+,,14,	for (i = 0; i < ARRAY_SIZE(cases); i++) {
type_conversion,record_test.c,96,-,+,,10,		h[i] = (j >> i) & 0xff;
type_conversion,record_test.c,105,-,+,,11,	for (i = REFTABLE_REF_DELETION; i < REFTABLE_NR_REF_VALUETYPES; i++) {
type_conversion,record_test.c,111,-,+,,28,		uint8_t buffer[1024] = { 0 };
type_conversion,record_test.c,120,-,+,,8,		case REFTABLE_REF_DELETION:
type_conversion,record_test.c,122,-,+,,8,		case REFTABLE_REF_VAL1:
type_conversion,record_test.c,125,-,+,,8,		case REFTABLE_REF_VAL2:
type_conversion,record_test.c,129,-,+,,8,		case REFTABLE_REF_SYMREF:
type_conversion,record_test.c,144,-,+,,41,"		m = reftable_record_decode(&out, key, i, dest, GIT_SHA1_RAWSZ, &scratch);"
type_conversion,record_test.c,163,-,+,,20,"			.update_index = 42,"
type_conversion,record_test.c,167,-,+,,20,"			.update_index = 22,"
type_conversion,record_test.c,184,-,+,,20,"			.update_index = 42,"
type_conversion,record_test.c,191,-,+,,14,"					.time = 1577123507,"
type_conversion,record_test.c,192,-,+,,19,"					.tz_offset = 100,"
type_conversion,record_test.c,198,-,+,,20,"			.update_index = 22,"
type_conversion,record_test.c,203,-,+,,20,"			.update_index = 33,"
type_conversion,record_test.c,213,-,+,,14,	for (i = 0; i < ARRAY_SIZE(in); i++) {
type_conversion,record_test.c,216,-,+,,28,		uint8_t buffer[1024] = { 0 };
type_conversion,record_test.c,246,-,+,,13,		valtype = reftable_record_val_type(&rec);
type_conversion,record_test.c,247,-,+,,41,"		m = reftable_record_decode(&out, key, valtype, dest,"
type_conversion,record_test.c,263,-,+,,16,	uint32_t in = 0x112233;
type_conversion,record_test.c,273,-,+,,27,	uint8_t buffer[1024] = { 0 };
type_conversion,record_test.c,288,-,+,,10,	extra = 6;
type_conversion,record_test.c,306,-,+,,40,"	uint8_t testHash1[GIT_SHA1_RAWSZ] = { 1, 2, 3, 4, 0 };"
type_conversion,record_test.c,307,-,+,,23,"	uint64_t till9[] = { 1, 2, 3, 4, 500, 600, 700, 800, 9000 };"
type_conversion,record_test.c,329,-,+,,14,	for (i = 0; i < ARRAY_SIZE(recs); i++) {
type_conversion,record_test.c,330,-,+,,28,		uint8_t buffer[1024] = { 0 };
type_conversion,record_test.c,368,-,+,,14,"			.offset = 42,"
type_conversion,record_test.c,372,-,+,,27,	uint8_t buffer[1024] = { 0 };
type_conversion,ref-cache.c,26,-,+,,6,	if (entry->flag & REF_INCOMPLETE) {
type_conversion,ref-cache.c,43,-,+,,14,	ref->flag = flag;
type_conversion,ref-cache.c,50,-,+,,34,"	struct ref_cache *ret = xcalloc(1, sizeof(*ret));"
type_conversion,ref-cache.c,54,-,+,,40,"	ret->root = create_dir_entry(ret, """", 0);"
type_conversion,ref-cache.c,62,-,+,,6,	if (entry->flag & REF_DIR) {
type_conversion,ref-cache.c,122,-,+,,16,	return '\0' - (unsigned char)ent->name[key->len];
type_conversion,ref-cache.c,136,-,+,,34,"	r = bsearch(&key, dir->entries, dir->nr, sizeof(*dir->entries),"
type_conversion,ref-cache.c,142,-,+,,9,	return r - dir->entries;
type_conversion,ref-cache.c,177,-,+,,41,		size_t dirnamelen = slash - refname + 1;
type_conversion,ref-cache.c,201,-,+,,10,	return (entry->flag & REF_DIR) ? NULL : entry;
type_conversion,ref-cache.c,216,-,+,,7,	if ((ref1->flag & REF_DIR) || (ref2->flag & REF_DIR))
type_conversion,ref-cache.c,274,-,+,,20,	while (*prefix && *dirname == *prefix) {
type_conversion,ref-cache.c,302,-,+,,9,		if (!(entry->flag & REF_DIR)) {
type_conversion,ref-cache.c,394,-,+,,36,			&iter->levels[iter->levels_nr - 1];
type_conversion,ref-cache.c,404,-,+,,29,			if (--iter->levels_nr == 0)
type_conversion,ref-cache.c,412,-,+,,7,		if (level->prefix_state == PREFIX_WITHIN_DIR) {
type_conversion,ref-cache.c,414,-,+,,8,			if (entry_prefix_state == PREFIX_EXCLUDES_DIR ||
type_conversion,ref-cache.c,415,-,+,,9,			    (entry_prefix_state == PREFIX_WITHIN_DIR && !(entry->flag & REF_DIR)))
type_conversion,ref-cache.c,421,-,+,,7,		if (entry->flag & REF_DIR) {
type_conversion,ref-cache.c,433,-,+,,23,			iter->base.flags = entry->flag;
type_conversion,ref-cache.c,492,-,+,,20,	iter->levels_nr = 1;
type_conversion,ref-filter.c,255,-,+,,19,"	size_t namelen = strchrnul(name, ':') - name;"
type_conversion,ref-filter.c,263,-,+,,19,"	size_t namelen = strchrnul(name, ':') - name;"
type_conversion,ref-filter.c,300,-,+,,6,	if (*atom == '=') {
type_conversion,ref-filter.c,304,-,+,,15,		*valuelen = atom - *valuestart;
type_conversion,ref-filter.c,305,-,+,,13,"	} else if (*atom != ',' && *atom != '\0') {"
type_conversion,ref-filter.c,311,-,+,,15,		*valuelen = 0;
type_conversion,ref-filter.c,315,-,+,,6,"	if (*atom == ',')"
type_conversion,ref-filter.c,419,-,+,,29,		atom->u.remote_ref.push = 1;
type_conversion,ref-filter.c,427,-,+,,33,	atom->u.remote_ref.nobracket = 0;
type_conversion,ref-filter.c,430,-,+,,14,	for (i = 0; i < params.nr; i++) {
type_conversion,ref-filter.c,438,-,+,,35,			atom->u.remote_ref.nobracket = 1;
type_conversion,ref-filter.c,441,-,+,,37,			atom->u.remote_ref.push_remote = 1;
type_conversion,ref-filter.c,444,-,+,,37,			atom->u.remote_ref.push_remote = 1;
type_conversion,ref-filter.c,465,-,+,,6,	if (*atom->name == '*')
type_conversion,ref-filter.c,478,-,+,,7,		if (*atom->name == '*')
type_conversion,ref-filter.c,484,-,+,,7,		if (*atom->name == '*')
type_conversion,ref-filter.c,499,-,+,,6,	if (*atom->name == '*')
type_conversion,ref-filter.c,532,-,+,,10,		return S_BARE;
type_conversion,ref-filter.c,534,-,+,,10,		return S_SIGNER;
type_conversion,ref-filter.c,536,-,+,,10,		return S_GRADE;
type_conversion,ref-filter.c,538,-,+,,10,		return S_KEY;
type_conversion,ref-filter.c,540,-,+,,10,		return S_FINGERPRINT;
type_conversion,ref-filter.c,542,-,+,,10,		return S_PRI_KEY_FP;
type_conversion,ref-filter.c,544,-,+,,10,		return S_TRUST_LEVEL;
type_conversion,ref-filter.c,619,-,+,,18,	size_t arglen = 0;
type_conversion,ref-filter.c,637,-,+,,37,"		if (strtol(argval, &endptr, 10) < 0)"
type_conversion,ref-filter.c,641,-,+,,7,		if (endptr - argval != arglen)
type_conversion,ref-filter.c,721,-,+,,29,		    atom->u.oid.length == 0)
type_conversion,ref-filter.c,747,-,+,,10,		return EO_RAW;
type_conversion,ref-filter.c,749,-,+,,10,		return EO_TRIM;
type_conversion,ref-filter.c,751,-,+,,10,		return EO_LOCALPART;
type_conversion,ref-filter.c,753,-,+,,10,		return EO_MAILMAP;
type_conversion,ref-filter.c,767,-,+,,34,		atom->u.email_option.option |= opt;
type_conversion,ref-filter.c,771,-,+,,7,"		if (*arg == ',')"
type_conversion,ref-filter.c,812,-,+,,14,	for (i = 0; i < params.nr; i++) {
type_conversion,ref-filter.c,817,-,+,,15,			position = parse_align_position(s);
type_conversion,ref-filter.c,832,-,+,,24,		else if ((position = parse_align_position(s)) >= 0)
type_conversion,ref-filter.c,1004,-,+,,6,	if (*sp == '*' && sp < ep)
type_conversion,ref-filter.c,1016,-,+,,24,"	arg = memchr(sp, ':', ep - sp);"
type_conversion,ref-filter.c,1017,-,+,,13,	atom_len = (arg ? arg : ep) - sp;
type_conversion,ref-filter.c,1021,-,+,,13,		int len = strlen(used_atom[i].name);
type_conversion,ref-filter.c,1022,-,+,,7,"		if (len == ep - atom && !memcmp(used_atom[i].name, atom, len))"
type_conversion,ref-filter.c,1027,-,+,,14,	for (i = 0; i < ARRAY_SIZE(valid_atom); i++) {
type_conversion,ref-filter.c,1028,-,+,,13,		int len = strlen(valid_atom[i].name);
type_conversion,ref-filter.c,1029,-,+,,58,"		if (len == atom_len && !memcmp(valid_atom[i].name, sp, len))"
type_conversion,ref-filter.c,1033,-,+,,32,	if (ARRAY_SIZE(valid_atom) <= i)
type_conversion,ref-filter.c,1036,-,+,,6,	if (valid_atom[i].source != SOURCE_NONE && !have_git_dir())
type_conversion,ref-filter.c,1046,-,+,,38,"	used_atom[at].name = xmemdupz(atom, ep - atom);"
type_conversion,ref-filter.c,1049,-,+,,6,	if (used_atom[at].source == SOURCE_OBJ) {
type_conversion,ref-filter.c,1050,-,+,,7,		if (*atom == '*')
type_conversion,ref-filter.c,1068,-,+,,6,	if (*atom == '*')
type_conversion,ref-filter.c,1070,-,+,,11,	if (i == ATOM_SYMREF)
type_conversion,ref-filter.c,1079,-,+,,13,		if (len < 0)
type_conversion,ref-filter.c,1082,-,+,,23,"			strbuf_add(s, str, len);"
type_conversion,ref-filter.c,1088,-,+,,13,		if (len < 0)
type_conversion,ref-filter.c,1091,-,+,,36,"			perl_quote_buf_with_len(s, str, len);"
type_conversion,ref-filter.c,1113,-,+,,23,	else if (v->s_size < 0)
type_conversion,ref-filter.c,1116,-,+,,43,"		strbuf_add(&state->stack->output, v->s, v->s_size);"
type_conversion,ref-filter.c,1122,-,+,,43,"	struct ref_formatting_stack *s = xcalloc(1, sizeof(struct ref_formatting_stack));"
type_conversion,ref-filter.c,1124,-,+,,26,"	strbuf_init(&s->output, 0);"
type_conversion,ref-filter.c,1203,-,+,,46,"	struct if_then_else *if_then_else = xcalloc(1,"
type_conversion,ref-filter.c,1233,-,+,,19,	size_t str_len = 0;
type_conversion,ref-filter.c,1243,-,+,,33,	if_then_else->then_atom_seen = 1;
type_conversion,ref-filter.c,1251,-,+,,6,	if (if_then_else->cmp_status == COMPARE_EQUAL) {
type_conversion,ref-filter.c,1254,-,+,,40,			if_then_else->condition_satisfied = 1;
type_conversion,ref-filter.c,1255,-,+,,13,	} else if (if_then_else->cmp_status == COMPARE_UNEQUAL) {
type_conversion,ref-filter.c,1258,-,+,,40,			if_then_else->condition_satisfied = 1;
type_conversion,ref-filter.c,1260,-,+,,39,		if_then_else->condition_satisfied = 1;
type_conversion,ref-filter.c,1280,-,+,,33,	if_then_else->else_atom_seen = 1;
type_conversion,ref-filter.c,1307,-,+,,45,"		quote_formatting(&s, current->output.buf, current->output.len, state->quote_style);"
type_conversion,ref-filter.c,1321,-,+,,7,		if (*cp == '%') {
type_conversion,ref-filter.c,1326,-,+,,8,			if (cp[1] == '(')
type_conversion,ref-filter.c,1328,-,+,,13,			else if (cp[1] == '%')
type_conversion,ref-filter.c,1339,-,+,,9,	return atom_type == ATOM_REST;
type_conversion,ref-filter.c,1363,-,+,,64,"			die(_(""this command reject atom %%(%.*s)""), (int)(ep - sp - 2), sp + 2);"
type_conversion,ref-filter.c,1368,-,+,,8,		     used_atom[at].atom_type == ATOM_RAW &&
type_conversion,ref-filter.c,1369,-,+,,8,		     used_atom[at].u.raw_data.option == RAW_BARE)
type_conversion,ref-filter.c,1371,-,+,,55,"			      ""--python, --shell, --tcl""), (int)(ep - sp - 2), sp + 2);"
type_conversion,ref-filter.c,1391,-,+,,13,					       atom->u.oid.length);
type_conversion,ref-filter.c,1419,-,+,,19,		if (!!deref != (*name == '*'))
type_conversion,ref-filter.c,1423,-,+,,7,		if (atom_type == ATOM_OBJECTTYPE)
type_conversion,ref-filter.c,1424,-,+,,29,			v->s = xstrdup(type_name(oi->type));
type_conversion,ref-filter.c,1425,-,+,,12,		else if (atom_type == ATOM_OBJECTSIZE) {
type_conversion,ref-filter.c,1426,-,+,,8,			if (used_atom[i].u.objectsize.option == O_SIZE_DISK) {
type_conversion,ref-filter.c,1427,-,+,,16,				v->value = oi->disk_size;
type_conversion,ref-filter.c,1429,-,+,,15,			} else if (used_atom[i].u.objectsize.option == O_SIZE) {
type_conversion,ref-filter.c,1433,-,+,,14,		} else if (atom_type == ATOM_DELTABASE)
type_conversion,ref-filter.c,1435,-,+,,12,		else if (atom_type == ATOM_OBJECTNAME && deref)
type_conversion,ref-filter.c,1450,-,+,,19,		if (!!deref != (*name == '*'))
type_conversion,ref-filter.c,1454,-,+,,7,		if (atom_type == ATOM_TAG)
type_conversion,ref-filter.c,1456,-,+,,12,		else if (atom_type == ATOM_TYPE && tag->tagged)
type_conversion,ref-filter.c,1457,-,+,,29,			v->s = xstrdup(type_name(tag->tagged->type));
type_conversion,ref-filter.c,1458,-,+,,12,		else if (atom_type == ATOM_OBJECT && tag->tagged)
type_conversion,ref-filter.c,1473,-,+,,19,		if (!!deref != (*name == '*'))
type_conversion,ref-filter.c,1477,-,+,,7,		if (atom_type == ATOM_TREE &&
type_conversion,ref-filter.c,1480,-,+,,7,		if (atom_type == ATOM_NUMPARENT) {
type_conversion,ref-filter.c,1481,-,+,,15,			v->value = commit_list_count(commit->parents);
type_conversion,ref-filter.c,1484,-,+,,12,		else if (atom_type == ATOM_PARENT) {
type_conversion,ref-filter.c,1502,-,+,,26,"		if (!strncmp(buf, who, wholen) &&"
type_conversion,ref-filter.c,1503,-,+,,7,		    buf[wholen] == ' ')
type_conversion,ref-filter.c,1509,-,+,,7,		if (*eol == '\n')
type_conversion,ref-filter.c,1519,-,+,,23,"	return xmemdupz(buf, eol - buf);"
type_conversion,ref-filter.c,1525,-,+,,24,	for (cp = buf; *cp && *cp != '\n'; cp++) {
type_conversion,ref-filter.c,1527,-,+,,25,"			return xmemdupz(buf, cp - buf);"
type_conversion,ref-filter.c,1536,-,+,,12,	if (opt & EO_LOCALPART) {
type_conversion,ref-filter.c,1543,-,+,,12,	if (opt & EO_TRIM)
type_conversion,ref-filter.c,1566,-,+,,12,	int opt = atom->u.email_option.option;
type_conversion,ref-filter.c,1571,-,+,,13,	if (opt & (EO_LOCALPART | EO_TRIM))
type_conversion,ref-filter.c,1577,-,+,,25,"	return xmemdupz(email, eoemail - email);"
type_conversion,ref-filter.c,1585,-,+,,14,	for (i = 0; i < len; i++) {
type_conversion,ref-filter.c,1586,-,+,,7,		if (buf[i] == '\r' && i + 1 < len && buf[i + 1] == '\n')
type_conversion,ref-filter.c,1589,-,+,,7,		if (buf[i] == '\n')
type_conversion,ref-filter.c,1592,-,+,,22,"			strbuf_addch(&sb, buf[i]);"
type_conversion,ref-filter.c,1632,-,+,,38,"	v->s = xstrdup(show_date(timestamp, tz, date_mode));"
type_conversion,ref-filter.c,1638,-,+,,13,	v->value = 0;
type_conversion,ref-filter.c,1647,-,+,,15,	int wholen = strlen(who);
type_conversion,ref-filter.c,1658,-,+,,19,		if (!!deref != (*name == '*'))
type_conversion,ref-filter.c,1662,-,+,,26,"		if (strncmp(who, name, wholen))"
type_conversion,ref-filter.c,1664,-,+,,7,		if (name[wholen] != 0 &&
type_conversion,ref-filter.c,1671,-,+,,8,		    (atom->u.name_option.option == N_MAILMAP)) ||
type_conversion,ref-filter.c,1673,-,+,,8,		    (atom->u.email_option.option & EO_MAILMAP))) {
type_conversion,ref-filter.c,1685,-,+,,7,		if (name[wholen] == 0)
type_conversion,ref-filter.c,1711,-,+,,19,		if (!!deref != (*name == '*'))
type_conversion,ref-filter.c,1716,-,+,,7,		if (atom_type == ATOM_CREATORDATE)
type_conversion,ref-filter.c,1718,-,+,,12,		else if (atom_type == ATOM_CREATOR)
type_conversion,ref-filter.c,1736,-,+,,19,		if (!!deref != (*name == '*'))
type_conversion,ref-filter.c,1742,-,+,,17,		    (*name && *name != ':'))
type_conversion,ref-filter.c,1759,-,+,,8,		case S_BARE:
type_conversion,ref-filter.c,1762,-,+,,8,		case S_SIGNER:
type_conversion,ref-filter.c,1765,-,+,,8,		case S_GRADE:
type_conversion,ref-filter.c,1766,-,+,,12,			switch (sigc.result) {
type_conversion,ref-filter.c,1771,-,+,,27,"					v->s = xstrfmt(""%c"", (char)'U');"
type_conversion,ref-filter.c,1774,-,+,,27,"					v->s = xstrfmt(""%c"", (char)'G');"
type_conversion,ref-filter.c,1784,-,+,,26,"				v->s = xstrfmt(""%c"", (char)sigc.result);"
type_conversion,ref-filter.c,1788,-,+,,8,		case S_KEY:
type_conversion,ref-filter.c,1791,-,+,,8,		case S_FINGERPRINT:
type_conversion,ref-filter.c,1795,-,+,,8,		case S_PRI_KEY_FP:
type_conversion,ref-filter.c,1799,-,+,,8,		case S_TRUST_LEVEL:
type_conversion,ref-filter.c,1822,-,+,,23,"	parse_signature(buf, end - buf, &payload, &signature);"
type_conversion,ref-filter.c,1826,-,+,,17,	while (*buf && *buf != '\n') {
type_conversion,ref-filter.c,1833,-,+,,9,	while (*buf == '\n')
type_conversion,ref-filter.c,1849,-,+,,12,	*sublen = buf - *sub;
type_conversion,ref-filter.c,1851,-,+,,38,	while (*sublen && ((*sub)[*sublen - 1] == '\n' ||
type_conversion,ref-filter.c,1852,-,+,,24,			   (*sub)[*sublen - 1] == '\r'))
type_conversion,ref-filter.c,1853,-,+,,14,		*sublen -= 1;
type_conversion,ref-filter.c,1856,-,+,,9,	while (*buf == '\n' || *buf == '\r')
type_conversion,ref-filter.c,1860,-,+,,15,	*nonsiglen = sigstart - buf;
type_conversion,ref-filter.c,1878,-,+,,33,"		eol = memchr(sp, '\n', size - (sp - buf));"
type_conversion,ref-filter.c,1879,-,+,,15,		len = eol ? eol - sp : size - (sp - buf);
type_conversion,ref-filter.c,1903,-,+,,7,		if (type != ATOM_DESCRIBE)
type_conversion,ref-filter.c,1906,-,+,,19,		if (!!deref != (*name == '*'))
type_conversion,ref-filter.c,1909,-,+,,17,		cmd.git_cmd = 1;
type_conversion,ref-filter.c,1913,-,+,,32,"		if (pipe_command(&cmd, NULL, 0, &out, 0, &err, 0) < 0) {"
type_conversion,ref-filter.c,1930,-,+,,18,"	size_t sublen = 0, bodylen = 0, nonsiglen = 0, siglen = 0;"
type_conversion,ref-filter.c,1939,-,+,,19,		if (!!deref != (*name == '*'))
type_conversion,ref-filter.c,1944,-,+,,7,		if (atom_type == ATOM_RAW) {
type_conversion,ref-filter.c,1947,-,+,,8,			if (atom->u.raw_data.option == RAW_BARE) {
type_conversion,ref-filter.c,1949,-,+,,17,				v->s_size = buf_size;
type_conversion,ref-filter.c,1950,-,+,,15,			} else if (atom->u.raw_data.option == RAW_LENGTH) {
type_conversion,ref-filter.c,1957,-,+,,8,		if ((data->type != OBJ_TAG &&
type_conversion,ref-filter.c,1958,-,+,,8,		     data->type != OBJ_COMMIT) ||
type_conversion,ref-filter.c,1970,-,+,,7,		if (atom->u.contents.option == C_SUB)
type_conversion,ref-filter.c,1972,-,+,,12,		else if (atom->u.contents.option == C_SUB_SANITIZE) {
type_conversion,ref-filter.c,1976,-,+,,14,		} else if (atom->u.contents.option == C_BODY_DEP)
type_conversion,ref-filter.c,1978,-,+,,12,		else if (atom->u.contents.option == C_LENGTH) {
type_conversion,ref-filter.c,1981,-,+,,14,		} else if (atom->u.contents.option == C_BODY)
type_conversion,ref-filter.c,1983,-,+,,12,		else if (atom->u.contents.option == C_SIG)
type_conversion,ref-filter.c,1985,-,+,,12,		else if (atom->u.contents.option == C_LINES) {
type_conversion,ref-filter.c,1990,-,+,,29,"			append_lines(&s, subpos, contents_end - subpos, atom->u.contents.nlines);"
type_conversion,ref-filter.c,1992,-,+,,14,		} else if (atom->u.contents.option == C_TRAILERS) {
type_conversion,ref-filter.c,1999,-,+,,14,		} else if (atom->u.contents.option == C_BARE)
type_conversion,ref-filter.c,2031,-,+,,10,	switch (obj->type) {
type_conversion,ref-filter.c,2032,-,+,,7,	case OBJ_TAG:
type_conversion,ref-filter.c,2038,-,+,,7,	case OBJ_COMMIT:
type_conversion,ref-filter.c,2046,-,+,,7,	case OBJ_TREE:
type_conversion,ref-filter.c,2050,-,+,,7,	case OBJ_BLOB:
type_conversion,ref-filter.c,2055,-,+,,34,"		die(""Eh?  Object of type %d?"", obj->type);"
type_conversion,ref-filter.c,2068,-,+,,19,	long remaining = len;
type_conversion,ref-filter.c,2077,-,+,,21,		for (i = 0; p[i]; p[i] == '/' ? i++ : *p++)
type_conversion,ref-filter.c,2085,-,+,,15,		remaining = i + len + 1;
type_conversion,ref-filter.c,2088,-,+,,21,	while (remaining > 0) {
type_conversion,ref-filter.c,2089,-,+,,11,		switch (*start++) {
type_conversion,ref-filter.c,2106,-,+,,19,	long remaining = len;
type_conversion,ref-filter.c,2115,-,+,,21,		for (i = 0; p[i]; p[i] == '/' ? i++ : *p++)
type_conversion,ref-filter.c,2123,-,+,,15,		remaining = i + len + 1;
type_conversion,ref-filter.c,2126,-,+,,23,	while (remaining-- > 0) {
type_conversion,ref-filter.c,2132,-,+,,11,			p[0] = '\0';
type_conversion,ref-filter.c,2139,-,+,,6,	if (atom->option == R_SHORT)
type_conversion,ref-filter.c,2143,-,+,,11,	else if (atom->option == R_LSTRIP)
type_conversion,ref-filter.c,2145,-,+,,11,	else if (atom->option == R_RSTRIP)
type_conversion,ref-filter.c,2155,-,+,,6,	if (atom->u.remote_ref.option == RR_REF)
type_conversion,ref-filter.c,2157,-,+,,11,	else if (atom->u.remote_ref.option == RR_TRACK) {
type_conversion,ref-filter.c,2159,-,+,,18,"				       NULL, atom->u.remote_ref.push,"
type_conversion,ref-filter.c,2176,-,+,,13,	} else if (atom->u.remote_ref.option == RR_TRACKSHORT) {
type_conversion,ref-filter.c,2178,-,+,,18,"				       NULL, atom->u.remote_ref.push,"
type_conversion,ref-filter.c,2191,-,+,,13,	} else if (atom->u.remote_ref.option == RR_REMOTE_NAME) {
type_conversion,ref-filter.c,2197,-,+,,13,	} else if (atom->u.remote_ref.option == RR_REMOTE_REF) {
type_conversion,ref-filter.c,2200,-,+,,41,"		merge = remote_ref_for_branch(branch, atom->u.remote_ref.push);"
type_conversion,ref-filter.c,2267,-,+,,45,	if (oi->info.disk_sizep && oi->disk_size < 0)
type_conversion,ref-filter.c,2310,-,+,,77,"	hashmap_init(&(ref_to_worktree_map.map), ref_to_worktree_map_cmpfnc, NULL, 0);"
type_conversion,ref-filter.c,2365,-,+,,14,		v->value = 0;
type_conversion,ref-filter.c,2368,-,+,,7,		if (*name == '*') {
type_conversion,ref-filter.c,2373,-,+,,7,		if (atom_type == ATOM_REFNAME)
type_conversion,ref-filter.c,2375,-,+,,12,		else if (atom_type == ATOM_WORKTREEPATH) {
type_conversion,ref-filter.c,2382,-,+,,12,		else if (atom_type == ATOM_SYMREF)
type_conversion,ref-filter.c,2384,-,+,,12,		else if (atom_type == ATOM_UPSTREAM) {
type_conversion,ref-filter.c,2400,-,+,,14,		} else if (atom_type == ATOM_PUSH && atom->u.remote_ref.push) {
type_conversion,ref-filter.c,2419,-,+,,14,		} else if (atom_type == ATOM_COLOR) {
type_conversion,ref-filter.c,2422,-,+,,14,		} else if (atom_type == ATOM_FLAG) {
type_conversion,ref-filter.c,2431,-,+,,11,				*cp = '\0';
type_conversion,ref-filter.c,2435,-,+,,24,		} else if (!deref && atom_type == ATOM_OBJECTNAME &&
type_conversion,ref-filter.c,2438,-,+,,14,		} else if (atom_type == ATOM_HEAD) {
type_conversion,ref-filter.c,2444,-,+,,14,		} else if (atom_type == ATOM_ALIGN) {
type_conversion,ref-filter.c,2448,-,+,,14,		} else if (atom_type == ATOM_END) {
type_conversion,ref-filter.c,2452,-,+,,14,		} else if (atom_type == ATOM_IF) {
type_conversion,ref-filter.c,2460,-,+,,14,		} else if (atom_type == ATOM_THEN) {
type_conversion,ref-filter.c,2464,-,+,,14,		} else if (atom_type == ATOM_ELSE) {
type_conversion,ref-filter.c,2468,-,+,,14,		} else if (atom_type == ATOM_REST) {
type_conversion,ref-filter.c,2474,-,+,,14,		} else if (atom_type == ATOM_AHEADBEHIND) {
type_conversion,ref-filter.c,2496,-,+,,23,		if (v->s == NULL && used_atom[i].source == SOURCE_NONE)
type_conversion,ref-filter.c,2516,-,+,,23,	if (!need_tagged || (obj->type != OBJ_TAG))
type_conversion,ref-filter.c,2554,-,+,,19,	unsigned flags = 0;
type_conversion,ref-filter.c,2584,-,+,,16,	int namelen = strlen(refname);
type_conversion,ref-filter.c,2592,-,+,,14,		int plen = strlen(p);
type_conversion,ref-filter.c,2595,-,+,,28,"		    !strncmp(refname, p, plen) &&"
type_conversion,ref-filter.c,2596,-,+,,8,		    (refname[plen] == '\0' ||
type_conversion,ref-filter.c,2597,-,+,,8,		     refname[plen] == '/' ||
type_conversion,ref-filter.c,2598,-,+,,8,		     p[plen-1] == '/'))
type_conversion,ref-filter.c,2613,-,+,,8,					  filter->ignore_case);
type_conversion,ref-filter.c,2615,-,+,,9,			     filter->ignore_case);
type_conversion,ref-filter.c,2624,-,+,,8,					  filter->ignore_case);
type_conversion,ref-filter.c,2625,-,+,,51,"	return match_pattern(filter->exclude.v, refname, filter->ignore_case);"
type_conversion,ref-filter.c,2696,-,+,,16,	while (obj && obj->type == OBJ_TAG) {
type_conversion,ref-filter.c,2762,-,+,,14,	for (i = 0; i < ARRAY_SIZE(ref_kind); i++) {
type_conversion,ref-filter.c,2764,-,+,,11,			return ref_kind[i].kind;
type_conversion,ref-filter.c,2780,-,+,,10,		return filter->kind;
type_conversion,ref-filter.c,2802,-,+,,9,"	kind = filter_ref_kind(filter, refname);"
type_conversion,ref-filter.c,2915,-,+,,22,"		fwrite(output.buf, 1, output.len, stdout);"
type_conversion,ref-filter.c,2947,-,+,,7,		if (atom->atom_type == ATOM_HEAD)
type_conversion,ref-filter.c,2984,-,+,,17,"				  to_clear, array->nr,"
type_conversion,ref-filter.c,3017,-,+,,41,	size_t commits_nr = format->bases.nr + array->nr;
type_conversion,ref-filter.c,3023,-,+,,18,	for (size_t i = 0; i < format->bases.nr; i++)
type_conversion,ref-filter.c,3029,-,+,,21,	array->counts_nr = 0;
type_conversion,ref-filter.c,3030,-,+,,18,	for (size_t i = 0; i < array->nr; i++) {
type_conversion,ref-filter.c,3038,-,+,,19,		for (size_t j = 0; j < format->bases.nr; j++) {
type_conversion,ref-filter.c,3220,-,+,,6,	if (s->sort_flags & REF_SORTING_DETACHED_HEAD_FIRST &&
type_conversion,ref-filter.c,3224,-,+,,13,	} else if (s->sort_flags & REF_SORTING_VERSION) {
type_conversion,ref-filter.c,3226,-,+,,13,	} else if (cmp_type == FIELD_STR) {
type_conversion,ref-filter.c,3227,-,+,,20,		if (va->s_size < 0 && vb->s_size < 0) {
type_conversion,ref-filter.c,3229,-,+,,13,			cmp_fn = s->sort_flags & REF_SORTING_ICASE
type_conversion,ref-filter.c,3233,-,+,,33,			size_t a_size = va->s_size < 0 ?
type_conversion,ref-filter.c,3234,-,+,,22,					strlen(va->s) : va->s_size;
type_conversion,ref-filter.c,3235,-,+,,33,			size_t b_size = vb->s_size < 0 ?
type_conversion,ref-filter.c,3236,-,+,,22,					strlen(vb->s) : vb->s_size;
type_conversion,ref-filter.c,3238,-,+,,13,			cmp_fn = s->sort_flags & REF_SORTING_ICASE
type_conversion,ref-filter.c,3259,-,+,,10,	return (s->sort_flags & REF_SORTING_REVERSE && !cmp_detached_head)
type_conversion,ref-filter.c,3275,-,+,,14,	return s && s->sort_flags & REF_SORTING_ICASE ?
type_conversion,ref-filter.c,3302,-,+,,7,		if (*cp == '%') {
type_conversion,ref-filter.c,3303,-,+,,8,			if (cp[1] == '%')
type_conversion,ref-filter.c,3314,-,+,,19,"		strbuf_addch(s, *cp);"
type_conversion,ref-filter.c,3379,-,+,,23,"			fwrite(output.buf, 1, output.len, stdout);"
type_conversion,ref-filter.c,3396,-,+,,19,	ref_item->kind = ref_kind_from_refname(name);
type_conversion,ref-filter.c,3399,-,+,,21,"	fwrite(output.buf, 1, output.len, stdout);"
type_conversion,ref-filter.c,3431,-,+,,6,	if (*arg == '-') {
type_conversion,ref-filter.c,3432,-,+,,20,		s->sort_flags |= REF_SORTING_REVERSE;
type_conversion,ref-filter.c,3437,-,+,,20,		s->sort_flags |= REF_SORTING_VERSION;
type_conversion,reflog-walk.c,68,-,+,,11,"		xcalloc(1, sizeof(struct complete_reflogs));"
type_conversion,reflog-walk.c,132,-,+,,45,	(*info)->complete_reflogs.strdup_strings = 1;
type_conversion,reflog-walk.c,142,-,+,,11,	for (i = 0; i < info->nr; i++)
type_conversion,reflog-walk.c,153,-,+,,26,	timestamp_t timestamp = 0;
type_conversion,reflog-walk.c,165,-,+,,12,	if (at && at[1] == '{') {
type_conversion,reflog-walk.c,167,-,+,,23,		branch[at - name] = '\0';
type_conversion,reflog-walk.c,168,-,+,,11,"		recno = strtoul(at + 2, &ep, 10);"
type_conversion,reflog-walk.c,169,-,+,,7,		if (*ep != '}') {
type_conversion,reflog-walk.c,183,-,+,,7,		if (*branch == '\0') {
type_conversion,reflog-walk.c,194,-,+,,31,"			int ret = dwim_log(branch, strlen(branch),"
type_conversion,reflog-walk.c,257,-,+,,6,	if (commit_reflog->selector == SELECTOR_DATE ||
type_conversion,reflog-walk.c,258,-,+,,7,	    (commit_reflog->selector == SELECTOR_NONE && force_date)) {
type_conversion,reflog-walk.c,281,-,+,,12,	if (len > 0)
type_conversion,reflog-walk.c,304,-,+,,10,		return 0;
type_conversion,reflog-walk.c,344,-,+,,14,		if (obj && obj->type == OBJ_COMMIT)
type_conversion,reflog-walk.c,361,-,+,,11,	for (i = 0; i < walk->nr; i++) {
type_conversion,reflog.c,84,-,+,,51,"	    parse_worktree_ref(ref, NULL, NULL, NULL) == REF_WORKTREE_SHARED)"
type_conversion,reflog.c,110,-,+,,15,		for (i = 0; i < found.nr; i++) {
type_conversion,reflog.c,120,-,+,,16,			for (i = 0; i < found.nr; i++)
type_conversion,reflog.c,125,-,+,,14,	for (i = 0; i < found.nr; i++)
type_conversion,reflog.c,138,-,+,,15,		for (i = 0; i < found.nr; i++)
type_conversion,reflog.c,178,-,+,,37,"		if (!wildmatch(ent->pattern, ref, 0)) {"
type_conversion,reflog.c,192,-,+,,23,			cb->expire_total = 0;
type_conversion,reflog.c,194,-,+,,29,			cb->expire_unreachable = 0;
type_conversion,reflog.c,234,-,+,,20,		cb->mark_limit = 0; /* dig down to the root */
type_conversion,reflog.c,244,-,+,,9,		      PARSE_OPT_KEEP_DASHDASH | PARSE_OPT_KEEP_ARGV0 |
type_conversion,reflog.c,245,-,+,,9,		      PARSE_OPT_KEEP_UNKNOWN_OPT);
type_conversion,reflog.c,278,-,+,,23,	unsigned int flags = 0;
type_conversion,reflog.c,307,-,+,,44,	default_reflog_expire_unreachable = now - 30 * 24 * 3600;
type_conversion,reflog.c,308,-,+,,32,	default_reflog_expire = now - 90 * 24 * 3600;
type_conversion,reflog.c,332,-,+,,40,		revs.do_not_die_on_missing_objects = 1;
type_conversion,reflog.c,333,-,+,,25,		revs.ignore_missing = 1;
type_conversion,reflog.c,334,-,+,,31,		revs.ignore_missing_links = 1;
type_conversion,reflog.c,337,-,+,,36,"		mark_reachable_objects(&revs, 0, 0, NULL);"
type_conversion,reflog.c,363,-,+,,27,"				.dry_run = !!(flags & EXPIRE_REFLOGS_DRY_RUN),"
type_conversion,reflog.c,381,-,+,,26,"		if (!dwim_log(argv[i], strlen(argv[i]), NULL, &ref)) {"
type_conversion,reflog.c,400,-,+,,23,	unsigned int flags = 0;
type_conversion,reflog.c,403,-,+,,17,"		.dry_run = !!(flags & EXPIRE_REFLOGS_DRY_RUN),"
type_conversion,reflog.c,412,-,+,,21,"	if (!dwim_log(rev, spec - rev, NULL, &ref)) {"
type_conversion,reflog.c,417,-,+,,10,"	recno = strtoul(spec + 2, &ep, 10);"
type_conversion,reflog.c,418,-,+,,6,	if (*ep == '}') {
type_conversion,reflog.c,426,-,+,,22,		cmd.expire_total = 0;
type_conversion,reflog.c,431,-,+,,10,"				     flags,"
type_conversion,reflog.c,463,-,+,,9,			     PARSE_OPT_SUBCOMMAND_OPTIONAL |
type_conversion,reflog.c,464,-,+,,9,			     PARSE_OPT_KEEP_DASHDASH | PARSE_OPT_KEEP_ARGV0 |
type_conversion,reflog.c,465,-,+,,9,			     PARSE_OPT_KEEP_UNKNOWN_OPT);
type_conversion,refs.c,43,-,+,,6,	if (ref_storage_format < ARRAY_SIZE(refs_backends))
type_conversion,refs.c,50,-,+,,24,	for (unsigned int i = 0; i < ARRAY_SIZE(refs_backends); i++)
type_conversion,refs.c,89,-,+,,12,"		.exact = 1,"
type_conversion,refs.c,114,-,+,,12,"		.exact = 1,"
type_conversion,refs.c,137,-,+,,12,"		.exact = 1,"
type_conversion,refs.c,164,-,+,,22,	info->ref_updated = 1;
type_conversion,refs.c,190,-,+,,14,	char last = '\0';
type_conversion,refs.c,191,-,+,,27,	size_t component_start = 0; /* garbage - not a reasonable initial value */
type_conversion,refs.c,197,-,+,,12,		int ch = *cp & 255;
type_conversion,refs.c,200,-,+,,20,		if (sanitized && disp != 1)
type_conversion,refs.c,203,-,+,,11,		switch (disp) {
type_conversion,refs.c,207,-,+,,8,"			if (last == '.') { /* Refname contains "".."". */"
type_conversion,refs.c,210,-,+,,48,"					strbuf_setlen(sanitized, sanitized->len - 1);"
type_conversion,refs.c,216,-,+,,8,"			if (last == '@') { /* Refname contains ""@{"". */"
type_conversion,refs.c,218,-,+,,36,					sanitized->buf[sanitized->len-1] = '-';
type_conversion,refs.c,226,-,+,,35,				sanitized->buf[sanitized->len-1] = '-';
type_conversion,refs.c,234,-,+,,36,					sanitized->buf[sanitized->len-1] = '-';
type_conversion,refs.c,246,-,+,,10,		last = ch;
type_conversion,refs.c,252,-,+,,6,	if (refname[0] == '.') { /* Component starts with '.'. */
type_conversion,refs.c,254,-,+,,38,			sanitized->buf[component_start] = '-';
type_conversion,refs.c,267,-,+,,9,	return cp - refname;
type_conversion,refs.c,285,-,+,,31,"			strbuf_complete(sanitized, '/');"
type_conversion,refs.c,296,-,+,,7,		if (refname[component_len] == '\0')
type_conversion,refs.c,302,-,+,,6,	if (refname[component_len - 1] == '.') {
type_conversion,refs.c,335,-,+,,19,		if (!restlen || *rest == '/' || rest[restlen - 1] == '/')
type_conversion,refs.c,350,-,+,,29,		if (!isupper(*refname) && *refname != '_')
type_conversion,refs.c,421,-,+,,42,"	if (wildmatch(filter->pattern, refname, 0))"
type_conversion,refs.c,432,-,+,,6,	if (o->type == OBJ_NONE) {
type_conversion,refs.c,438,-,+,,6,	if (o->type != OBJ_TAG)
type_conversion,refs.c,539,-,+,,6,	if (*pattern == '/')
type_conversion,refs.c,575,-,+,,34,"		strbuf_complete(&real_pattern, '/');"
type_conversion,refs.c,627,-,+,,30,	const int abbrev_name_len = strlen(abbrev_name);
type_conversion,refs.c,632,-,+,,11,			return &ref_rev_parse_rules[num_rules] - p;
type_conversion,refs.c,644,-,+,,12,	int len = strlen(prefix);
type_conversion,refs.c,710,-,+,,29,		.nonfatal_dangling_mark = nonfatal_dangling_mark
type_conversion,refs.c,717,-,+,,10,		*len = size;
type_conversion,refs.c,830,-,+,,11,	for (i = 0; i < ARRAY_SIZE(pseudo_refs); i++)
type_conversion,refs.c,842,-,+,,23,		if (!isupper(*c) && *c != '-' && *c != '_')
type_conversion,refs.c,868,-,+,,11,	for (i = 0; i < ARRAY_SIZE(irregular_root_refs); i++)
type_conversion,refs.c,899,-,+,,28,			*worktree_name_length = strlen(*worktree_name);
type_conversion,refs.c,906,-,+,,27,		*worktree_name_length = slash - *bare_refname;
type_conversion,refs.c,939,-,+,,9,	return timeout_ms;
type_conversion,refs.c,975,-,+,,8,			c = ' ';
type_conversion,refs.c,976,-,+,,20,"		strbuf_addch(sb, c);"
type_conversion,refs.c,1130,-,+,,30,"			set_read_ref_cutoffs(&cb, 0, 0, ""empty reflog"");"
type_conversion,refs.c,1177,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,refs.c,1197,-,+,,6,	if (transaction->state != REF_TRANSACTION_OPEN)
type_conversion,refs.c,1364,-,+,,9,	while (*rule != '%') {
type_conversion,refs.c,1367,-,+,,7,		if (*refname++ != *rule++)
type_conversion,refs.c,1395,-,+,,33,	for (i = NUM_REV_PARSE_RULES - 1; i > 0 ; --i) {
type_conversion,refs.c,1466,-,+,,9,		len = strlen(ref);
type_conversion,refs.c,1467,-,+,,17,		while (len && ref[len - 1] == '/')
type_conversion,refs.c,1468,-,+,,17,			ref[--len] = '\0';
type_conversion,refs.c,1478,-,+,,27,	for (i = hide_refs->nr - 1; i >= 0; i--) {
type_conversion,refs.c,1484,-,+,,7,		if (*match == '!') {
type_conversion,refs.c,1489,-,+,,7,		if (*match == '^') {
type_conversion,refs.c,1499,-,+,,15,		    (!*p || *p == '/'))
type_conversion,refs.c,1523,-,+,,7,		if (**pattern == '!' || **pattern == '^')
type_conversion,refs.c,1545,-,+,,7,	     pos < extras->nr; pos++) {
type_conversion,refs.c,1578,-,+,,8,	if (!(flags & DO_FOR_EACH_INCLUDE_BROKEN)) {
type_conversion,refs.c,1584,-,+,,13,			flags |= DO_FOR_EACH_INCLUDE_BROKEN;
type_conversion,refs.c,1585,-,+,,13,			flags |= DO_FOR_EACH_OMIT_DANGLING_SYMREFS;
type_conversion,refs.c,1589,-,+,,66,"	iter = refs->be->iterator_begin(refs, prefix, exclude_patterns, flags);"
type_conversion,refs.c,1666,-,+,,49,"	return do_for_each_ref(refs, prefix, NULL, fn, strlen(prefix), 0, cb_data);"
type_conversion,refs.c,1680,-,+,,9,"				    strlen(git_replace_ref_base),"
type_conversion,refs.c,1681,-,+,,9,"				    DO_FOR_EACH_INCLUDE_BROKEN, cb_data);"
type_conversion,refs.c,1723,-,+,,11,	for (i = 0; i < nr; i++) {
type_conversion,refs.c,1731,-,+,,6,	i = 0;
type_conversion,refs.c,1739,-,+,,18,		for (end = i + 1; end < nr; end++) {
type_conversion,refs.c,1740,-,+,,8,			if (patterns[i][prefix->len] != patterns[end][prefix->len])
type_conversion,refs.c,1744,-,+,,24,"		strbuf_addch(prefix, patterns[i][prefix->len]);"
type_conversion,refs.c,1746,-,+,,39,"		strbuf_setlen(prefix, prefix->len - 1);"
type_conversion,refs.c,1782,-,+,,18,	namespace_len = buf.len;
type_conversion,refs.c,1790,-,+,,23,"		strbuf_setlen(&buf, namespace_len);"
type_conversion,refs.c,1808,-,+,,48,"	if (strbuf_read_file(&content, full_path.buf, 0) < 0) {"
type_conversion,refs.c,1876,-,+,,29,		unsigned int read_flags = 0;
type_conversion,refs.c,2059,-,+,,47,"		hashmap_init(map, ref_store_hash_cmp, NULL, 0);"
type_conversion,refs.c,2078,-,+,,43,	while (len && is_dir_sep(submodule[len - 1]))
type_conversion,refs.c,2204,-,+,,11,	for (i = 1; i < n; i++) {
type_conversion,refs.c,2205,-,+,,40,"		int cmp = strcmp(refnames->items[i - 1].string,"
type_conversion,refs.c,2234,-,+,,26,	proc.stdout_to_stderr = 1;
type_conversion,refs.c,2243,-,+,,14,	for (i = 0; i < transaction->nr; i++) {
type_conversion,refs.c,2264,-,+,,50,"		if (write_in_full(proc.in, buf.buf, buf.len) < 0) {"
type_conversion,refs.c,2402,-,+,,42,"	strbuf_grow(&dirname, strlen(refname) + 1);"
type_conversion,refs.c,2412,-,+,,47,"		strbuf_add(&dirname, refname + dirname.len, slash - refname - dirname.len);"
type_conversion,refs.c,2560,-,+,,14,	for (i = 0; i < transaction->nr; i++) {
type_conversion,refs.c,2608,-,+,,23,		if (refnames->nr == 1)
type_conversion,refspec.c,11,-,+,,11,"	.force = 0,"
type_conversion,refspec.c,12,-,+,,13,"	.pattern = 1,"
type_conversion,refspec.c,13,-,+,,14,"	.matching = 0,"
type_conversion,refspec.c,14,-,+,,16,"	.exact_sha1 = 0,"
type_conversion,refspec.c,15,-,+,,14,"	.negative = 0,"
type_conversion,refspec.c,37,-,+,,6,	if (*lhs == '+') {
type_conversion,refspec.c,38,-,+,,17,		item->force = 1;
type_conversion,refspec.c,40,-,+,,13,	} else if (*lhs == '^') {
type_conversion,refspec.c,41,-,+,,20,		item->negative = 1;
type_conversion,refspec.c,55,-,+,,30,	if (!fetch && rhs == lhs && rhs[1] == '\0') {
type_conversion,refspec.c,56,-,+,,20,		item->matching = 1;
type_conversion,refspec.c,62,-,+,,14,"		is_glob = (1 <= rlen && strchr(rhs, '*'));"
type_conversion,refspec.c,68,-,+,,29,	llen = (rhs ? (rhs - lhs - 1) : strlen(lhs));
type_conversion,refspec.c,69,-,+,,6,"	if (1 <= llen && memchr(lhs, '*', llen)) {"
type_conversion,refspec.c,77,-,+,,18,	item->pattern = is_glob;
type_conversion,refspec.c,78,-,+,,14,	if (llen == 1 && *lhs == '@')
type_conversion,refspec.c,113,-,+,,23,			item->exact_sha1 = 1; /* ok */
type_conversion,refspec.c,181,-,+,,16,	item->force = 0;
type_conversion,refspec.c,182,-,+,,18,	item->pattern = 0;
type_conversion,refspec.c,183,-,+,,19,	item->matching = 0;
type_conversion,refspec.c,184,-,+,,21,	item->exact_sha1 = 0;
type_conversion,reftable-backend.c,115,-,+,,35,"		strbuf_add(&wtname_buf, wtname, wtname_len);"
type_conversion,reftable-backend.c,158,-,+,,6,	if (log_all_ref_updates == LOG_REFS_UNSET)
type_conversion,reftable-backend.c,183,-,+,,31,"		xstrndup(split->name_begin, split->name_end - split->name_begin);"
type_conversion,reftable-backend.c,185,-,+,,31,"		xstrndup(split->mail_begin, split->mail_end - split->mail_begin);"
type_conversion,reftable-backend.c,186,-,+,,27,	log->value.update.time = atol(split->date_begin);
type_conversion,reftable-backend.c,189,-,+,,6,	if (*tz_begin == '-') {
type_conversion,reftable-backend.c,193,-,+,,6,	if (*tz_begin == '+') {
type_conversion,reftable-backend.c,198,-,+,,32,	log->value.update.tz_offset = sign * atoi(tz_begin);
type_conversion,reftable-backend.c,214,-,+,,6,	if (ref.value_type == REFTABLE_REF_SYMREF) {
type_conversion,reftable-backend.c,235,-,+,,44,"	struct reftable_ref_store *refs = xcalloc(1, sizeof(*refs));"
type_conversion,reftable-backend.c,240,-,+,,15,	mask = umask(0);
type_conversion,reftable-backend.c,246,-,+,,35,	refs->write_options.block_size = 4096;
type_conversion,reftable-backend.c,248,-,+,,61,	refs->write_options.default_permissions = calc_shared_perm(0666 & ~mask);
type_conversion,reftable-backend.c,250,-,+,,3,"		!git_env_bool(""GIT_TEST_REFTABLE_AUTOCOMPACTION"", 1);"
type_conversion,reftable-backend.c,356,-,+,,23,		    !(iter->flags & DO_FOR_EACH_INCLUDE_ROOT_REFS &&
type_conversion,reftable-backend.c,367,-,+,,21,		if (iter->flags & DO_FOR_EACH_PER_WORKTREE_ONLY &&
type_conversion,reftable-backend.c,369,-,+,,8,			    REF_WORKTREE_CURRENT)
type_conversion,reftable-backend.c,398,-,+,,21,		if (iter->flags & DO_FOR_EACH_OMIT_DANGLING_SYMREFS &&
type_conversion,reftable-backend.c,403,-,+,,23,		if (!(iter->flags & DO_FOR_EACH_INCLUDE_BROKEN) &&
type_conversion,reftable-backend.c,405,-,+,,22,"					    &iter->oid, flags))"
type_conversion,reftable-backend.c,410,-,+,,22,		iter->base.flags = flags;
type_conversion,reftable-backend.c,435,-,+,,6,	if (iter->ref.value_type == REFTABLE_REF_VAL2) {
type_conversion,reftable-backend.c,468,-,+,,17,"	iter = xcalloc(1, sizeof(*iter));"
type_conversion,reftable-backend.c,471,-,+,,47,	iter->prefix_len = prefix ? strlen(prefix) : 0;
type_conversion,reftable-backend.c,473,-,+,,16,	iter->flags = flags;
type_conversion,reftable-backend.c,504,-,+,,16,	if (!(flags & DO_FOR_EACH_INCLUDE_BROKEN))
type_conversion,reftable-backend.c,508,-,+,,69,"	main_iter = ref_iterator_for_stack(refs, refs->main_stack, prefix, flags);"
type_conversion,reftable-backend.c,522,-,+,,77,"	worktree_iter = ref_iterator_for_stack(refs, refs->worktree_stack, prefix, flags);"
type_conversion,reftable-backend.c,572,-,+,,18,	if (ret == 0 && ref.value_type == REFTABLE_REF_SYMREF)
type_conversion,reftable-backend.c,605,-,+,,18,	for (size_t i = 0; i < tx_data->args_nr; i++) {
type_conversion,reftable-backend.c,632,-,+,,11,	for (i = 0; !arg && i < tx_data->args_nr; i++)
type_conversion,reftable-backend.c,645,-,+,,15,			if (ret == REFTABLE_LOCK_ERROR)
type_conversion,reftable-backend.c,657,-,+,,21,		arg->updates_nr = 0;
type_conversion,reftable-backend.c,658,-,+,,24,		arg->updates_alloc = 0;
type_conversion,reftable-backend.c,659,-,+,,27,		arg->updates_expected = 0;
type_conversion,reftable-backend.c,710,-,+,,27,	unsigned int head_type = 0;
type_conversion,reftable-backend.c,718,-,+,,20,"	tx_data = xcalloc(1, sizeof(*tx_data));"
type_conversion,reftable-backend.c,725,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,reftable-backend.c,739,-,+,,11,	for (i = 0; i < tx_data->args_nr; i++) {
type_conversion,reftable-backend.c,761,-,+,,11,	for (i = 0; i < transaction->nr; i++) {
type_conversion,reftable-backend.c,763,-,+,,35,		struct object_id current_oid = {0};
type_conversion,reftable-backend.c,782,-,+,,8,			if (o->type != OBJ_COMMIT && is_branch(u->refname)) {
type_conversion,reftable-backend.c,884,-,+,,17,				new_flags = u->flags;
type_conversion,reftable-backend.c,897,-,+,,33,"					transaction, referent.buf, new_flags,"
type_conversion,reftable-backend.c,1019,-,+,,19,"	size_t logs_nr = 0, logs_alloc = 0, i;"
type_conversion,reftable-backend.c,1024,-,+,,57,"	if (split_ident_line(&committer_ident, committer_info, strlen(committer_info)))"
type_conversion,reftable-backend.c,1031,-,+,,11,	for (i = 0; i < arg->updates_nr; i++) {
type_conversion,reftable-backend.c,1116,-,+,,61,"					xstrndup(u->msg, arg->refs->write_options.block_size / 2);"
type_conversion,reftable-backend.c,1152,-,+,,17,"			peel_error = peel_object(&u->new_oid, &peeled);"
type_conversion,reftable-backend.c,1173,-,+,,48,"		ret = reftable_writer_add_logs(writer, logs, logs_nr);"
type_conversion,reftable-backend.c,1180,-,+,,11,	for (i = 0; i < logs_nr; i++)
type_conversion,reftable-backend.c,1193,-,+,,18,	for (size_t i = 0; i < tx_data->args_nr; i++) {
type_conversion,reftable-backend.c,1286,-,+,,19,"	size_t logs_nr = 0, logs_alloc = 0, i;"
type_conversion,reftable-backend.c,1291,-,+,,57,"	if (split_ident_line(&committer_ident, committer_info, strlen(committer_info)))"
type_conversion,reftable-backend.c,1298,-,+,,6,	if (old_ref.value_type == REFTABLE_REF_SYMREF) {
type_conversion,reftable-backend.c,1364,-,+,,24,		unsigned head_type = 0;
type_conversion,reftable-backend.c,1372,-,+,,64,"			xstrndup(arg->logmsg, arg->refs->write_options.block_size / 2);"
type_conversion,reftable-backend.c,1389,-,+,,35,			logs[logs_nr] = logs[logs_nr - 1];
type_conversion,reftable-backend.c,1404,-,+,,63,"		xstrndup(arg->logmsg, arg->refs->write_options.block_size / 2);"
type_conversion,reftable-backend.c,1456,-,+,,47,"	ret = reftable_writer_add_logs(writer, logs, logs_nr);"
type_conversion,reftable-backend.c,1465,-,+,,11,	for (i = 0; i < logs_nr; i++) {
type_conversion,reftable-backend.c,1623,-,+,,17,"	iter = xcalloc(1, sizeof(*iter));"
type_conversion,reftable-backend.c,1625,-,+,,32,"	strbuf_init(&iter->last_name, 0);"
type_conversion,reftable-backend.c,1684,-,+,,29,"		  log->value.update.time, log->value.update.tz_offset,"
type_conversion,reftable-backend.c,1736,-,+,,22,"	size_t logs_alloc = 0, logs_nr = 0, i;"
type_conversion,reftable-backend.c,1768,-,+,,11,	for (i = 0; i < logs_nr; i++)
type_conversion,reftable-backend.c,1960,-,+,,26,	uint64_t live_records = 0;
type_conversion,reftable-backend.c,1964,-,+,,11,	for (i = 0; i < arg->len; i++)
type_conversion,reftable-backend.c,1965,-,+,,7,		if (arg->records[i].value_type == REFTABLE_LOG_UPDATE)
type_conversion,reftable-backend.c,2008,-,+,,11,	for (i = 0; i < arg->len; i++) {
type_conversion,reftable-backend.c,2048,-,+,,26,	struct object_id oid = {0};
type_conversion,reftable-backend.c,2050,-,+,,19,"	size_t logs_nr = 0, logs_alloc = 0, i;"
type_conversion,reftable-backend.c,2124,-,+,,9,"				    logs[i].value.update.tz_offset,"
type_conversion,reftable-backend.c,2129,-,+,,17,			if ((flags & EXPIRE_REFLOGS_REWRITE) && last_hash)
type_conversion,reftable-backend.c,2135,-,+,,14,	if (flags & EXPIRE_REFLOGS_UPDATE_REF && last_hash &&
type_conversion,reftable-backend.c,2152,-,+,,16,	if (!(flags & EXPIRE_REFLOGS_DRY_RUN))
type_conversion,reftable-backend.c,2163,-,+,,11,	for (i = 0; i < logs_nr; i++)
type_conversion,remote-curl.c,65,-,+,,11,"		int v = strtol(value, &end, 10);"
type_conversion,remote-curl.c,73,-,+,,23,			options.progress = 1;
type_conversion,remote-curl.c,75,-,+,,23,			options.progress = 0;
type_conversion,remote-curl.c,98,-,+,,30,			options.deepen_relative = 1;
type_conversion,remote-curl.c,100,-,+,,30,			options.deepen_relative = 0;
type_conversion,remote-curl.c,107,-,+,,25,			options.followtags = 1;
type_conversion,remote-curl.c,109,-,+,,25,			options.followtags = 0;
type_conversion,remote-curl.c,116,-,+,,22,			options.dry_run = 1;
type_conversion,remote-curl.c,118,-,+,,22,			options.dry_run = 0;
type_conversion,remote-curl.c,125,-,+,,49,			options.check_self_contained_and_connected = 1;
type_conversion,remote-curl.c,127,-,+,,49,			options.check_self_contained_and_connected = 0;
type_conversion,remote-curl.c,135,-,+,,7,"		if (*value != '""')"
type_conversion,remote-curl.c,144,-,+,,32,			options.force_if_includes = 1;
type_conversion,remote-curl.c,146,-,+,,32,			options.force_if_includes = 0;
type_conversion,remote-curl.c,152,-,+,,22,			options.cloning = 1;
type_conversion,remote-curl.c,154,-,+,,22,			options.cloning = 0;
type_conversion,remote-curl.c,160,-,+,,29,			options.update_shallow = 1;
type_conversion,remote-curl.c,162,-,+,,29,			options.update_shallow = 0;
type_conversion,remote-curl.c,178,-,+,,21,			options.atomic = 1;
type_conversion,remote-curl.c,180,-,+,,21,			options.atomic = 0;
type_conversion,remote-curl.c,185,-,+,,7,"		if (*value != '""')"
type_conversion,remote-curl.c,206,-,+,,27,		options.from_promisor = 1;
type_conversion,remote-curl.c,209,-,+,,21,		options.refetch = 1;
type_conversion,remote-curl.c,215,-,+,,27,		options.object_format = 1;
type_conversion,remote-curl.c,258,-,+,,60,"		get_remote_heads(&reader, &list, for_push ? REF_NORMAL : 0,"
type_conversion,remote-curl.c,276,-,+,,48,	algo = hash_algo_by_length((p - heads->buf) / 2);
type_conversion,remote-curl.c,301,-,+,,9,	while (i < heads->len) {
type_conversion,remote-curl.c,305,-,+,,7,		if (data[i] == '\t')
type_conversion,remote-curl.c,307,-,+,,7,		if (data[i] == '\n') {
type_conversion,remote-curl.c,308,-,+,,8,			if (mid - start != options.hash_algo->hexsz)
type_conversion,remote-curl.c,311,-,+,,14,			data[i] = 0;
type_conversion,remote-curl.c,380,-,+,,6,	if (version > 0) {
type_conversion,remote-curl.c,409,-,+,,6,	if (packet_reader_read(&reader) != PACKET_READ_NORMAL)
type_conversion,remote-curl.c,431,-,+,,18,		d->proto_git = 1;
type_conversion,remote-curl.c,438,-,+,,18,		d->proto_git = 1;
type_conversion,remote-curl.c,480,-,+,,6,"	if (version == protocol_v2 && strcmp(""git-upload-pack"", service))"
type_conversion,remote-curl.c,493,-,+,,33,	http_options.initial_request = 1;
type_conversion,remote-curl.c,494,-,+,,26,	http_options.no_cache = 1;
type_conversion,remote-curl.c,524,-,+,,16,"	last= xcalloc(1, sizeof(*last_discovery));"
type_conversion,remote-curl.c,633,-,+,,34,		left = rpc->alloc - rpc->len - 4;
type_conversion,remote-curl.c,644,-,+,,4,"			left, &pktlen_raw, options);"
type_conversion,remote-curl.c,645,-,+,,6,	if (*status != PACKET_READ_EOF) {
type_conversion,remote-curl.c,646,-,+,,15,		*appended = pktlen_raw + (rpc->write_line_lengths ? 4 : 0);
type_conversion,remote-curl.c,653,-,+,,10,			if (!(options & PACKET_READ_GENTLE_ON_EOF))
type_conversion,remote-curl.c,657,-,+,,31,"			set_packet_header(buf - 4, *appended);"
type_conversion,remote-curl.c,660,-,+,,28,"			memcpy(buf - 4, ""0001"", 4);"
type_conversion,remote-curl.c,663,-,+,,28,"			memcpy(buf - 4, ""0000"", 4);"
type_conversion,remote-curl.c,682,-,+,,25,		rpc->initial_buffer = 0;
type_conversion,remote-curl.c,683,-,+,,14,		rpc->len = 0;
type_conversion,remote-curl.c,684,-,+,,14,		rpc->pos = 0;
type_conversion,remote-curl.c,688,-,+,,8,			if (status == PACKET_READ_FLUSH)
type_conversion,remote-curl.c,689,-,+,,36,				rpc->flush_read_but_not_sent = 1;
type_conversion,remote-curl.c,705,-,+,,35,			rpc->flush_read_but_not_sent = 0;
type_conversion,remote-curl.c,706,-,+,,11,			return 0;
type_conversion,remote-curl.c,730,-,+,,16,		if (offset < 0 || offset > rpc->len) {
type_conversion,remote-curl.c,734,-,+,,14,		rpc->pos = offset;
type_conversion,remote-curl.c,752,-,+,,8,			if (digits_remaining > size)
type_conversion,remote-curl.c,753,-,+,,24,				digits_remaining = size;
type_conversion,remote-curl.c,754,-,+,,52,"			memcpy(&state->len_buf[state->len_filled], ptr, digits_remaining);"
type_conversion,remote-curl.c,757,-,+,,12,			size -= digits_remaining;
type_conversion,remote-curl.c,777,-,+,,8,			if (remaining > size)
type_conversion,remote-curl.c,778,-,+,,17,				remaining = size;
type_conversion,remote-curl.c,780,-,+,,12,			size -= remaining;
type_conversion,remote-curl.c,805,-,+,,29,			      &response_code) != CURLE_OK)
type_conversion,remote-curl.c,807,-,+,,23,	if (response_code >= 300)
type_conversion,remote-curl.c,830,-,+,,51,		if (results->http_code && results->http_code != 200)
type_conversion,remote-curl.c,832,-,+,,7,		if (results->curl_result != CURLE_OK) {
type_conversion,remote-curl.c,893,-,+,,17,	int use_gzip = rpc->gzip_request;
type_conversion,remote-curl.c,895,-,+,,21,	size_t gzip_size = 0;
type_conversion,remote-curl.c,914,-,+,,8,			if (status == PACKET_READ_FLUSH)
type_conversion,remote-curl.c,930,-,+,,7,		if (results.auth_avail & CURLAUTH_GSSNEGOTIATE || http_auth.authtype)
type_conversion,remote-curl.c,965,-,+,,25,		rpc->initial_buffer = 1;
type_conversion,remote-curl.c,984,-,+,,25,	} else if (use_gzip && 1024 < rpc->len) {
type_conversion,remote-curl.c,1081,-,+,,19,	client.git_cmd = 1;
type_conversion,remote-curl.c,1089,-,+,,15,	rpc->alloc = http_post_buffer;
type_conversion,remote-curl.c,1111,-,+,,43,"		int n = packet_read(rpc->out, rpc->buf, rpc->alloc, 0);"
type_conversion,remote-curl.c,1114,-,+,,14,		rpc->pos = 0;
type_conversion,remote-curl.c,1115,-,+,,14,		rpc->len = n;
type_conversion,remote-curl.c,1122,-,+,,39,"		strbuf_read(rpc_result, client.out, 0);"
type_conversion,remote-curl.c,1126,-,+,,47,"			if (xread(client.out, buf, sizeof(buf)) <= 0)"
type_conversion,remote-curl.c,1158,-,+,,25,	walker->get_progress = options.progress;
type_conversion,remote-curl.c,1199,-,+,,14,	for (i = 0; i < options.deepen_not.nr; i++)
type_conversion,remote-curl.c,1223,-,+,,21,	rpc.gzip_request = 1;
type_conversion,remote-curl.c,1260,-,+,,8,			if (*q == ' ')
type_conversion,remote-curl.c,1307,-,+,,24,"	strbuf_add(&url, arg, space - arg);"
type_conversion,remote-curl.c,1324,-,+,,18,	child.git_cmd = 1;
type_conversion,remote-curl.c,1332,-,+,,18,	for (i = 0; i < nr_spec; i++)
type_conversion,remote-curl.c,1357,-,+,,6,	if (options.push_cert == SEND_PACK_PUSH_CERT_ALWAYS)
type_conversion,remote-curl.c,1359,-,+,,11,	else if (options.push_cert == SEND_PACK_PUSH_CERT_IF_ASKED)
type_conversion,remote-curl.c,1367,-,+,,14,	for (i = 0; i < options.push_options.nr; i++)
type_conversion,remote-curl.c,1427,-,+,,13,"	ret = push(specs.nr, specs.v);"
type_conversion,remote-curl.c,1459,-,+,,6,	if (discover->version != protocol_v2) {
type_conversion,remote-curl.c,1482,-,+,,20,	rpc.buf = xmalloc(http_post_buffer);
type_conversion,remote-curl.c,1483,-,+,,14,	rpc.alloc = http_post_buffer;
type_conversion,remote-curl.c,1484,-,+,,12,	rpc.len = 0;
type_conversion,remote-curl.c,1485,-,+,,12,	rpc.pos = 0;
type_conversion,remote-curl.c,1489,-,+,,21,	rpc.gzip_request = 1;
type_conversion,remote-curl.c,1490,-,+,,23,	rpc.initial_buffer = 0;
type_conversion,remote-curl.c,1491,-,+,,27,	rpc.write_line_lengths = 1;
type_conversion,remote-curl.c,1492,-,+,,32,	rpc.flush_read_but_not_sent = 0;
type_conversion,remote-curl.c,1510,-,+,,7,		if (status == PACKET_READ_EOF)
type_conversion,remote-curl.c,1512,-,+,,25,"		if (post_rpc(&rpc, 1, status == PACKET_READ_FLUSH))"
type_conversion,remote-curl.c,1516,-,+,,13,		rpc.len = 0;
type_conversion,remote-curl.c,1543,-,+,,21,	options.progress = !!isatty(2);
type_conversion,remote-curl.c,1544,-,+,,17,	options.thin = 1;
type_conversion,remote-curl.c,1573,-,+,,18,		if (buf.len == 0)
type_conversion,remote-curl.c,1595,-,+,,16,				*value++ = '\0';
type_conversion,remote-ext.c,34,-,+,,16,	size_t rpos = 0;
type_conversion,remote-ext.c,36,-,+,,17,	char special = 0;
type_conversion,remote-ext.c,47,-,+,,33,	while (str[rpos] && (escape || str[rpos] != ' ')) {
type_conversion,remote-ext.c,49,-,+,,12,			switch (str[rpos]) {
type_conversion,remote-ext.c,58,-,+,,17,				if (rpos == 1)
type_conversion,remote-ext.c,63,-,+,,6,					str[rpos]);
type_conversion,remote-ext.c,67,-,+,,14,			escape = (str[rpos] == '%');
type_conversion,remote-ext.c,73,-,+,,6,	if (**next == ' ')
type_conversion,remote-ext.c,80,-,+,,9,	rpos = special ? 2 : 0;		/* Skip first 2 bytes in specials. */
type_conversion,remote-ext.c,82,-,+,,33,	while (str[rpos] && (escape || str[rpos] != ' ')) {
type_conversion,remote-ext.c,84,-,+,,12,			switch (str[rpos]) {
type_conversion,remote-ext.c,87,-,+,,24,"				strbuf_addch(&ret, str[rpos]);"
type_conversion,remote-ext.c,98,-,+,,12,			switch (str[rpos]) {
type_conversion,remote-ext.c,103,-,+,,24,"				strbuf_addch(&ret, str[rpos]);"
type_conversion,remote-ext.c,108,-,+,,10,	switch (special) {
type_conversion,remote-ext.c,181,-,+,,14,		while (i > 0 && isspace(buffer[i - 1]))
type_conversion,remote-ext.c,182,-,+,,18,			buffer[--i] = 0;
type_conversion,remote-fd.c,37,-,+,,14,		while (i > 0 && isspace(buffer[i - 1]))
type_conversion,remote-fd.c,38,-,+,,18,			buffer[--i] = 0;
type_conversion,remote-fd.c,69,-,+,,27,"	if ((end == argv[2]) || (*end != ',' && *end != '/' && *end))"
type_conversion,remote-fd.c,72,-,+,,6,	if (*end == '/' || !*end) {
type_conversion,remote-fd.c,78,-,+,,29,		if ((end2 == end + 1) || (*end2 != '/' && *end2))
type_conversion,remote.c,103,-,+,,16,	cmd.git_cmd = 1;
type_conversion,remote.c,108,-,+,,41,"		return !!xstrncmpz(a->name, key->str, key->len);"
type_conversion,remote.c,121,-,+,,9,		len = strlen(name);
type_conversion,remote.c,125,-,+,,50,"	hashmap_entry_init(&lookup_entry, memhash(name, len));"
type_conversion,remote.c,132,-,+,,47,"	git_config_set_multivar(key, tmp->buf, ""^$"", 0);"
type_conversion,remote.c,134,-,+,,29,"	ret->name = xstrndup(name, len);"
type_conversion,remote.c,159,-,+,,30,"	int fetch = 0, fetch_tags = TAGS_DEFAULT;"
type_conversion,remote.c,192,-,+,,41,"		return !!xstrncmpz(a->name, key->str, key->len);"
type_conversion,remote.c,204,-,+,,15,	lookup.len = len;
type_conversion,remote.c,212,-,+,,19,		if (track.nr == 0)
type_conversion,remote.c,214,-,+,,15,		for (i = 0; i < track.nr; i++) {
type_conversion,remote.c,216,-,+,,14,"				   name, mirror, &buf2);"
type_conversion,remote.c,226,-,+,,20,	if (fetch_tags != TAGS_DEFAULT) {
type_conversion,remote.c,230,-,+,,25,"			       fetch_tags == TAGS_SET ? ""--tags"" : ""--no-tags"");"
type_conversion,remote.c,287,-,+,,19,	remote->origin = REMOTE_REMOTES;
type_conversion,remote.c,300,-,+,,24,"		item->util = xcalloc(1, sizeof(struct branch_info));"
type_conversion,remote.c,313,-,+,,28,"			merge = xstrndup(value, space - value);"
type_conversion,remote.c,324,-,+,,19,	remote->origin = REMOTE_BRANCHES;
type_conversion,remote.c,327,-,+,,7,		if (info->rebase == REBASE_INVALID)
type_conversion,remote.c,334,-,+,,15,		*(frag++) = '\0';
type_conversion,remote.c,410,-,+,,6,	if (*name == '/') {
type_conversion,remote.c,415,-,+,,43,"	remote = make_remote(remote_state, name, namelen);"
type_conversion,remote.c,416,-,+,,19,	remote->origin = REMOTE_CONFIG;
type_conversion,remote.c,417,-,+,,6,	if (kvi->scope == CONFIG_SCOPE_LOCAL ||
type_conversion,remote.c,418,-,+,,6,	    kvi->scope == CONFIG_SCOPE_WORKTREE)
type_conversion,remote.c,425,-,+,,56,"	match_push_refs(local_refs, &push_map, &remote->push, MATCH_REFS_NONE);"
type_conversion,remote.c,437,-,+,,24,"		item->util = xcalloc(1, sizeof(struct push_info));"
type_conversion,remote.c,439,-,+,,18,		info->forced = ref->force;
type_conversion,remote.c,471,-,+,,31,"		info = item->util = xcalloc(1, sizeof(struct push_info));"
type_conversion,remote.c,484,-,+,,31,"		info = item->util = xcalloc(1, sizeof(struct push_info));"
type_conversion,remote.c,485,-,+,,18,		info->forced = spec->force;
type_conversion,remote.c,499,-,+,,18,	refspec.force = 0;
type_conversion,remote.c,500,-,+,,20,	refspec.pattern = 1;
type_conversion,remote.c,539,-,+,,18,		if (is_dir_sep(*name++))
type_conversion,remote.c,623,-,+,,58,"		git_config_set_multivar(buf.buf, remote->url[i], ""^$"", 0);"
type_conversion,remote.c,627,-,+,,63,"		git_config_set_multivar(buf.buf, remote->push.raw[i], ""^$"", 0);"
type_conversion,remote.c,631,-,+,,64,"		git_config_set_multivar(buf.buf, remote->fetch.raw[i], ""^$"", 0);"
type_conversion,remote.c,632,-,+,,24,	if (remote->origin == REMOTE_REMOTES)
type_conversion,remote.c,634,-,+,,29,	else if (remote->origin == REMOTE_BRANCHES)
type_conversion,remote.c,672,-,+,,6,	if (push_default.scope >= CONFIG_SCOPE_COMMAND)
type_conversion,remote.c,674,-,+,,11,	else if (push_default.scope >= CONFIG_SCOPE_LOCAL) {
type_conversion,remote.c,681,-,+,,13,	} else if (push_default.scope >= CONFIG_SCOPE_SYSTEM) {
type_conversion,remote.c,717,-,+,,22,	rename.symrefs_nr = 0;
type_conversion,remote.c,725,-,+,,72,"	if (!strcmp(rename.old_name, rename.new_name) && oldremote->origin != REMOTE_CONFIG)"
type_conversion,remote.c,757,-,+,,12,"					      ptr-buf2.buf + strlen("":refs/remotes/""),"
type_conversion,remote.c,760,-,+,,7,		if (ref1->fetch_head_status != FETCH_HEAD_IGNORE &&
type_conversion,remote.c,761,-,+,,7,		    ref2->fetch_head_status != FETCH_HEAD_IGNORE) {
type_conversion,remote.c,764,-,+,,14,		} else if (ref1->fetch_head_status != FETCH_HEAD_IGNORE &&
type_conversion,remote.c,765,-,+,,7,			   ref2->fetch_head_status == FETCH_HEAD_IGNORE) {
type_conversion,remote.c,766,-,+,,53,"			git_config_set_multivar(buf.buf, buf2.buf, ""^$"", 0);"
type_conversion,remote.c,768,-,+,,14,		} else if (ref1->fetch_head_status == FETCH_HEAD_IGNORE &&
type_conversion,remote.c,769,-,+,,7,			   ref2->fetch_head_status == FETCH_HEAD_IGNORE) {
type_conversion,remote.c,771,-,+,,14,	for (i = 0; i < branch_list.nr; i++) {
type_conversion,remote.c,801,-,+,,37,					  rename.remote_branches->nr + rename.symrefs_nr);
type_conversion,remote.c,803,-,+,,14,	for (i = 0; i < remote_branches.nr; i++) {
type_conversion,remote.c,814,-,+,,30,"		display_progress(progress, ++refs_renamed_nr);"
type_conversion,remote.c,816,-,+,,14,	for (i = 0; i < remote_branches.nr; i++) {
type_conversion,remote.c,830,-,+,,30,"		display_progress(progress, ++refs_renamed_nr);"
type_conversion,remote.c,832,-,+,,14,	for (i = 0; i < remote_branches.nr; i++) {
type_conversion,remote.c,839,-,+,,9,	klen = kstar - key;
type_conversion,remote.c,849,-,+,,26,"		strbuf_add(&sb, value, vstar - value);"
type_conversion,remote.c,850,-,+,,30,"		display_progress(progress, ++refs_renamed_nr);"
type_conversion,remote.c,893,-,+,,14,	for (i = 0; i < branch_list.nr; i++) {
type_conversion,remote.c,939,-,+,,15,		for (i = 0; i < skipped.nr; i++)
type_conversion,remote.c,942,-,+,,35,	for (i = 0; !matched_negative && i < reversed.nr; i++) {
type_conversion,remote.c,1005,-,+,,20,				query->force = refspec->force;
type_conversion,remote.c,1010,-,+,,19,			query->force = refspec->force;
type_conversion,remote.c,1039,-,+,,28,"	struct ref *ref = xcalloc(1, st_add4(sizeof(*ref), prefixlen, len, 1));"
type_conversion,remote.c,1042,-,+,,10,	int n = strlen(item->string);
type_conversion,remote.c,1047,-,+,,35,"	return alloc_ref_with_prefix("""", 0, name);"
type_conversion,remote.c,1089,-,+,,11,	if ((n = strlen(branch_item->string)) > show_info->width)
type_conversion,remote.c,1091,-,+,,6,	if (branch_info->rebase >= REBASE_TRUE)
type_conversion,remote.c,1102,-,+,,15,	int patlen = strlen(pattern);
type_conversion,remote.c,1108,-,+,,6,	if (branch_info->rebase >= REBASE_TRUE && branch_info->merge.nr > 1) {
type_conversion,remote.c,1110,-,+,,17,		int namelen = strlen(name);
type_conversion,remote.c,1115,-,+,,6,	if (branch_info->rebase >= REBASE_TRUE) {
type_conversion,remote.c,1117,-,+,,7,		if (branch_info->rebase == REBASE_INTERACTIVE)
type_conversion,remote.c,1119,-,+,,12,		else if (branch_info->rebase == REBASE_MERGES)
type_conversion,remote.c,1132,-,+,,14,	for (i = 1; i < merge->nr; i++)
type_conversion,remote.c,1145,-,+,,11,	if ((n = strlen(push_item->string)) > show_info->width)
type_conversion,remote.c,1147,-,+,,11,	if ((n = strlen(push_info->dest)) > show_info->width2)
type_conversion,remote.c,1261,-,+,,15,		for (i = 0; i < list.nr; i++) {
type_conversion,remote.c,1275,-,+,,6,	if (type == OBJ_COMMIT) {
type_conversion,remote.c,1280,-,+,,13,	} else if (type == OBJ_TAG) {
type_conversion,remote.c,1285,-,+,,13,	} else if (type == OBJ_TREE) {
type_conversion,remote.c,1290,-,+,,13,	} else if (type == OBJ_BLOB) {
type_conversion,remote.c,1326,-,+,,36,		else if (info.states.heads.nr == 1)
type_conversion,remote.c,1331,-,+,,16,			for (i = 0; i < info.states.heads.nr; i++)
type_conversion,remote.c,1364,-,+,,24,		matched_dst->force = rs->force;
type_conversion,remote.c,1401,-,+,,21,			if (direction == FROM_SRC)
type_conversion,remote.c,1406,-,+,,30,		else if (states.heads.nr > 1) {
type_conversion,remote.c,1409,-,+,,16,			for (i = 0; i < states.heads.nr; i++)
type_conversion,remote.c,1467,-,+,,42,"					   ""remote: prune"", &refs_to_prune, 0);"
type_conversion,remote.c,1489,-,+,,63,"		if (oid_object_info(the_repository, &ref->new_oid, NULL) != OBJ_TAG)"
type_conversion,remote.c,1529,-,+,,12,						     reachable_flag);
type_conversion,remote.c,1545,-,+,,36,"	if (strcmp(cmd.args.v[cmd.args.nr-1], ""default"") == 0) {"
type_conversion,remote.c,1549,-,+,,10,			if (!(commit->object.flags & reachable_flag))
type_conversion,remote.c,1553,-,+,,16,	cmd.git_cmd = 1;
type_conversion,remote.c,1558,-,+,,56,"		clear_commit_marks_many(nr_src_commits, src_commits, reachable_flag);"
type_conversion,remote.c,1617,-,+,,25,	int send_all = flags & MATCH_REFS_ALL;
type_conversion,remote.c,1618,-,+,,28,	int send_mirror = flags & MATCH_REFS_MIRROR;
type_conversion,remote.c,1619,-,+,,27,	int send_prune = flags & MATCH_REFS_PRUNE;
type_conversion,remote.c,1637,-,+,,50,"		dst_name = get_ref_match(rs, ref, send_mirror, FROM_SRC, &pat);"
type_conversion,remote.c,1666,-,+,,21,		dst_peer->force = pat->force;
type_conversion,remote.c,1673,-,+,,14,	if (flags & MATCH_REFS_FOLLOW_TAGS)
type_conversion,remote.c,1686,-,+,,51,"			src_name = get_ref_match(rs, ref, send_mirror, FROM_DST, NULL);"
type_conversion,remote.c,1720,-,+,,19,		ref->deletion = is_null_oid(&ref->new_oid);
type_conversion,remote.c,1732,-,+,,20,"						       ""^$"", 0);"
type_conversion,remote.c,1742,-,+,,21,				reject_reason = REF_STATUS_REJECT_STALE;
type_conversion,remote.c,1743,-,+,,39,"		if (!regexec(&old_regex, urlset[i], 0, NULL, 0))"
type_conversion,remote.c,1745,-,+,,6,					REF_STATUS_REJECT_REMOTE_UPDATED;
type_conversion,remote.c,1755,-,+,,57,"		git_config_set_multivar(name_buf.buf, newurl, oldurl, 0);"
type_conversion,remote.c,1778,-,+,,21,				reject_reason = REF_STATUS_REJECT_ALREADY_EXISTS;
type_conversion,remote.c,1780,-,+,,21,				reject_reason = REF_STATUS_REJECT_FETCH_FIRST;
type_conversion,remote.c,1783,-,+,,21,				reject_reason = REF_STATUS_REJECT_NEEDS_FORCE;
type_conversion,remote.c,1785,-,+,,21,				reject_reason = REF_STATUS_REJECT_NONFASTFORWARD;
type_conversion,remote.c,1795,-,+,,25,			ref->forced_update = 1;
type_conversion,remote.c,1823,-,+,,27,"		ret->merge[i] = xcalloc(1, sizeof(**ret->merge));"
type_conversion,remote.c,1829,-,+,,7,"				  strlen(ret->merge_name[i]), &oid, &ref,"
type_conversion,remote.c,2029,-,+,,28,				cpy->peer_ref->force = 1;
type_conversion,remote.c,2069,-,+,,15,	if (!name || name[0] == '\0')
type_conversion,remote.c,2078,-,+,,41,"		return alloc_ref_with_prefix(""refs/"", 5, name);"
type_conversion,remote.c,2080,-,+,,46,"	return alloc_ref_with_prefix(""refs/heads/"", 11, name);"
type_conversion,remote.c,2101,-,+,,25,			ref_map->exact_oid = 1;
type_conversion,remote.c,2110,-,+,,32,				ref_map->peer_ref->force = 1;
type_conversion,remote.c,2169,-,+,,33,"		.free_removed_argv_elements = 1,"
type_conversion,remote.c,2191,-,+,,6,	if (abf == AHEAD_BEHIND_QUICK)
type_conversion,remote.c,2193,-,+,,6,	if (abf != AHEAD_BEHIND_FULL)
type_conversion,remote.c,2205,-,+,,18,"	setup_revisions(argv.nr, argv.v, &revs, &opt);"
type_conversion,remote.c,2297,-,+,,13,	} else if (abf == AHEAD_BEHIND_QUICK) {
type_conversion,remote.c,2308,-,+,,7,"			   ours),"
type_conversion,remote.c,2319,-,+,,7,"			   theirs),"
type_conversion,remote.c,2332,-,+,,7,"			   ours + theirs),"
type_conversion,remote.c,2437,-,+,,20,	if (matches.nr == 0)
type_conversion,remote.c,2450,-,+,,23,	for (i = 0; stale && i < matches.nr; i++)
type_conversion,remote.c,2520,-,+,,32,		cas->use_tracking_for_rest = 1;
type_conversion,remote.c,2526,-,+,,34,"	entry = add_cas_entry(cas, arg, colon - arg);"
type_conversion,remote.c,2528,-,+,,25,		entry->use_tracking = 1;
type_conversion,remote.c,2593,-,+,,25,	arr->nr = arr->alloc = 0;
type_conversion,remote.c,2657,-,+,,16,	size_t size = 0;
type_conversion,remote.c,2688,-,+,,10,		size = arr.item + arr.nr - chunk;
type_conversion,remote.c,2692,-,+,,63,"		if ((ret = repo_in_merge_bases_many(the_repository, commit, size, chunk, 0)))"
type_conversion,remote.c,2712,-,+,,25,		remote->unreachable = 1;
type_conversion,remote.c,2726,-,+,,26,		ref->expect_old_sha1 = 1;
type_conversion,remote.c,2734,-,+,,27,			ref->check_reachable = cas->use_force_if_includes;
type_conversion,remote.c,2742,-,+,,25,	ref->expect_old_sha1 = 1;
type_conversion,remote.c,2748,-,+,,26,		ref->check_reachable = cas->use_force_if_includes;
type_conversion,remote.c,2775,-,+,,57,"	hashmap_init(&r->remotes_hash, remotes_hash_cmp, NULL, 0);"
type_conversion,remote.c,2776,-,+,,59,"	hashmap_init(&r->branches_hash, branches_hash_cmp, NULL, 0);"
type_conversion,remote.c,2801,-,+,,12,		*rfind = '\0';
type_conversion,remote.c,2807,-,+,,12,		*rfind = '\0';
type_conversion,remote.c,2838,-,+,,31,	if (is_dir_sep(remoteurl[len-1]))
type_conversion,remote.c,2839,-,+,,17,		remoteurl[len-1] = '\0';
type_conversion,remote.c,2873,-,+,,31,"		strbuf_setlen(&sb, sb.len - 1);"
type_conversion,repack.c,150,-,+,,13,		if (len < hexsz)
type_conversion,repack.c,201,-,+,,23,"	strbuf_insertf(&buf, 0, ""%s/"", dir_name);"
type_conversion,repack.c,250,-,+,,15,		for (i = 0; i < extra_keep->nr; i++)
type_conversion,repack.c,258,-,+,,25,		if ((extra_keep->nr > 0 && i < extra_keep->nr) || p->pack_keep)
type_conversion,repack.c,298,-,+,,17,	cmd->git_cmd = 1;
type_conversion,repack.c,317,-,+,,70,"	if (write_in_full(cmd->in, oid_to_hex(oid), the_hash_algo->hexsz) < 0 ||"
type_conversion,repack.c,318,-,+,,35,"	    write_in_full(cmd->in, ""\n"", 1) < 0)"
type_conversion,repack.c,328,-,+,,11,"	{"".rev"", 1},"
type_conversion,repack.c,329,-,+,,14,"	{"".mtimes"", 1},"
type_conversion,repack.c,330,-,+,,14,"	{"".bitmap"", 1},"
type_conversion,repack.c,331,-,+,,16,"	{"".promisor"", 1},"
type_conversion,repack.c,343,-,+,,45,"	struct generated_pack_data *data = xcalloc(1, sizeof(*data));"
type_conversion,repack.c,346,-,+,,14,	for (i = 0; i < ARRAY_SIZE(exts); i++) {
type_conversion,repack.c,364,-,+,,14,	for (i = 0; i < ARRAY_SIZE(exts); i++) {
type_conversion,repack.c,517,-,+,,21,	off_t total_size = 0;
type_conversion,repack.c,528,-,+,,38,	for (i = geometry->pack_nr - 1; i > 0; i--) {
type_conversion,repack.c,530,-,+,,48,		struct packed_git *prev = geometry->pack[i - 1];
type_conversion,repack.c,539,-,+,,7,		    geometry->split_factor * geometry_pack_weight(prev))
type_conversion,repack.c,564,-,+,,11,	for (i = 0; i < split; i++) {
type_conversion,repack.c,569,-,+,,17,		total_size += geometry_pack_weight(p);
type_conversion,repack.c,578,-,+,,7,		if (geometry_pack_weight(ours) <
type_conversion,repack.c,579,-,+,,7,		    geometry->split_factor * total_size) {
type_conversion,repack.c,586,-,+,,18,			total_size += geometry_pack_weight(ours);
type_conversion,repack.c,623,-,+,,26,		if (geometry->pack[i - 1]->pack_local)
type_conversion,repack.c,624,-,+,,30,			return geometry->pack[i - 1];
type_conversion,repack.c,636,-,+,,11,	for (i = 0; i < geometry->split; i++) {
type_conversion,repack.c,682,-,+,,52,"	if (oid_object_info(the_repository, oid, NULL) != OBJ_COMMIT)"
type_conversion,repack.c,698,-,+,,26,"	oidset_init(&data.seen, 0);"
type_conversion,repack.c,806,-,+,,16,	cmd.git_cmd = 1;
type_conversion,repack.c,941,-,+,,14,"	int local = skip_prefix(destination, packdir, &scratch);"
type_conversion,repack.c,996,-,+,,22,	size_t total_size = 0;
type_conversion,repack.c,997,-,+,,29,	size_t existing_cruft_nr = 0;
type_conversion,repack.c,1023,-,+,,11,	for (i = 0; i < existing_cruft_nr; i++) {
type_conversion,repack.c,1027,-,+,,33,"		proposed = st_add(total_size, p->pack_size);"
type_conversion,repack.c,1038,-,+,,11,	for (i = 0; i < existing->non_kept_packs.nr; i++)
type_conversion,repack.c,1058,-,+,,14,"	int local = skip_prefix(destination, packdir, &scratch);"
type_conversion,repack.c,1113,-,+,,6,	if (*pack_prefix == '/')
type_conversion,repack.c,1275,-,+,,14,	for (i = 0; i < keep_pack_list.nr; i++)
type_conversion,repack.c,1344,-,+,,18,		cmd.no_stdin = 1;
type_conversion,repack.c,1357,-,+,,15,		for (i = 0; i < geometry.split; i++)
type_conversion,repack.c,1359,-,+,,28,		for (i = geometry.split; i < geometry.pack_nr; i++)
type_conversion,repack.c,1450,-,+,,17,		for (ext = 0; ext < ARRAY_SIZE(exts); ext++) {
type_conversion,repack.c,1522,-,+,,20,		unsigned flags = 0;
type_conversion,replace-object.c,51,-,+,,39,"	oidmap_init(r->objects->replace_map, 0);"
type_conversion,replace-object.c,54,-,+,,40,	r->objects->replace_map_initialized = 1;
type_conversion,replace-object.h,50,-,+,,49,	     r->objects->replace_map->map.tablesize == 0))
type_conversion,replace.c,56,-,+,,41,"	if (!wildmatch(data->pattern, refname, 0)) {"
type_conversion,replace.c,57,-,+,,7,		if (data->format == REPLACE_FORMAT_SHORT)
type_conversion,replace.c,59,-,+,,12,		else if (data->format == REPLACE_FORMAT_MEDIUM)
type_conversion,replace.c,71,-,+,,54,"			printf(""%s (%s) -> %s (%s)\n"", refname, type_name(obj_type),"
type_conversion,replace.c,72,-,+,,38,"			       oid_to_hex(oid), type_name(repl_type));"
type_conversion,replace.c,87,-,+,,24,"	if (format == NULL || *format == '\0' || !strcmp(format, ""short""))"
type_conversion,replace.c,148,-,+,,74,"	if (refs_delete_ref(get_main_ref_store(the_repository), NULL, ref, oid, 0))"
type_conversion,replace.c,188,-,+,,16,	if (!force && obj_type != repl_type)
type_conversion,replace.c,205,-,+,,20,"				   NULL, NULL, 0, NULL, &err) ||"
type_conversion,replace.c,246,-,+,,36,"		strvec_push(&cmd.args, type_name(type));"
type_conversion,replace.c,250,-,+,,16,	cmd.git_cmd = 1;
type_conversion,replace.c,272,-,+,,14,	if (!raw && type == OBJ_TREE) {
type_conversion,replace.c,277,-,+,,17,		cmd.git_cmd = 1;
type_conversion,replace.c,286,-,+,,60,"		if (strbuf_read(&result, cmd.out, the_hash_algo->hexsz + 1) < 0) {"
type_conversion,replace.c,313,-,+,,65,"		if (index_fd(the_repository->index, oid, fd, &st, type, NULL, flags) < 0)"
type_conversion,replace.c,336,-,+,,6,	if (type < 0)
type_conversion,replace.c,376,-,+,,26,"	parent_start += hexsz + 6; /* ""tree "" + ""hex sha1"" + ""\n"" */"
type_conversion,replace.c,380,-,+,,25,"		parent_end += hexsz + 8; /* ""parent "" + ""hex sha1"" + ""\n"" */"
type_conversion,replace.c,401,-,+,,21,"	strbuf_splice(buf, parent_start - buf->buf, parent_end - parent_start,"
type_conversion,replace.c,523,-,+,,7,		if (*buf.buf == '#')
type_conversion,replace.c,527,-,+,,31,"		if (args.nr && create_graft(args.nr, args.v, force, 1))"
type_conversion,replace.c,579,-,+,,16,	if (format && cmdmode != MODE_LIST)
type_conversion,replace.c,584,-,+,,6,	    cmdmode != MODE_REPLACE &&
type_conversion,replace.c,585,-,+,,6,	    cmdmode != MODE_EDIT &&
type_conversion,replace.c,586,-,+,,6,	    cmdmode != MODE_GRAFT &&
type_conversion,replace.c,587,-,+,,6,	    cmdmode != MODE_CONVERT_GRAFT_FILE)
type_conversion,replace.c,591,-,+,,13,	if (raw && cmdmode != MODE_EDIT)
type_conversion,replay.c,119,-,+,,14,	for (i = 0; i < cmd_info->nr; i++) {
type_conversion,replay.c,126,-,+,,7,		if (*refexpr == '^')
type_conversion,replay.c,128,-,+,,46,"		if (repo_dwim_ref(the_repository, refexpr, strlen(refexpr), &oid, &fullname, 0) != 1)"
type_conversion,replay.c,163,-,+,,7,		if (rinfo.positive_refexprs <
type_conversion,replay.c,171,-,+,,52,"		if (repo_dwim_ref(the_repository, *advance_name, strlen(*advance_name),"
type_conversion,replay.c,181,-,+,,4,			rinfo.positive_refexprs ==
type_conversion,replay.c,184,-,+,,4,			rinfo.negative_refexprs ==
type_conversion,replay.c,217,-,+,,26,"		*update_refs = xcalloc(1, sizeof(**update_refs));"
type_conversion,replay.c,303,-,+,,9,			     PARSE_OPT_KEEP_ARGV0 | PARSE_OPT_KEEP_UNKNOWN_OPT);
type_conversion,replay.c,325,-,+,,17,	revs.reverse = 1;
type_conversion,replay.c,327,-,+,,20,	revs.topo_order = 1;
type_conversion,replay.c,328,-,+,,26,	revs.simplify_history = 0;
type_conversion,replay.c,340,-,+,,6,	if (revs.reverse != 1) {
type_conversion,replay.c,344,-,+,,18,		revs.reverse = 1;
type_conversion,replay.c,346,-,+,,6,	if (revs.sort_order != REV_SORT_IN_GRAPH_ORDER) {
type_conversion,replay.c,352,-,+,,6,	if (revs.topo_order != 1) {
type_conversion,replay.c,356,-,+,,21,		revs.topo_order = 1;
type_conversion,replay.c,358,-,+,,6,	if (revs.simplify_history != 0) {
type_conversion,replay.c,362,-,+,,27,		revs.simplify_history = 0;
type_conversion,replay.c,410,-,+,,28,			if (decoration->type == DECORATION_REF_LOCAL &&
type_conversion,repo-settings.c,102,-,+,,23,		int fetch_default = r->settings.fetch_negotiation_algorithm;
type_conversion,repository.c,69,-,+,,31,		repo->different_commondir = 1;
type_conversion,repository.c,74,-,+,,30,"	repo->different_commondir = get_common_dir_noenv(&sb, repo->gitdir);"
type_conversion,rerere.c,21,-,+,,36,"		if (write_in_full(1, ptr[i].ptr, ptr[i].size) < 0)"
type_conversion,rerere.c,41,-,+,,14,	xpp.flags = 0;
type_conversion,rerere.c,43,-,+,,17,	xecfg.ctxlen = 3;
type_conversion,rerere.c,71,-,+,,16,"		       '\0', variant - rr_dir->status_nr);"
type_conversion,rerere.c,78,-,+,,29,"		parse_pathspec(&pathspec, 0, PATHSPEC_PREFER_CWD,"
type_conversion,rerere.c,91,-,+,,15,		for (i = 0; i < merge_rr.nr; i++)
type_conversion,rerere.c,95,-,+,,15,		for (i = 0; i < merge_rr.nr; i++) {
type_conversion,rerere.c,107,-,+,,15,		for (i = 0; i < merge_rr.nr; i++) {
type_conversion,rerere.c,112,-,+,,47,"	if (!skip_prefix(name, filename, &suffix) || *suffix != '.')"
type_conversion,rerere.c,116,-,+,,13,"	*variant = strtol(suffix + 1, &ep, 10);"
type_conversion,rerere.c,167,-,+,,11,	return ((id->collection->status[variant] & both) == both);
type_conversion,rerere.c,205,-,+,,25,"		if (buf.len < hexsz + 2 || get_hash_hex(buf.buf, hash))"
type_conversion,rerere.c,208,-,+,,7,		if (buf.buf[hexsz] != '.') {
type_conversion,rerere.c,213,-,+,,14,"			variant = strtol(buf.buf + hexsz + 1, &path, 10);"
type_conversion,rerere.c,217,-,+,,7,		if (*(path++) != '\t')
type_conversion,rerere.c,219,-,+,,20,		buf.buf[hexsz] = '\0';
type_conversion,rerere.c,238,-,+,,14,	for (i = 0; i < rr->nr; i++) {
type_conversion,rerere.c,257,-,+,,49,"		if (write_in_full(out_fd, buf.buf, buf.len) < 0)"
type_conversion,rerere.c,286,-,+,,23,"	if (fwrite(p, count, 1, fp) != 1)"
type_conversion,rerere.c,344,-,+,,7,		if (*buf++ != marker_char)
type_conversion,rerere.c,346,-,+,,17,	if (want_sp && *buf != ' ')
type_conversion,rerere.c,371,-,+,,8,			if (hunk == RR_SIDE_1)
type_conversion,rerere.c,377,-,+,,8,			if (hunk != RR_SIDE_1)
type_conversion,rerere.c,381,-,+,,8,			if (hunk != RR_SIDE_1 && hunk != RR_ORIGINAL)
type_conversion,rerere.c,385,-,+,,8,			if (hunk != RR_SIDE_2)
type_conversion,rerere.c,390,-,+,,40,"			rerere_strbuf_putconflict(out, '<', marker_size);"
type_conversion,rerere.c,392,-,+,,40,"			rerere_strbuf_putconflict(out, '=', marker_size);"
type_conversion,rerere.c,394,-,+,,40,"			rerere_strbuf_putconflict(out, '>', marker_size);"
type_conversion,rerere.c,398,-,+,,19,							 one.len + 1);
type_conversion,rerere.c,401,-,+,,19,							 two.len + 1);
type_conversion,rerere.c,404,-,+,,14,		} else if (hunk == RR_SIDE_1)
type_conversion,rerere.c,406,-,+,,12,		else if (hunk == RR_ORIGINAL)
type_conversion,rerere.c,408,-,+,,12,		else if (hunk == RR_SIDE_2)
type_conversion,rerere.c,522,-,+,,9,	while (i < istate->cache_nr && ce_stage(istate->cache[i]) == 1)
type_conversion,rerere.c,526,-,+,,6,	if (i + 1 < istate->cache_nr) {
type_conversion,rerere.c,529,-,+,,23,		if (ce_stage(e2) == 2 &&
type_conversion,rerere.c,530,-,+,,23,		    ce_stage(e3) == 3 &&
type_conversion,rerere.c,538,-,+,,9,"	while (i < istate->cache_nr && ce_same_name(e, istate->cache[i]))"
type_conversion,rerere.c,561,-,+,,14,	for (i = 0; i < r->index->cache_nr;) {
type_conversion,rerere.c,595,-,+,,14,	for (i = 0; i < r->index->cache_nr;) {
type_conversion,rerere.c,623,-,+,,25,"	mmfile_t base = {NULL, 0}, other = {NULL, 0};"
type_conversion,rerere.c,640,-,+,,9,	return ret;
type_conversion,rerere.c,657,-,+,,24,"	mmfile_t cur = {NULL, 0};"
type_conversion,rerere.c,658,-,+,,29,"	mmbuffer_t result = {NULL, 0};"
type_conversion,rerere.c,686,-,+,,25,"	if (fwrite(result.ptr, result.size, 1, f) != 1)"
type_conversion,rerere.c,705,-,+,,14,	for (i = 0; i < update->nr; i++) {
type_conversion,rerere.c,722,-,+,,40,	id->collection->status[id->variant] = 0;
type_conversion,rerere.c,765,-,+,,8,		if ((rr_dir->status[variant] & both) != both)
type_conversion,rerere.c,795,-,+,,6,	if (id->collection->status[variant] & RR_HAS_POSTIMAGE) {
type_conversion,rerere.c,820,-,+,,14,	for (i = 0; i < conflict.nr; i++) {
type_conversion,rerere.c,846,-,+,,14,	for (i = 0; i < rr->nr; i++)
type_conversion,rerere.c,942,-,+,,11,	else if (*ep == '\n')
type_conversion,rerere.c,944,-,+,,8,	len = ep - io->input.buf;
type_conversion,rerere.c,946,-,+,,28,"	strbuf_remove(&io->input, 0, len);"
type_conversion,rerere.c,954,-,+,,29,"	mmbuffer_t result = {NULL, 0};"
type_conversion,rerere.c,963,-,+,,8,	len = strlen(path);
type_conversion,rerere.c,969,-,+,,9,	while (pos < istate->cache_nr) {
type_conversion,rerere.c,974,-,+,,25,"		if (ce_namelen(ce) != len || memcmp(ce->name, path, len))"
type_conversion,rerere.c,976,-,+,,22,		i = ce_stage(ce) - 1;
type_conversion,rerere.c,984,-,+,,21,			mmfile[i].size = size;
type_conversion,rerere.c,1008,-,+,,25,"	strbuf_init(&io.input, 0);"
type_conversion,rerere.c,1009,-,+,,39,"	strbuf_attach(&io.input, result.ptr, result.size, result.size);"
type_conversion,rerere.c,1046,-,+,,26,"		mmfile_t cur = { NULL, 0 };"
type_conversion,rerere.c,1047,-,+,,30,"		mmbuffer_t result = {NULL, 0};"
type_conversion,rerere.c,1121,-,+,,36,"	unmerge_index(r->index, pathspec, 0);"
type_conversion,rerere.c,1123,-,+,,14,	for (i = 0; i < conflict.nr; i++) {
type_conversion,rerere.c,1126,-,+,,9,"				    strlen(it->string), 0, NULL, 0))"
type_conversion,rerere.c,1158,-,+,,40,	id->collection->status[id->variant] = 0;
type_conversion,rerere.c,1195,-,+,,39,	timestamp_t cutoff_noresolve = now - 15 * 86400;
type_conversion,rerere.c,1196,-,+,,37,	timestamp_t cutoff_resolve = now - 60 * 86400;
type_conversion,rerere.c,1232,-,+,,14,	for (i = 0; i < to_remove.nr; i++)
type_conversion,rerere.c,1252,-,+,,14,	for (i = 0; i < merge_rr->nr; i++) {
type_conversion,reset.c,53,-,+,,16,"					old_orig, 0, UPDATE_REFS_MSG_ON_ERR);"
type_conversion,reset.c,56,-,+,,35,"					NULL, ""ORIG_HEAD"", old_orig, 0);"
type_conversion,reset.c,72,-,+,,15,	opts.merge = 1;
type_conversion,reset.c,75,-,+,,25,		opts.verbose_update = 1;
type_conversion,reset.c,77,-,+,,7,	case KEEP:
type_conversion,reset.c,78,-,+,,7,	case MERGE:
type_conversion,reset.c,79,-,+,,17,		opts.update = 1;
type_conversion,reset.c,80,-,+,,27,		opts.preserve_ignored = 0; /* FIXME: !overwrite_ignore */
type_conversion,reset.c,82,-,+,,7,	case HARD:
type_conversion,reset.c,83,-,+,,17,		opts.update = 1;
type_conversion,reset.c,85,-,+,,33,		opts.skip_cache_tree_update = 1;
type_conversion,reset.c,87,-,+,,7,	case MIXED:
type_conversion,reset.c,89,-,+,,33,		opts.skip_cache_tree_update = 1;
type_conversion,reset.c,97,-,+,,51,	struct unpack_trees_options unpack_tree_opts = { 0 };
type_conversion,reset.c,98,-,+,,20,	if (reset_type == KEEP) {
type_conversion,reset.c,114,-,+,,19,"	if (unpack_trees(nr, desc, &opts))"
type_conversion,reset.c,117,-,+,,20,	if (reset_type == MIXED || reset_type == HARD) {
type_conversion,reset.c,135,-,+,,28,	unpack_tree_opts.update = 1;
type_conversion,reset.c,136,-,+,,27,	unpack_tree_opts.merge = 1;
type_conversion,reset.c,137,-,+,,38,	unpack_tree_opts.preserve_ignored = 0; /* FIXME: !overwrite_ignore */
type_conversion,reset.c,138,-,+,,44,	unpack_tree_opts.skip_cache_tree_update = 1;
type_conversion,reset.c,142,-,+,,16,	if (buf.len > 0)
type_conversion,reset.c,159,-,+,,19,"	if (unpack_trees(nr, desc, &unpack_tree_opts)) {"
type_conversion,reset.c,166,-,+,,48,"		ce = make_cache_entry(the_repository->index, one->mode, &one->oid, one->path,"
type_conversion,reset.c,167,-,+,,14,"				      0, 0);"
type_conversion,reset.c,177,-,+,,58,"		pos = index_name_pos(the_repository->index, one->path, strlen(one->path));"
type_conversion,reset.c,205,-,+,,40,	opt.flags.override_submodule_config = 1;
type_conversion,reset.c,206,-,+,,24,	opt.flags.recursive = 1;
type_conversion,reset.c,292,-,+,,27,"	parse_pathspec(pathspec, 0,"
type_conversion,reset.c,311,-,+,,34,"				""ORIG_HEAD"", orig, old_orig, 0,"
type_conversion,reset.c,315,-,+,,28,"				""ORIG_HEAD"", old_orig, 0);"
type_conversion,reset.c,318,-,+,,38,"					    msg.buf, ""HEAD"", oid, orig, 0,"
type_conversion,reset.c,335,-,+,,19,"	int reset_type = NONE, update_ref_status = 0, quiet = 0;"
type_conversion,reset.c,387,-,+,,34,"		parse_pathspec_file(&pathspec, 0,"
type_conversion,reset.c,418,-,+,,21,		if (reset_type != NONE)
type_conversion,reset.c,430,-,+,,21,		if (reset_type == MIXED)
type_conversion,reset.c,432,-,+,,26,		else if (reset_type != NONE)
type_conversion,reset.c,436,-,+,,20,	if (reset_type == NONE)
type_conversion,reset.c,437,-,+,,16,		reset_type = MIXED; /* by default */
type_conversion,reset.c,444,-,+,,20,	if (reset_type != SOFT && (reset_type != MIXED || get_git_work_tree()))
type_conversion,reset.c,447,-,+,,20,	if (reset_type == MIXED && is_bare_repository())
type_conversion,reset.c,451,-,+,,37,	if (intent_to_add && reset_type != MIXED)
type_conversion,reset.c,463,-,+,,20,	if (reset_type == SOFT || reset_type == KEEP)
type_conversion,reset.c,466,-,+,,20,	if (reset_type != SOFT) {
type_conversion,reset.c,470,-,+,,21,		if (reset_type == MIXED) {
type_conversion,reset.c,476,-,+,,50,			the_repository->index->updated_skipworktree = 1;
type_conversion,reset.c,481,-,+,,42,"				refresh_index(the_repository->index, flags, NULL, NULL,"
type_conversion,reset.c,483,-,+,,49,				t_delta_in_ms = (getnanotime() - t_begin) / 1000000;
type_conversion,reset.c,486,-,+,,42,"						 ""'--no-refresh' to avoid this.""), t_delta_in_ms / 1000.0);"
type_conversion,reset.c,494,-,+,,39,"			repo_dwim_ref(the_repository, rev, strlen(rev),"
type_conversion,reset.c,500,-,+,,22,			if (reset_type == KEEP && !err)
type_conversion,reset.c,501,-,+,,34,"				err = reset_index(ref, &oid, MIXED, quiet);"
type_conversion,reset.c,516,-,+,,21,		if (reset_type == HARD && !update_ref_status && !quiet)
type_conversion,resolve-undo.c,22,-,+,,34,		resolve_undo->strdup_strings = 1;
type_conversion,resolve-undo.c,28,-,+,,24,"		lost->util = xcalloc(1, sizeof(*ui));"
type_conversion,resolve-undo.c,64,-,+,,33,	resolve_undo->strdup_strings = 1;
type_conversion,resolve-undo.c,70,-,+,,24,		len = strlen(data) + 1;
type_conversion,resolve-undo.c,75,-,+,,25,"			lost->util = xcalloc(1, sizeof(*ui));"
type_conversion,resolve-undo.c,81,-,+,,18,"			ui->mode[i] = strtoul(data, &endptr, 8);"
type_conversion,resolve-undo.c,84,-,+,,10,			len = (endptr + 1) - (char*)data;
type_conversion,resolve-undo.c,94,-,+,,15,			if (size < rawsz)
type_conversion,resolve-undo.c,97,-,+,,12,			size -= rawsz;
type_conversion,resolve-undo.c,123,-,+,,39,"	int i = index_name_pos(istate, path, strlen(path));"
type_conversion,resolve-undo.c,128,-,+,,7,		if (i < istate->cache_nr &&
type_conversion,resolve-undo.c,143,-,+,,24,"				      path, i + 1, 0);"
type_conversion,resolve-undo.c,168,-,+,,23,"				    item->string, strlen(item->string),"
type_conversion,rev-list.c,96,-,+,,63,"	if (oid_object_info_extended(the_repository, &obj->oid, &oi, 0) < 0)"
type_conversion,rev-list.c,112,-,+,,17,"		    type_name(obj->type), oid_to_hex(&obj->oid));"
type_conversion,rev-list.c,126,-,+,,17,"		    type_name(obj->type), oid_to_hex(&obj->oid));"
type_conversion,rev-list.c,148,-,+,,29,"	display_progress(progress, ++progress_counter);"
type_conversion,rev-list.c,186,-,+,,71,"			fputs(repo_find_unique_abbrev(the_repository, &commit->object.oid, revs->abbrev),"
type_conversion,rev-list.c,208,-,+,,6,	if (revs->commit_format == CMIT_FMT_ONELINE)
type_conversion,rev-list.c,216,-,+,,16,		ctx.abbrev = revs->abbrev;
type_conversion,rev-list.c,218,-,+,,28,		ctx.date_mode_explicit = revs->date_mode_explicit;
type_conversion,rev-list.c,225,-,+,,8,			if (revs->commit_format != CMIT_FMT_ONELINE)
type_conversion,rev-list.c,245,-,+,,37,			if (buf.len && buf.buf[buf.len - 1] == '\n')
type_conversion,rev-list.c,256,-,+,,8,			if (revs->commit_format == CMIT_FMT_ONELINE)
type_conversion,rev-list.c,272,-,+,,64,"	if (oid_object_info_extended(the_repository, &obj->oid, NULL, 0) < 0) {"
type_conversion,rev-list.c,276,-,+,,52,	if (info->revs->verify_objects && !obj->parsed && obj->type != OBJ_COMMIT)
type_conversion,rev-list.c,288,-,+,,29,"	display_progress(progress, ++progress_counter);"
type_conversion,rev-list.c,426,-,+,,26,"	uint32_t commit_count = 0,"
type_conversion,rev-list.c,427,-,+,,16,"		 tag_count = 0,"
type_conversion,rev-list.c,428,-,+,,17,"		 tree_count = 0,"
type_conversion,rev-list.c,429,-,+,,17,		 blob_count = 0;
type_conversion,rev-list.c,467,-,+,,24,	if (max_count >= 0 && max_count < commit_count)
type_conversion,rev-list.c,468,-,+,,18,		commit_count = max_count;
type_conversion,rev-list.c,519,-,+,,37,"		.allow_exclude_promisor_objects = 1,"
type_conversion,rev-list.c,537,-,+,,24,	revs.include_header = 1;
type_conversion,rev-list.c,565,-,+,,36,			revs.exclude_promisor_objects = 1;
type_conversion,rev-list.c,580,-,+,,40,		revs.do_not_die_on_missing_objects = 1;
type_conversion,rev-list.c,595,-,+,,26,			revs.verbose_header = 1;
type_conversion,rev-list.c,610,-,+,,28,			revs.show_decorations = 1;
type_conversion,rev-list.c,655,-,+,,26,			revs.include_header = 1;
type_conversion,rev-list.c,660,-,+,,26,			revs.include_header = 0;
type_conversion,rev-list.c,665,-,+,,8,			if (*arg == '=') {
type_conversion,rev-list.c,687,-,+,,6,	if (revs.commit_format != CMIT_FMT_USERFORMAT)
type_conversion,rev-list.c,688,-,+,,25,		revs.include_header = 1;
type_conversion,rev-list.c,689,-,+,,6,	if (revs.commit_format != CMIT_FMT_UNSPECIFIED) {
type_conversion,rev-list.c,692,-,+,,7,		if (revs.commit_format == CMIT_FMT_ONELINE || !revs.include_header)
type_conversion,rev-list.c,720,-,+,,18,		revs.limited = 1;
type_conversion,rev-list.c,723,-,+,,52,"		progress = start_delayed_progress(show_progress, 0);"
type_conversion,rev-list.c,741,-,+,,27,		unsigned bisect_flags = 0;
type_conversion,rev-list.c,759,-,+,,15,		for (i = 0; i < revs.pending.nr; i++) {
type_conversion,rev-list.c,769,-,+,,6,	if (arg_missing_action == MA_PRINT) {
type_conversion,rev-list.c,788,-,+,,6,	if (arg_missing_action == MA_PRINT) {
type_conversion,rev-parse.c,94,-,+,,7,	if ((*arg == '-') && isdigit(arg[1]))
type_conversion,rev-parse.c,102,-,+,,9,		len = strlen(str);
type_conversion,rev-parse.c,104,-,+,,8,"		    (str[len-1] == '=' && !strncmp(arg, str, len)))"
type_conversion,rev-parse.c,116,-,+,,16,		while ((ch = *arg++)) {
type_conversion,rev-parse.c,149,-,+,,12,"					      strlen(name), &discard, &full,"
type_conversion,rev-parse.c,278,-,+,,15,	symmetric = (*end == '.');
type_conversion,rev-parse.c,280,-,+,,12,	*dotdot = 0;
type_conversion,rev-parse.c,294,-,+,,13,		*dotdot = '.';
type_conversion,rev-parse.c,307,-,+,,15,				*dotdot = '.';
type_conversion,rev-parse.c,317,-,+,,13,		*dotdot = '.';
type_conversion,rev-parse.c,320,-,+,,12,	*dotdot = '.';
type_conversion,rev-parse.c,349,-,+,,21,"			exclude_parent = strtoul(dotdot + 2, &end, 10);"
type_conversion,rev-parse.c,350,-,+,,8,			if (*end != '\0' || !exclude_parent)
type_conversion,rev-parse.c,356,-,+,,12,	*dotdot = 0;
type_conversion,rev-parse.c,359,-,+,,13,		*dotdot = '^';
type_conversion,rev-parse.c,364,-,+,,6,	    exclude_parent > commit_list_count(commit->parents)) {
type_conversion,rev-parse.c,365,-,+,,13,		*dotdot = '^';
type_conversion,rev-parse.c,386,-,+,,12,	*dotdot = '^';
type_conversion,rev-parse.c,488,-,+,,11,		*help = '\0';
type_conversion,rev-parse.c,504,-,+,,21,		if (s - sb.buf == 1) /* short option only */
type_conversion,rev-parse.c,505,-,+,,20,			o->short_name = *sb.buf;
type_conversion,rev-parse.c,506,-,+,,12,"		else if (sb.buf[1] != ',') /* long option only */"
type_conversion,rev-parse.c,507,-,+,,36,"			o->long_name = xmemdupz(sb.buf, s - sb.buf);"
type_conversion,rev-parse.c,509,-,+,,20,			o->short_name = *sb.buf;
type_conversion,rev-parse.c,510,-,+,,53,"			o->long_name = xmemdupz(sb.buf + 2, s - sb.buf - 2);"
type_conversion,rev-parse.c,515,-,+,,12,			switch (*s++) {
type_conversion,rev-parse.c,517,-,+,,17,				o->flags &= ~PARSE_OPT_NOARG;
type_conversion,rev-parse.c,520,-,+,,17,				o->flags &= ~PARSE_OPT_NOARG;
type_conversion,rev-parse.c,521,-,+,,17,				o->flags |= PARSE_OPT_OPTARG;
type_conversion,rev-parse.c,524,-,+,,17,				o->flags |= PARSE_OPT_NONEG;
type_conversion,rev-parse.c,527,-,+,,17,				o->flags |= PARSE_OPT_HIDDEN;
type_conversion,rev-parse.c,535,-,+,,26,"			o->argh = xmemdupz(s, help - s);"
type_conversion,rev-parse.c,543,-,+,,21,			(keep_dashdash ? PARSE_OPT_KEEP_DASHDASH : 0) |
type_conversion,rev-parse.c,544,-,+,,26,			(stop_at_non_option ? PARSE_OPT_STOP_AT_NON_OPTION : 0) |
type_conversion,rev-parse.c,545,-,+,,4,			PARSE_OPT_SHELL_EVAL);
type_conversion,rev-parse.c,592,-,+,,7,		if (*arg++ == '=') {
type_conversion,rev-parse.c,643,-,+,,18,	if (!prefix && (format != FORMAT_DEFAULT || def != DEFAULT_RELATIVE_IF_SHARED))
type_conversion,rev-parse.c,645,-,+,,6,	if (format == FORMAT_DEFAULT && def == DEFAULT_UNMODIFIED) {
type_conversion,rev-parse.c,647,-,+,,13,	} else if (format == FORMAT_RELATIVE ||
type_conversion,rev-parse.c,648,-,+,,6,		  (format == FORMAT_DEFAULT && def == DEFAULT_RELATIVE)) {
type_conversion,rev-parse.c,668,-,+,,13,	} else if (format == FORMAT_DEFAULT && def == DEFAULT_RELATIVE_IF_SHARED) {
type_conversion,rev-parse.c,690,-,+,,23,	unsigned int flags = 0;
type_conversion,rev-parse.c,768,-,+,,31,		if (!seen_end_of_options && *arg == '-') {
type_conversion,rev-parse.c,1006,-,+,,9,				if (arg[2] == 'g') {	/* --git-dir */
type_conversion,rev-parse.c,1028,-,+,,11,				len = strlen(cwd);
type_conversion,rev-parse.c,1030,-,+,,47,"				strbuf_addf(&buf, ""%s%s.git"", cwd, len && cwd[len-1] != '/' ? ""/"" : """");"
type_conversion,rev-parse.c,1119,-,+,,7,		if (*arg == '^') {
type_conversion,revert.c,38,-,+,,9,"	return opts->action == REPLAY_REVERT ? ""revert"" : ""cherry-pick"";"
type_conversion,revert.c,43,-,+,,9,	return opts->action == REPLAY_REVERT ? revert_usage : cherry_pick_usage;
type_conversion,revert.c,60,-,+,,16,		*opt_value = STOP_ON_EMPTY_COMMIT;
type_conversion,revert.c,62,-,+,,16,		*opt_value = DROP_EMPTY_COMMIT;
type_conversion,revert.c,64,-,+,,16,		*opt_value = KEEP_EMPTY_COMMIT;
type_conversion,revert.c,82,-,+,,21,"	replay->mainline = strtol(arg, &end, 10);"
type_conversion,revert.c,132,-,+,,63,"		  N_(""GPG sign commit""), PARSE_OPT_OPTARG, NULL, (intptr_t) """" },"
type_conversion,revert.c,137,-,+,,6,	if (opts->action == REPLAY_PICK) {
type_conversion,revert.c,150,-,+,,13,	} else if (opts->action == REPLAY_REVERT) {
type_conversion,revert.c,160,-,+,,4,			PARSE_OPT_KEEP_ARGV0 |
type_conversion,revert.c,161,-,+,,4,			PARSE_OPT_KEEP_UNKNOWN_OPT);
type_conversion,revert.c,166,-,+,,6,	if (opts->action == REPLAY_PICK) {
type_conversion,revert.c,167,-,+,,35,		opts->drop_redundant_commits = (empty_opt == DROP_EMPTY_COMMIT);
type_conversion,revert.c,168,-,+,,67,		opts->keep_redundant_commits = opts->keep_redundant_commits || (empty_opt == KEEP_EMPTY_COMMIT);
type_conversion,revert.c,205,-,+,,16,"				""--empty"", empty_opt != EMPTY_COMMIT_UNSPECIFIED,"
type_conversion,revert.c,228,-,+,,25,		opts->revs->no_walk = 1;
type_conversion,revert.c,229,-,+,,32,		opts->revs->unsorted_input = 1;
type_conversion,revert.c,235,-,+,,29,		s_r_opt.assume_dashdash = 1;
type_conversion,revision.c,61,-,+,,35,	for (const char *p = name; *p && *p != '\n'; p++)
type_conversion,revision.c,62,-,+,,9,"		fputc(*p, out);"
type_conversion,revision.c,156,-,+,,13,	int hash = strhash(path);
type_conversion,revision.c,160,-,+,,31,"	hashmap_entry_init(&key.ent, hash);"
type_conversion,revision.c,164,-,+,,26,"	oidset_init(&key.trees, 0);"
type_conversion,revision.c,169,-,+,,35,"		hashmap_entry_init(&entry->ent, hash);"
type_conversion,revision.c,171,-,+,,30,"		oidset_init(&entry->trees, 16);"
type_conversion,revision.c,222,-,+,,29,"	unsigned has_interesting = 0, has_uninteresting = 0;"
type_conversion,revision.c,238,-,+,,24,			has_uninteresting = 1;
type_conversion,revision.c,240,-,+,,22,			has_interesting = 1;
type_conversion,revision.c,279,-,+,,29,	stack->nr = stack->alloc = 0;
type_conversion,revision.c,317,-,+,,22,	while (pending.nr > 0)
type_conversion,revision.c,329,-,+,,51,	struct interpret_branch_name_options options = { 0 };
type_conversion,revision.c,333,-,+,,19,		revs->no_walk = 0;
type_conversion,revision.c,334,-,+,,27,	if (revs->reflog_info && obj->type == OBJ_COMMIT) {
type_conversion,revision.c,338,-,+,,12,"						     namelen, &buf, &options);"
type_conversion,revision.c,340,-,+,,18,		if (0 < len && len < namelen && buf.len)
type_conversion,revision.c,384,-,+,,7,					 PARSE_OBJECT_SKIP_HASH_CHECK |
type_conversion,revision.c,385,-,+,,7,					 PARSE_OBJECT_DISCARD_TREE);
type_conversion,revision.c,416,-,+,,24,	unsigned long flags = object->flags;
type_conversion,revision.c,421,-,+,,9,	while (object->type == OBJ_TAG) {
type_conversion,revision.c,447,-,+,,10,		mode = 0;
type_conversion,revision.c,454,-,+,,6,	if (object->type == OBJ_COMMIT) {
type_conversion,revision.c,463,-,+,,21,				revs->limited = 1;
type_conversion,revision.c,478,-,+,,6,	if (object->type == OBJ_TREE) {
type_conversion,revision.c,493,-,+,,6,	if (object->type == OBJ_BLOB) {
type_conversion,revision.c,637,-,+,,32,		options->flags.has_changes = 1;
type_conversion,revision.c,652,-,+,,31,	options->flags.has_changes = 1;
type_conversion,revision.c,666,-,+,,46,"	jw_object_intmax(&jw, ""filter_not_present"", count_bloom_filter_not_present);"
type_conversion,revision.c,667,-,+,,33,"	jw_object_intmax(&jw, ""maybe"", count_bloom_filter_maybe);"
type_conversion,revision.c,668,-,+,,42,"	jw_object_intmax(&jw, ""definitely_not"", count_bloom_filter_definitely_not);"
type_conversion,revision.c,669,-,+,,42,"	jw_object_intmax(&jw, ""false_positive"", count_bloom_filter_false_positive);"
type_conversion,revision.c,717,-,+,,21,	if (pi->len > 0 && pi->match[pi->len - 1] == '/') {
type_conversion,revision.c,718,-,+,,36,"		path_alloc = xmemdupz(pi->match, pi->len - 1);"
type_conversion,revision.c,737,-,+,,7,		if (*p == '/')
type_conversion,revision.c,751,-,+,,7,		if (*p == '/')
type_conversion,revision.c,752,-,+,,25,"			fill_bloom_key(path, p - path,"
type_conversion,revision.c,775,-,+,,6,	if (commit_graph_generation(commit) == GENERATION_NUMBER_INFINITY)
type_conversion,revision.c,837,-,+,,36,	revs->pruning.flags.has_changes = 0;
type_conversion,revision.c,855,-,+,,36,	revs->pruning.flags.has_changes = 0;
type_conversion,revision.c,869,-,+,,38,"	struct treesame_state *st = xcalloc(1, st_add(sizeof(*st), n));"
type_conversion,revision.c,892,-,+,,21,		if (nth_parent != 0)
type_conversion,revision.c,906,-,+,,13,	old_same = st->treesame[nth_parent];
type_conversion,revision.c,909,-,+,,31,		st->nparents - nth_parent - 1);
type_conversion,revision.c,916,-,+,,24,	if (--st->nparents == 1) {
type_conversion,revision.c,941,-,+,,22,		relevant_parents = 0;
type_conversion,revision.c,942,-,+,,41,		relevant_change = irrelevant_change = 0;
type_conversion,revision.c,943,-,+,,33,"		for (p = commit->parents, n = 0; p; n++, p = p->next) {"
type_conversion,revision.c,945,-,+,,24,				relevant_change |= !st->treesame[n];
type_conversion,revision.c,948,-,+,,26,				irrelevant_change |= !st->treesame[n];
type_conversion,revision.c,1033,-,+,,24,					ts->treesame[0] = 1;
type_conversion,revision.c,1050,-,+,,33,					ts->treesame[nth_parent] = 1;
type_conversion,revision.c,1230,-,+,,20,		unsigned flags = commit->object.flags;
type_conversion,revision.c,1249,-,+,,20,		unsigned flags = commit->object.flags;
type_conversion,revision.c,1270,-,+,,20,		unsigned flags = commit->object.flags;
type_conversion,revision.c,1467,-,+,,24,		if (revs->max_age != -1 && (commit->date < revs->max_age))
type_conversion,revision.c,1478,-,+,,24,		if (revs->min_age != -1 && (commit->date > revs->min_age) &&
type_conversion,revision.c,1481,-,+,,34,		if (revs->max_age_as_filter != -1 &&
type_conversion,revision.c,1562,-,+,,38,"		if (!wildmatch(item->string, path, 0))"
type_conversion,revision.c,1582,-,+,,39,	exclusions->hidden_refs_configured = 0;
type_conversion,revision.c,1600,-,+,,43,	cb->exclusions->hidden_refs_configured = 1;
type_conversion,revision.c,1640,-,+,,50,"	object = get_reference(cb->all_revs, path, oid, cb->all_flags);"
type_conversion,revision.c,1641,-,+,,46,"	add_rev_cmdline(cb->all_revs, object, path, REV_CMD_REF, cb->all_flags);"
type_conversion,revision.c,1650,-,+,,18,	cb->all_flags = flags;
type_conversion,revision.c,1739,-,+,,17,	cb.all_flags = flags;
type_conversion,revision.c,1758,-,+,,11,"					     040000, path->buf);"
type_conversion,revision.c,1811,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,revision.c,1875,-,+,,41,"	add_rev_cmdline(data->revs, obj, name, REV_CMD_REV, data->flags);"
type_conversion,revision.c,1898,-,+,,6,	if (*arg == '^') {
type_conversion,revision.c,1905,-,+,,39,"		it = get_reference(revs, arg, &oid, 0);"
type_conversion,revision.c,1908,-,+,,7,		if (it->type != OBJ_TAG)
type_conversion,revision.c,1914,-,+,,6,	if (it->type != OBJ_COMMIT)
type_conversion,revision.c,1918,-,+,,6,	    exclude_parent > commit_list_count(commit->parents))
type_conversion,revision.c,1928,-,+,,35,"		add_rev_cmdline(revs, it, arg_, REV_CMD_PARENTS_ONLY, flags);"
type_conversion,revision.c,1954,-,+,,33,		revs->diffopt.prefix_length = strlen(prefix);
type_conversion,revision.c,1960,-,+,,38,"	oidset_init(&revs->missing_commits, 0);"
type_conversion,revision.c,1982,-,+,,14,	for (i = 0; i < ARRAY_SIZE(other_head); i++)
type_conversion,revision.c,2013,-,+,,36,"	add_rev_cmdline_list(revs, bases, REV_CMD_MERGE_BASE, UNINTERESTING | BOTTOM);"
type_conversion,revision.c,2020,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,revision.c,2030,-,+,,11,		while ((i+1 < istate->cache_nr) &&
type_conversion,revision.c,2037,-,+,,18,	revs->limited = 1;
type_conversion,revision.c,2046,-,+,,12,	*dotdot = '.';
type_conversion,revision.c,2063,-,+,,31,	unsigned int flags_exclude = flags ^ (UNINTERESTING | BOTTOM);
type_conversion,revision.c,2071,-,+,,6,	if (*b_name == '.') {
type_conversion,revision.c,2083,-,+,,13,		*dotdot = '.';
type_conversion,revision.c,2085,-,+,,13,		*dotdot = '\0';
type_conversion,revision.c,2095,-,+,,13,		b_flags = flags;
type_conversion,revision.c,2111,-,+,,39,"		add_rev_cmdline_list(revs, exclude, REV_CMD_MERGE_BASE,"
type_conversion,revision.c,2116,-,+,,13,		b_flags = flags;
type_conversion,revision.c,2117,-,+,,13,		a_flags = flags | SYMMETRIC_LEFT;
type_conversion,revision.c,2122,-,+,,39,"	add_rev_cmdline(revs, a_obj, a_name, REV_CMD_LEFT, a_flags);"
type_conversion,revision.c,2123,-,+,,39,"	add_rev_cmdline(revs, b_obj, b_name, REV_CMD_RIGHT, b_flags);"
type_conversion,revision.c,2124,-,+,,52,"	add_pending_object_with_path(revs, a_obj, a_name, a_oc->mode, a_oc->path);"
type_conversion,revision.c,2125,-,+,,52,"	add_pending_object_with_path(revs, b_obj, b_name, b_oc->mode, b_oc->path);"
type_conversion,revision.c,2143,-,+,,12,	*dotdot = '\0';
type_conversion,revision.c,2146,-,+,,12,	*dotdot = '.';
type_conversion,revision.c,2165,-,+,,10,	flags = flags & UNINTERESTING ? flags | BOTTOM : flags & ~BOTTOM;
type_conversion,revision.c,2175,-,+,,39,"	if (!handle_dotdot(arg, revs, flags, revarg_opt))"
type_conversion,revision.c,2180,-,+,,11,		*mark = 0;
type_conversion,revision.c,2183,-,+,,11,		*mark = '^';
type_conversion,revision.c,2187,-,+,,11,		*mark = 0;
type_conversion,revision.c,2188,-,+,,36,"		if (!add_parents_only(revs, arg, flags ^ (UNINTERESTING | BOTTOM), 0))"
type_conversion,revision.c,2189,-,+,,12,			*mark = '^';
type_conversion,revision.c,2201,-,+,,11,		*mark = 0;
type_conversion,revision.c,2202,-,+,,36,"		if (!add_parents_only(revs, arg, flags ^ (UNINTERESTING | BOTTOM), exclude_parent))"
type_conversion,revision.c,2203,-,+,,12,			*mark = '^';
type_conversion,revision.c,2207,-,+,,6,	if (*arg == '^') {
type_conversion,revision.c,2224,-,+,,42,"	object = get_reference(revs, arg, &oid, flags ^ local_flags);"
type_conversion,revision.c,2227,-,+,,38,"	add_rev_cmdline(revs, object, arg_, REV_CMD_REV, flags ^ local_flags);"
type_conversion,revision.c,2228,-,+,,50,"	add_pending_object_with_path(revs, object, arg, oc.mode, oc.path);"
type_conversion,revision.c,2311,-,+,,19,		revs->no_walk = 0;
type_conversion,revision.c,2316,-,+,,14,	} else if ((*arg == '-') && isdigit(arg[1])) {
type_conversion,revision.c,2319,-,+,,19,		revs->no_walk = 0;
type_conversion,revision.c,2324,-,+,,19,		revs->no_walk = 0;
type_conversion,revision.c,2328,-,+,,19,		revs->no_walk = 0;
type_conversion,revision.c,2351,-,+,,29,		revs->first_parent_only = 1;
type_conversion,revision.c,2353,-,+,,37,		revs->exclude_first_parent_only = 1;
type_conversion,revision.c,2355,-,+,,25,		revs->ancestry_path = 1;
type_conversion,revision.c,2356,-,+,,28,		revs->simplify_history = 0;
type_conversion,revision.c,2357,-,+,,19,		revs->limited = 1;
type_conversion,revision.c,2358,-,+,,42,		revs->ancestry_path_implicit_bottoms = 1;
type_conversion,revision.c,2364,-,+,,25,		revs->ancestry_path = 1;
type_conversion,revision.c,2365,-,+,,28,		revs->simplify_history = 0;
type_conversion,revision.c,2366,-,+,,19,		revs->limited = 1;
type_conversion,revision.c,2383,-,+,,22,		revs->show_merge = 1;
type_conversion,revision.c,2386,-,+,,22,		revs->topo_order = 1;
type_conversion,revision.c,2388,-,+,,27,		revs->simplify_merges = 1;
type_conversion,revision.c,2389,-,+,,22,		revs->topo_order = 1;
type_conversion,revision.c,2390,-,+,,27,		revs->rewrite_parents = 1;
type_conversion,revision.c,2391,-,+,,28,		revs->simplify_history = 0;
type_conversion,revision.c,2392,-,+,,19,		revs->limited = 1;
type_conversion,revision.c,2394,-,+,,27,		revs->simplify_merges = 1;
type_conversion,revision.c,2395,-,+,,22,		revs->topo_order = 1;
type_conversion,revision.c,2396,-,+,,27,		revs->rewrite_parents = 1;
type_conversion,revision.c,2397,-,+,,28,		revs->simplify_history = 0;
type_conversion,revision.c,2398,-,+,,34,		revs->simplify_by_decoration = 1;
type_conversion,revision.c,2399,-,+,,19,		revs->limited = 1;
type_conversion,revision.c,2400,-,+,,17,		revs->prune = 1;
type_conversion,revision.c,2403,-,+,,22,		revs->topo_order = 1;
type_conversion,revision.c,2406,-,+,,22,		revs->topo_order = 1;
type_conversion,revision.c,2408,-,+,,24,		revs->early_output = 100;
type_conversion,revision.c,2409,-,+,,22,		revs->topo_order = 1;
type_conversion,revision.c,2413,-,+,,22,		revs->topo_order = 1;
type_conversion,revision.c,2415,-,+,,27,		revs->rewrite_parents = 1;
type_conversion,revision.c,2416,-,+,,25,		revs->print_parents = 1;
type_conversion,revision.c,2418,-,+,,17,		revs->dense = 1;
type_conversion,revision.c,2420,-,+,,17,		revs->dense = 0;
type_conversion,revision.c,2422,-,+,,38,		revs->tree_blobs_in_commit_order = 1;
type_conversion,revision.c,2424,-,+,,30,		revs->remove_empty_trees = 1;
type_conversion,revision.c,2438,-,+,,20,		revs->boundary = 1;
type_conversion,revision.c,2440,-,+,,22,		revs->left_right = 1;
type_conversion,revision.c,2445,-,+,,21,		revs->left_only = 1;
type_conversion,revision.c,2449,-,+,,22,		revs->right_only = 1;
type_conversion,revision.c,2453,-,+,,23,		revs->cherry_mark = 1;
type_conversion,revision.c,2454,-,+,,22,		revs->right_only = 1;
type_conversion,revision.c,2456,-,+,,19,		revs->limited = 1;
type_conversion,revision.c,2458,-,+,,17,		revs->count = 1;
type_conversion,revision.c,2462,-,+,,23,		revs->cherry_mark = 1;
type_conversion,revision.c,2463,-,+,,19,		revs->limited = 1; /* needs limit_list() */
type_conversion,revision.c,2467,-,+,,23,		revs->cherry_pick = 1;
type_conversion,revision.c,2468,-,+,,19,		revs->limited = 1;
type_conversion,revision.c,2470,-,+,,23,		revs->tag_objects = 1;
type_conversion,revision.c,2471,-,+,,24,		revs->tree_objects = 1;
type_conversion,revision.c,2472,-,+,,24,		revs->blob_objects = 1;
type_conversion,revision.c,2474,-,+,,23,		revs->tag_objects = 1;
type_conversion,revision.c,2475,-,+,,24,		revs->tree_objects = 1;
type_conversion,revision.c,2476,-,+,,24,		revs->blob_objects = 1;
type_conversion,revision.c,2477,-,+,,21,		revs->edge_hint = 1;
type_conversion,revision.c,2479,-,+,,23,		revs->tag_objects = 1;
type_conversion,revision.c,2480,-,+,,24,		revs->tree_objects = 1;
type_conversion,revision.c,2481,-,+,,24,		revs->blob_objects = 1;
type_conversion,revision.c,2482,-,+,,21,		revs->edge_hint = 1;
type_conversion,revision.c,2483,-,+,,32,		revs->edge_hint_aggressive = 1;
type_conversion,revision.c,2485,-,+,,23,		revs->tag_objects = 1;
type_conversion,revision.c,2486,-,+,,24,		revs->tree_objects = 1;
type_conversion,revision.c,2487,-,+,,24,		revs->blob_objects = 1;
type_conversion,revision.c,2488,-,+,,26,		revs->verify_objects = 1;
type_conversion,revision.c,2491,-,+,,20,		revs->unpacked = 1;
type_conversion,revision.c,2495,-,+,,27,		revs->no_kept_objects = 1;
type_conversion,revision.c,2499,-,+,,27,		revs->no_kept_objects = 1;
type_conversion,revision.c,2505,-,+,,16,		revs->diff = 1;
type_conversion,revision.c,2506,-,+,,35,		revs->diffopt.flags.recursive = 1;
type_conversion,revision.c,2508,-,+,,16,		revs->diff = 1;
type_conversion,revision.c,2509,-,+,,35,		revs->diffopt.flags.recursive = 1;
type_conversion,revision.c,2510,-,+,,43,		revs->diffopt.flags.tree_in_recursive = 1;
type_conversion,revision.c,2514,-,+,,26,		revs->verbose_header = 1;
type_conversion,revision.c,2516,-,+,,26,		revs->verbose_header = 1;
type_conversion,revision.c,2517,-,+,,24,		revs->pretty_given = 1;
type_conversion,revision.c,2525,-,+,,26,		revs->verbose_header = 1;
type_conversion,revision.c,2526,-,+,,24,		revs->pretty_given = 1;
type_conversion,revision.c,2539,-,+,,28,		revs->show_notes_given = 1;
type_conversion,revision.c,2541,-,+,,26,		revs->show_signature = 1;
type_conversion,revision.c,2543,-,+,,26,		revs->show_signature = 0;
type_conversion,revision.c,2546,-,+,,24,		revs->track_linear = 1;
type_conversion,revision.c,2547,-,+,,28,		revs->track_first_time = 1;
type_conversion,revision.c,2550,-,+,,24,		revs->track_linear = 1;
type_conversion,revision.c,2551,-,+,,28,		revs->track_first_time = 1;
type_conversion,revision.c,2553,-,+,,33,		revs->show_notes_by_default = 1;
type_conversion,revision.c,2560,-,+,,28,		revs->show_notes_given = 1;
type_conversion,revision.c,2563,-,+,,28,		revs->show_notes_given = 1;
type_conversion,revision.c,2565,-,+,,28,		revs->show_notes_given = 1;
type_conversion,revision.c,2570,-,+,,26,		revs->verbose_header = 1;
type_conversion,revision.c,2572,-,+,,24,		revs->pretty_given = 1;
type_conversion,revision.c,2573,-,+,,25,		revs->abbrev_commit = 1;
type_conversion,revision.c,2581,-,+,,32,		revs->encode_email_headers = 1;
type_conversion,revision.c,2583,-,+,,32,		revs->encode_email_headers = 0;
type_conversion,revision.c,2585,-,+,,26,		revs->show_root_diff = 1;
type_conversion,revision.c,2587,-,+,,24,		revs->no_commit_id = 1;
type_conversion,revision.c,2589,-,+,,30,		revs->always_show_header = 1;
type_conversion,revision.c,2591,-,+,,18,		revs->abbrev = 0;
type_conversion,revision.c,2601,-,+,,25,		revs->abbrev_commit = 1;
type_conversion,revision.c,2602,-,+,,31,		revs->abbrev_commit_given = 1;
type_conversion,revision.c,2604,-,+,,25,		revs->abbrev_commit = 0;
type_conversion,revision.c,2606,-,+,,16,		revs->diff = 1;
type_conversion,revision.c,2607,-,+,,21,		revs->full_diff = 1;
type_conversion,revision.c,2609,-,+,,22,		revs->show_pulls = 1;
type_conversion,revision.c,2611,-,+,,28,		revs->simplify_history = 0;
type_conversion,revision.c,2614,-,+,,30,		revs->date_mode_explicit = 1;
type_conversion,revision.c,2617,-,+,,30,		revs->date_mode_explicit = 1;
type_conversion,revision.c,2662,-,+,,19,		revs->limited = 1;
type_conversion,revision.c,2664,-,+,,26,		revs->ignore_missing = 1;
type_conversion,revision.c,2669,-,+,,36,		revs->exclude_promisor_objects = 1;
type_conversion,revision.c,2700,-,+,,22,		revs->topo_order = 1;
type_conversion,revision.c,2701,-,+,,27,		revs->rewrite_parents = 1;
type_conversion,revision.c,2757,-,+,,27,"		handle_refs(refs, revs, *flags, refs_for_each_ref);"
type_conversion,revision.c,2758,-,+,,27,"		handle_refs(refs, revs, *flags, refs_head_ref);"
type_conversion,revision.c,2762,-,+,,32,"			init_all_refs_cb(&cb, revs, *flags);"
type_conversion,revision.c,2770,-,+,,27,"		handle_refs(refs, revs, *flags, refs_for_each_branch_ref);"
type_conversion,revision.c,2774,-,+,,27,"		handle_refs(refs, revs, *flags, for_each_bad_bisect_ref);"
type_conversion,revision.c,2775,-,+,,27,"		handle_refs(refs, revs, *flags ^ (UNINTERESTING | BOTTOM),"
type_conversion,revision.c,2777,-,+,,18,		revs->bisect = 1;
type_conversion,revision.c,2782,-,+,,27,"		handle_refs(refs, revs, *flags, refs_for_each_tag_ref);"
type_conversion,revision.c,2788,-,+,,27,"		handle_refs(refs, revs, *flags, refs_for_each_remote_ref);"
type_conversion,revision.c,2792,-,+,,31,"		init_all_refs_cb(&cb, revs, *flags);"
type_conversion,revision.c,2808,-,+,,31,"		init_all_refs_cb(&cb, revs, *flags);"
type_conversion,revision.c,2818,-,+,,31,"		init_all_refs_cb(&cb, revs, *flags);"
type_conversion,revision.c,2828,-,+,,31,"		init_all_refs_cb(&cb, revs, *flags);"
type_conversion,revision.c,2834,-,+,,32,"		add_reflogs_to_pending(revs, *flags);"
type_conversion,revision.c,2836,-,+,,38,"		add_index_objects_to_pending(revs, *flags);"
type_conversion,revision.c,2838,-,+,,39,"		add_alternate_refs_to_pending(revs, *flags);"
type_conversion,revision.c,2842,-,+,,19,		revs->no_walk = 1;
type_conversion,revision.c,2848,-,+,,19,		revs->no_walk = 1;
type_conversion,revision.c,2850,-,+,,27,			revs->unsorted_input = 0;
type_conversion,revision.c,2852,-,+,,27,			revs->unsorted_input = 1;
type_conversion,revision.c,2856,-,+,,19,		revs->no_walk = 0;
type_conversion,revision.c,2858,-,+,,27,		revs->single_worktree = 1;
type_conversion,revision.c,2882,-,+,,19,"	strbuf_init(&sb, 1000);"
type_conversion,revision.c,2892,-,+,,31,		if (!seen_end_of_options && sb.buf[0] == '-') {
type_conversion,revision.c,2967,-,+,,39,	revarg_opt = opt ? opt->revarg_opt : 0;
type_conversion,revision.c,2972,-,+,,31,		if (!seen_end_of_options && *arg == '-') {
type_conversion,revision.c,3011,-,+,,45,"		if (handle_revision_arg(arg, revs, flags, revarg_opt)) {"
type_conversion,revision.c,3013,-,+,,25,			if (seen_dashdash || *arg == '^')
type_conversion,revision.c,3046,-,+,,37,"		parse_pathspec(&revs->prune_data, 0, 0,"
type_conversion,revision.c,3061,-,+,,51,"		if (get_oid_with_context(revs->repo, revs->def, 0, &oid, &oc))"
type_conversion,revision.c,3063,-,+,,49,"		object = get_reference(revs, revs->def, &oid, 0);"
type_conversion,revision.c,3064,-,+,,57,"		add_pending_object_with_mode(revs, object, revs->def, oc.mode);"
type_conversion,revision.c,3069,-,+,,16,		revs->diff = 1;
type_conversion,revision.c,3075,-,+,,16,		revs->diff = 1;
type_conversion,revision.c,3078,-,+,,28,		revs->simplify_history = 0;
type_conversion,revision.c,3082,-,+,,20,			revs->limited = 1;
type_conversion,revision.c,3083,-,+,,22,		revs->topo_order = 1;
type_conversion,revision.c,3087,-,+,,19,		revs->limited = 1;
type_conversion,revision.c,3093,-,+,,18,			revs->prune = 1;
type_conversion,revision.c,3101,-,+,,25,	revs->diffopt.abbrev = revs->abbrev;
type_conversion,revision.c,3137,-,+,,28,		revs->show_notes_given = 1;
type_conversion,revision.c,3147,-,+,,11,	for (i = 0; i < cmdline->nr; i++)
type_conversion,revision.c,3193,-,+,,34,"	struct commit_list *l = xcalloc(1, sizeof(*l));"
type_conversion,revision.c,3213,-,+,,36,"				compact_treesame(revs, commit, surviving_parents);"
type_conversion,revision.c,3251,-,+,,17,	int orig_cnt = commit_list_count(commit->parents);
type_conversion,revision.c,3252,-,+,,12,	int cnt = commit_list_count(h);
type_conversion,revision.c,3308,-,+,,32,"	for (p = commit->parents, n = 0; p; p = p->next, n++) {"
type_conversion,revision.c,3377,-,+,,35,"			compact_treesame(revs, commit, nth_parent);"
type_conversion,revision.c,3597,-,+,,48,"	jw_object_intmax(&jw, ""count_explore_walked"", count_explore_walked);"
type_conversion,revision.c,3598,-,+,,49,"	jw_object_intmax(&jw, ""count_indegree_walked"", count_indegree_walked);"
type_conversion,revision.c,3599,-,+,,45,"	jw_object_intmax(&jw, ""count_topo_walked"", count_topo_walked);"
type_conversion,revision.c,3609,-,+,,6,	if (c->object.flags & flag)
type_conversion,revision.c,3630,-,+,,6,	if (revs->sort_order == REV_SORT_BY_AUTHOR_DATE)
type_conversion,revision.c,3633,-,+,,23,	if (revs->max_age != -1 && (c->date < revs->max_age))
type_conversion,revision.c,3769,-,+,,7,		if (revs->sort_order == REV_SORT_BY_AUTHOR_DATE)
type_conversion,revision.c,3785,-,+,,6,	if (revs->sort_order == REV_SORT_IN_GRAPH_ORDER)
type_conversion,revision.c,3855,-,+,,21,	revs->pending.nr = 0;
type_conversion,revision.c,3856,-,+,,24,	revs->pending.alloc = 0;
type_conversion,revision.c,3858,-,+,,14,	for (i = 0; i < old_pending.nr; i++) {
type_conversion,revision.c,4088,-,+,,23,	if (revs->min_age != -1 &&
type_conversion,revision.c,4091,-,+,,33,	if (revs->max_age_as_filter != -1 &&
type_conversion,revision.c,4095,-,+,,11,		int n = commit_list_count(commit->parents);
type_conversion,revision.c,4190,-,+,,6,	if (action == commit_show &&
type_conversion,revision.c,4209,-,+,,18,		revs->linear = 1;
type_conversion,revision.c,4210,-,+,,28,		revs->track_first_time = 0;
type_conversion,revision.c,4251,-,+,,25,			if (revs->max_age != -1 &&
type_conversion,revision.c,4319,-,+,,11,	for (i = 0; i < array->nr; i++) {
type_conversion,revision.c,4343,-,+,,6,	if (revs->boundary == 2) {
type_conversion,revision.c,4393,-,+,,20,		revs->boundary = 2;
type_conversion,revision.c,4434,-,+,,19,		revs->reverse = 0;
type_conversion,revision.c,4435,-,+,,32,		revs->reverse_output_stage = 1;
type_conversion,rm.c,44,-,+,,10,"	while ((i < the_repository->index->cache_nr) && !strcmp(the_repository->index->cache[i]->name, path)) {"
type_conversion,rm.c,45,-,+,,52,		if (ce_stage(the_repository->index->cache[i]) == 2)
type_conversion,rm.c,62,-,+,,15,		for (i = 0; i < files_list->nr; i++)
type_conversion,rm.c,81,-,+,,53,"		pos = index_name_pos(the_repository->index, name, strlen(name));"
type_conversion,rm.c,125,-,+,,53,"		pos = index_name_pos(the_repository->index, name, strlen(name));"
type_conversion,rm.c,176,-,+,,53,"		if (ie_match_stat(the_repository->index, ce, &st, 0) ||"
type_conversion,rm.c,191,-,+,,41,		     || ce->ce_mode != create_ce_mode(mode)
type_conversion,rm.c,276,-,+,,28,"	parse_pathspec(&pathspec, 0,"
type_conversion,rm.c,284,-,+,,34,"		parse_pathspec_file(&pathspec, 0,"
type_conversion,rm.c,306,-,+,,17,"	seen = xcalloc(pathspec.nr, 1);"
type_conversion,rm.c,311,-,+,,14,	for (i = 0; i < the_repository->index->cache_nr; i++) {
type_conversion,rm.c,346,-,+,,22,			if (!recursive && seen[i] == MATCHED_RECURSIVELY)
type_conversion,run-command.c,204,-,+,,24,"			strbuf_add(&buf, p, end - p);"
type_conversion,run-command.c,352,-,+,,31,"	xwrite(2, msg, sizeof(msg) - 1);"
type_conversion,run-command.c,358,-,+,,31,"	xwrite(2, msg, sizeof(msg) - 1);"
type_conversion,run-command.c,364,-,+,,31,"	xwrite(2, msg, sizeof(msg) - 1);"
type_conversion,run-command.c,456,-,+,,25,"			strbuf_add(&key, *p, equals - *p);"
type_conversion,run-command.c,471,-,+,,25,"			strbuf_add(&key, *p, equals - *p);"
type_conversion,run-command.c,481,-,+,,14,	for (i = 0; i < env.nr; i++)
type_conversion,run-command.c,595,-,+,,25,"			strbuf_add(&key, *e, equals - *e);"
type_conversion,run-command.c,604,-,+,,14,	for (i = 0; i < envs.nr; i++) {
type_conversion,run-command.c,621,-,+,,14,	for (i = 0; i < envs.nr; i++) {
type_conversion,run-command.c,863,-,+,,6,"	if (xread(notify_pipe[0], &cerr, sizeof(cerr)) == sizeof(cerr)) {"
type_conversion,run-command.c,1027,-,+,,8,"	ret = async->proc(async->proc_in, async->proc_out, async->data);"
type_conversion,run-command.c,1308,-,+,,26,		pfd[pollsize].events = io->type;
type_conversion,run-command.c,1315,-,+,,16,"	if (poll(pfd, pollsize, -1) < 0) {"
type_conversion,run-command.c,1327,-,+,,9,		if (!(io->pfd->revents & (POLLOUT|POLLIN|POLLHUP|POLLERR|POLLNVAL)))
type_conversion,run-command.c,1343,-,+,,14,			if (len < 0) {
type_conversion,run-command.c,1352,-,+,,22,				io->u.out.len -= len;
type_conversion,run-command.c,1363,-,+,,14,			if (len < 0)
type_conversion,run-command.c,1365,-,+,,15,			if (len <= 0) {
type_conversion,run-command.c,1492,-,+,,18,	for (size_t i = 0; i < opts->processes; i++)
type_conversion,run-command.c,1493,-,+,,7,		if (pp->children[i].state == GIT_CP_WORKING)
type_conversion,run-command.c,1531,-,+,,18,	for (size_t i = 0; i < n; i++) {
type_conversion,run-command.c,1532,-,+,,37,"		strbuf_init(&pp->children[i].err, 0);"
type_conversion,run-command.c,1550,-,+,,18,	for (size_t i = 0; i < opts->processes; i++) {
type_conversion,run-command.c,1581,-,+,,11,	for (i = 0; i < opts->processes; i++)
type_conversion,run-command.c,1582,-,+,,7,		if (pp->children[i].state == GIT_CP_FREE)
type_conversion,run-command.c,1593,-,+,,37,	pp->children[i].process.no_stdin = 1;
type_conversion,run-command.c,1608,-,+,,46,		pp->children[i].process.stdout_to_stderr = 1;
type_conversion,run-command.c,1625,-,+,,19,			pp->shutdown = 1;
type_conversion,run-command.c,1648,-,+,,18,	for (size_t i = 0; i < opts->processes; i++) {
type_conversion,run-command.c,1649,-,+,,7,		if (pp->children[i].state == GIT_CP_WORKING &&
type_conversion,run-command.c,1650,-,+,,7,		    pp->pfd[i].revents & (POLLIN | POLLHUP)) {
type_conversion,run-command.c,1651,-,+,,12,"			int n = strbuf_read_once(&pp->children[i].err,
						 pp->children[i].process.err, 0);"
type_conversion,run-command.c,1652,-,+,,37,"						 pp->children[i].process.err, 0);"
type_conversion,run-command.c,1667,-,+,,6,	if (pp->children[i].state == GIT_CP_WORKING &&
type_conversion,run-command.c,1681,-,+,,28,	while (pp->nr_processes > 0) {
type_conversion,run-command.c,1682,-,+,,12,		for (i = 0; i < opts->processes; i++)
type_conversion,run-command.c,1683,-,+,,8,			if (pp->children[i].state == GIT_CP_WAIT_CLEANUP)
type_conversion,run-command.c,1731,-,+,,13,			for (i = 0; i < n; i++)
type_conversion,run-command.c,1732,-,+,,9,				if (pp->children[(pp->output_owner + i) % n].state == GIT_CP_WORKING)
type_conversion,run-command.c,1768,-,+,,19,				pp.shutdown = 1;
type_conversion,run-command.c,1776,-,+,,20,			for (size_t i = 0; i < opts->processes; i++)
type_conversion,run-command.c,1784,-,+,,18,			pp.shutdown = 1;
type_conversion,run-command.c,1804,-,+,,19,	maint->git_cmd = 1;
type_conversion,run-command.c,1805,-,+,,30,	maint->close_object_store = 1;
type_conversion,run-command.c,1873,-,+,,16,	time_limit += timeout_sec;
type_conversion,run-command.h,259,-,+,,33,"	return pipe_command(cmd, NULL, 0, out, hint, NULL, 0);"
type_conversion,scalar.c,85,-,+,,16,	cmd.git_cmd = 1;
type_conversion,scalar.c,116,-,+,,9,	       fsm_settings__get_reason(the_repository) == FSMONITOR_REASON_OK;
type_conversion,scalar.c,197,-,+,,29,"						   CONFIG_REGEX_NONE, 0))"
type_conversion,scalar.c,243,-,+,,6,	if (fsmonitor_ipc__get_state() != IPC_STATE__LISTENING)
type_conversion,scalar.c,253,-,+,,6,	if (fsmonitor_ipc__get_state() == IPC_STATE__LISTENING)
type_conversion,scalar.c,304,-,+,,16,		*(value++) = '\0';
type_conversion,scalar.c,316,-,+,,15,	cp.git_cmd = 1;
type_conversion,scalar.c,318,-,+,,31,"	if (!pipe_command(&cp, NULL, 0, &out, 0, NULL, 0)) {"
type_conversion,scalar.c,323,-,+,,17,			size_t len = eol - line;
type_conversion,scalar.c,328,-,+,,19,				line = eol + (*eol == '\n');
type_conversion,scalar.c,334,-,+,,26,"				branch = xstrndup(p, eol - p);"
type_conversion,scalar.c,350,-,+,,15,	cp.git_cmd = 1;
type_conversion,scalar.c,352,-,+,,31,"	if (!pipe_command(&cp, NULL, 0, &out, 0, NULL, 0)) {"
type_conversion,scalar.c,445,-,+,,20,		while (buf.len > 0 && is_dir_sep(buf.buf[buf.len - 1]))
type_conversion,scalar.c,446,-,+,,34,"			strbuf_setlen(&buf, buf.len - 1);"
type_conversion,scalar.c,665,-,+,,14,	for (i = 0; i < scalar_repos.nr; i++) {
type_conversion,scalar.c,953,-,+,,21,	while (argc > 1 && *argv[1] == '-') {
type_conversion,send-pack.c,94,-,+,,15,	po.git_cmd = 1;
type_conversion,send-pack.c,95,-,+,,21,	po.clean_on_exit = 1;
type_conversion,send-pack.c,103,-,+,,37,"			quote_two_c_style(&buf, """", msg, 0);"
type_conversion,send-pack.c,104,-,+,,14,	for (i = 0; i < advertised->nr; i++)
type_conversion,send-pack.c,106,-,+,,14,	for (i = 0; i < negotiated->nr; i++)
type_conversion,send-pack.c,107,-,+,,7,		if (ref->status == REF_STATUS_OK) {
type_conversion,send-pack.c,126,-,+,,13,			if (n <= 0)
type_conversion,send-pack.c,154,-,+,,6,	if (packet_reader_read(reader) != PACKET_READ_NORMAL)
type_conversion,send-pack.c,166,-,+,,21,	unsigned dry_run = 0;
type_conversion,send-pack.c,167,-,+,,25,	unsigned send_mirror = 0;
type_conversion,send-pack.c,168,-,+,,26,	unsigned force_update = 0;
type_conversion,send-pack.c,169,-,+,,19,	unsigned quiet = 0;
type_conversion,send-pack.c,172,-,+,,27,	unsigned use_thin_pack = 0;
type_conversion,send-pack.c,173,-,+,,20,	unsigned atomic = 0;
type_conversion,send-pack.c,174,-,+,,27,	unsigned stateless_rpc = 0;
type_conversion,send-pack.c,178,-,+,,7,		if (packet_reader_read(reader) != PACKET_READ_NORMAL)
type_conversion,send-pack.c,179,-,+,,32,	struct push_cas_option cas = {0};
type_conversion,send-pack.c,187,-,+,,10,		*p++ = '\0';
type_conversion,send-pack.c,214,-,+,,12,				*p++ = '\0';
type_conversion,send-pack.c,221,-,+,,17,	args.verbose = verbose;
type_conversion,send-pack.c,225,-,+,,29,				report->forced_update = 1;
type_conversion,send-pack.c,226,-,+,,19,	args.push_cert = push_cert;
type_conversion,send-pack.c,227,-,+,,18,	args.progress = progress;
type_conversion,send-pack.c,239,-,+,,11,			*p++ = '\0';
type_conversion,send-pack.c,250,-,+,,7,		if (hint->status != REF_STATUS_EXPECTING_REPORT &&
type_conversion,send-pack.c,251,-,+,,7,		    hint->status != REF_STATUS_OK &&
type_conversion,send-pack.c,252,-,+,,7,		    hint->status != REF_STATUS_REMOTE_REJECT) {
type_conversion,send-pack.c,265,-,+,,18,	args.progress = progress;
type_conversion,send-pack.c,273,-,+,,37,			args.verbose ? CONNECT_VERBOSE : 0);
type_conversion,send-pack.c,276,-,+,,43,"	packet_reader_init(&reader, fd[0], NULL, 0,"
type_conversion,send-pack.c,296,-,+,,10,	flags = MATCH_REFS_NONE;
type_conversion,send-pack.c,299,-,+,,12,		flags |= MATCH_REFS_ALL;
type_conversion,send-pack.c,301,-,+,,12,		flags |= MATCH_REFS_MIRROR;
type_conversion,send-pack.c,311,-,+,,31,		cas.use_force_if_includes = 1;
type_conversion,send-pack.c,313,-,+,,39,"	set_ref_status_for_push(remote_refs, args.send_mirror,"
type_conversion,send-pack.c,314,-,+,,3,		args.force_update);
type_conversion,send-pack.c,327,-,+,,50,"		transport_print_push_status(dest, remote_refs, args.verbose, 0, &reject_reasons);"
type_conversion,send-pack.c,332,-,+,,47,"			transport_update_tracking_ref(remote, ref, args.verbose);"
type_conversion,send-pack.c,387,-,+,,22,"		np = next_line(cp, cert.buf + cert.len - cp);"
type_conversion,send-pack.c,410,-,+,,12,		int ch = nonce[i] & 0xFF;
type_conversion,send-pack.c,427,-,+,,35,	int len = the_hash_algo->hexsz + 1; /* hash + NL */
type_conversion,send-pack.c,429,-,+,,18,	child.git_cmd = 1;
type_conversion,send-pack.c,430,-,+,,19,	child.no_stdin = 1;
type_conversion,send-pack.c,444,-,+,,52,"		int read_len = read_in_full(child.out, hex_hash, len);"
type_conversion,send-pack.c,452,-,+,,46,"		if (parse_oid_hex(hex_hash, &oid, &end) || *end != '\n')"
type_conversion,send-pack.c,490,-,+,,23,	unsigned cmds_sent = 0;
type_conversion,send-pack.c,508,-,+,,27,		args->disable_bitmaps = !use_bitmaps;
type_conversion,send-pack.c,520,-,+,,25,		args->use_ofs_delta = 1;
type_conversion,send-pack.c,530,-,+,,25,		args->use_thin_pack = 0;
type_conversion,send-pack.c,539,-,+,,6,	if (args->push_cert != SEND_PACK_PUSH_CERT_NEVER) {
type_conversion,send-pack.c,543,-,+,,42,"			reject_invalid_nonce(push_cert_nonce, len);"
type_conversion,send-pack.c,545,-,+,,14,		} else if (args->push_cert == SEND_PACK_PUSH_CERT_ALWAYS) {
type_conversion,send-pack.c,547,-,+,,14,		} else if (args->push_cert == SEND_PACK_PUSH_CERT_IF_ASKED) {
type_conversion,send-pack.c,609,-,+,,37,"				reject_atomic_push(remote_refs, args->send_mirror);"
type_conversion,send-pack.c,634,-,+,,15,"		cmds_sent = generate_push_cert(&req_buf, remote_refs, args,
					       cap_buf.buf, push_cert_nonce);"
type_conversion,send-pack.c,650,-,+,,17,				cmds_sent = 1;
type_conversion,send-pack.c,668,-,+,,40,"			send_sideband(out, -1, req_buf.buf, req_buf.len, LARGE_PACKET_MAX);"
type_conversion,send-pack.c,688,-,+,,40,"	packet_reader_init(&reader, in, NULL, 0,"
type_conversion,sequencer.c,242,-,+,,35,"	struct replay_ctx *ctx = xcalloc(1, sizeof(*ctx));"
type_conversion,sequencer.c,244,-,+,,36,"	strbuf_init(&ctx->current_fixups, 0);"
type_conversion,sequencer.c,245,-,+,,29,"	strbuf_init(&ctx->message, 0);"
type_conversion,sequencer.c,317,-,+,,12,				*tmp = '\0';
type_conversion,sequencer.c,322,-,+,,6,"	if (opts->action == REPLAY_REVERT && !strcmp(k, ""revert.reference""))"
type_conversion,sequencer.c,336,-,+,,9,	return opts->action == REPLAY_INTERACTIVE_REBASE;
type_conversion,sequencer.c,363,-,+,,13,	size_t i = 0;
type_conversion,sequencer.c,369,-,+,,38,		sb->buf[sb->len - ignore_footer] = '\0';
type_conversion,sequencer.c,380,-,+,,16,			found_sob = i;
type_conversion,sequencer.c,434,-,+,,59,"	    strbuf_read_file(&buf, rebase_path_refs_to_delete(), 0) > 0) {"
type_conversion,sequencer.c,439,-,+,,12,				*eol = '\0';
type_conversion,sequencer.c,440,-,+,,89,"			if (refs_delete_ref(get_main_ref_store(the_repository), ""(rebase) cleanup"", p, NULL, 0) < 0) {"
type_conversion,sequencer.c,495,-,+,,35,"	out->subject = xmemdupz(subject, subject_len);"
type_conversion,sequencer.c,544,-,+,,12,		else if (opts->action == REPLAY_PICK)
type_conversion,sequencer.c,552,-,+,,12,		else if (opts->action == REPLAY_REVERT)
type_conversion,sequencer.c,573,-,+,,40,"	if (write_in_full(msg_fd, buf, len) < 0) {"
type_conversion,sequencer.c,578,-,+,,40,"	if (append_eol && write(msg_fd, ""\n"", 1) < 0) {"
type_conversion,sequencer.c,592,-,+,,17,	int orig_len = buf->len;
type_conversion,sequencer.c,594,-,+,,34,"	if (strbuf_read_file(buf, path, 0) < 0) {"
type_conversion,sequencer.c,601,-,+,,17,	if (buf->len > orig_len && buf->buf[buf->len - 1] == '\n') {
type_conversion,sequencer.c,602,-,+,,20,		if (--buf->len > orig_len && buf->buf[buf->len - 1] == '\r')
type_conversion,sequencer.c,604,-,+,,24,		buf->buf[buf->len] = '\0';
type_conversion,sequencer.c,607,-,+,,59,	if ((flags & READ_ONELINER_SKIP_IF_EMPTY) && buf->len == orig_len)
type_conversion,sequencer.c,667,-,+,,8,"				   0, sb.buf, &err) ||"
type_conversion,sequencer.c,714,-,+,,6,	if (cleanup_mode < ARRAY_SIZE(modes))
type_conversion,sequencer.c,725,-,+,,6,	if (cleanup_mode == COMMIT_MSG_CLEANUP_SCISSORS) {
type_conversion,sequencer.c,733,-,+,,14,	for (i = 0; i < istate->cache_nr;) {
type_conversion,sequencer.c,738,-,+,,11,			while (i < istate->cache_nr &&
type_conversion,sequencer.c,768,-,+,,21,		o.buffer_output = 2;
type_conversion,sequencer.c,777,-,+,,14,	for (i = 0; i < opts->xopts.nr; i++)
type_conversion,sequencer.c,896,-,+,,21,	while (*message && *message != '\n' && *message != '\r')
type_conversion,sequencer.c,899,-,+,,12,		else if (*message != '\'')
type_conversion,sequencer.c,900,-,+,,23,"			strbuf_addch(&buf, *(message++));"
type_conversion,sequencer.c,902,-,+,,32,"			strbuf_addf(&buf, ""'\\%c'"", *(message++));"
type_conversion,sequencer.c,904,-,+,,21,	while (*message && *message != '\n' && *message != '\r')
type_conversion,sequencer.c,907,-,+,,12,		else if (*message != '\'')
type_conversion,sequencer.c,908,-,+,,23,"			strbuf_addch(&buf, *(message++));"
type_conversion,sequencer.c,910,-,+,,32,"			strbuf_addf(&buf, ""'\\%c'"", *(message++));"
type_conversion,sequencer.c,912,-,+,,21,	while (*message && *message != '\n' && *message != '\r')
type_conversion,sequencer.c,913,-,+,,7,		if (*message != '\'')
type_conversion,sequencer.c,914,-,+,,23,"			strbuf_addch(&buf, *(message++));"
type_conversion,sequencer.c,916,-,+,,32,"			strbuf_addf(&buf, ""'\\%c'"", *(message++));"
type_conversion,sequencer.c,939,-,+,,11,		*cp++ = '\0';
type_conversion,sequencer.c,942,-,+,,15,		buf = np + (*np == '\n');
type_conversion,sequencer.c,943,-,+,,9,		*np = '\0';
type_conversion,sequencer.c,978,-,+,,35,"	if (strbuf_read_file(&buf, path, 256) <= 0) {"
type_conversion,sequencer.c,990,-,+,,14,	for (i = 0; i < kv.nr; i++) {
type_conversion,sequencer.c,1069,-,+,,14,	for (i = 0; i < env->nr; i++)
type_conversion,sequencer.c,1107,-,+,,26,	cmd->stdout_to_stderr = 1;
type_conversion,sequencer.c,1109,-,+,,12,"			  NULL, 0,"
type_conversion,sequencer.c,1110,-,+,,12,"			  NULL, 0,"
type_conversion,sequencer.c,1111,-,+,,12,"			  &buf, 0);"
type_conversion,sequencer.c,1141,-,+,,16,	cmd.git_cmd = 1;
type_conversion,sequencer.c,1206,-,+,,18,	for (i = start; i < sb->len; i++) {
type_conversion,sequencer.c,1207,-,+,,44,"		nl = memchr(sb->buf + i, '\n', sb->len - i);"
type_conversion,sequencer.c,1209,-,+,,10,			eol = nl - sb->buf;
type_conversion,sequencer.c,1211,-,+,,10,			eol = sb->len;
type_conversion,sequencer.c,1213,-,+,,34,		if (strlen(sign_off_header) <= eol - i &&
type_conversion,sequencer.c,1230,-,+,,6,	    cleanup_mode == COMMIT_MSG_CLEANUP_SCISSORS)
type_conversion,sequencer.c,1232,-,+,,6,	if (cleanup_mode != COMMIT_MSG_CLEANUP_NONE)
type_conversion,sequencer.c,1234,-,+,,5,		  cleanup_mode == COMMIT_MSG_CLEANUP_ALL ? comment_line_str : NULL);
type_conversion,sequencer.c,1244,-,+,,6,	if (cleanup_mode == COMMIT_MSG_CLEANUP_NONE && sb->len)
type_conversion,sequencer.c,1259,-,+,,6,	if (cleanup_mode == COMMIT_MSG_CLEANUP_NONE && sb->len)
type_conversion,sequencer.c,1262,-,+,,63,"	if (!template_file || strbuf_read_file(&tmpl, template_file, 0) <= 0)"
type_conversion,sequencer.c,1266,-,+,,4,	  cleanup_mode == COMMIT_MSG_CLEANUP_ALL ? comment_line_str : NULL);
type_conversion,sequencer.c,1270,-,+,,27,"	return rest_is_empty(sb, start - sb->buf);"
type_conversion,sequencer.c,1290,-,+,,29,"		strbuf_add(&sb, msg->buf, nl + 1 - msg->buf);"
type_conversion,sequencer.c,1301,-,+,,20,"				   NULL, NULL, 0, sb.buf, err) ||"
type_conversion,sequencer.c,1324,-,+,,26,	proc.stdout_to_stderr = 1;
type_conversion,sequencer.c,1471,-,+,,13,	rev.diff = 1;
type_conversion,sequencer.c,1475,-,+,,23,	rev.verbose_header = 1;
type_conversion,sequencer.c,1476,-,+,,23,	rev.show_root_diff = 1;
type_conversion,sequencer.c,1478,-,+,,27,	rev.always_show_header = 0;
type_conversion,sequencer.c,1494,-,+,,28,		rev.always_show_header = 1;
type_conversion,sequencer.c,1495,-,+,,24,		rev.use_terminator = 1;
type_conversion,sequencer.c,1620,-,+,,10,				     2048) < 0) {
type_conversion,sequencer.c,1639,-,+,,6,	if (cleanup != COMMIT_MSG_CLEANUP_NONE)
type_conversion,sequencer.c,1641,-,+,,5,		  cleanup == COMMIT_MSG_CLEANUP_ALL ? comment_line_str : NULL);
type_conversion,sequencer.c,1684,-,+,,37,"		if (split_ident_line(&id, author, strlen(author)) < 0) {"
type_conversion,sequencer.c,1688,-,+,,34,"		name = xmemdupz(id.name_begin, id.name_end - id.name_begin);"
type_conversion,sequencer.c,1689,-,+,,35,"		email = xmemdupz(id.mail_begin, id.mail_end - id.mail_begin);"
type_conversion,sequencer.c,1741,-,+,,51,"		if (msg_file && strbuf_read_file(&sb, msg_file, 2048) < 0)"
type_conversion,sequencer.c,1833,-,+,,18,"	[TODO_PICK] = { 'p', ""pick"" },"
type_conversion,sequencer.c,1834,-,+,,20,"	[TODO_REVERT] = { 0,   ""revert"" },"
type_conversion,sequencer.c,1835,-,+,,18,"	[TODO_EDIT] = { 'e', ""edit"" },"
type_conversion,sequencer.c,1836,-,+,,20,"	[TODO_REWORD] = { 'r', ""reword"" },"
type_conversion,sequencer.c,1837,-,+,,19,"	[TODO_FIXUP] = { 'f', ""fixup"" },"
type_conversion,sequencer.c,1838,-,+,,20,"	[TODO_SQUASH] = { 's', ""squash"" },"
type_conversion,sequencer.c,1839,-,+,,18,"	[TODO_EXEC] = { 'x', ""exec"" },"
type_conversion,sequencer.c,1840,-,+,,19,"	[TODO_BREAK] = { 'b', ""break"" },"
type_conversion,sequencer.c,1841,-,+,,19,"	[TODO_LABEL] = { 'l', ""label"" },"
type_conversion,sequencer.c,1842,-,+,,19,"	[TODO_RESET] = { 't', ""reset"" },"
type_conversion,sequencer.c,1843,-,+,,19,"	[TODO_MERGE] = { 'm', ""merge"" },"
type_conversion,sequencer.c,1844,-,+,,24,"	[TODO_UPDATE_REF] = { 'u', ""update-ref"" },"
type_conversion,sequencer.c,1845,-,+,,18,"	[TODO_NOOP] = { 0,   ""noop"" },"
type_conversion,sequencer.c,1846,-,+,,18,"	[TODO_DROP] = { 'd', ""drop"" },"
type_conversion,sequencer.c,1847,-,+,,21,"	[TODO_COMMENT] = { 0,   NULL },"
type_conversion,sequencer.c,1852,-,+,,6,	if (command < TODO_COMMENT)
type_conversion,sequencer.c,1854,-,+,,6,	if (command == TODO_COMMENT)
type_conversion,sequencer.c,1861,-,+,,6,	if (command < TODO_COMMENT)
type_conversion,sequencer.c,1863,-,+,,9,	return 0;
type_conversion,sequencer.c,1868,-,+,,9,	return TODO_NOOP <= command;
type_conversion,sequencer.c,1873,-,+,,9,	return command == TODO_FIXUP || command == TODO_SQUASH;
type_conversion,sequencer.c,1906,-,+,,9,	return command == TODO_FIXUP && ((flag & TODO_REPLACE_FIXUP_MSG) ||
type_conversion,sequencer.c,1907,-,+,,15,					 (flag & TODO_EDIT_FIXUP_MSG));
type_conversion,sequencer.c,1923,-,+,,20,			count = n - s + 1;
type_conversion,sequencer.c,1940,-,+,,22,"	strbuf_setlen(buf1, 2);"
type_conversion,sequencer.c,1943,-,+,,22,"	strbuf_setlen(buf2, 2);"
type_conversion,sequencer.c,1973,-,+,,28,			off = (s > start + 1 && s[-2] == '\n') ? 1 : 0;
type_conversion,sequencer.c,1974,-,+,,27,"			copy_lines(msg, start, s - start - off);"
type_conversion,sequencer.c,1983,-,+,,8,			if (*next == '\n')
type_conversion,sequencer.c,1984,-,+,,23,"				strbuf_addch(msg, *next++);"
type_conversion,sequencer.c,1989,-,+,,28,			off = (s > start + 1 && s[-2] == '\n') ? 1 : 0;
type_conversion,sequencer.c,1990,-,+,,27,"			copy_lines(msg, start, s - start - off);"
type_conversion,sequencer.c,2001,-,+,,40,"	copy_lines(msg, start, orig_msg_len - (start - orig_msg));"
type_conversion,sequencer.c,2013,-,+,,25,"	size_t commented_len = 0, fixup_off;"
type_conversion,sequencer.c,2020,-,+,,8,	    ((command == TODO_SQUASH || seen_squash(ctx)) &&
type_conversion,sequencer.c,2041,-,+,,24,"			append_signoff(buf, 0, 0);"
type_conversion,sequencer.c,2043,-,+,,8,		if ((command == TODO_FIXUP) &&
type_conversion,sequencer.c,2044,-,+,,15,		    (flag & TODO_REPLACE_FIXUP_MSG) &&
type_conversion,sequencer.c,2078,-,+,,56,"		if (strbuf_read_file(&buf, rebase_path_squash_msg(), 9) <= 0)"
type_conversion,sequencer.c,2088,-,+,,23,"		strbuf_splice(&buf, 0, eol - buf.buf, header.buf, header.len);"
type_conversion,sequencer.c,2106,-,+,,7,"		if (command == TODO_FIXUP && !flag && write_message(body, strlen(body),"
type_conversion,sequencer.c,2132,-,+,,6,"	if (command == TODO_SQUASH || is_fixup_flag(command, flag)) {"
type_conversion,sequencer.c,2134,-,+,,13,	} else if (command == TODO_FIXUP) {
type_conversion,sequencer.c,2169,-,+,,89,"	if (strbuf_read_file(&buf, rebase_path_rewritten_pending(), (GIT_MAX_HEXSZ + 1) * 2) > 0 &&"
type_conversion,sequencer.c,2210,-,+,,11,		return (opts->action == REPLAY_REVERT && isatty(0)) ? 1 : 0;
type_conversion,sequencer.c,2312,-,+,,14,		if (res || command != TODO_REWORD)
type_conversion,sequencer.c,2332,-,+,,6,	if (command == TODO_REVERT) {
type_conversion,sequencer.c,2378,-,+,,52,"			if (!has_conforming_footer(&ctx->message, NULL, 0))"
type_conversion,sequencer.c,2387,-,+,,22,	ctx->have_message = 1;
type_conversion,sequencer.c,2389,-,+,,6,	if (command == TODO_REWORD)
type_conversion,sequencer.c,2418,-,+,,33,"		append_signoff(&ctx->message, 0, 0);"
type_conversion,sequencer.c,2425,-,+,,4,		 command == TODO_REVERT) {
type_conversion,sequencer.c,2455,-,+,,7,	if ((command == TODO_PICK || command == TODO_REWORD ||
type_conversion,sequencer.c,2456,-,+,,7,	     command == TODO_EDIT) && !opts->no_commit &&
type_conversion,sequencer.c,2461,-,+,,6,	if (command == TODO_REVERT && ((opts->no_commit && res == 0) || res == 1) &&
type_conversion,sequencer.c,2495,-,+,,17,		if (author || command == TODO_REVERT || (flags & AMEND_MSG))
type_conversion,sequencer.c,2533,-,+,,6,	if (opts->action == REPLAY_PICK && !opts->revs->no_walk)
type_conversion,sequencer.c,2596,-,+,,46,"	return (skip_prefix(p, str, &p) || (nick && *p++ == nick)) &&"
type_conversion,sequencer.c,2597,-,+,,4,		(*p == ' ' || *p == '\t' || *p == '\n' || *p == '\r' || !*p) &&
type_conversion,sequencer.c,2636,-,+,,16,	item->flags = 0;
type_conversion,sequencer.c,2641,-,+,,20,"	if (bol == eol || *bol == '\r' || starts_with_mem(bol, eol - bol, comment_line_str)) {"
type_conversion,sequencer.c,2644,-,+,,22,		item->arg_offset = bol - buf;
type_conversion,sequencer.c,2645,-,+,,19,		item->arg_len = eol - bol;
type_conversion,sequencer.c,2649,-,+,,18,	for (i = 0; i < TODO_COMMENT; i++)
type_conversion,sequencer.c,2654,-,+,,11,	if (i >= TODO_COMMENT)
type_conversion,sequencer.c,2659,-,+,,12,"	padding = strspn(bol, "" \t"");"
type_conversion,sequencer.c,2662,-,+,,6,	if (item->command == TODO_NOOP || item->command == TODO_BREAK) {
type_conversion,sequencer.c,2667,-,+,,22,		item->arg_offset = bol - buf;
type_conversion,sequencer.c,2668,-,+,,19,		item->arg_len = eol - bol;
type_conversion,sequencer.c,2676,-,+,,6,	if (item->command == TODO_EXEC || item->command == TODO_LABEL ||
type_conversion,sequencer.c,2677,-,+,,6,	    item->command == TODO_RESET || item->command == TODO_UPDATE_REF) {
type_conversion,sequencer.c,2681,-,+,,22,		item->arg_offset = bol - buf;
type_conversion,sequencer.c,2683,-,+,,7,		if (item->command == TODO_LABEL ||
type_conversion,sequencer.c,2684,-,+,,7,		    item->command == TODO_UPDATE_REF) {
type_conversion,sequencer.c,2685,-,+,,12,			saved = *eol;
type_conversion,sequencer.c,2686,-,+,,11,			*eol = '\0';
type_conversion,sequencer.c,2688,-,+,,11,			*eol = saved;
type_conversion,sequencer.c,2693,-,+,,6,	if (item->command == TODO_FIXUP) {
type_conversion,sequencer.c,2696,-,+,,19,			item->flags |= TODO_REPLACE_FIXUP_MSG;
type_conversion,sequencer.c,2699,-,+,,19,			item->flags |= TODO_EDIT_FIXUP_MSG;
type_conversion,sequencer.c,2703,-,+,,6,	if (item->command == TODO_MERGE) {
type_conversion,sequencer.c,2708,-,+,,19,			item->flags |= TODO_EDIT_MERGE_MSG;
type_conversion,sequencer.c,2710,-,+,,19,			item->flags |= TODO_EDIT_MERGE_MSG;
type_conversion,sequencer.c,2712,-,+,,23,			item->arg_offset = bol - buf;
type_conversion,sequencer.c,2719,-,+,,10,	saved = *end_of_object_name;
type_conversion,sequencer.c,2720,-,+,,24,	*end_of_object_name = '\0';
type_conversion,sequencer.c,2724,-,+,,24,	*end_of_object_name = saved;
type_conversion,sequencer.c,2727,-,+,,21,	item->arg_offset = bol - buf;
type_conversion,sequencer.c,2744,-,+,,40,"	if (strbuf_read_file(&buf, todo_file, 0) < 0) {"
type_conversion,sequencer.c,2751,-,+,,38,"	if (is_command(TODO_PICK, &bol) && (*bol == ' ' || *bol == '\t'))"
type_conversion,sequencer.c,2754,-,+,,5,		 (*bol == ' ' || *bol == '\t'))
type_conversion,sequencer.c,2778,-,+,,19,		if (p != eol && eol[-1] == '\r')
type_conversion,sequencer.c,2782,-,+,,25,		item->offset_in_buf = p - todo_list->buf.buf;
type_conversion,sequencer.c,2786,-,+,,20,			item->command = TODO_COMMENT + 1;
type_conversion,sequencer.c,2787,-,+,,23,			item->arg_offset = p - buf;
type_conversion,sequencer.c,2792,-,+,,7,		if (item->command != TODO_COMMENT)
type_conversion,sequencer.c,2812,-,+,,7,		if (todo_list->items[i].command != TODO_COMMENT)
type_conversion,sequencer.c,2820,-,+,,9,"	return index < todo_list->nr ?
		todo_list->items[index].offset_in_buf : todo_list->buf.len;"
type_conversion,sequencer.c,2843,-,+,,28,"	len = strbuf_read(sb, fd, 0);"
type_conversion,sequencer.c,2845,-,+,,12,	if (len < 0)
type_conversion,sequencer.c,2857,-,+,,40,"	if (strbuf_read_file(&buf, todo_path, 0) < 0) {"
type_conversion,sequencer.c,2930,-,+,,62,"	if (strbuf_read_file_or_whine(&todo_list->buf, todo_file) < 0)"
type_conversion,sequencer.c,2947,-,+,,4,			opts->action == REPLAY_PICK ? TODO_PICK : TODO_REVERT;
type_conversion,sequencer.c,2951,-,+,,8,			if (valid == todo_list->items[i].command)
type_conversion,sequencer.c,2953,-,+,,13,			else if (valid == TODO_PICK)
type_conversion,sequencer.c,2962,-,+,,55,"		if (strbuf_read_file(&done.buf, rebase_path_done(), 0) > 0 &&"
type_conversion,sequencer.c,3050,-,+,,6,	if (*strategy_opts_string == ' ')
type_conversion,sequencer.c,3069,-,+,,50,"	if (!read_oneliner(buf, rebase_path_strategy(), 0))"
type_conversion,sequencer.c,3072,-,+,,55,"	if (!read_oneliner(buf, rebase_path_strategy_opts(), 0))"
type_conversion,sequencer.c,3152,-,+,,54,"		if (read_oneliner(&buf, rebase_path_squash_onto(), 0)) {"
type_conversion,sequencer.c,3210,-,+,,23,	if (opts->xopts.nr > 0)
type_conversion,sequencer.c,3241,-,+,,30,	enum todo_command command = opts->action == REPLAY_PICK ?
type_conversion,sequencer.c,3262,-,+,,22,		item->arg_offset = 0;
type_conversion,sequencer.c,3285,-,+,,3,"		refs_ref_exists(get_main_ref_store(r), ""REVERT_HEAD"") ||
		refs_ref_exists(get_main_ref_store(r), ""CHERRY_PICK_HEAD"");"
type_conversion,sequencer.c,3311,-,+,,32,"	if (mkdir(git_path_seq_dir(), 0777) < 0)"
type_conversion,sequencer.c,3328,-,+,,58,"	if (strbuf_read_file(&sb, git_path_abort_safety_file(), 0) >= 0) {"
type_conversion,sequencer.c,3351,-,+,,16,	cmd.git_cmd = 1;
type_conversion,sequencer.c,3408,-,+,,42,"	if (parse_oid_hex(buf.buf, &oid, &p) || *p != '\0') {"
type_conversion,sequencer.c,3460,-,+,,8,			if (action != REPLAY_REVERT)
type_conversion,sequencer.c,3469,-,+,,8,			if (action != REPLAY_PICK)
type_conversion,sequencer.c,3492,-,+,,5,"			 action == REPLAY_REVERT ? ""revert"" : ""cherry-pick"");"
type_conversion,sequencer.c,3516,-,+,,25,			todo_list->buf.len - offset) < 0)
type_conversion,sequencer.c,3529,-,+,,7,"				  get_item_line_length(todo_list, next - 1))"
type_conversion,sequencer.c,3530,-,+,,9,		    < 0)
type_conversion,sequencer.c,3584,-,+,,18,	for (size_t i = 0; i < opts->xopts.nr; i++)
type_conversion,sequencer.c,3587,-,+,,35,"				opts->xopts.v[i], ""^$"", NULL, 0);"
type_conversion,sequencer.c,3597,-,+,,27,				describe_cleanup_mode(opts->default_msg_cleanup));
type_conversion,sequencer.c,3620,-,+,,24,	log_tree_opt.abbrev = 0;
type_conversion,sequencer.c,3621,-,+,,22,	log_tree_opt.diff = 1;
type_conversion,sequencer.c,3623,-,+,,31,	log_tree_opt.disable_stdin = 1;
type_conversion,sequencer.c,3624,-,+,,30,	log_tree_opt.no_commit_id = 1;
type_conversion,sequencer.c,3739,-,+,,18,	cmd.use_shell = 1;
type_conversion,sequencer.c,3788,-,+,,39,"	if (strbuf_read_file(&buf, filename, 0) < 0 && errno != ENOENT) {"
type_conversion,sequencer.c,3793,-,+,,24,"	strbuf_complete(&buf, '\n');"
type_conversion,sequencer.c,3798,-,+,,44,"	if (write_in_full(fd, buf.buf, buf.len) < 0) {"
type_conversion,sequencer.c,3822,-,+,,18,	if (len == 1 && *name == '#')
type_conversion,sequencer.c,3837,-,+,,8,"					  0, msg.buf, &err) < 0 ||"
type_conversion,sequencer.c,3899,-,+,,22,"		strbuf_splice(buf, 0, strlen(""refs/rewritten/""), """", 0);"
type_conversion,sequencer.c,3918,-,+,,51,	struct unpack_trees_options unpack_tree_opts = { 0 };
type_conversion,sequencer.c,3924,-,+,,48,"	if (len == 10 && !strncmp(""[new root]"", name, len)) {"
type_conversion,sequencer.c,3927,-,+,,24,"			if (commit_tree("""", 0, the_hash_algo->empty_tree,"
type_conversion,sequencer.c,3961,-,+,,27,	unpack_tree_opts.merge = 1;
type_conversion,sequencer.c,3962,-,+,,28,	unpack_tree_opts.update = 1;
type_conversion,sequencer.c,3963,-,+,,38,	unpack_tree_opts.preserve_ignored = 0; /* FIXME: !overwrite_ignore */
type_conversion,sequencer.c,3964,-,+,,44,	unpack_tree_opts.skip_cache_tree_update = 1;
type_conversion,sequencer.c,3977,-,+,,19,"	if (unpack_trees(1, &desc, &unpack_tree_opts)) {"
type_conversion,sequencer.c,3994,-,+,,17,"				      NULL, 0, UPDATE_REFS_MSG_ON_ERR);"
type_conversion,sequencer.c,4041,-,+,,26,"	for (p = arg; p - arg < arg_len; p += strspn(p, "" \t\n"")) {"
type_conversion,sequencer.c,4044,-,+,,7,		if (*p == '#' && (!p[1] || isspace(p[1]))) {
type_conversion,sequencer.c,4045,-,+,,9,"			p += 1 + strspn(p + 1, "" \t\n"");"
type_conversion,sequencer.c,4046,-,+,,21,			oneline_offset = p - arg;
type_conversion,sequencer.c,4049,-,+,,7,"		k = strcspn(p, "" \t\n"");"
type_conversion,sequencer.c,4059,-,+,,19,		merge_arg_len = p - arg;
type_conversion,sequencer.c,4117,-,+,,15,		if (flags & TODO_EDIT_MERGE_MSG)
type_conversion,sequencer.c,4137,-,+,,9,		len = strlen(body);
type_conversion,sequencer.c,4138,-,+,,35,"		strbuf_add(&ctx->message, body, len);"
type_conversion,sequencer.c,4149,-,+,,8,				   arg_len - oneline_offset);
type_conversion,sequencer.c,4156,-,+,,22,	ctx->have_message = 1;
type_conversion,sequencer.c,4183,-,+,,17,		cmd.git_cmd = 1;
type_conversion,sequencer.c,4190,-,+,,16,			for (k = 0; k < opts->xopts.nr; k++)
type_conversion,sequencer.c,4194,-,+,,17,		if (!(flags & TODO_EDIT_MERGE_MSG))
type_conversion,sequencer.c,4244,-,+,,25,"	write_message(""no-ff"", 5, git_path_merge_mode(r), 0);"
type_conversion,sequencer.c,4252,-,+,,20,	o.buffer_output = 2;
type_conversion,sequencer.c,4303,-,+,,12,				       run_commit_flags);
type_conversion,sequencer.c,4305,-,+,,22,	if (!ret && flags & TODO_EDIT_MERGE_MSG) {
type_conversion,sequencer.c,4309,-,+,,38,"		ret = !!run_git_commit(NULL, opts, run_commit_flags);"
type_conversion,sequencer.c,4392,-,+,,14,	for (i = 0; i < update_refs.nr; i++) {
type_conversion,sequencer.c,4407,-,+,,8,			if (item->command != TODO_UPDATE_REF)
type_conversion,sequencer.c,4410,-,+,,8,			if (item->arg_len != reflen ||
type_conversion,sequencer.c,4438,-,+,,7,		if (item->command != TODO_UPDATE_REF)
type_conversion,sequencer.c,4441,-,+,,25,		for (j = 0; !found && j < update_refs.nr; j++) {
type_conversion,sequencer.c,4444,-,+,,27,			found = strlen(ref) == item->arg_len &&
type_conversion,sequencer.c,4445,-,+,,24,"				!strncmp(ref, arg, item->arg_len);"
type_conversion,sequencer.c,4452,-,+,,29,"			strbuf_add(&argref, arg, item->arg_len);"
type_conversion,sequencer.c,4506,-,+,,9,"					   0, UPDATE_REFS_MSG_ON_ERR);"
type_conversion,sequencer.c,4589,-,+,,19,		stash.git_cmd = 1;
type_conversion,sequencer.c,4590,-,+,,20,		stash.no_stdin = 1;
type_conversion,sequencer.c,4608,-,+,,24,"					&oid, null_oid(), 0, UPDATE_REFS_DIE_ON_ERR);"
type_conversion,sequencer.c,4637,-,+,,19,		child.git_cmd = 1;
type_conversion,sequencer.c,4638,-,+,,21,		child.no_stdout = 1;
type_conversion,sequencer.c,4639,-,+,,21,		child.no_stderr = 1;
type_conversion,sequencer.c,4651,-,+,,19,		store.git_cmd = 1;
type_conversion,sequencer.c,4790,-,+,,61,"	if (strbuf_read_file_or_whine(&buf, get_todo_path(opts)) < 0)"
type_conversion,sequencer.c,4793,-,+,,38,	if (buf.len != todo_list->buf.len - offset ||
type_conversion,sequencer.c,4838,-,+,,6,	if (item->command == TODO_EDIT) {
type_conversion,sequencer.c,4867,-,+,,7,		if (item->command == TODO_REWORD &&
type_conversion,sequencer.c,4910,-,+,,8,			if (item->command != TODO_COMMENT) {
type_conversion,sequencer.c,4932,-,+,,8,			if (item->command == TODO_BREAK) {
type_conversion,sequencer.c,4939,-,+,,23,		ctx->have_message = 0;
type_conversion,sequencer.c,4940,-,+,,7,		if (item->command <= TODO_SQUASH) {
type_conversion,sequencer.c,4943,-,+,,16,			if (!res && item->command == TODO_EDIT)
type_conversion,sequencer.c,4945,-,+,,14,		} else if (item->command == TODO_EXEC) {
type_conversion,sequencer.c,4947,-,+,,16,			int saved = *end_of_arg;
type_conversion,sequencer.c,4951,-,+,,18,			*end_of_arg = '\0';
type_conversion,sequencer.c,4953,-,+,,18,			*end_of_arg = saved;
type_conversion,sequencer.c,4960,-,+,,14,		} else if (item->command == TODO_LABEL) {
type_conversion,sequencer.c,4963,-,+,,14,		} else if (item->command == TODO_RESET) {
type_conversion,sequencer.c,4966,-,+,,14,		} else if (item->command == TODO_MERGE) {
type_conversion,sequencer.c,4968,-,+,,10,"					    item->flags, &check_todo, opts)) < 0)"
type_conversion,sequencer.c,4978,-,+,,14,		} else if (item->command == TODO_UPDATE_REF) {
type_conversion,sequencer.c,4980,-,+,,26,"			strbuf_add(&ref, arg, item->arg_len);"
type_conversion,sequencer.c,5011,-,+,,57,"		if (read_oneliner(&head_ref, rebase_path_head_name(), 0) &&"
type_conversion,sequencer.c,5024,-,+,,54,"			if (!read_oneliner(&buf, rebase_path_orig_head(), 0) ||"
type_conversion,sequencer.c,5030,-,+,,49,"			if (!read_oneliner(&buf, rebase_path_onto(), 0)) {"
type_conversion,sequencer.c,5058,-,+,,24,			log_tree_opt.diff = 1;
type_conversion,sequencer.c,5061,-,+,,33,			log_tree_opt.disable_stdin = 1;
type_conversion,sequencer.c,5063,-,+,,53,"			if (read_oneliner(&buf, rebase_path_orig_head(), 0) &&"
type_conversion,sequencer.c,5074,-,+,,18,				st.st_size > 0) {
type_conversion,sequencer.c,5079,-,+,,20,			child.git_cmd = 1;
type_conversion,sequencer.c,5122,-,+,,16,	cmd.git_cmd = 1;
type_conversion,sequencer.c,5147,-,+,,29,"	unsigned int final_fixup = 0, is_clean;"
type_conversion,sequencer.c,5152,-,+,,13,"	is_clean = !has_uncommitted_changes(r, 0);"
type_conversion,sequencer.c,5165,-,+,,49,"		if (!read_oneliner(&rev, rebase_path_amend(), 0))"
type_conversion,sequencer.c,5197,-,+,,14,			int len = ctx->current_fixups.len;
type_conversion,sequencer.c,5202,-,+,,18,			while (len && p[len - 1] != '\n')
type_conversion,sequencer.c,5204,-,+,,40,"			strbuf_setlen(&ctx->current_fixups, len);"
type_conversion,sequencer.c,5205,-,+,,25,"			if (write_message(p, len, rebase_path_current_fixups(),"
type_conversion,sequencer.c,5223,-,+,,19,				final_fixup = 1;
type_conversion,sequencer.c,5376,-,+,,17,	item.command = opts->action == REPLAY_PICK ?
type_conversion,sequencer.c,5395,-,+,,14,	for (i = 0; i < opts->revs->pending.nr; i++) {
type_conversion,sequencer.c,5422,-,+,,32,	if (opts->revs->cmdline.nr == 1 &&
type_conversion,sequencer.c,5423,-,+,,6,	    opts->revs->cmdline.rev->whence == REV_CMD_REV &&
type_conversion,sequencer.c,5446,-,+,,40,"	if (repo_get_oid(r, ""HEAD"", &oid) && (opts->action == REPLAY_REVERT))"
type_conversion,sequencer.c,5491,-,+,,21,		} else if (len == 1) {
type_conversion,sequencer.c,5497,-,+,,32,		} else if (msgbuf->buf[len - 2] != '\n') {
type_conversion,sequencer.c,5507,-,+,,55,"			strbuf_splice(msgbuf, msgbuf->len - ignore_footer, 0,"
type_conversion,sequencer.c,5512,-,+,,54,"		strbuf_splice(msgbuf, msgbuf->len - ignore_footer, 0,"
type_conversion,sequencer.c,5587,-,+,,27,			size_t i = strlen(p) + 1;
type_conversion,sequencer.c,5592,-,+,,12,				p[i] = '\0';
type_conversion,sequencer.c,5602,-,+,,31,		size_t max_len = buf->len + state->max_label_length;
type_conversion,sequencer.c,5620,-,+,,31,		for (; *label && buf->len + 1 < max_len; label++)
type_conversion,sequencer.c,5622,-,+,,28,			    (!label_is_utf8 && (*label & 0x80)))
type_conversion,sequencer.c,5623,-,+,,23,"				strbuf_addch(buf, *label);"
type_conversion,sequencer.c,5624,-,+,,13,			else if (*label & 0x80) {
type_conversion,sequencer.c,5629,-,+,,21,					if (buf->len + (p - label) > max_len)
type_conversion,sequencer.c,5631,-,+,,29,"					strbuf_add(buf, label, p - label);"
type_conversion,sequencer.c,5635,-,+,,24,"					strbuf_addch(buf, *label);"
type_conversion,sequencer.c,5638,-,+,,47,			} else if (buf->len && buf->buf[buf->len - 1] != '-')
type_conversion,sequencer.c,5648,-,+,,20,		    (buf->len == 1 && *label == '#') ||
type_conversion,sequencer.c,5711,-,+,,28,"	oidmap_init(&commit2todo, 0);"
type_conversion,sequencer.c,5712,-,+,,35,"	oidmap_init(&state.commit2label, 0);"
type_conversion,sequencer.c,5713,-,+,,48,"	hashmap_init(&state.labels, labels_cmp, NULL, 0);"
type_conversion,sequencer.c,5714,-,+,,26,"	strbuf_init(&state.buf, 32);"
type_conversion,sequencer.c,5780,-,+,,27,"			strbuf_add(&label, p1, p2 - p1);"
type_conversion,sequencer.c,5941,-,+,,24,	revs.verbose_header = 1;
type_conversion,sequencer.c,5944,-,+,,21,	revs.cherry_mark = !reapply_cherry_picks;
type_conversion,sequencer.c,5945,-,+,,17,	revs.limited = 1;
type_conversion,sequencer.c,5946,-,+,,17,	revs.reverse = 1;
type_conversion,sequencer.c,5947,-,+,,20,	revs.right_only = 1;
type_conversion,sequencer.c,5949,-,+,,20,	revs.topo_order = 1;
type_conversion,sequencer.c,5951,-,+,,22,	revs.pretty_given = 1;
type_conversion,sequencer.c,6017,-,+,,14,	for (i = 0; i < commands->nr; i++) {
type_conversion,sequencer.c,6026,-,+,,27,		base_items[i].arg_len = command_len;
type_conversion,sequencer.c,6028,-,+,,32,		base_offset += command_len + 1;
type_conversion,sequencer.c,6057,-,+,,7,		if (command == TODO_PICK || command == TODO_MERGE)
type_conversion,sequencer.c,6089,-,+,,7,		if (item->command >= TODO_COMMENT) {
type_conversion,sequencer.c,6098,-,+,,22,"			strbuf_addch(buf, cmd);"
type_conversion,sequencer.c,6108,-,+,,8,			if (item->command == TODO_FIXUP) {
type_conversion,sequencer.c,6109,-,+,,23,				if (item->flags & TODO_EDIT_FIXUP_MSG)
type_conversion,sequencer.c,6111,-,+,,28,				else if (item->flags & TODO_REPLACE_FIXUP_MSG) {
type_conversion,sequencer.c,6116,-,+,,8,			if (item->command == TODO_MERGE) {
type_conversion,sequencer.c,6117,-,+,,23,				if (item->flags & TODO_EDIT_MERGE_MSG)
type_conversion,sequencer.c,6164,-,+,,7,		if (item->command >= TODO_NOOP)
type_conversion,sequencer.c,6166,-,+,,7,		if (item->command != TODO_PICK)
type_conversion,sequencer.c,6184,-,+,,71,"		if (todo_list_write_to_file(r, todo_list, done_path, NULL, NULL, i, 0)) {"
type_conversion,sequencer.c,6257,-,+,,19,		item->arg_len = ctx->buf->len - base_offset;
type_conversion,sequencer.c,6286,-,+,,20,	ctx.items_alloc = 2 * todo_list->nr + 1;
type_conversion,sequencer.c,6320,-,+,,18,	todo_list->nr = ctx.items_nr;
type_conversion,sequencer.c,6321,-,+,,21,	todo_list->alloc = ctx.items_alloc;
type_conversion,sequencer.c,6343,-,+,,18,	if (buf->len == 0) {
type_conversion,sequencer.c,6347,-,+,,74,		item->arg_len = item->arg_offset = item->flags = item->offset_in_buf = 0;
type_conversion,sequencer.c,6389,-,+,,47,"	todo_list_to_strbuf(r, &new_todo, &buf2, -1, 0);"
type_conversion,sequencer.c,6480,-,+,,54,"	hashmap_init(&subject2item, subject2item_cmp, NULL, todo_list->nr);"
type_conversion,sequencer.c,6493,-,+,,24,		if (!item->commit || item->command == TODO_DROP) {
type_conversion,sequencer.c,6534,-,+,,10,"				i2 = *commit_todo_item_at(&commit_todo, commit2)
					- todo_list->items;"
type_conversion,sequencer.c,6552,-,+,,33,				todo_list->items[i].flags = TODO_REPLACE_FIXUP_MSG;
type_conversion,serve.c,169,-,+,,14,	for (i = 0; i < ARRAY_SIZE(capabilities); i++) {
type_conversion,serve.c,200,-,+,,14,	for (i = 0; i < ARRAY_SIZE(capabilities); i++) {
type_conversion,serve.c,209,-,+,,7,		if (*out++ == '=') {
type_conversion,serve.c,264,-,+,,39,"	packet_reader_init(&reader, 0, NULL, 0,"
type_conversion,serve.c,273,-,+,,6,	if (packet_reader_peek(&reader) == PACKET_READ_EOF)
type_conversion,serve.c,277,-,+,,9,	while (state != PROCESS_REQUEST_DONE) {
type_conversion,server-info.c,51,-,+,,24,"		strbuf_vinsertf(cur, 0, fmt, ap);"
type_conversion,server-info.c,55,-,+,,23,"		r = fread(old->buf, 1, cur->len, uic->old_fp);"
type_conversion,server-info.c,56,-,+,,7,"		if (r != cur->len || memcmp(old->buf, cur->buf, r))"
type_conversion,server-info.c,59,-,+,,24,"		if (fwrite(cur->buf, 1, cur->len, uic->cur_fp) == cur->len)"
type_conversion,server-info.c,115,-,+,,17,		if (new_len < 0) {
type_conversion,server-info.c,119,-,+,,30,"		if (fstat(old_fd, &st) || (st.st_size != (size_t)new_len))"
type_conversion,server-info.c,166,-,+,,6,	if (o->type == OBJ_TAG) {
type_conversion,server-info.c,249,-,+,,14,		} else if (line.buf[0] == 'D') {
type_conversion,server-info.c,252,-,+,,14,		} else if (line.buf[0] == 'T') {
type_conversion,server-info.c,296,-,+,,17,	size_t alloc = 0;
type_conversion,setup.c,62,-,+,,7,		if (path[wtlen] == '/') {
type_conversion,setup.c,65,-,+,,27,		} else if (path[wtlen - 1] == '/' || path[wtlen] == '\0') {
type_conversion,setup.c,67,-,+,,46,"			memmove(path, path + wtlen, len - wtlen + 1);"
type_conversion,setup.c,71,-,+,,9,		off = wtlen;
type_conversion,setup.c,79,-,+,,7,		if (*path == '/') {
type_conversion,setup.c,80,-,+,,12,			*path = '\0';
type_conversion,setup.c,83,-,+,,36,"				memmove(path0, path + 1, len - (path - path0));"
type_conversion,setup.c,87,-,+,,12,			*path = '/';
type_conversion,setup.c,94,-,+,,12,		*path0 = '\0';
type_conversion,setup.c,158,-,+,,38,	int len = prefix ? strlen(prefix) : 0;
type_conversion,setup.c,211,-,+,,8,	if (!(arg[0] == ':' && !isalnum(arg[1])))
type_conversion,setup.c,242,-,+,,8,			if (*p == '\\')
type_conversion,setup.c,280,-,+,,6,	if (*arg == '-')
type_conversion,setup.c,296,-,+,,6,	if (*arg == '-')
type_conversion,setup.c,324,-,+,,41,"		if (strbuf_read_file(&data, path.buf, 0) <= 0)"
type_conversion,setup.c,326,-,+,,43,		while (data.len && (data.buf[data.len - 1] == '\n' ||
type_conversion,setup.c,327,-,+,,29,				    data.buf[data.len - 1] == '\r'))
type_conversion,setup.c,329,-,+,,24,		data.buf[data.len] = '\0';
type_conversion,setup.c,364,-,+,,25,"	strbuf_complete(&path, '/');"
type_conversion,setup.c,402,-,+,,24,"	strbuf_complete(path, '/');"
type_conversion,setup.c,804,-,+,,15,		for (i = 0; i < format->unknown_extensions.nr; i++)
type_conversion,setup.c,818,-,+,,15,		for (i = 0; i < format->v1_only_extensions.nr; i++)
type_conversion,setup.c,882,-,+,,19,	if (st.st_size > max_file_size) {
type_conversion,setup.c,891,-,+,,17,	buf = xmallocz(st.st_size);
type_conversion,setup.c,892,-,+,,30,"	len = read_in_full(fd, buf, st.st_size);"
type_conversion,setup.c,902,-,+,,19,	while (buf[len - 1] == '\n' || buf[len - 1] == '\r')
type_conversion,setup.c,904,-,+,,12,	if (len < 9) {
type_conversion,setup.c,908,-,+,,13,	buf[len] = '\0';
type_conversion,setup.c,912,-,+,,20,		size_t pathlen = slash+1 - path;
type_conversion,setup.c,914,-,+,,22,"			      (int)(len - 8), buf + 8);"
type_conversion,setup.c,1048,-,+,,7,		if (offset != cwd->len && !is_absolute_path(gitdir))
type_conversion,setup.c,1059,-,+,,24,"		set_git_dir(gitdir, (offset != cwd->len));"
type_conversion,setup.c,1071,-,+,,6,	if (offset >= cwd->len)
type_conversion,setup.c,1098,-,+,,12,"		gitdir = offset == cwd->len ? ""."" : xmemdupz(cwd->buf, offset);"
type_conversion,setup.c,1106,-,+,,6,	if (offset != cwd->len) {
type_conversion,setup.c,1110,-,+,,22,"		strbuf_setlen(cwd, offset > root_len ? offset : root_len);"
type_conversion,setup.c,1233,-,+,,27,"	strbuf_complete(&report, '\n');"
type_conversion,setup.c,1335,-,+,,25,	dev_t current_device = 0;
type_conversion,setup.c,1362,-,+,,20,	if (min_offset && min_offset == dir->len &&
type_conversion,setup.c,1363,-,+,,18,	    !is_dir_sep(dir->buf[min_offset - 1])) {
type_conversion,setup.c,1383,-,+,,16,"		int offset = dir->len, error_code = 0;"
type_conversion,setup.c,1410,-,+,,22,"		strbuf_setlen(dir, offset);"
type_conversion,setup.c,1441,-,+,,8,			if (get_allowed_bare_repo() == ALLOWED_BARE_REPO_EXPLICIT &&
type_conversion,setup.c,1453,-,+,,48,		while (--offset > ceil_offset && !is_dir_sep(dir->buf[offset]))
type_conversion,setup.c,1458,-,+,,22,"		strbuf_setlen(dir, offset > min_offset ?  offset : min_offset);"
type_conversion,setup.c,1479,-,+,,6,	if (result <= 0) {
type_conversion,setup.c,1553,-,+,,55,"		prefix = setup_discovered_git_dir(gitdir.buf, &cwd, dir.len,"
type_conversion,setup.c,1559,-,+,,37,"		prefix = setup_bare_git_dir(&cwd, dir.len, &repo_fmt, nongit_ok);"
type_conversion,setup.c,1578,-,+,,29,"			strbuf_complete(&report, '\n');"
type_conversion,setup.c,1691,-,+,,10,		return PERM_GROUP;
type_conversion,setup.c,1694,-,+,,10,		return PERM_UMASK;
type_conversion,setup.c,1696,-,+,,10,		return PERM_GROUP;
type_conversion,setup.c,1700,-,+,,10,		return PERM_EVERYBODY;
type_conversion,setup.c,1703,-,+,,6,"	i = strtol(value, &endptr, 8);"
type_conversion,setup.c,1706,-,+,,6,	if (*endptr != 0)
type_conversion,setup.c,1707,-,+,,10,"		return git_config_bool(var, value) ? PERM_GROUP : PERM_UMASK;"
type_conversion,setup.c,1714,-,+,,7,	case PERM_UMASK:               /* 0 */
type_conversion,setup.c,1715,-,+,,10,		return PERM_UMASK;
type_conversion,setup.c,1716,-,+,,7,	case OLD_PERM_GROUP:           /* 1 */
type_conversion,setup.c,1717,-,+,,10,		return PERM_GROUP;
type_conversion,setup.c,1718,-,+,,7,	case OLD_PERM_EVERYBODY:       /* 2 */
type_conversion,setup.c,1719,-,+,,10,		return PERM_EVERYBODY;
type_conversion,setup.c,1887,-,+,,7,		if (de->d_name[0] == '.')
type_conversion,setup.c,1915,-,+,,10,					    st_template.st_size) < 0)
type_conversion,setup.c,1923,-,+,,49,"			if (copy_file(path->buf, template_path->buf, st_template.st_mode))"
type_conversion,setup.c,1947,-,+,,34,"	strbuf_complete(&template_path, '/');"
type_conversion,setup.c,1974,-,+,,25,"	strbuf_complete(&path, '/');"
type_conversion,setup.c,2040,-,+,,73,"	ret = !access(buf.buf, R_OK) || readlink(buf.buf, junk, sizeof(junk) - 1) != -1;"
type_conversion,setup.c,2148,-,+,,7,		if (log_all_ref_updates == LOG_REFS_UNSET)
type_conversion,setup.c,2331,-,+,,39,		else if (get_shared_repository() == PERM_GROUP)
type_conversion,setup.c,2333,-,+,,39,		else if (get_shared_repository() == PERM_EVERYBODY)
type_conversion,setup.c,2342,-,+,,13,		int len = strlen(git_dir);
type_conversion,setup.c,2348,-,+,,27,"			       git_dir, len && git_dir[len-1] != '/' ? ""/"" : """");"
type_conversion,setup.c,2353,-,+,,27,"			       git_dir, len && git_dir[len-1] != '/' ? ""/"" : """");"
type_conversion,setup.h,91,-,+,,6,"	if (discover_git_directory_reason(commondir, gitdir) <= 0)"
type_conversion,sh-i18n--envsubst.c,84,-,+,,20,	  all_variables = 0;
type_conversion,sh-i18n--envsubst.c,128,-,+,,10,  for (; *string != '\0';)
type_conversion,sh-i18n--envsubst.c,129,-,+,,9,    if (*string++ == '$')
type_conversion,sh-i18n--envsubst.c,136,-,+,,6,	if (*string == '{')
type_conversion,sh-i18n--envsubst.c,141,-,+,,7,	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '_')
type_conversion,sh-i18n--envsubst.c,145,-,+,,14,	    while ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')
type_conversion,sh-i18n--envsubst.c,146,-,+,,10,		   || (c >= '0' && c <= '9') || c == '_');
type_conversion,sh-i18n--envsubst.c,149,-,+,,10,	    if (variable_start[-1] == '{')
type_conversion,sh-i18n--envsubst.c,151,-,+,,7,		if (*string == '}')
type_conversion,sh-i18n--envsubst.c,154,-,+,,15,		    valid = 1;
type_conversion,sh-i18n--envsubst.c,157,-,+,,13,		  valid = 0;
type_conversion,sh-i18n--envsubst.c,160,-,+,,16,	      valid = 1;
type_conversion,sh-i18n--envsubst.c,163,-,+,,34,"	      callback (variable_start, variable_end - variable_start);"
type_conversion,sh-i18n--envsubst.c,173,-,+,,29,"  fwrite (var_ptr, var_len, 1, stdout);"
type_conversion,sh-i18n--envsubst.c,201,-,+,,17,  slp->nitems = 0;
type_conversion,sh-i18n--envsubst.c,202,-,+,,21,  slp->nitems_max = 0;
type_conversion,sh-i18n--envsubst.c,212,-,+,,43,      slp->nitems_max = slp->nitems_max * 2 + 4;
type_conversion,sh-i18n--envsubst.c,243,-,+,,8,  j1 = 0;
type_conversion,sh-i18n--envsubst.c,245,-,+,,12,  if (j2 > 0)
type_conversion,sh-i18n--envsubst.c,248,-,+,,24,      while (j2 - j1 > 1)
type_conversion,sh-i18n--envsubst.c,260,-,+,,15,	    j1 = j + 1;
type_conversion,sh-i18n--envsubst.c,331,-,+,,39,	  unsigned short int opening_brace = 0;
type_conversion,sh-i18n--envsubst.c,332,-,+,,39,	  unsigned short int closing_brace = 0;
type_conversion,sh-i18n--envsubst.c,337,-,+,,24,	      opening_brace = 1;
type_conversion,sh-i18n--envsubst.c,345,-,+,,17,	      buflen = 0;
type_conversion,sh-i18n--envsubst.c,350,-,+,,18,		      bufmax = 2 * bufmax + 10;
type_conversion,sh-i18n--envsubst.c,353,-,+,,24,		  buffer[buflen++] = c;
type_conversion,sh-i18n--envsubst.c,364,-,+,,25,		      closing_brace = 1;
type_conversion,sh-i18n--envsubst.c,365,-,+,,17,		      valid = 1;
type_conversion,sh-i18n--envsubst.c,369,-,+,,17,		      valid = 0;
type_conversion,sh-i18n--envsubst.c,375,-,+,,13,		  valid = 1;
type_conversion,sh-i18n--envsubst.c,384,-,+,,18,		      bufmax = 2 * bufmax + 10;
type_conversion,sh-i18n--envsubst.c,387,-,+,,22,		  buffer[buflen] = '\0';
type_conversion,sh-i18n--envsubst.c,392,-,+,,15,		    valid = 0;
type_conversion,sh-i18n--envsubst.c,411,-,+,,29,"		  fwrite (buffer, buflen, 1, stdout);"
type_conversion,sha1.c,1598,-,+,,7,	case 58:
type_conversion,sha1.c,1633,-,+,,7,	case 65:
type_conversion,sha1.c,1736,-,+,,25,		if (ubc_dv_mask[0] != 0)
type_conversion,sha1.c,1738,-,+,,13,			for (i = 0; sha1_dvs[i].dvType != 0; ++i)
type_conversion,sha1.c,1742,-,+,,22,					for (j = 0; j < 80; ++j)
type_conversion,sha1.c,1745,-,+,,30,"					sha1_recompression_step(sha1_dvs[i].testt, ctx->ihv2, ihvtmp, ctx->m2, ctx->states[sha1_dvs[i].testt]);"
type_conversion,sha1.c,1748,-,+,,11,					if ((0 == ((ihvtmp[0] ^ ctx->ihv[0]) | (ihvtmp[1] ^ ctx->ihv[1]) | (ihvtmp[2] ^ ctx->ihv[2]) | (ihvtmp[3] ^ ctx->ihv[3]) | (ihvtmp[4] ^ ctx->ihv[4])))
type_conversion,sha1.c,1749,-,+,,38,						|| (ctx->reduced_round_coll && 0==((ctx->ihv1[0] ^ ctx->ihv2[0]) | (ctx->ihv1[1] ^ ctx->ihv2[1]) | (ctx->ihv1[2] ^ ctx->ihv2[2]) | (ctx->ihv1[3] ^ ctx->ihv2[3]) | (ctx->ihv1[4] ^ ctx->ihv2[4]))))
type_conversion,sha1.c,1769,-,+,,15,	ctx->total = 0;
type_conversion,sha1.c,1770,-,+,,16,	ctx->ihv[0] = 0x67452301;
type_conversion,sha1.c,1773,-,+,,16,	ctx->ihv[3] = 0x10325476;
type_conversion,sha1.c,1825,-,+,,13,	if (len == 0)
type_conversion,sha1.c,1828,-,+,,22,	left = ctx->total & 63;
type_conversion,sha1.c,1829,-,+,,9,	fill = 64 - left;
type_conversion,sha1.c,1831,-,+,,21,	if (left && len >= fill)
type_conversion,sha1.c,1833,-,+,,17,		ctx->total += fill;
type_conversion,sha1.c,1834,-,+,,35,"		memcpy(ctx->buffer + left, buf, fill);"
type_conversion,sha1.c,1837,-,+,,10,		len -= fill;
type_conversion,sha1.c,1838,-,+,,10,		left = 0;
type_conversion,sha1.c,1840,-,+,,16,	while (len >= 64)
type_conversion,sha1.c,1842,-,+,,17,		ctx->total += 64;
type_conversion,sha1.c,1851,-,+,,10,		len -= 64;
type_conversion,sha1.c,1853,-,+,,12,	if (len > 0)
type_conversion,sha1.c,1862,-,+,,2,"	0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
type_conversion,sha1.c,1863,-,+,,2,"	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
type_conversion,sha1.c,1864,-,+,,2,"	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
type_conversion,sha1.c,1865,-,+,,2,"	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
type_conversion,sha1.c,1870,-,+,,31,	uint32_t last = ctx->total & 63;
type_conversion,sha1.c,1871,-,+,,26,	uint32_t padn = (last < 56) ? (56 - last) : (120 - last);
type_conversion,sha1.c,1873,-,+,,49,"	SHA1DCUpdate(ctx, (const char*)(sha1_padding), padn);"
type_conversion,sha1.c,1875,-,+,,23,	total = ctx->total - padn;
type_conversion,sha256.c,11,-,+,,16,	ctx->offset = 0;
type_conversion,sha256.c,12,-,+,,14,	ctx->size = 0;
type_conversion,sha256.c,13,-,+,,18,	ctx->state[0] = 0x6a09e667ul;
type_conversion,sha256.c,14,-,+,,18,	ctx->state[1] = 0xbb67ae85ul;
type_conversion,sha256.c,15,-,+,,18,	ctx->state[2] = 0x3c6ef372ul;
type_conversion,sha256.c,16,-,+,,18,	ctx->state[3] = 0xa54ff53aul;
type_conversion,sha256.c,17,-,+,,18,	ctx->state[4] = 0x510e527ful;
type_conversion,sha256.c,18,-,+,,18,	ctx->state[5] = 0x9b05688cul;
type_conversion,sha256.c,19,-,+,,18,	ctx->state[6] = 0x1f83d9abul;
type_conversion,sha256.c,20,-,+,,18,	ctx->state[7] = 0x5be0cd19ul;
type_conversion,sha256.c,25,-,+,,27,	return (x >> n) | (x << (32 - n));
type_conversion,sha256.c,40,-,+,,16,"	return ror(x, 2) ^ ror(x, 13) ^ ror(x, 22);"
type_conversion,sha256.c,45,-,+,,16,"	return ror(x, 6) ^ ror(x, 11) ^ ror(x, 25);"
type_conversion,sha256.c,50,-,+,,16,"	return ror(x, 7) ^ ror(x, 18) ^ (x >> 3);"
type_conversion,sha256.c,55,-,+,,16,"	return ror(x, 17) ^ ror(x, 19) ^ (x >> 10);"
type_conversion,sha256.c,153,-,+,,37,	unsigned int len_buf = ctx->size & 63;
type_conversion,sha256.c,159,-,+,,23,		unsigned int left = 64 - len_buf;
type_conversion,sha256.c,160,-,+,,13,		if (len < left)
type_conversion,sha256.c,161,-,+,,11,			left = len;
type_conversion,sha256.c,162,-,+,,36,"		memcpy(len_buf + ctx->buf, data, left);"
type_conversion,sha256.c,163,-,+,,32,		len_buf = (len_buf + left) & 63;
type_conversion,sha256.c,164,-,+,,10,		len -= left;
type_conversion,sha256.c,170,-,+,,16,	while (len >= 64) {
type_conversion,sha256.c,173,-,+,,10,		len -= 64;
type_conversion,sha256.c,181,-,+,,41,	static const unsigned char pad[64] = { 0x80 };
type_conversion,sha256.c,189,-,+,,18,	i = ctx->size & 63;
type_conversion,sha256.c,190,-,+,,30,"	blk_SHA256_Update(ctx, pad, 1 + (63 & (55 - i)));"
type_conversion,sha256.c,191,-,+,,33,"	blk_SHA256_Update(ctx, padlen, 8);"
type_conversion,shallow.c,84,-,+,,20,"	while (fgets(buf, sizeof(buf), fp)) {"
type_conversion,shallow.c,141,-,+,,19,	while (commit || i < heads->nr || stack.nr) {
type_conversion,shallow.c,144,-,+,,8,			if (i < heads->nr) {
type_conversion,shallow.c,150,-,+,,20,				if (!commit || commit->object.type != OBJ_COMMIT) {
type_conversion,shallow.c,225,-,+,,21,	clear_object_flags(both_flags);
type_conversion,shallow.c,260,-,+,,10,			if (!(parent->item->object.flags & not_shallow_flag)) {
type_conversion,shallow.c,274,-,+,,8,		if ((o->flags & both_flags) == both_flags)
type_conversion,shallow.c,343,-,+,,14,	for (i = 0; i < extra->nr; i++) {
type_conversion,shallow.c,354,-,+,,64,"	return write_shallow_commits_1(out, use_pack_protocol, extra, 0);"
type_conversion,shallow.c,365,-,+,,49,"		if (write_in_full(temp->fd, sb.buf, sb.len) < 0 ||"
type_conversion,shallow.c,391,-,+,,43,"		if (write_in_full(fd, sb.buf, sb.len) < 0)"
type_conversion,shallow.c,446,-,+,,43,"		if (write_in_full(fd, sb.buf, sb.len) < 0)"
type_conversion,shallow.c,473,-,+,,14,	for (i = 0; i < sa->nr; i++) {
type_conversion,shallow.c,523,-,+,,18,	unsigned size = nr * sizeof(uint32_t);
type_conversion,shallow.c,525,-,+,,27,	if (!info->pool_count || size > info->end - info->free) {
type_conversion,shallow.c,532,-,+,,34,		info->pools[info->pool_count - 1] = info->free;
type_conversion,shallow.c,551,-,+,,49,"	size_t bitmap_size = st_mult(sizeof(uint32_t), bitmap_nr);"
type_conversion,shallow.c,563,-,+,,14,	bitmap[id / 32] |= (1U << (id % 32));
type_conversion,shallow.c,580,-,+,,20,			for (i = 0; i < bitmap_nr; i++)
type_conversion,shallow.c,603,-,+,,11,	for (i = 0; i < nr; i++) {
type_conversion,shallow.c,605,-,+,,12,		if (o && o->type == OBJ_COMMIT)
type_conversion,shallow.c,654,-,+,,18,	for (i = 0; i < info->nr_ours; i++)
type_conversion,shallow.c,656,-,+,,18,	for (i = 0; i < info->nr_theirs; i++)
type_conversion,shallow.c,664,-,+,,11,	for (i = 0; i < nr; i++) {
type_conversion,shallow.c,666,-,+,,13,		if (!o || o->type != OBJ_COMMIT)
type_conversion,shallow.c,674,-,+,,15,	pi.nr_bits = ref->nr;
type_conversion,shallow.c,687,-,+,,18,	for (i = 0; i < nr_shallow; i++) {
type_conversion,shallow.c,693,-,+,,14,	for (i = 0; i < ref->nr; i++)
type_conversion,shallow.c,699,-,+,,19,		for (i = 0; i < nr_shallow; i++) {
type_conversion,shallow.c,704,-,+,,39,"				used[shallow[i]] = xmemdupz(*map, bitmap_size);"
type_conversion,shallow.c,716,-,+,,11,	for (i = 0; i < pi.pool_count; i++)
type_conversion,shallow.c,746,-,+,,18,	for (i = 0; i < nr; i++)
type_conversion,shallow.c,747,-,+,,18,		if (bitmap[i / 32] & (1U << (i % 32)))
type_conversion,shallow.c,779,-,+,,34,"				update_refstatus(ref_status, info->ref->nr, *bitmap);"
type_conversion,shallow.c,805,-,+,,35,"					update_refstatus(ref_status, info->ref->nr, *bitmap);"
type_conversion,shell.c,17,-,+,,42,	if (!arg || !(arg = sq_dequote(arg)) || *arg == '-')
type_conversion,shell.c,32,-,+,,9,"	return cmd[strcspn(cmd, ""./"")] == '\0';"
type_conversion,shell.c,69,-,+,,33,	help_cmd.silent_exec_failure = 1;
type_conversion,shell.c,108,-,+,,13,		if (len > 0 && rawargs[len - 1] == '\n') {
type_conversion,shell.c,109,-,+,,16,			if (--len > 0 && rawargs[len - 1] == '\r')
type_conversion,shell.c,111,-,+,,19,			rawargs[len] = '\0';
type_conversion,shell.c,134,-,+,,30,			cmd.silent_exec_failure = 1;
type_conversion,shell.c,192,-,+,,28,"	if (!strncmp(prog, ""git"", 3) && isspace(prog[3]))"
type_conversion,shell.c,194,-,+,,13,		prog[3] = '-';
type_conversion,shell.c,197,-,+,,13,		int len = strlen(cmd->name);
type_conversion,shell.c,199,-,+,,32,"		if (strncmp(cmd->name, prog, len))"
type_conversion,shell.c,202,-,+,,11,		switch (prog[len]) {
type_conversion,shortlog.c,65,-,+,,45,		item->util = (void *)(UTIL_TO_INT(item) + 1);
type_conversion,shortlog.c,82,-,+,,43,		while (*oneline && isspace(*oneline) && *oneline != '\n')
type_conversion,shortlog.c,102,-,+,,35,"	if (split_ident_line(&ident, in, strlen(in)))"
type_conversion,shortlog.c,107,-,+,,12,	namelen = ident.name_end - ident.name_begin;
type_conversion,shortlog.c,108,-,+,,12,	maillen = ident.mail_end - ident.mail_begin;
type_conversion,shortlog.c,214,-,+,,57,	return HAS_MULTI_BITS(log->groups) || log->format.nr > 1 || log->trailers.nr;
type_conversion,shortlog.c,284,-,+,,15,	if (*endp && *endp != comma)
type_conversion,shortlog.c,334,-,+,,18,		log->groups |= SHORTLOG_GROUP_AUTHOR;
type_conversion,shortlog.c,336,-,+,,18,		log->groups |= SHORTLOG_GROUP_COMMITTER;
type_conversion,shortlog.c,338,-,+,,18,		log->groups |= SHORTLOG_GROUP_TRAILER;
type_conversion,shortlog.c,341,-,+,,18,		log->groups |= SHORTLOG_GROUP_FORMAT;
type_conversion,shortlog.c,344,-,+,,18,		log->groups |= SHORTLOG_GROUP_FORMAT;
type_conversion,shortlog.c,360,-,+,,29,	log->list.strdup_strings = 1;
type_conversion,shortlog.c,364,-,+,,33,	log->trailers.strdup_strings = 1;
type_conversion,shortlog.c,366,-,+,,31,	log->format.strdup_strings = 1;
type_conversion,shortlog.c,371,-,+,,6,	if (log->groups & SHORTLOG_GROUP_AUTHOR)
type_conversion,shortlog.c,374,-,+,,6,	if (log->groups & SHORTLOG_GROUP_COMMITTER)
type_conversion,shortlog.c,411,-,+,,8,			    PARSE_OPT_KEEP_DASHDASH | PARSE_OPT_KEEP_ARGV0);
type_conversion,shortlog.c,443,-,+,,20,	log.user_format = rev.commit_format == CMIT_FMT_USERFORMAT;
type_conversion,shortlog.c,444,-,+,,15,	log.abbrev = rev.abbrev;
type_conversion,shortlog.c,455,-,+,,24,	if (rev.pending.nr == 0) {
type_conversion,shortlog.c,486,-,+,,11,	for (i = 0; i < log->list.nr; i++) {
type_conversion,shortlog.c,495,-,+,,32,			for (j = onelines->nr; j >= 1; j--) {
type_conversion,shortlog.c,496,-,+,,43,				const char *msg = onelines->items[j - 1].string;
type_conversion,shortlog.c,501,-,+,,29,"					fwrite(sb.buf, sb.len, 1, log->file);"
type_conversion,shortlog.c,507,-,+,,31,			onelines->strdup_strings = 1;
type_conversion,shortlog.c,516,-,+,,29,	log->list.strdup_strings = 1;
type_conversion,show-branch.c,64,-,+,,7,		if (commit->object.flags & UNINTERESTING)
type_conversion,show-branch.c,226,-,+,,50,	int all_mask = ((1u << (REV_SHIFT + num_rev)) - 1);
type_conversion,show-branch.c,227,-,+,,17,	int all_revs = all_mask & ~((1u << REV_SHIFT) - 1);
type_conversion,show-branch.c,233,-,+,,15,		int flags = commit->object.flags & all_mask;
type_conversion,show-branch.c,245,-,+,,20,			int this_flag = p->object.flags;
type_conversion,show-branch.c,271,-,+,,10,			if (((c->object.flags & all_revs) != all_revs) &&
type_conversion,show-branch.c,272,-,+,,10,			    !(c->object.flags & UNINTERESTING))
type_conversion,show-branch.c,285,-,+,,11,				if (!(p->object.flags & UNINTERESTING)) {
type_conversion,show-branch.c,338,-,+,,14,	     '0' <= (ch = *p) && ch <= '9';
type_conversion,show-branch.c,340,-,+,,20,		ver = ver * 10 + ch - '0';
type_conversion,show-branch.c,357,-,+,,13,			int ca = *a;
type_conversion,show-branch.c,358,-,+,,13,			int cb = *b;
type_conversion,show-branch.c,464,-,+,,7,		if (*tail++ == '/')
type_conversion,show-branch.c,468,-,+,,41,"	if (wildmatch(match_ref_pattern, tail, 0))"
type_conversion,show-branch.c,507,-,+,,50,	int all_mask = ((1u << (REV_SHIFT + num_rev)) - 1);
type_conversion,show-branch.c,508,-,+,,17,	int all_revs = all_mask & ~((1u << REV_SHIFT) - 1);
type_conversion,show-branch.c,513,-,+,,15,		int flags = commit->object.flags & all_mask;
type_conversion,show-branch.c,603,-,+,,9,	flag = commit->object.flags;
type_conversion,show-branch.c,605,-,+,,7,		if (flag & (1u << (i + REV_SHIFT)))
type_conversion,show-branch.c,623,-,+,,11,"	reflog = strtoul(arg, &ep, 10);"
type_conversion,show-branch.c,624,-,+,,6,"	if (*ep == ',')"
type_conversion,show-branch.c,702,-,+,,8,		ac = default_args.nr;
type_conversion,show-branch.c,741,-,+,,24,		unsigned int flags = 0;
type_conversion,show-branch.c,764,-,+,,43,"		if (!repo_dwim_ref(the_repository, *av, strlen(*av), &oid,"
type_conversion,show-branch.c,771,-,+,,11,"			base = strtoul(reflog_base, &ep, 10);"
type_conversion,show-branch.c,791,-,+,,18,"					ref, flags, 0, base + i, &oid, &logmsg,"
type_conversion,show-branch.c,799,-,+,,12,				*end = '\0';
type_conversion,show-branch.c,801,-,+,,11,"			msg = (*logmsg == '\0') ? ""(none)"" : logmsg;"
type_conversion,show-branch.c,875,-,+,,17,		rev_mask[i] = rev[i]->object.flags;
type_conversion,show-branch.c,932,-,+,,46,	all_mask = ((1u << (REV_SHIFT + num_rev)) - 1);
type_conversion,show-branch.c,933,-,+,,13,	all_revs = all_mask & ~((1u << REV_SHIFT) - 1);
type_conversion,show-branch.c,937,-,+,,19,		int this_flag = commit->object.flags;
type_conversion,show-branch.c,947,-,+,,9,			    (this_flag & (1u << REV_SHIFT)))
type_conversion,show-branch.c,954,-,+,,11,				if (!(this_flag & (1u << (i + REV_SHIFT))))
type_conversion,show-index.c,40,-,+,,23,"	if (fread(top_index, 2 * 4, 1, stdin) != 1)"
type_conversion,show-index.c,44,-,+,,17,		if (version < 2 || version > 2)
type_conversion,show-index.c,46,-,+,,24,"		if (fread(top_index, 256 * 4, 1, stdin) != 1)"
type_conversion,show-index.c,49,-,+,,13,		version = 1;
type_conversion,show-index.c,50,-,+,,28,"		if (fread(&top_index[2], 254 * 4, 1, stdin) != 1)"
type_conversion,show-index.c,53,-,+,,7,	nr = 0;
type_conversion,show-index.c,60,-,+,,17,	if (version == 1) {
type_conversion,show-index.c,61,-,+,,15,		for (i = 0; i < nr; i++) {
type_conversion,show-index.c,64,-,+,,21,"			if (fread(entry, 4 + hashsz, 1, stdin) != 1)"
type_conversion,show-index.c,70,-,+,,23,		unsigned off64_nr = 0;
type_conversion,show-index.c,77,-,+,,15,		for (i = 0; i < nr; i++) {
type_conversion,show-index.c,78,-,+,,35,"			if (fread(entries[i].oid.hash, hashsz, 1, stdin) != 1)"
type_conversion,show-index.c,82,-,+,,15,		for (i = 0; i < nr; i++)
type_conversion,show-index.c,83,-,+,,31,"			if (fread(&entries[i].crc, 4, 1, stdin) != 1)"
type_conversion,show-index.c,85,-,+,,15,		for (i = 0; i < nr; i++)
type_conversion,show-index.c,86,-,+,,31,"			if (fread(&entries[i].off, 4, 1, stdin) != 1)"
type_conversion,show-index.c,88,-,+,,15,		for (i = 0; i < nr; i++) {
type_conversion,show-index.c,92,-,+,,14,				offset = off;
type_conversion,show-index.c,95,-,+,,16,				if ((off & 0x7fffffff) != off64_nr)
type_conversion,show-index.c,97,-,+,,22,"				if (fread(off64, 8, 1, stdin) != 1)"
type_conversion,show-ref.c,75,-,+,,16,		int reflen = strlen(refname);
type_conversion,show-ref.c,78,-,+,,14,			int len = strlen(m);
type_conversion,show-ref.c,81,-,+,,42,"			if (memcmp(m, refname + reflen - len, len))"
type_conversion,show-ref.c,85,-,+,,8,			if (refname[reflen - len - 1] == '/')
type_conversion,show-ref.c,130,-,+,,59,	int patternlen = opts->pattern ? strlen(opts->pattern) : 0;
type_conversion,show-ref.c,134,-,+,,20,"	while (fgets(buf, sizeof(buf), stdin)) {"
type_conversion,show-ref.c,136,-,+,,13,		int len = strlen(buf);
type_conversion,show-ref.c,138,-,+,,18,		if (len > 0 && buf[len - 1] == '\n')
type_conversion,show-ref.c,139,-,+,,17,			buf[--len] = '\0';
type_conversion,show-ref.c,142,-,+,,15,			buf[len] = '\0';
type_conversion,show-ref.c,148,-,+,,17,			int reflen = buf + len - ref;
type_conversion,show-ref.c,151,-,+,,36,"			if (strncmp(ref, opts->pattern, patternlen))"
type_conversion,sideband.c,47,-,+,,14,	for (i = 0; i < ARRAY_SIZE(keywords); i++) {
type_conversion,sideband.c,63,-,+,,14,	for (i = 0; i < ARRAY_SIZE(keywords); i++)
type_conversion,sideband.c,82,-,+,,25,"		strbuf_add(dest, src, n);"
type_conversion,sideband.c,87,-,+,,22,"		strbuf_addch(dest, *src);"
type_conversion,sideband.c,92,-,+,,14,	for (i = 0; i < ARRAY_SIZE(keywords); i++) {
type_conversion,sideband.c,94,-,+,,13,		int len = strlen(p->keyword);
type_conversion,sideband.c,104,-,+,,37,"		if (!strncasecmp(p->keyword, src, len) &&"
type_conversion,sideband.c,107,-,+,,26,"			strbuf_add(dest, src, len);"
type_conversion,sideband.c,115,-,+,,24,"	strbuf_add(dest, src, n);"
type_conversion,sideband.c,141,-,+,,16,	if (status == PACKET_READ_EOF) {
type_conversion,sideband.c,153,-,+,,17,		if (status == PACKET_READ_NORMAL) {
type_conversion,sideband.c,165,+,+,buf[0] & 0xff,9,	band = buf[0] & 0xff;
type_conversion,sideband.c,166,-,+,,13,	buf[len] = '\0';
type_conversion,sideband.c,190,-,+,,18,			int linelen = brk - b;
type_conversion,sideband.c,222,-,+,,26,"			strbuf_addch(scratch, *brk);"
type_conversion,sideband.c,232,-,+,,40,"			maybe_colorize_sideband(scratch, b, strlen(b));"
type_conversion,sideband.c,246,-,+,,22,	if (die_on_error && *sideband_type == SIDEBAND_PROTOCOL_ERROR)
type_conversion,sideband.c,268,-,+,,7,		n = sz;
type_conversion,sideband.c,269,-,+,,7,		if (packet_max - 5 < n)
type_conversion,sideband.c,270,-,+,,8,			n = packet_max - 5;
type_conversion,sideband.c,272,-,+,,44,"			xsnprintf(hdr, sizeof(hdr), ""%04x"", n + 5);"
type_conversion,sideband.c,273,-,+,,13,			hdr[4] = band;
type_conversion,sideband.c,274,-,+,,26,"			write_or_die(fd, hdr, 5);"
type_conversion,sideband.c,276,-,+,,44,"			xsnprintf(hdr, sizeof(hdr), ""%04x"", n + 4);"
type_conversion,sideband.c,277,-,+,,26,"			write_or_die(fd, hdr, 4);"
type_conversion,sideband.c,279,-,+,,23,"		write_or_die(fd, p, n);"
type_conversion,sideband.c,281,-,+,,9,		sz -= n;
type_conversion,skipping.c,65,-,+,,26,	commit->object.flags |= mark | SEEN;
type_conversion,skipping.c,71,-,+,,8,	if (!(mark & COMMON))
type_conversion,skipping.c,82,-,+,,11,	if (o && o->type == OBJ_COMMIT)
type_conversion,skipping.c,161,-,+,,31,"		uint16_t new_original_ttl = entry->ttl
			? entry->original_ttl : entry->original_ttl * 3 / 2 + 1;"
type_conversion,skipping.c,162,-,+,,6,			? entry->original_ttl : entry->original_ttl * 3 / 2 + 1;
type_conversion,skipping.c,163,-,+,,22,"		uint16_t new_ttl = entry->ttl
			? entry->ttl - 1 : new_original_ttl;"
type_conversion,skipping.c,164,-,+,,6,			? entry->ttl - 1 : new_original_ttl;
type_conversion,skipping.c,165,-,+,,7,		if (parent_entry->original_ttl < new_original_ttl) {
type_conversion,sparse-checkout.c,70,-,+,,25,	pl.use_cone_patterns = core_sparse_checkout_cone;
type_conversion,sparse-checkout.c,73,-,+,,74,"	res = add_patterns_from_file_to_list(sparse_filename, """", 0, &pl, NULL, 0);"
type_conversion,sparse-checkout.c,94,-,+,,15,		for (i = 0; i < sl.nr; i++) {
type_conversion,sparse-checkout.c,95,-,+,,52,"			quote_c_style(sl.items[i].string, NULL, stdout, 0);"
type_conversion,sparse-checkout.c,132,-,+,,6,	if (r->index->sparse_index == INDEX_EXPANDED) {
type_conversion,sparse-checkout.c,144,-,+,,25,"	strbuf_complete(&path, '/');"
type_conversion,sparse-checkout.c,153,-,+,,14,	for (i = 0; i < r->index->cache_nr; i++) {
type_conversion,sparse-checkout.c,169,-,+,,16,		dir.flags |= DIR_SHOW_IGNORED_TOO;
type_conversion,sparse-checkout.c,174,-,+,,37,"		parse_pathspec(&p, PATHSPEC_GLOB, 0, NULL, s.v);"
type_conversion,sparse-checkout.c,211,-,+,,10,		return UPDATE_SPARSITY_SUCCESS;
type_conversion,sparse-checkout.c,216,-,+,,21,	o.verbose_update = isatty(2);
type_conversion,sparse-checkout.c,217,-,+,,13,	o.update = 1;
type_conversion,sparse-checkout.c,221,-,+,,27,	o.skip_sparse_checkout = 0;
type_conversion,sparse-checkout.c,231,-,+,,6,	if (result == UPDATE_SPARSITY_WARNINGS)
type_conversion,sparse-checkout.c,237,-,+,,6,	if (result == UPDATE_SPARSITY_SUCCESS)
type_conversion,sparse-checkout.c,245,-,+,,9,	return result;
type_conversion,sparse-checkout.c,257,-,+,,24,"		strbuf_addch(&final, *p);"
type_conversion,sparse-checkout.c,287,-,+,,14,	for (i = 0; i < sl.nr; i++) {
type_conversion,sparse-checkout.c,309,-,+,,14,	for (i = 0; i < sl.nr; i++) {
type_conversion,sparse-checkout.c,375,-,+,,10,					    mode == MODE_CONE_PATTERNS ?
type_conversion,sparse-checkout.c,379,-,+,,6,	if (mode == MODE_NO_PATTERNS)
type_conversion,sparse-checkout.c,407,-,+,,9,	mode = update_cone_mode(cone_mode);
type_conversion,sparse-checkout.c,418,-,+,,44,		the_repository->index->updated_workdir = 1;
type_conversion,sparse-checkout.c,469,-,+,,74,"	res = add_patterns_from_file_to_list(sparse_filename, """", 0, &pl, NULL, 0);"
type_conversion,sparse-checkout.c,498,-,+,,25,	pl.use_cone_patterns = init_opts.cone_mode;
type_conversion,sparse-checkout.c,520,-,+,,12,		newlen = slash - e->pattern;
type_conversion,sparse-checkout.c,543,-,+,,6,	if (line->buf[0] != '/')
type_conversion,sparse-checkout.c,544,-,+,,26,"		strbuf_insertstr(line, 0, ""/"");"
type_conversion,sparse-checkout.c,557,-,+,,62,"		hashmap_init(&pl->recursive_hashmap, pl_hashmap_cmp, NULL, 0);"
type_conversion,sparse-checkout.c,558,-,+,,59,"		hashmap_init(&pl->parent_hashmap, pl_hashmap_cmp, NULL, 0);"
type_conversion,sparse-checkout.c,559,-,+,,27,		pl->use_cone_patterns = 1;
type_conversion,sparse-checkout.c,564,-,+,,9,"				if (line.buf[0] == '""') {"
type_conversion,sparse-checkout.c,579,-,+,,26,"				strbuf_setlen(&line, 0);"
type_conversion,sparse-checkout.c,619,-,+,,31,	existing.use_cone_patterns = core_sparse_checkout_cone;
type_conversion,sparse-checkout.c,622,-,+,,26,"					   &existing, NULL, 0))"
type_conversion,sparse-checkout.c,650,-,+,,19,"					   pl, NULL, 0))"
type_conversion,sparse-checkout.c,661,-,+,,36,"	struct pattern_list *pl = xcalloc(1, sizeof(*pl));"
type_conversion,sparse-checkout.c,706,-,+,,20,		int prefix_len = strlen(prefix);
type_conversion,sparse-checkout.c,720,-,+,,8,			if (argv[i][0] == '/')
type_conversion,sparse-checkout.c,722,-,+,,8,			if (argv[i][0] == '!')
type_conversion,sparse-checkout.c,732,-,+,,44,"		int pos = index_name_pos(index, argv[i], strlen(argv[i]));"
type_conversion,sparse-checkout.c,915,-,+,,60,"	hashmap_init(&pl.recursive_hashmap, pl_hashmap_cmp, NULL, 0);"
type_conversion,sparse-checkout.c,916,-,+,,57,"	hashmap_init(&pl.parent_hashmap, pl_hashmap_cmp, NULL, 0);"
type_conversion,sparse-checkout.c,917,-,+,,25,	pl.use_cone_patterns = 0;
type_conversion,sparse-checkout.c,955,-,+,,27,"		if (!null_terminated && line.buf[0] == '""') {"
type_conversion,sparse-checkout.c,999,-,+,,25,	pl.use_cone_patterns = core_sparse_checkout_cone;
type_conversion,sparse-checkout.c,1007,-,+,,16,"						   NULL, 0))"
type_conversion,sparse-index.c,28,-,+,,68,"	de = make_cache_entry(istate, S_IFDIR, &tree->oid, sparse_dir, 0, 0);"
type_conversion,sparse-index.c,85,-,+,,43,"			pos = cache_tree_subtree_pos(ct, base, slash - base);"
type_conversion,sparse-index.c,93,-,+,,30,"		strbuf_setlen(&child_path, 0);"
type_conversion,sparse-index.c,94,-,+,,56,"		strbuf_add(&child_path, ce->name, slash - ce->name + 1);"
type_conversion,sparse-index.c,122,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,sparse-index.c,182,-,+,,6,	if (istate->sparse_index == INDEX_COLLAPSED || !istate->cache_nr ||
type_conversion,sparse-index.c,211,-,+,,21,"	istate->cache_nr = convert_to_sparse_rec(istate,
						 0, 0, istate->cache_nr,
						 """", 0, istate->cache_tree);"
type_conversion,sparse-index.c,212,-,+,,14,"						 0, 0, istate->cache_nr,"
type_conversion,sparse-index.c,213,-,+,,12,"						 """", 0, istate->cache_tree);"
type_conversion,sparse-index.c,219,-,+,,35,	istate->fsmonitor_has_run_once = 0;
type_conversion,sparse-index.c,265,-,+,,26,"		strbuf_add(base, ""/-"", 2);"
type_conversion,sparse-index.c,267,-,+,,44,"		if (path_matches_pattern_list(base->buf, base->len,"
type_conversion,sparse-index.c,278,-,+,,35,"		strbuf_setlen(base, base->len - 1);"
type_conversion,sparse-index.c,283,-,+,,61,"	ce = make_cache_entry(ctx->write, mode, oid, base->buf, 0, 0);"
type_conversion,sparse-index.c,285,-,+,,30,"	set_index_entry(ctx->write, ctx->write->cache_nr++, ce);"
type_conversion,sparse-index.c,303,-,+,,6,	if (istate->sparse_index == INDEX_EXPANDED)
type_conversion,sparse-index.c,341,-,+,,17,"	full = xcalloc(1, sizeof(struct index_state));"
type_conversion,sparse-index.c,352,-,+,,23,	full->cache_alloc = (3 * istate->cache_alloc) / 2;
type_conversion,sparse-index.c,353,-,+,,19,	full->cache_nr = 0;
type_conversion,sparse-index.c,359,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,sparse-index.c,366,-,+,,26,"			set_index_entry(full, full->cache_nr++, ce);"
type_conversion,sparse-index.c,372,-,+,,43,"		    path_matches_pattern_list(ce->name, ce->ce_namelen,"
type_conversion,sparse-index.c,374,-,+,,27,"					      pl, istate) == NOT_MATCHED) {"
type_conversion,sparse-index.c,375,-,+,,26,"			set_index_entry(full, full->cache_nr++, ce);"
type_conversion,sparse-index.c,387,-,+,,18,		ps.recursive = 1;
type_conversion,sparse-index.c,388,-,+,,21,		ps.has_wildcard = 1;
type_conversion,sparse-index.c,391,-,+,,24,"		strbuf_setlen(&base, 0);"
type_conversion,sparse-index.c,409,-,+,,35,	istate->fsmonitor_has_run_once = 0;
type_conversion,sparse-index.c,480,-,+,,29,	*dir_len = newdir - path + 1;
type_conversion,sparse-index.c,492,-,+,,19,	size_t dir_len = 0;
type_conversion,sparse-index.c,506,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,sparse-index.c,563,-,+,,38,"	if (index_file_exists(istate, path, pathlen, icase))"
type_conversion,sparse-index.c,570,-,+,,15,	substr_len = 0;
type_conversion,sparse-index.c,581,-,+,,14,		*replace = '\0';
type_conversion,sparse-index.c,582,-,+,,16,		substr_len = replace - path_mutable.buf;
type_conversion,sparse-index.c,584,-,+,,11,"				      substr_len, icase)) {"
type_conversion,split-index.c,38,-,+,,8,"	ret = ewah_read_mmap(si->delete_bitmap, data, sz);"
type_conversion,split-index.c,42,-,+,,8,	sz -= ret;
type_conversion,split-index.c,44,-,+,,8,"	ret = ewah_read_mmap(si->replace_bitmap, data, sz);"
type_conversion,split-index.c,47,-,+,,6,	if (ret != sz)
type_conversion,split-index.c,74,-,+,,14,	for (i = 0; i < base->cache_nr; i++)
type_conversion,split-index.c,75,-,+,,27,		base->cache[i]->index = i + 1;
type_conversion,split-index.c,92,-,+,,39,"			mem_pool_init(istate->ce_mem_pool, 0);"
type_conversion,split-index.c,114,-,+,,14,	for (i = 0; i < si->base->cache_nr; i++)
type_conversion,split-index.c,121,-,+,,13,	if (pos >= istate->cache_nr)
type_conversion,split-index.c,134,-,+,,13,	if (pos >= istate->cache_nr)
type_conversion,split-index.c,148,-,+,,21,	src->index = pos + 1;
type_conversion,split-index.c,167,-,+,,24,	istate->cache_alloc = 0;
type_conversion,split-index.c,171,-,+,,21,	si->nr_deletions = 0;
type_conversion,split-index.c,172,-,+,,24,	si->nr_replacements = 0;
type_conversion,split-index.c,199,-,+,,23,	si->saved_cache_nr = 0;
type_conversion,split-index.c,244,-,+,,15,		for (i = 0; i < istate->cache_nr; i++) {
type_conversion,split-index.c,273,-,+,,39,			base = si->base->cache[ce->index - 1];
type_conversion,split-index.c,309,-,+,,17,				ce->index = 0;
type_conversion,split-index.c,350,-,+,,32,			si->base->cache[ce->index - 1] = ce;
type_conversion,split-index.c,352,-,+,,15,		for (i = 0; i < si->base->cache_nr; i++) {
type_conversion,split-index.c,356,-,+,,33,"				ewah_set(si->delete_bitmap, i);"
type_conversion,split-index.c,358,-,+,,34,"				ewah_set(si->replace_bitmap, i);"
type_conversion,split-index.c,364,-,+,,31,				istate->drop_cache_tree = 1;
type_conversion,split-index.c,368,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,split-index.c,385,-,+,,21,	istate->cache_nr = nr_entries;
type_conversion,split-index.c,423,-,+,,57,	    ce == istate->split_index->base->cache[ce->index - 1])
type_conversion,split-index.c,438,-,+,,72,		if (old_entry != istate->split_index->base->cache[new_entry->index - 1])
type_conversion,split-index.c,439,-,+,,76,			discard_cache_entry(istate->split_index->base->cache[new_entry->index - 1]);
type_conversion,split-index.c,440,-,+,,55,		istate->split_index->base->cache[new_entry->index - 1] = new_entry;
type_conversion,split-index.c,473,-,+,,42,			istate->split_index->base->cache_nr = 0;
type_conversion,stable-qsort.c,16,-,+,,11,	if (n <= 1)
type_conversion,stable-qsort.c,19,-,+,,11,	n1 = n / 2;
type_conversion,stable-qsort.c,29,-,+,,14,	while (n1 > 0 && n2 > 0) {
type_conversion,stable-qsort.c,42,-,+,,11,	if (n1 > 0)
type_conversion,stack.c,59,-,+,,45,"	struct reftable_stack *p = reftable_calloc(1, sizeof(*p));"
type_conversion,stack.c,63,-,+,,24,	if (config.hash_id == 0) {
type_conversion,stack.c,89,-,+,,25,"	off_t size = lseek(fd, 0, SEEK_END);"
type_conversion,stack.c,92,-,+,,13,	if (size < 0) {
type_conversion,stack.c,93,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,96,-,+,,18,"	err = lseek(fd, 0, SEEK_SET);"
type_conversion,stack.c,98,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,103,-,+,,28,"	if (read_in_full(fd, buf, size) != size) {"
type_conversion,stack.c,104,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,107,-,+,,14,	buf[size] = 0;
type_conversion,stack.c,109,-,+,,19,"	parse_names(buf, size, namesp);"
type_conversion,stack.c,126,-,+,,10,		return REFTABLE_IO_ERROR;
type_conversion,stack.c,167,-,+,,15,		for (i = 0; i < st->readers_len; i++) {
type_conversion,stack.c,181,-,+,,21,		st->readers_len = 0;
type_conversion,stack.c,199,-,+,,49,"	struct reftable_reader **cur = reftable_calloc(cur_len, sizeof(*cur));"
type_conversion,stack.c,210,-,+,,33,	size_t cur_len = !st->merged ? 0 : st->merged->stack_len;
type_conversion,stack.c,211,-,+,,56,"	struct reftable_reader **cur = stack_copy_readers(st, cur_len);"
type_conversion,stack.c,217,-,+,,27,	size_t new_readers_len = 0;
type_conversion,stack.c,229,-,+,,12,		for (i = 0; reuse_open && i < cur_len; i++) {
type_conversion,stack.c,273,-,+,,20,	new_readers_len = 0;
type_conversion,stack.c,277,-,+,,11,	for (i = 0; i < cur_len; i++) {
type_conversion,stack.c,291,-,+,,11,	for (i = 0; i < new_readers_len; i++) {
type_conversion,stack.c,306,-,+,,14,	int udiff = a->tv_usec - b->tv_usec;
type_conversion,stack.c,308,-,+,,14,	if (diff != 0)
type_conversion,stack.c,309,-,+,,10,		return diff;
type_conversion,stack.c,319,-,+,,18,	int64_t delay = 0;
type_conversion,stack.c,326,-,+,,21,	deadline.tv_sec += 3;
type_conversion,stack.c,346,-,+,,11,				err = REFTABLE_IO_ERROR;
type_conversion,stack.c,360,-,+,,14,		if (err != REFTABLE_NOT_EXIST_ERROR)
type_conversion,stack.c,372,-,+,,10,			err = REFTABLE_NOT_EXIST_ERROR;
type_conversion,stack.c,383,-,+,,28,		delay = delay + (delay * rand()) / RAND_MAX + 1;
type_conversion,stack.c,384,-,+,,18,		sleep_millisec(delay);
type_conversion,stack.c,476,-,+,,11,			return REFTABLE_IO_ERROR;
type_conversion,stack.c,494,-,+,,14,	for (i = 0; i < st->readers_len; i++) {
type_conversion,stack.c,530,-,+,,14,		if (err == REFTABLE_OUTDATED_ERROR) {
type_conversion,stack.c,575,-,+,,10,			err = REFTABLE_LOCK_ERROR;
type_conversion,stack.c,577,-,+,,10,			err = REFTABLE_IO_ERROR;
type_conversion,stack.c,583,-,+,,10,			err = REFTABLE_IO_ERROR;
type_conversion,stack.c,592,-,+,,9,		err = REFTABLE_OUTDATED_ERROR;
type_conversion,stack.c,610,-,+,,11,	for (i = 0; i < add->new_tables_len; i++) {
type_conversion,stack.c,618,-,+,,24,	add->new_tables_len = 0;
type_conversion,stack.c,619,-,+,,24,	add->new_tables_cap = 0;
type_conversion,stack.c,641,-,+,,29,	if (add->new_tables_len == 0)
type_conversion,stack.c,644,-,+,,11,	for (i = 0; i < add->stack->merged->stack_len; i++) {
type_conversion,stack.c,648,-,+,,11,	for (i = 0; i < add->new_tables_len; i++) {
type_conversion,stack.c,653,-,+,,8,"	err = write_in_full(lock_file_fd, table_list.buf, table_list.len);"
type_conversion,stack.c,656,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,665,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,670,-,+,,11,	for (i = 0; i < add->new_tables_len; i++)
type_conversion,stack.c,674,-,+,,24,	add->new_tables_len = 0;
type_conversion,stack.c,675,-,+,,24,	add->new_tables_cap = 0;
type_conversion,stack.c,690,-,+,,25,		if (err < 0 && err != REFTABLE_LOCK_ERROR)
type_conversion,stack.c,756,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,762,-,+,,10,			err = REFTABLE_IO_ERROR;
type_conversion,stack.c,775,-,+,,13,	if (err == REFTABLE_EMPTY_TABLE_ERROR) {
type_conversion,stack.c,784,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,789,-,+,,9,		err = REFTABLE_API_ERROR;
type_conversion,stack.c,803,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,821,-,+,,11,	int sz = st->merged->stack_len;
type_conversion,stack.c,824,-,+,,10,		       1;
type_conversion,stack.c,825,-,+,,9,	return 1;
type_conversion,stack.c,847,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,854,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,888,-,+,,38,	size_t subtabs_len = last - first + 1;
type_conversion,stack.c,890,-,+,,18,"		last - first + 1, sizeof(*subtabs));"
type_conversion,stack.c,895,-,+,,21,	uint64_t entries = 0;
type_conversion,stack.c,898,-,+,,29,"	for (size_t i = first, j = 0; i <= last; i++) {"
type_conversion,stack.c,926,-,+,,16,		if (first == 0 && reftable_ref_record_is_deletion(&ref)) {
type_conversion,stack.c,949,-,+,,16,		if (first == 0 && reftable_log_record_is_deletion(&log)) {
type_conversion,stack.c,953,-,+,,44,		if (config && config->min_update_index > 0 &&
type_conversion,stack.c,958,-,+,,32,		if (config && config->time > 0 &&
type_conversion,stack.c,1019,-,+,,10,			err = REFTABLE_LOCK_ERROR;
type_conversion,stack.c,1021,-,+,,10,			err = REFTABLE_IO_ERROR;
type_conversion,stack.c,1041,-,+,,11,				err = REFTABLE_LOCK_ERROR;
type_conversion,stack.c,1043,-,+,,11,				err = REFTABLE_IO_ERROR;
type_conversion,stack.c,1054,-,+,,10,			err = REFTABLE_IO_ERROR;
type_conversion,stack.c,1066,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,1077,-,+,,14,		if (err != REFTABLE_EMPTY_TABLE_ERROR)
type_conversion,stack.c,1091,-,+,,10,			err = REFTABLE_LOCK_ERROR;
type_conversion,stack.c,1093,-,+,,10,			err = REFTABLE_IO_ERROR;
type_conversion,stack.c,1100,-,+,,10,			err = REFTABLE_IO_ERROR;
type_conversion,stack.c,1117,-,+,,10,			err = REFTABLE_IO_ERROR;
type_conversion,stack.c,1127,-,+,,11,	for (i = 0; i < first; i++)
type_conversion,stack.c,1131,-,+,,18,	for (i = last + 1; i < st->merged->stack_len; i++)
type_conversion,stack.c,1134,-,+,,8,"	err = write_in_full(get_lock_file_fd(&tables_list_lock),
			    tables_list_buf.buf, tables_list_buf.len);"
type_conversion,stack.c,1137,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,1144,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,1151,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,stack.c,1194,-,+,,33,"	return stack_compact_range(st, 0, st->merged->stack_len ?"
type_conversion,stack.c,1195,-,+,,28,"			st->merged->stack_len - 1 : 0, config);"
type_conversion,stack.c,1203,-,+,,13,	if (err == REFTABLE_LOCK_ERROR)
type_conversion,stack.c,1210,-,+,,9,	return s->end - s->start;
type_conversion,stack.c,1215,-,+,,25,	struct segment seg = { 0 };
type_conversion,stack.c,1223,-,+,,11,	if (n <= 1)
type_conversion,stack.c,1249,-,+,,22,	for (i = n - 1; i > 0; i--) {
type_conversion,stack.c,1250,-,+,,17,		if (sizes[i - 1] < sizes[i] * 2) {
type_conversion,stack.c,1251,-,+,,18,			seg.end = i + 1;
type_conversion,stack.c,1272,-,+,,13,	for (; i > 0; i--) {
type_conversion,stack.c,1274,-,+,,22,		bytes += sizes[i - 1];
type_conversion,stack.c,1276,-,+,,17,		if (sizes[i - 1] < curr * 2) {
type_conversion,stack.c,1277,-,+,,20,			seg.start = i - 1;
type_conversion,stack.c,1292,-,+,,14,	for (i = 0; i < st->merged->stack_len; i++) {
type_conversion,stack.c,1293,-,+,,37,		sizes[i] = st->readers[i]->size - overhead;
type_conversion,stack.c,1305,-,+,,61,"		return stack_compact_range_stats(st, seg.start, seg.end - 1,"
type_conversion,stack.c,1362,-,+,,24,	uint64_t update_idx = 0;
type_conversion,stack.c,1393,-,+,,10,		return REFTABLE_IO_ERROR;
type_conversion,stack.c,1402,-,+,,25,		for (i = 0; !found && i < st->readers_len; i++) {
type_conversion,stack_test.c,67,-,+,,40,"	snprintf(template, sizeof(template) - 1, ""%s/stack_test-%d.XXXXXX"","
type_conversion,stack_test.c,90,-,+,,6,"	n = write_in_full(fd, out, strlen(out));"
type_conversion,stack_test.c,109,-,+,,19,"	parse_names(buf, strlen(buf), &names);"
type_conversion,stack_test.c,152,-,+,,19,	int mask = umask(002);
type_conversion,stack_test.c,154,-,+,,26,"		.default_permissions = 0660,"
type_conversion,stack_test.c,160,-,+,,19,"		.update_index = 1,"
type_conversion,stack_test.c,165,-,+,,30,	struct stat stat_result = { 0 };
type_conversion,stack_test.c,207,-,+,,8,	umask(mask);
type_conversion,stack_test.c,212,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stack_test.c,220,-,+,,19,"		.update_index = 1,"
type_conversion,stack_test.c,226,-,+,,19,"		.update_index = 2,"
type_conversion,stack_test.c,261,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stack_test.c,268,-,+,,19,"		.update_index = 1,"
type_conversion,stack_test.c,304,-,+,,39,	struct reftable_write_options cfg = {0};
type_conversion,stack_test.c,328,-,+,,37,		st->config.disable_auto_compact = i != n;
type_conversion,stack_test.c,360,-,+,,19,"		.update_index = 1,"
type_conversion,stack_test.c,362,-,+,,18,"		.value.val1 = {0x01},"
type_conversion,stack_test.c,364,-,+,,39,	struct reftable_write_options cfg = {0};
type_conversion,stack_test.c,385,-,+,,37,"	write_file_buf(table_path.buf, """", 0);"
type_conversion,stack_test.c,387,-,+,,21,	ref.update_index = 2;
type_conversion,stack_test.c,408,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stack_test.c,413,-,+,,19,"		.update_index = 1,"
type_conversion,stack_test.c,419,-,+,,19,"		.update_index = 1,"
type_conversion,stack_test.c,440,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stack_test.c,446,-,+,,20,	for (i = -1; i != REFTABLE_EMPTY_TABLE_ERROR; i--) {
type_conversion,stack_test.c,460,-,+,,24,"		.exact_log_message = 1,"
type_conversion,stack_test.c,461,-,+,,26,"		.default_permissions = 0660,"
type_conversion,stack_test.c,462,-,+,,27,"		.disable_auto_compact = 1,"
type_conversion,stack_test.c,479,-,+,,26,		refs[i].update_index = i + 1;
type_conversion,stack_test.c,484,-,+,,26,		logs[i].update_index = N + i + 1;
type_conversion,stack_test.c,559,-,+,,3,"		0,"
type_conversion,stack_test.c,565,-,+,,19,"		.update_index = 1,"
type_conversion,stack_test.c,569,-,+,,19,"				.new_hash = { 1 },"
type_conversion,stack_test.c,570,-,+,,19,"				.old_hash = { 2 },"
type_conversion,stack_test.c,575,-,+,,19,"		.update_index = 0,"
type_conversion,stack_test.c,579,-,+,,19,"		.update_index = 1,"
type_conversion,stack_test.c,598,-,+,,21,	arg.update_index = 2;
type_conversion,stack_test.c,616,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stack_test.c,633,-,+,,26,		refs[i].update_index = i + 1;
type_conversion,stack_test.c,641,-,+,,26,		logs[i].update_index = 42;
type_conversion,stack_test.c,695,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stack_test.c,703,-,+,,19,"		.update_index = 1,"
type_conversion,stack_test.c,707,-,+,,48,	struct reftable_write_options cfg_default = { 0 };
type_conversion,stack_test.c,737,-,+,,23,"	uint64_t sizes[] = { 512, 64, 17, 16, 9, 9, 9, 16, 2, 16 };"
type_conversion,stack_test.c,746,-,+,,23,"	uint64_t sizes[] = { 64, 32, 16, 8, 4, 2 };"
type_conversion,stack_test.c,756,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stack_test.c,759,-,+,,29,	int N = ARRAY_SIZE(logs) - 1;
type_conversion,stack_test.c,763,-,+,,11,"		.time = 10,"
type_conversion,stack_test.c,776,-,+,,26,		logs[i].update_index = i;
type_conversion,stack_test.c,778,-,+,,31,		logs[i].value.update.time = i;
type_conversion,stack_test.c,804,-,+,,28,	expiry.min_update_index = 15;
type_conversion,stack_test.c,825,-,+,,33,"	reftable_writer_set_limits(wr, 1, 1);"
type_conversion,stack_test.c,831,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stack_test.c,855,-,+,,12,	if (sz == 0)
type_conversion,stack_test.c,857,-,+,,19,	for (; sz; sz /= 2)
type_conversion,stack_test.c,865,-,+,,27,"		.disable_auto_compact = 1,"
type_conversion,stack_test.c,903,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stack_test.c,924,-,+,,37,		st->config.disable_auto_compact = i != n;
type_conversion,stack_test.c,951,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stack_test.c,992,-,+,,9,	for (; i < st->readers_len; i++) {
type_conversion,stack_test.c,995,-,+,,20,	st->readers_len = 0;
type_conversion,stack_test.c,1001,-,+,,40,	struct reftable_write_options cfg = { 0 };
type_conversion,stash.c,220,-,+,,34,"	strbuf_add(&symbolic, revision, end_of_rev - revision);"
type_conversion,stash.c,222,-,+,,52,"	ret = repo_dwim_ref(the_repository, symbolic.buf, symbolic.len,"
type_conversion,stash.c,247,-,+,,28,"			       ref_stash, &obj, 0);"
type_conversion,stash.c,275,-,+,,48,"	repo_read_index_preload(the_repository, NULL, 0);"
type_conversion,stash.c,292,-,+,,15,	opts.merge = 1;
type_conversion,stash.c,293,-,+,,23,	opts.reset = reset ? UNPACK_RESET_PROTECT_UNTRACKED : 0;
type_conversion,stash.c,294,-,+,,16,	opts.update = update;
type_conversion,stash.c,296,-,+,,27,		opts.preserve_ignored = 0; /* FIXME: !overwrite_ignore */
type_conversion,stash.c,299,-,+,,19,"	if (unpack_trees(nr_trees, t, &opts))"
type_conversion,stash.c,317,-,+,,15,	cp.git_cmd = 1;
type_conversion,stash.c,321,-,+,,33,"	return pipe_command(&cp, NULL, 0, out, 0, NULL, 0);"
type_conversion,stash.c,333,-,+,,15,	cp.git_cmd = 1;
type_conversion,stash.c,335,-,+,,53,"	return pipe_command(&cp, out->buf, out->len, NULL, 0, NULL, 0);"
type_conversion,stash.c,346,-,+,,15,	cp.git_cmd = 1;
type_conversion,stash.c,390,-,+,,15,	cp.git_cmd = 1;
type_conversion,stash.c,401,-,+,,15,	cp.git_cmd = 1;
type_conversion,stash.c,430,-,+,,16,	state.force = 1;
type_conversion,stash.c,431,-,+,,16,	state.quiet = 1;
type_conversion,stash.c,432,-,+,,24,	state.refresh_cache = 1;
type_conversion,stash.c,441,-,+,,30,	diff_opts.flags.recursive = 1;
type_conversion,stash.c,458,-,+,,10,				     strlen(p->two->path));
type_conversion,stash.c,508,-,+,,12,"					      p->one->mode,"
type_conversion,stash.c,511,-,+,,15,"					      0, 0);"
type_conversion,stash.c,537,-,+,,48,"	repo_read_index_preload(the_repository, NULL, 0);"
type_conversion,stash.c,538,-,+,,66,"	if (repo_refresh_and_write_index(the_repository, REFRESH_QUIET, 0, 0,"
type_conversion,stash.c,640,-,+,,16,		cp.git_cmd = 1;
type_conversion,stash.c,697,-,+,,7,"			   EXPIRE_REFLOGS_REWRITE | EXPIRE_REFLOGS_UPDATE_REF,"
type_conversion,stash.c,802,-,+,,15,	cp.git_cmd = 1;
type_conversion,stash.c,831,-,+,,15,	cp.git_cmd = 1;
type_conversion,stash.c,867,-,+,,50,	struct unpack_trees_options unpack_tree_opt = { 0 };
type_conversion,stash.c,870,-,+,,14,	for (i = 0; i < ARRAY_SIZE(oid); i++) {
type_conversion,stash.c,881,-,+,,26,	unpack_tree_opt.merge = 1;
type_conversion,stash.c,919,-,+,,9,			     PARSE_OPT_KEEP_ARGV0 | PARSE_OPT_KEEP_UNKNOWN_OPT |
type_conversion,stash.c,920,-,+,,9,			     PARSE_OPT_KEEP_DASHDASH);
type_conversion,stash.c,924,-,+,,7,		if (argv[i][0] != '-')
type_conversion,stash.c,930,-,+,,28,"	if (get_stash_info(&info, stash_args.nr, stash_args.v))"
type_conversion,stash.c,937,-,+,,26,	if (revision_args.nr == 1) {
type_conversion,stash.c,950,-,+,,25,"	argc = setup_revisions(revision_args.nr, revision_args.v, &rev, NULL);"
type_conversion,stash.c,958,-,+,,32,	rev.diffopt.flags.recursive = 1;
type_conversion,stash.c,1113,-,+,,28,	rev.diffopt.flags.quick = 1;
type_conversion,stash.c,1114,-,+,,40,	rev.diffopt.flags.ignore_submodules = 1;
type_conversion,stash.c,1115,-,+,,15,	rev.abbrev = 0;
type_conversion,stash.c,1126,-,+,,23,"	run_diff_files(&rev, 0);"
type_conversion,stash.c,1163,-,+,,25,	cp_upd_index.git_cmd = 1;
type_conversion,stash.c,1170,-,+,,62,"	if (pipe_command(&cp_upd_index, files.buf, files.len, NULL, 0,"
type_conversion,stash.c,1171,-,+,,11,"			 NULL, 0)) {"
type_conversion,stash.c,1208,-,+,,25,	cp_diff_tree.git_cmd = 1;
type_conversion,stash.c,1211,-,+,,40,"	if (pipe_command(&cp_diff_tree, NULL, 0, out_patch, 0, NULL, 0)) {"
type_conversion,stash.c,1238,-,+,,25,	cp_read_tree.git_cmd = 1;
type_conversion,stash.c,1269,-,+,,25,	cp_diff_tree.git_cmd = 1;
type_conversion,stash.c,1272,-,+,,40,"	if (pipe_command(&cp_diff_tree, NULL, 0, out_patch, 0, NULL, 0)) {"
type_conversion,stash.c,1311,-,+,,69,"	if (repo_read_index_preload(the_repository, &rev.diffopt.pathspec, 0) < 0) {"
type_conversion,stash.c,1318,-,+,,23,"	run_diff_index(&rev, 0);"
type_conversion,stash.c,1320,-,+,,25,	cp_upd_index.git_cmd = 1;
type_conversion,stash.c,1328,-,+,,11,"			 NULL, 0, NULL, 0)) {"
type_conversion,stash.c,1366,-,+,,48,"	repo_read_index_preload(the_repository, NULL, 0);"
type_conversion,stash.c,1367,-,+,,66,"	if (repo_refresh_and_write_index(the_repository, REFRESH_QUIET, 0, 0,"
type_conversion,stash.c,1454,-,+,,33,"		strbuf_insertf(stash_msg_buf, 0, ""On %s: "", branch_name);"
type_conversion,stash.c,1493,-,+,,53,"	strbuf_join_argv(&stash_msg_buf, argc - 1, ++argv, ' ');"
type_conversion,stash.c,1539,-,+,,48,"	repo_read_index_preload(the_repository, NULL, 0);"
type_conversion,stash.c,1542,-,+,,30,"		char *ps_matched = xcalloc(ps->nr, 1);"
type_conversion,stash.c,1546,-,+,,15,		for (i = 0; i < the_repository->index->cache_nr; i++)
type_conversion,stash.c,1559,-,+,,66,"	if (repo_refresh_and_write_index(the_repository, REFRESH_QUIET, 0, 0,"
type_conversion,stash.c,1601,-,+,,17,			cp.git_cmd = 1;
type_conversion,stash.c,1624,-,+,,21,			cp_add.git_cmd = 1;
type_conversion,stash.c,1637,-,+,,22,			cp_diff.git_cmd = 1;
type_conversion,stash.c,1642,-,+,,37,"			if (pipe_command(&cp_diff, NULL, 0, &out, 0, NULL, 0)) {"
type_conversion,stash.c,1647,-,+,,23,			cp_apply.git_cmd = 1;
type_conversion,stash.c,1650,-,+,,56,"			if (pipe_command(&cp_apply, out.buf, out.len, NULL, 0,"
type_conversion,stash.c,1651,-,+,,13,"					 NULL, 0)) {"
type_conversion,stash.c,1657,-,+,,17,			cp.git_cmd = 1;
type_conversion,stash.c,1670,-,+,,17,			cp.git_cmd = 1;
type_conversion,stash.c,1686,-,+,,16,		cp.git_cmd = 1;
type_conversion,stash.c,1689,-,+,,53,"		if (pipe_command(&cp, patch.buf, patch.len, NULL, 0, NULL, 0)) {"
type_conversion,stash.c,1700,-,+,,17,			cp.git_cmd = 1;
type_conversion,stash.c,1771,-,+,,22,"	parse_pathspec(&ps, 0, PATHSPEC_PREFER_FULL | PATHSPEC_PREFIX_ORIGIN,"
type_conversion,stash.c,1784,-,+,,28,"		parse_pathspec_file(&ps, 0,"
type_conversion,stash.c,1835,-,+,,60,"		stash_msg = strbuf_join_argv(&stash_msg_buf, argc, argv, ' ');"
type_conversion,stash.c,1869,-,+,,9,			     PARSE_OPT_SUBCOMMAND_OPTIONAL |
type_conversion,stash.c,1870,-,+,,9,			     PARSE_OPT_KEEP_UNKNOWN_OPT |
type_conversion,stash.c,1871,-,+,,9,			     PARSE_OPT_KEEP_DASHDASH);
type_conversion,stash.c,1888,-,+,,22,
type_conversion,statinfo.c,9,-,+,,25,	unsigned int sd_size = st_size;
type_conversion,statinfo.c,27,-,+,,15,	sd->sd_dev = st->st_dev;
type_conversion,statinfo.c,28,-,+,,15,	sd->sd_ino = st->st_ino;
type_conversion,statinfo.c,36,-,+,,17,	st->st_ctime = sd->sd_ctime.sec;
type_conversion,statinfo.c,37,-,+,,17,	st->st_mtime = sd->sd_mtime.sec;
type_conversion,statinfo.c,45,-,+,,24,	st->st_ctim.tv_nsec = sd->sd_ctime.nsec;
type_conversion,statinfo.c,46,-,+,,24,	st->st_mtim.tv_nsec = sd->sd_mtime.nsec;
type_conversion,statinfo.c,54,-,+,,15,	st->st_dev = sd->sd_dev;
type_conversion,statinfo.c,55,-,+,,15,	st->st_ino = sd->sd_ino;
type_conversion,statinfo.c,58,-,+,,16,	st->st_size = sd->sd_size;
type_conversion,strbuf.c,14,-,+,,12,		else if (*str != *prefix)
type_conversion,strbuf.c,33,-,+,,26,		else if (str == end || *str != *prefix)
type_conversion,strbuf.c,52,-,+,,6,	if (*p != '=')
type_conversion,strbuf.c,79,-,+,,19,"		strbuf_init(sb, 0);"
type_conversion,strbuf.c,86,-,+,,18,"	strbuf_grow(sb, 0);"
type_conversion,strbuf.c,90,-,+,,18,"	strbuf_init(sb, 0);"
type_conversion,strbuf.c,100,-,+,,18,"	strbuf_grow(sb, 0);"
type_conversion,strbuf.c,101,-,+,,21,	sb->buf[sb->len] = '\0';
type_conversion,strbuf.c,114,-,+,,16,		sb->buf[0] = '\0';
type_conversion,strbuf.c,125,-,+,,19,	while (sb->len > 0 && isspace((unsigned char)sb->buf[sb->len - 1]))
type_conversion,strbuf.c,127,-,+,,21,	sb->buf[sb->len] = '\0';
type_conversion,strbuf.c,132,-,+,,19,	while (sb->len > 0 && is_dir_sep((unsigned char)sb->buf[sb->len - 1]))
type_conversion,strbuf.c,134,-,+,,21,	sb->buf[sb->len] = '\0';
type_conversion,strbuf.c,139,-,+,,16,	if (sb->len > 0 && sb->buf[sb->len - 1] == '\n') {
type_conversion,strbuf.c,140,-,+,,19,		if (--sb->len > 0 && sb->buf[sb->len - 1] == '\r')
type_conversion,strbuf.c,142,-,+,,22,		sb->buf[sb->len] = '\0';
type_conversion,strbuf.c,149,-,+,,19,	while (sb->len > 0 && isspace(*b)) {
type_conversion,strbuf.c,154,-,+,,21,	sb->buf[sb->len] = '\0';
type_conversion,strbuf.c,184,-,+,,14,"	size_t nr = 0, alloc = 0;"
type_conversion,strbuf.c,188,-,+,,13,		int len = slen;
type_conversion,strbuf.c,189,-,+,,24,		if (max <= 0 || nr + 1 < max) {
type_conversion,strbuf.c,192,-,+,,23,				len = end - str + 1;
type_conversion,strbuf.c,195,-,+,,18,"		strbuf_init(t, len);"
type_conversion,strbuf.c,196,-,+,,22,"		strbuf_add(t, str, len);"
type_conversion,strbuf.c,200,-,+,,11,		slen -= len;
type_conversion,strbuf.c,265,-,+,,25,"	strbuf_splice(sb, pos, 0, data, len);"
type_conversion,strbuf.c,277,-,+,,37,"	len = vsnprintf(sb->buf + sb->len, 0, fmt, cp);"
type_conversion,strbuf.c,285,-,+,,18,"	strbuf_grow(sb, len);"
type_conversion,strbuf.c,288,-,+,,23,	save = sb->buf[pos + len];
type_conversion,strbuf.c,289,-,+,,34,"	len2 = vsnprintf(sb->buf + pos, len + 1, fmt, ap);"
type_conversion,strbuf.c,290,-,+,,16,	sb->buf[pos + len] = save;
type_conversion,strbuf.c,293,-,+,,30,"	strbuf_setlen(sb, sb->len + len);"
type_conversion,strbuf.c,306,-,+,,34,"	strbuf_splice(sb, pos, len, """", 0);"
type_conversion,strbuf.c,331,-,+,,21,"		strbuf_addch(buf, delim);"
type_conversion,strbuf.c,363,-,+,,29,		if (space_after_prefix && buf[0] != '\n' && buf[0] != '\t')
type_conversion,strbuf.c,365,-,+,,24,"		strbuf_add(out, buf, next - buf);"
type_conversion,strbuf.c,366,-,+,,11,		size -= next - buf;
type_conversion,strbuf.c,383,-,+,,53,	int incomplete_line = sb->len && sb->buf[sb->len - 1] != '\n';
type_conversion,strbuf.c,391,-,+,,24,		sb->buf[--sb->len] = '\0';
type_conversion,strbuf.c,402,-,+,,19,"		strbuf_grow(sb, 64);"
type_conversion,strbuf.c,408,-,+,,6,	if (len > strbuf_avail(sb)) {
type_conversion,strbuf.c,409,-,+,,19,"		strbuf_grow(sb, len);"
type_conversion,strbuf.c,411,-,+,,7,		if (len > strbuf_avail(sb))
type_conversion,strbuf.c,414,-,+,,30,"	strbuf_setlen(sb, sb->len + len);"
type_conversion,strbuf.c,422,-,+,,25,"	strbuf_add(sb, format, percent - format);"
type_conversion,strbuf.c,433,-,+,,10,	switch (placeholder[0]) {
type_conversion,strbuf.c,436,-,+,,10,		return 1;
type_conversion,strbuf.c,441,-,+,,11,			return 0;
type_conversion,strbuf.c,443,-,+,,10,		return 3;
type_conversion,strbuf.c,445,-,+,,9,	return 0;
type_conversion,strbuf.c,452,-,+,,6,	if (*format != '(')
type_conversion,strbuf.c,465,-,+,,36,"	    command, (int)(end - format + 1), format);"
type_conversion,strbuf.c,472,-,+,,11,	for (i = 0; i < len; i++) {
type_conversion,strbuf.c,473,-,+,,7,		if (src->buf[i] == '%')
type_conversion,strbuf.c,475,-,+,,21,"		strbuf_addch(dst, src->buf[i]);"
type_conversion,strbuf.c,485,-,+,,11,	for (i = 0; i < len; i++) {
type_conversion,strbuf.c,486,-,+,,22,		unsigned char ch = src[i];
type_conversion,strbuf.c,487,-,+,,7,		if (ch <= 0x1F || ch >= 0x7F ||
type_conversion,strbuf.c,488,-,+,,8,		    (ch == '/' && (flags & STRBUF_ENCODE_SLASH)) ||
type_conversion,strbuf.c,489,-,+,,32,"		    strchr(URL_UNSAFE_CHARS, ch))"
type_conversion,strbuf.c,490,-,+,,31,"			strbuf_addf(dst, ""%%%02X"", (unsigned char)ch);"
type_conversion,strbuf.c,492,-,+,,22,"			strbuf_addch(dst, ch);"
type_conversion,strbuf.c,502,-,+,,33,"	res = fread(sb->buf + sb->len, 1, size, f);"
type_conversion,strbuf.c,503,-,+,,12,	if (res > 0)
type_conversion,strbuf.c,505,-,+,,23,	else if (oldalloc == 0)
type_conversion,strbuf.c,515,-,+,,32,"	strbuf_grow(sb, hint ? hint : 8192);"
type_conversion,strbuf.c,517,-,+,,40,		ssize_t want = sb->alloc - sb->len - 1;
type_conversion,strbuf.c,518,-,+,,53,"		ssize_t got = read_in_full(fd, sb->buf + sb->len, want);"
type_conversion,strbuf.c,520,-,+,,13,		if (got < 0) {
type_conversion,strbuf.c,521,-,+,,20,			if (oldalloc == 0)
type_conversion,strbuf.c,525,-,+,,11,			return -1;
type_conversion,strbuf.c,527,-,+,,14,		sb->len += got;
type_conversion,strbuf.c,530,-,+,,19,"		strbuf_grow(sb, 8192);"
type_conversion,strbuf.c,533,-,+,,21,	sb->buf[sb->len] = '\0';
type_conversion,strbuf.c,534,-,+,,9,	return sb->len - oldlen;
type_conversion,strbuf.c,542,-,+,,32,"	strbuf_grow(sb, hint ? hint : 8192);"
type_conversion,strbuf.c,543,-,+,,59,"	cnt = xread(fd, sb->buf + sb->len, sb->alloc - sb->len - 1);"
type_conversion,strbuf.c,544,-,+,,12,	if (cnt > 0)
type_conversion,strbuf.c,545,-,+,,31,"		strbuf_setlen(sb, sb->len + cnt);"
type_conversion,strbuf.c,546,-,+,,23,	else if (oldalloc == 0)
type_conversion,strbuf.c,553,-,+,,35,"	return sb->len ? fwrite(sb->buf, 1, sb->len, f) : 0;"
type_conversion,strbuf.c,562,-,+,,13,	if (hint < 32)
type_conversion,strbuf.c,563,-,+,,10,		hint = 32;
type_conversion,strbuf.c,570,-,+,,13,		if (len < 0) {
type_conversion,strbuf.c,573,-,+,,14,		} else if (len < hint) {
type_conversion,strbuf.c,574,-,+,,22,"			strbuf_setlen(sb, len);"
type_conversion,strbuf.c,579,-,+,,11,		hint *= 2;
type_conversion,strbuf.c,581,-,+,,18,	if (oldalloc == 0)
type_conversion,strbuf.c,589,-,+,,23,	size_t guessed_len = 128;
type_conversion,strbuf.c,591,-,+,,25,	for (;; guessed_len *= 2) {
type_conversion,strbuf.c,611,-,+,,18,	if (oldalloc == 0)
type_conversion,strbuf.c,634,-,+,,10,	if (r > 0) {
type_conversion,strbuf.c,635,-,+,,13,		sb->len = r;
type_conversion,strbuf.c,660,-,+,,19,"		strbuf_init(sb, 0);"
type_conversion,strbuf.c,705,-,+,,24,	if (sb->buf[sb->len - 1] == term)
type_conversion,strbuf.c,706,-,+,,31,"		strbuf_setlen(sb, sb->len - 1);"
type_conversion,strbuf.c,714,-,+,,40,	if (term == '\n' && sb->buf[sb->len - 1] == '\n') {
type_conversion,strbuf.c,715,-,+,,31,"		strbuf_setlen(sb, sb->len - 1);"
type_conversion,strbuf.c,716,-,+,,36,		if (sb->len && sb->buf[sb->len - 1] == '\r')
type_conversion,strbuf.c,717,-,+,,32,"			strbuf_setlen(sb, sb->len - 1);"
type_conversion,strbuf.c,743,-,+,,32,"		ssize_t len = xread(fd, &ch, 1);"
type_conversion,strbuf.c,744,-,+,,14,		if (len <= 0)
type_conversion,strbuf.c,746,-,+,,20,"		strbuf_addch(sb, ch);"
type_conversion,strbuf.c,747,-,+,,7,		if (ch == term)
type_conversion,strbuf.c,761,-,+,,10,		return -1;
type_conversion,strbuf.c,765,-,+,,12,	if (len < 0) {
type_conversion,strbuf.c,767,-,+,,10,		return -1;
type_conversion,strbuf.c,785,-,+,,11,		switch (*s) {
type_conversion,strbuf.c,812,-,+,,21,"			strbuf_addch(sb, ch);"
type_conversion,strbuf.c,814,-,+,,30,"			strbuf_addf(sb, ""%%%02x"", (unsigned char)ch);"
type_conversion,strbuf.c,827,-,+,,14,	if (bytes > 1 << 30) {
type_conversion,strbuf.c,835,-,+,,27,			    (unsigned)(bytes & ((1 << 30) - 1)) / 10737419);
type_conversion,strbuf.c,836,-,+,,21,	} else if (bytes > 1 << 20) {
type_conversion,strbuf.c,837,-,+,,24,		unsigned x = bytes + 5243;  /* for rounding */
type_conversion,strbuf.c,844,-,+,,23,"			    x >> 20, ((x & ((1 << 20) - 1)) * 100) >> 20);"
type_conversion,strbuf.c,845,-,+,,21,	} else if (bytes > 1 << 10) {
type_conversion,strbuf.c,846,-,+,,24,		unsigned x = bytes + 5;  /* for rounding */
type_conversion,strbuf.c,853,-,+,,23,"			    x >> 10, ((x & ((1 << 10) - 1)) * 100) >> 10);"
type_conversion,strbuf.c,858,-,+,,32,"					Q_(""%u byte"", ""%u bytes"", bytes) :"
type_conversion,strbuf.c,860,-,+,,36,"					Q_(""%u byte/s"", ""%u bytes/s"", bytes),"
type_conversion,strbuf.c,906,-,+,,11,	for (i = 0; i < len; i++)
type_conversion,strbuf.c,918,-,+,,11,	for (i = 0; i < len; i++)
type_conversion,strbuf.c,946,-,+,,16,	size_t hint = 128;
type_conversion,strbuf.c,967,-,+,,9,				    3600 * (tz_offset / 100) -
type_conversion,strbuf.c,968,-,+,,9,				    60 * (tz_offset % 100));
type_conversion,strbuf.c,991,-,+,,12,			hint *= 2;
type_conversion,strbuf.c,1010,-,+,,32,		unsigned char c = line[len - 1];
type_conversion,strbuf.c,1036,-,+,,19,	size_t empties = 0;
type_conversion,strbuf.c,1041,-,+,,18,"	strbuf_grow(sb, 1);"
type_conversion,strbuf.c,1043,-,+,,15,"	for (i = j = 0; i < sb->len; i += len, j += newlen) {"
type_conversion,strbuf.c,1045,-,+,,37,		len = eol ? eol - (sb->buf + i) + 1 : sb->len - i;
type_conversion,strbuf.c,1049,-,+,,13,			newlen = 0;
type_conversion,strbuf.c,1056,-,+,,18,			if (empties > 0 && j > 0)
type_conversion,strbuf.c,1057,-,+,,20,				sb->buf[j++] = '\n';
type_conversion,strbuf.c,1058,-,+,,14,			empties = 0;
type_conversion,strbuf.c,1060,-,+,,28,			sb->buf[newlen + j++] = '\n';
type_conversion,strbuf.c,1072,-,+,,52,
type_conversion,strbuf.h,145,-,+,,43,	return sb->alloc ? sb->alloc - sb->len - 1 : 0;
type_conversion,strbuf.h,166,-,+,,37,	if (len > (sb->alloc ? sb->alloc - 1 : 0))
type_conversion,strbuf.h,170,-,+,,18,		sb->buf[len] = '\0';
type_conversion,strbuf.h,235,-,+,,19,"		strbuf_grow(sb, 1);"
type_conversion,strbuf.h,236,-,+,,23,	sb->buf[sb->len++] = c;
type_conversion,strbuf.h,237,-,+,,21,	sb->buf[sb->len] = '\0';
type_conversion,strbuf.h,626,-,+,,35,	if (sb->len && sb->buf[sb->len - 1] != term)
type_conversion,strbuf.h,627,-,+,,20,"		strbuf_addch(sb, term);"
type_conversion,strbuf.h,632,-,+,,22,"	strbuf_complete(sb, '\n');"
type_conversion,strbuf.h,709,-,+,,9,"	return strip_suffix(str, suffix, &len);"
type_conversion,streaming.c,73,-,+,,6,	if (st->z_state == z_used)
type_conversion,streaming.c,94,-,+,,18,	size_t filled = 0;
type_conversion,streaming.c,99,-,+,,21,			size_t to_move = fs->o_end - fs->o_ptr;
type_conversion,streaming.c,112,-,+,,21,			size_t to_feed = fs->i_end - fs->i_ptr;
type_conversion,streaming.c,117,-,+,,12,				return -1;
type_conversion,streaming.c,118,-,+,,16,			fs->i_ptr = fs->i_end - to_feed;
type_conversion,streaming.c,129,-,+,,12,				return -1;
type_conversion,streaming.c,141,-,+,,12,				return -1;
type_conversion,streaming.c,147,-,+,,9,	return filled;
type_conversion,streaming.c,163,+,+,ifs->size = -1,14,	ifs->size = -1; /* unknown */
type_conversion,streaming.c,175,-,+,,22,	size_t total_read = 0;
type_conversion,streaming.c,179,-,+,,10,		return 0;
type_conversion,streaming.c,181,-,+,,10,		return -1;
type_conversion,streaming.c,187,-,+,,20,		size_t to_copy = st->u.loose.hdr_avail - st->u.loose.hdr_used;
type_conversion,streaming.c,202,-,+,,16,		total_read = st->z.next_out - (unsigned char *)buf;
type_conversion,streaming.c,212,-,+,,11,			return -1;
type_conversion,streaming.c,215,-,+,,9,	return total_read;
type_conversion,streaming.c,245,-,+,,54,"	if (parse_loose_header(st->u.loose.hdr, &oi) < 0 || *type < 0)"
type_conversion,streaming.c,248,-,+,,51,	st->u.loose.hdr_used = strlen(st->u.loose.hdr) + 1;
type_conversion,streaming.c,249,-,+,,26,	st->u.loose.hdr_avail = st->z.total_out;
type_conversion,streaming.c,271,-,+,,22,	size_t total_read = 0;
type_conversion,streaming.c,280,-,+,,10,		return 0;
type_conversion,streaming.c,282,-,+,,10,		return -1;
type_conversion,streaming.c,301,-,+,,16,		total_read = st->z.next_out - (unsigned char *)buf;
type_conversion,streaming.c,321,-,+,,11,			return -1;
type_conversion,streaming.c,324,-,+,,9,	return total_read;
type_conversion,streaming.c,388,-,+,,9,	return read_size;
type_conversion,streaming.c,396,-,+,,26,	st->u.incore.read_ptr = 0;
type_conversion,streaming.c,422,-,+,,49,"	status = oid_object_info_extended(r, oid, &oi, 0);"
type_conversion,streaming.c,501,-,+,,17,	ssize_t kept = 0;
type_conversion,streaming.c,510,-,+,,6,	if (type != OBJ_BLOB)
type_conversion,streaming.c,517,-,+,,17,		if (readlen < 0)
type_conversion,streaming.c,521,-,+,,34,		if (can_seek && sizeof(buf) == readlen) {
type_conversion,streaming.c,522,-,+,,18,			for (holeto = 0; holeto < readlen; holeto++)
type_conversion,streaming.c,534,-,+,,11,			kept = 0;
type_conversion,streaming.c,535,-,+,,34,"		wrote = write_in_full(fd, buf, readlen);"
type_conversion,streaming.c,537,-,+,,15,		if (wrote < 0)
type_conversion,streaming.c,540,-,+,,32,"	if (kept && (lseek(fd, kept - 1, SEEK_CUR) == (off_t) -1 ||"
type_conversion,streaming.c,541,-,+,,23,"		     xwrite(fd, """", 1) != 1))"
type_conversion,string-list.c,21,-,+,,25,"	int left = -1, right = list->nr;"
type_conversion,string-list.c,51,-,+,,6,	if (index < list->nr)
type_conversion,string-list.c,116,-,+,,17,	if (list->nr > 1) {
type_conversion,string-list.c,119,-,+,,23,		for (src = dst = 1; src < list->nr; src++) {
type_conversion,string-list.c,128,-,+,,14,		list->nr = dst;
type_conversion,string-list.c,136,-,+,,14,	for (i = 0; i < list->nr; i++)
type_conversion,string-list.c,146,-,+,,16,	for (src = 0; src < list->nr; src++) {
type_conversion,string-list.c,156,-,+,,13,	list->nr = dst;
type_conversion,string-list.c,161,-,+,,9,	return *item->string != '\0';
type_conversion,string-list.c,174,-,+,,16,			for (i = 0; i < list->nr; i++)
type_conversion,string-list.c,178,-,+,,16,			for (i = 0; i < list->nr; i++)
type_conversion,string-list.c,184,-,+,,27,	list->nr = list->alloc = 0;
type_conversion,string-list.c,192,-,+,,16,			for (i = 0; i < list->nr; i++)
type_conversion,string-list.c,196,-,+,,16,			for (i = 0; i < list->nr; i++)
type_conversion,string-list.c,202,-,+,,27,	list->nr = list->alloc = 0;
type_conversion,string-list.c,281,-,+,,40,	list->items[i] = list->items[list->nr-1];
type_conversion,string-list.c,302,-,+,,47,"			string_list_append_nodup(list, xmemdupz(p, end - p));"
type_conversion,string-list.c,328,-,+,,11,			*end = '\0';
type_conversion,stripspace.c,52,-,+,,6,	if (mode == STRIP_COMMENTS || mode == COMMENT_LINES) {
type_conversion,stripspace.c,57,-,+,,27,"	if (strbuf_read(&buf, 0, 1024) < 0)"
type_conversion,stripspace.c,60,-,+,,6,	if (mode == STRIP_DEFAULT || mode == STRIP_COMMENTS)
type_conversion,stripspace.c,62,-,+,,6,			  mode == STRIP_COMMENTS ? comment_line_str : NULL);
type_conversion,strlcpy.c,8,-,+,,39,		size_t len = (ret >= size) ? size - 1 : ret;
type_conversion,strlcpy.c,10,-,+,,15,		dest[len] = '\0';
type_conversion,strmap.c,36,-,+,,50,"	hashmap_init(&map->map, cmp_strmap_entry, NULL, 0);"
type_conversion,strmap.c,38,-,+,,24,	map->strdup_strings = strdup_strings;
type_conversion,strmap.c,90,-,+,,37,"			size_t len = st_add(strlen(str), 1); /* include NUL */"
type_conversion,strmap.c,161,-,+,,27,"		strintmap_set(map, str, map->default_value + amt);"
type_conversion,strmap.h,105,-,+,,33,	return strmap_get_size(map) == 0;
type_conversion,strmap.h,190,-,+,,9,	return (intptr_t)result->value;
type_conversion,strvec.c,26,-,+,,30,	return array->v[array->nr - 1];
type_conversion,strvec.c,39,-,+,,30,	return array->v[array->nr - 1];
type_conversion,strvec.c,63,-,+,,36,	free((char *)array->v[array->nr - 1]);
type_conversion,strvec.c,64,-,+,,23,	array->v[array->nr - 1] = NULL;
type_conversion,strvec.c,80,-,+,,47,"		strvec_push_nodup(array, xstrndup(to_split, p - to_split));"
type_conversion,strvec.c,92,-,+,,15,		for (i = 0; i < array->nr; i++)
type_conversion,strvec.c,102,-,+,,18,"		return xcalloc(1, sizeof(const char *));"
type_conversion,sub-process.c,60,-,+,,33,	entry->process.clean_on_exit = 0;
type_conversion,sub-process.c,89,-,+,,23,	process->use_shell = 1;
type_conversion,sub-process.c,92,-,+,,27,	process->clean_on_exit = 1;
type_conversion,submodule--helper.c,163,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule--helper.c,164,-,+,,18,		cp.no_stderr = 1;
type_conversion,submodule--helper.c,170,-,+,,34,"		if (!capture_command(&cp, &sb, 0)) {"
type_conversion,submodule--helper.c,199,-,+,,27,"	parse_pathspec(pathspec, 0,"
type_conversion,submodule--helper.c,204,-,+,,24,"		ps_matched = xcalloc(pathspec->nr, 1);"
type_conversion,submodule--helper.c,209,-,+,,14,	for (i = 0; i < the_repository->index->cache_nr; i++) {
type_conversion,submodule--helper.c,219,-,+,,10,		while (i + 1 < the_repository->index->cache_nr &&
type_conversion,submodule--helper.c,270,-,+,,38,	if (!is_dir_sep(path[strlen(path) - 1]))
type_conversion,submodule--helper.c,327,-,+,,17,	cp.use_shell = 1;
type_conversion,submodule--helper.c,375,-,+,,17,		cpr.git_cmd = 1;
type_conversion,submodule--helper.c,439,-,+,,32,"	return path_match_flags(path, PATH_MATCH_STARTS_WITH_DOT_SLASH |"
type_conversion,submodule--helper.c,440,-,+,,5,				PATH_MATCH_XPLATFORM);
type_conversion,submodule--helper.c,445,-,+,,32,"	return path_match_flags(path, PATH_MATCH_STARTS_WITH_DOT_DOT_SLASH |"
type_conversion,submodule--helper.c,446,-,+,,5,				PATH_MATCH_XPLATFORM);
type_conversion,submodule--helper.c,520,-,+,,6,	    sub->update_strategy.type != SM_UPDATE_UNSPECIFIED) {
type_conversion,submodule--helper.c,521,-,+,,7,		if (sub->update_strategy.type == SM_UPDATE_COMMAND) {
type_conversion,submodule--helper.c,600,-,+,,20,"	printf(""%c%s %s"", state, oid_to_hex(oid), displaypath);"
type_conversion,submodule--helper.c,602,-,+,,6,	if (state == ' ' || state == '+') {
type_conversion,submodule--helper.c,636,-,+,,33,"		.free_removed_argv_elements = 1,"
type_conversion,submodule--helper.c,649,-,+,,23,"		print_status(flags, 'U', path, null_oid(), displaypath);"
type_conversion,submodule--helper.c,660,-,+,,23,"		print_status(flags, '-', path, ce_oid, displaypath);"
type_conversion,submodule--helper.c,673,-,+,,15,	rev.abbrev = 0;
type_conversion,submodule--helper.c,674,-,+,,18,"	setup_revisions(diff_files_args.nr, diff_files_args.v, &rev, &opt);"
type_conversion,submodule--helper.c,675,-,+,,23,"	run_diff_files(&rev, 0);"
type_conversion,submodule--helper.c,678,-,+,,23,"		print_status(flags, ' ', path, ce_oid,"
type_conversion,submodule--helper.c,685,-,+,,24,"			print_status(flags, '-', path, ce_oid, displaypath);"
type_conversion,submodule--helper.c,692,-,+,,23,"		print_status(flags, '+', path, &oid, displaypath);"
type_conversion,submodule--helper.c,694,-,+,,23,"		print_status(flags, '+', path, ce_oid, displaypath);"
type_conversion,submodule--helper.c,700,-,+,,17,		cpr.git_cmd = 1;
type_conversion,submodule--helper.c,829,-,+,,25,	cp_rev_parse.git_cmd = 1;
type_conversion,submodule--helper.c,836,-,+,,46,"	if (capture_command(&cp_rev_parse, &result, 0))"
type_conversion,submodule--helper.c,848,-,+,,6,	if (p->status == 'T') {
type_conversion,submodule--helper.c,870,-,+,,20,		cp_log.git_cmd = 1;
type_conversion,submodule--helper.c,916,-,+,,22,"				     p->sm_path, 0))"
type_conversion,submodule--helper.c,926,-,+,,7,		if (p->status != 'D')
type_conversion,submodule--helper.c,937,-,+,,51,"			src_abbrev = xstrndup(oid_to_hex(&p->oid_src), 7);"
type_conversion,submodule--helper.c,946,-,+,,50,"		src_abbrev = xstrndup(oid_to_hex(&p->oid_src), 7);"
type_conversion,submodule--helper.c,960,-,+,,51,"			dst_abbrev = xstrndup(oid_to_hex(&p->oid_dst), 7);"
type_conversion,submodule--helper.c,969,-,+,,50,"		dst_abbrev = xstrndup(oid_to_hex(&p->oid_dst), 7);"
type_conversion,submodule--helper.c,989,-,+,,25,		cp_rev_list.git_cmd = 1;
type_conversion,submodule--helper.c,993,-,+,,52,"		if (!capture_command(&cp_rev_list, &sb_rev_list, 0))"
type_conversion,submodule--helper.c,1035,-,+,,7,		if (p->status == 'D' || p->status == 'T') {
type_conversion,submodule--helper.c,1040,-,+,,27,		if (info->for_status && p->status != 'A' &&
type_conversion,submodule--helper.c,1080,-,+,,19,		temp->mod_src = p->one->mode;
type_conversion,submodule--helper.c,1081,-,+,,19,		temp->mod_dst = p->two->mode;
type_conversion,submodule--helper.c,1108,-,+,,33,"		.free_removed_argv_elements = 1,"
type_conversion,submodule--helper.c,1125,-,+,,15,	rev.abbrev = 0;
type_conversion,submodule--helper.c,1126,-,+,,25,"	precompose_argv_prefix(diff_args.nr, diff_args.v, NULL);"
type_conversion,submodule--helper.c,1127,-,+,,18,"	setup_revisions(diff_args.nr, diff_args.v, &rev, &opt);"
type_conversion,submodule--helper.c,1133,-,+,,7,		if (diff_cmd == DIFF_INDEX)
type_conversion,submodule--helper.c,1135,-,+,,70,"		if (repo_read_index_preload(the_repository, &rev.diffopt.pathspec, 0) < 0) {"
type_conversion,submodule--helper.c,1146,-,+,,6,	if (diff_cmd == DIFF_INDEX)
type_conversion,submodule--helper.c,1149,-,+,,24,"		run_diff_files(&rev, 0);"
type_conversion,submodule--helper.c,1216,-,+,,16,	info.cached = !!cached;
type_conversion,submodule--helper.c,1217,-,+,,15,	info.files = !!files;
type_conversion,submodule--helper.c,1218,-,+,,20,	info.for_status = !!for_status;
type_conversion,submodule--helper.c,1221,-,+,,37,"	ret = compute_summary_module_list((diff_cmd == DIFF_INDEX) ? &head_oid : NULL,"
type_conversion,submodule--helper.c,1301,-,+,,17,		cpr.git_cmd = 1;
type_conversion,submodule--helper.c,1421,-,+,,20,			cp_rm.git_cmd = 1;
type_conversion,submodule--helper.c,1446,-,+,,18,"	if (mkdir(path, 0777))"
type_conversion,submodule--helper.c,1450,-,+,,22,	cp_config.git_cmd = 1;
type_conversion,submodule--helper.c,1455,-,+,,47,"	if (!capture_command(&cp_config, &sb_config, 0) && sb_config.len) {"
type_conversion,submodule--helper.c,1725,-,+,,7,		if (safe_create_leading_directories_const(sm_gitdir) < 0)
type_conversion,submodule--helper.c,1762,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule--helper.c,1764,-,+,,17,		cp.no_stdin = 1;
type_conversion,submodule--helper.c,1783,-,+,,7,		if (safe_create_leading_directories_const(clone_data_path) < 0)
type_conversion,submodule--helper.c,1882,-,+,,26,	clone_data.dissociate = !!dissociate;
type_conversion,submodule--helper.c,1883,-,+,,21,	clone_data.quiet = !!quiet;
type_conversion,submodule--helper.c,1884,-,+,,24,	clone_data.progress = !!progress;
type_conversion,submodule--helper.c,1885,-,+,,28,	clone_data.require_init = !!require_init;
type_conversion,submodule--helper.c,1919,-,+,,13,	} else if (sub->update_strategy.type != SM_UPDATE_UNSPECIFIED) {
type_conversion,submodule--helper.c,1920,-,+,,7,		if (sub->update_strategy.type == SM_UPDATE_COMMAND)
type_conversion,submodule--helper.c,1928,-,+,,7,	    (out->type == SM_UPDATE_MERGE ||
type_conversion,submodule--helper.c,1929,-,+,,7,	     out->type == SM_UPDATE_REBASE ||
type_conversion,submodule--helper.c,1930,-,+,,7,	     out->type == SM_UPDATE_NONE))
type_conversion,submodule--helper.c,2076,-,+,,6,	if (suc->update_data->update_strategy.type == SM_UPDATE_NONE
type_conversion,submodule--helper.c,2077,-,+,,10,	    || (suc->update_data->update_strategy.type == SM_UPDATE_UNSPECIFIED
type_conversion,submodule--helper.c,2078,-,+,,6,		&& update_type == SM_UPDATE_NONE)) {
type_conversion,submodule--helper.c,2111,-,+,,56,	suc->update_clone[suc->update_clone_nr].just_cloned = needs_cloning;
type_conversion,submodule--helper.c,2118,-,+,,19,	child->git_cmd = 1;
type_conversion,submodule--helper.c,2119,-,+,,20,	child->no_stdin = 1;
type_conversion,submodule--helper.c,2120,-,+,,28,	child->stdout_to_stderr = 1;
type_conversion,submodule--helper.c,2218,-,+,,19,	suc->quickstop = 1;
type_conversion,submodule--helper.c,2253,-,+,,20,		suc->quickstop = 1;
type_conversion,submodule--helper.c,2277,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule--helper.c,2279,-,+,,17,	cp.no_stderr = 1;
type_conversion,submodule--helper.c,2296,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule--helper.c,2323,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule--helper.c,2329,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule--helper.c,2335,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule--helper.c,2341,-,+,,18,		cp.use_shell = 1;
type_conversion,submodule--helper.c,2417,-,+,,50,"		    fetch_in_submodule(ud->sm_path, ud->depth, ud->quiet, NULL) &&"
type_conversion,submodule--helper.c,2428,-,+,,50,"		    fetch_in_submodule(ud->sm_path, ud->depth, ud->quiet, &ud->oid))"
type_conversion,submodule--helper.c,2560,-,+,,6,	if (update_type != SM_UPDATE_UNSPECIFIED)
type_conversion,submodule--helper.c,2592,-,+,,9,"						  update_data->just_cloned,"
type_conversion,submodule--helper.c,2650,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule--helper.c,2672,-,+,,16,"		.processes = update_data->max_jobs,"
type_conversion,submodule--helper.c,2802,-,+,,14,		opt.init = 1;
type_conversion,submodule--helper.c,2821,-,+,,31,		opt.warn_if_uninitialized = 1;
type_conversion,submodule--helper.c,2891,-,+,,35,	if (!remote || remote->origin == REMOTE_UNCONFIGURED)
type_conversion,submodule--helper.c,3117,-,+,,22,	cp_remote.git_cmd = 1;
type_conversion,submodule--helper.c,3122,-,+,,51,"	if (!capture_command(&cp_remote, &sb_remote_out, 0)) {"
type_conversion,submodule--helper.c,3127,-,+,,17,			size_t len = next_line - line;
type_conversion,submodule--helper.c,3197,-,+,,22,		clone_data.quiet = add_data->quiet;
type_conversion,submodule--helper.c,3198,-,+,,25,		clone_data.progress = add_data->progress;
type_conversion,submodule--helper.c,3204,-,+,,27,		clone_data.dissociate = add_data->dissociate;
type_conversion,submodule--helper.c,3212,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule--helper.c,3259,-,+,,23,	add_submod.git_cmd = 1;
type_conversion,submodule--helper.c,3279,-,+,,27,	add_gitmodules.git_cmd = 1;
type_conversion,submodule--helper.c,3317,-,+,,22,"	parse_pathspec(&ps, 0, PATHSPEC_PREFER_CWD, NULL, args);"
type_conversion,submodule--helper.c,3319,-,+,,52,"	if (repo_read_index_preload(the_repository, NULL, 0) < 0)"
type_conversion,submodule--helper.c,3324,-,+,,30,"		char *ps_matched = xcalloc(ps.nr, 1);"
type_conversion,submodule--helper.c,3333,-,+,,15,		for (i = 0; i < the_repository->index->cache_nr; i++) {
type_conversion,submodule--helper.c,3426,-,+,,24,"	} else if (is_dir_sep(add_data.repo[0]) || strchr(add_data.repo, ':')) {"
type_conversion,submodule--helper.c,3449,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule--helper.c,3450,-,+,,18,		cp.no_stdout = 1;
type_conversion,submodule--helper.c,3453,-,+,,38,"		if ((ret = pipe_command(&cp, NULL, 0, NULL, 0, &sb, 0))) {"
type_conversion,submodule--helper.c,3467,-,+,,19,	add_data.force = !!force;
type_conversion,submodule--helper.c,3468,-,+,,19,	add_data.quiet = !!quiet;
type_conversion,submodule--helper.c,3469,-,+,,22,	add_data.progress = !!progress;
type_conversion,submodule--helper.c,3470,-,+,,24,	add_data.dissociate = !!dissociate;
type_conversion,submodule-config.c,79,-,+,,17,"	return xcalloc(1, sizeof(struct submodule_cache));"
type_conversion,submodule-config.c,84,-,+,,56,"	hashmap_init(&cache->for_path, config_path_cmp, NULL, 0);"
type_conversion,submodule-config.c,85,-,+,,56,"	hashmap_init(&cache->for_name, config_name_cmp, NULL, 0);"
type_conversion,submodule-config.c,86,-,+,,23,	cache->initialized = 1;
type_conversion,submodule-config.c,117,-,+,,23,	cache->initialized = 0;
type_conversion,submodule-config.c,118,-,+,,27,	cache->gitmodules_read = 0;
type_conversion,submodule-config.c,222,-,+,,28,		if (is_xplatform_dir_sep(c)) {
type_conversion,submodule-config.c,224,-,+,,8,			if (name[0] == '.' && name[1] == '.' &&
type_conversion,submodule-config.c,225,-,+,,42,			    (!name[2] || is_xplatform_dir_sep(name[2])))
type_conversion,submodule-config.c,235,-,+,,32,"	return path_match_flags(path, PATH_MATCH_STARTS_WITH_DOT_SLASH |"
type_conversion,submodule-config.c,236,-,+,,5,				PATH_MATCH_XPLATFORM);
type_conversion,submodule-config.c,241,-,+,,32,"	return path_match_flags(path, PATH_MATCH_STARTS_WITH_DOT_DOT_SLASH |"
type_conversion,submodule-config.c,242,-,+,,5,				PATH_MATCH_XPLATFORM);
type_conversion,submodule-config.c,348,-,+,,8,		    (*next == ':' || *next == '/'))
type_conversion,submodule-config.c,430,-,+,,10,		return RECURSE_SUBMODULES_ON;
type_conversion,submodule-config.c,432,-,+,,10,		return RECURSE_SUBMODULES_OFF;
type_conversion,submodule-config.c,435,-,+,,11,			return RECURSE_SUBMODULES_ON_DEMAND;
type_conversion,submodule-config.c,443,-,+,,11,			return RECURSE_SUBMODULES_ERROR;
type_conversion,submodule-config.c,474,-,+,,8,		*v = RECURSE_SUBMODULES_OFF;
type_conversion,submodule-config.c,479,-,+,,9,			*v = RECURSE_SUBMODULES_ON;
type_conversion,submodule-config.c,489,-,+,,10,		return RECURSE_SUBMODULES_ON;
type_conversion,submodule-config.c,491,-,+,,10,		return RECURSE_SUBMODULES_OFF;
type_conversion,submodule-config.c,495,-,+,,10,		return RECURSE_SUBMODULES_ERROR;
type_conversion,submodule-config.c,513,-,+,,11,			return RECURSE_SUBMODULES_ERROR;
type_conversion,submodule-config.c,515,-,+,,10,		return RECURSE_SUBMODULES_OFF;
type_conversion,submodule-config.c,518,-,+,,11,			return RECURSE_SUBMODULES_ON_DEMAND;
type_conversion,submodule-config.c,520,-,+,,11,			return RECURSE_SUBMODULES_CHECK;
type_conversion,submodule-config.c,522,-,+,,11,			return RECURSE_SUBMODULES_ONLY;
type_conversion,submodule-config.c,530,-,+,,11,			return RECURSE_SUBMODULES_ERROR;
type_conversion,submodule-config.c,605,-,+,,7,		    submodule->fetch_recurse != RECURSE_SUBMODULES_NONE)
type_conversion,submodule-config.c,644,-,+,,5,			 submodule->update_strategy.type != SM_UPDATE_UNSPECIFIED)
type_conversion,submodule-config.c,649,-,+,,5,			 submodule->update_strategy.type == SM_UPDATE_COMMAND)
type_conversion,submodule-config.c,743,-,+,,17,	if (!config || type != OBJ_BLOB)
type_conversion,submodule-config.c,794,-,+,,4,"			0, .scope = CONFIG_SCOPE_SUBMODULE"
type_conversion,submodule-config.c,796,-,+,,40,		const struct config_options opts = { 0 };
type_conversion,submodule-config.c,848,-,+,,43,	repo->submodule_cache->gitmodules_read = 1;
type_conversion,submodule-config.c,865,-,+,,53,	the_repository->submodule_cache->gitmodules_read = 1;
type_conversion,submodule.c,33,-,+,,47,static int config_update_recurse_submodules = RECURSE_SUBMODULES_OFF;
type_conversion,submodule.c,48,-,+,,26,		if (istate->cache_nr > pos) {  /* there is a .gitmodules */
type_conversion,submodule.c,89,-,+,,21,	if ((pos >= 0) && (pos < istate->cache_nr)) {
type_conversion,submodule.c,92,-,+,,52,"		    ie_modified(istate, istate->cache[pos], &st, 0) & DATA_CHANGED)"
type_conversion,submodule.c,185,-,+,,12,	int ret = added_submodule_odb_paths.nr;
type_conversion,submodule.c,187,-,+,,14,	for (i = 0; i < added_submodule_odb_paths.nr; i++)
type_conversion,submodule.c,217,-,+,,39,			diffopt->flags.ignore_submodules = 1;
type_conversion,submodule.c,226,-,+,,11,"		int v = git_config_bool(var, value) ?
			RECURSE_SUBMODULES_ON : RECURSE_SUBMODULES_OFF;"
type_conversion,submodule.c,237,-,+,,38,		config_update_recurse_submodules = RECURSE_SUBMODULES_OFF;
type_conversion,submodule.c,245,-,+,,38,		config_update_recurse_submodules = RECURSE_SUBMODULES_ON;
type_conversion,submodule.c,292,-,+,,23,"		parse_pathspec(&ps, 0, 0, NULL, args.v);"
type_conversion,submodule.c,293,-,+,,48,"		ret = match_pathspec(repo->index, &ps, path, strlen(path), 0, NULL, 1);"
type_conversion,submodule.c,337,-,+,,14,	prefixlen = strlen(prefix);
type_conversion,submodule.c,339,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,submodule.c,347,-,+,,33,"		if (strncmp(ce->name, prefix, ce_len))"
type_conversion,submodule.c,349,-,+,,7,		if (prefix[ce_len] != '/')
type_conversion,submodule.c,364,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,submodule.c,376,-,+,,8,			if (item->match[ce_len] != '/')
type_conversion,submodule.c,378,-,+,,39,"			if (strncmp(ce->name, item->match, ce_len))"
type_conversion,submodule.c,399,-,+,,11,	else if (*value == '!')
type_conversion,submodule.c,414,-,+,,6,	if (type == SM_UPDATE_UNSPECIFIED)
type_conversion,submodule.c,418,-,+,,6,	if (type == SM_UPDATE_COMMAND)
type_conversion,submodule.c,446,-,+,,40,	diffopt->flags.ignore_submodule_set = 1;
type_conversion,submodule.c,447,-,+,,37,	diffopt->flags.ignore_submodules = 0;
type_conversion,submodule.c,448,-,+,,50,	diffopt->flags.ignore_untracked_in_submodules = 0;
type_conversion,submodule.c,449,-,+,,43,	diffopt->flags.ignore_dirty_submodules = 0;
type_conversion,submodule.c,452,-,+,,38,		diffopt->flags.ignore_submodules = 1;
type_conversion,submodule.c,454,-,+,,51,		diffopt->flags.ignore_untracked_in_submodules = 1;
type_conversion,submodule.c,456,-,+,,44,		diffopt->flags.ignore_dirty_submodules = 1;
type_conversion,submodule.c,474,-,+,,20,	rev->left_right = 1;
type_conversion,submodule.c,475,-,+,,27,	rev->first_parent_only = 1;
type_conversion,submodule.c,497,-,+,,22,"		strbuf_setlen(&sb, 0);"
type_conversion,submodule.c,659,-,+,,27,"	clear_commit_marks(left, ~0);"
type_conversion,submodule.c,660,-,+,,28,"	clear_commit_marks(right, ~0);"
type_conversion,submodule.c,692,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule.c,695,-,+,,16,	cp.no_stdin = 1;
type_conversion,submodule.c,740,-,+,,46,"		diff_emit_submodule_pipethrough(o, sb.buf, sb.len);"
type_conversion,submodule.c,749,-,+,,28,"		clear_commit_marks(left, ~0);"
type_conversion,submodule.c,751,-,+,,29,"		clear_commit_marks(right, ~0);"
type_conversion,submodule.c,760,-,+,,45,	return config_update_recurse_submodules == RECURSE_SUBMODULES_ON;
type_conversion,submodule.c,889,-,+,,25,"			item->util = xcalloc(1, sizeof(struct changed_submodule_data));"
type_conversion,submodule.c,912,-,+,,22,"		.assume_dashdash = 1,"
type_conversion,submodule.c,918,-,+,,18,"	setup_revisions(argv->nr, argv->v, &rev, &s_r_opt);"
type_conversion,submodule.c,934,-,+,,36,		diff_rev.dense_combined_merges = 1;
type_conversion,submodule.c,999,-,+,,44,"		    cb->path, oid_to_hex(oid), type_name(type));"
type_conversion,submodule.c,1037,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule.c,1038,-,+,,17,		cp.no_stdin = 1;
type_conversion,submodule.c,1078,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule.c,1079,-,+,,17,		cp.no_stdin = 1;
type_conversion,submodule.c,1085,-,+,,56,"		if (strbuf_read(&buf, cp.out, the_hash_algo->hexsz + 1))"
type_conversion,submodule.c,1134,-,+,,9,	return needs_pushing->nr;
type_conversion,submodule.c,1165,-,+,,25,		if (remote->origin != REMOTE_UNCONFIGURED) {
type_conversion,submodule.c,1173,-,+,,16,		cp.git_cmd = 1;
type_conversion,submodule.c,1174,-,+,,17,		cp.no_stdin = 1;
type_conversion,submodule.c,1207,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule.c,1208,-,+,,16,	cp.no_stdin = 1;
type_conversion,submodule.c,1209,-,+,,17,	cp.no_stdout = 1;
type_conversion,submodule.c,1241,-,+,,24,	if (remote->origin != REMOTE_UNCONFIGURED) {
type_conversion,submodule.c,1250,-,+,,15,		for (i = 0; i < needs_pushing.nr; i++)
type_conversion,submodule.c,1257,-,+,,14,	for (i = 0; i < needs_pushing.nr; i++) {
type_conversion,submodule.c,1353,-,+,,20,			*name->string = '\0';
type_conversion,submodule.c,1385,-,+,,8,	ret = subs.nr;
type_conversion,submodule.c,1439,-,+,,34,	if (spf->command_line_option != RECURSE_SUBMODULES_DEFAULT)
type_conversion,submodule.c,1446,-,+,,23,		int fetch_recurse = submodule->fetch_recurse;
type_conversion,submodule.c,1453,-,+,,24,		if (fetch_recurse != RECURSE_SUBMODULES_NONE)
type_conversion,submodule.c,1500,-,+,,16,	p->free_sub = 0;
type_conversion,submodule.c,1546,-,+,,20,		task->free_sub = 1;
type_conversion,submodule.c,1555,-,+,,7,	case RECURSE_SUBMODULES_DEFAULT:
type_conversion,submodule.c,1556,-,+,,7,	case RECURSE_SUBMODULES_ON_DEMAND:
type_conversion,submodule.c,1564,-,+,,7,	case RECURSE_SUBMODULES_ON:
type_conversion,submodule.c,1567,-,+,,7,	case RECURSE_SUBMODULES_OFF:
type_conversion,submodule.c,1585,-,+,,9,	for (; spf->index_count < spf->r->index->cache_nr; spf->index_count++) {
type_conversion,submodule.c,1634,-,+,,9,	for (; spf->changed_count < spf->changed_submodule_names.nr;
type_conversion,submodule.c,1712,-,+,,17,		cp->git_cmd = 1;
type_conversion,submodule.c,1734,-,+,,17,		cp->git_cmd = 1;
type_conversion,submodule.c,1773,-,+,,9,	return type != OBJ_COMMIT;
type_conversion,submodule.c,1845,-,+,,16,"		.processes = max_parallel_jobs,"
type_conversion,submodule.c,1866,-,+,,14,	for (i = 0; i < options->nr; i++)
type_conversion,submodule.c,1875,-,+,,39,	if (spf.submodules_with_errors.len > 0)
type_conversion,submodule.c,1891,-,+,,29,	unsigned dirty_submodule = 0;
type_conversion,submodule.c,1907,-,+,,10,		return 0;
type_conversion,submodule.c,1916,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule.c,1917,-,+,,16,	cp.no_stdin = 1;
type_conversion,submodule.c,1926,-,+,,7,		if (buf.buf[0] == '?')
type_conversion,submodule.c,1929,-,+,,7,		if (buf.buf[0] == 'u' ||
type_conversion,submodule.c,1930,-,+,,7,		    buf.buf[0] == '1' ||
type_conversion,submodule.c,1931,-,+,,7,		    buf.buf[0] == '2') {
type_conversion,submodule.c,1937,-,+,,8,			if (buf.buf[5] == 'S' && buf.buf[8] == 'U')
type_conversion,submodule.c,1941,-,+,,8,			if (buf.buf[0] == 'u' ||
type_conversion,submodule.c,1942,-,+,,8,			    buf.buf[0] == '2' ||
type_conversion,submodule.c,1943,-,+,,36,"			    memcmp(buf.buf + 5, ""S..U"", 4))"
type_conversion,submodule.c,1991,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule.c,1992,-,+,,16,	cp.no_stdin = 1;
type_conversion,submodule.c,1993,-,+,,17,	cp.no_stderr = 1;
type_conversion,submodule.c,1994,-,+,,17,	cp.no_stdout = 1;
type_conversion,submodule.c,2037,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule.c,2038,-,+,,16,	cp.no_stdin = 1;
type_conversion,submodule.c,2049,-,+,,34,"	len = strbuf_read(&buf, cp.out, 1024);"
type_conversion,submodule.c,2050,-,+,,12,	if (len > 2)
type_conversion,submodule.c,2091,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule.c,2094,-,+,,16,	cp.no_stdin = 1;
type_conversion,submodule.c,2095,-,+,,17,	cp.no_stdout = 1;
type_conversion,submodule.c,2112,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule.c,2113,-,+,,16,	cp.no_stdin = 1;
type_conversion,submodule.c,2212,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule.c,2213,-,+,,16,	cp.no_stdin = 1;
type_conversion,submodule.c,2244,-,+,,17,			cp.git_cmd = 1;
type_conversion,submodule.c,2245,-,+,,18,			cp.no_stdin = 1;
type_conversion,submodule.c,2279,-,+,,27,	if (len <= suffix_len || (p = git_dir + len - suffix_len)[-1] != '/' ||
type_conversion,submodule.c,2295,-,+,,18,		if (is_dir_sep(*p)) {
type_conversion,submodule.c,2298,-,+,,9,			*p = '\0';
type_conversion,submodule.c,2322,-,+,,19,		if (!is_dir_sep(p[i]))
type_conversion,submodule.c,2326,-,+,,10,		p[i] = '\0';
type_conversion,submodule.c,2375,-,+,,6,	if (safe_create_leading_directories_const(new_gitdir.buf) < 0)
type_conversion,submodule.c,2401,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule.c,2402,-,+,,16,	cp.no_stdin = 1;
type_conversion,submodule.c,2508,-,+,,16,	cp.no_stdin = 1;
type_conversion,submodule.c,2509,-,+,,17,	cp.no_stderr = 1;
type_conversion,submodule.c,2511,-,+,,15,	cp.git_cmd = 1;
type_conversion,submodule.c,2521,-,+,,17,		int cwd_len = strlen(cwd);
type_conversion,submodule.c,2530,-,+,,19,		super_sub_len = strlen(super_sub);
type_conversion,submodule.c,2537,-,+,,39,		super_wt[cwd_len - super_sub_len] = '\0';
type_conversion,submodule.c,2551,-,+,,26,	if (code == 0 && len == 0)
type_conversion,submodule.c,2575,-,+,,23,"	strbuf_complete(buf, '/');"
type_conversion,symlinks.c,21,-,+,,24,	while (i < max_len && name_a[i] == name_b[i]) {
type_conversion,symlinks.c,22,-,+,,7,		if (name_a[i] == '/') {
type_conversion,symlinks.c,32,-,+,,41,	if (i >= max_len && ((len_a > len_b && name_a[len_b] == '/') ||
type_conversion,symlinks.c,33,-,+,,27,			     (len_a < len_b && name_b[len_a] == '/') ||
type_conversion,symlinks.c,100,-,+,,9,"					   cache->path.len, &previous_slash);"
type_conversion,symlinks.c,106,-,+,,21,		if (*ret_flags && match_len == cache->path.len)
type_conversion,symlinks.c,127,-,+,,6,	if (len > cache->path.len)
type_conversion,symlinks.c,128,-,+,,29,"		strbuf_grow(&cache->path, len - cache->path.len);"
type_conversion,symlinks.c,133,-,+,,31,		} while (match_len < len && name[match_len] != '/');
type_conversion,symlinks.c,137,-,+,,33,		cache->path.buf[last_slash] = '\0';
type_conversion,symlinks.c,167,-,+,,33,		cache->path.buf[last_slash] = '\0';
type_conversion,symlinks.c,168,-,+,,21,		cache->path.len = last_slash;
type_conversion,symlinks.c,182,-,+,,37,		cache->path.buf[last_slash_dir] = '\0';
type_conversion,symlinks.c,183,-,+,,21,		cache->path.len = last_slash_dir;
type_conversion,symlinks.c,245,-,+,,31,"		char *path = xmemdupz(name, match_len);"
type_conversion,symlinks.c,283,-,+,,23,	while (removal.len > new_len) {
type_conversion,symlinks.c,284,-,+,,30,		removal.buf[removal.len] = '\0';
type_conversion,symlinks.c,291,-,+,,26,		} while (removal.len > new_len &&
type_conversion,symlinks.c,292,-,+,,5,			 removal.buf[removal.len] != '/');
type_conversion,symlinks.c,294,-,+,,16,	removal.len = new_len;
type_conversion,symlinks.c,306,-,+,,46,"		longest_path_match(name, len, removal.buf, removal.len,"
type_conversion,symlinks.c,310,-,+,,7,		if (name[i] == '/')
type_conversion,symlinks.c,320,-,+,,32,	if (match_len < last_slash && match_len < removal.len)
type_conversion,symlinks.c,327,-,+,,42,"		strbuf_add(&removal, &name[match_len], last_slash - match_len);"
type_conversion,t-mem-pool.c,13,-,+,,16,	size_t size = 100;
type_conversion,t-mem-pool.c,14,-,+,,39,"	char *buffer = mem_pool_calloc(pool, 1, size);"
type_conversion,t-mem-pool.c,15,-,+,,18,	for (size_t i = 0; i < size; i++)
type_conversion,t-prio-queue.c,28,-,+,,18,	for (int i = 0; i < input_size; i++) {
type_conversion,t-strbuf.c,40,-,+,,18,	if (buf->len == 0 && buf->alloc == 0)
type_conversion,t-strbuf.c,59,-,+,,20,"	strbuf_init(&buf, 1024);"
type_conversion,t-strbuf.c,76,-,+,,20,"	strbuf_addch(buf, ch);"
type_conversion,t-trailer.c,14,-,+,,13,	size_t i = 0;
type_conversion,t-trailer.c,42,-,+,,4,"			0,"
type_conversion,t-trailer.c,50,-,+,,4,"			0,"
type_conversion,t-trailer.c,59,-,+,,4,"			3,"
type_conversion,t-trailer.c,88,-,+,,4,"			3,"
type_conversion,t-trailer.c,123,-,+,,4,"			4,"
type_conversion,t-trailer.c,170,-,+,,4,"			2,"
type_conversion,t-trailer.c,203,-,+,,4,"			1,"
type_conversion,t-trailer.c,235,-,+,,4,"			4,"
type_conversion,t-trailer.c,275,-,+,,4,"			0,"
type_conversion,t-trailer.c,298,-,+,,4,"			0,"
type_conversion,t-trailer.c,303,-,+,,18,	for (int i = 0; i < sizeof(tc) / sizeof(tc[0]); i++) {
type_conversion,tag.c,53,-,+,,6,	if (type != OBJ_TAG)
type_conversion,tag.c,55,-,+,,23,	if (filter->lines == -1)
type_conversion,tag.c,56,-,+,,19,		filter->lines = 0;
type_conversion,tag.c,70,-,+,,33,	filter->with_commit_tag_algo = 1;
type_conversion,tag.c,76,-,+,,14,	while (o && o->type == OBJ_TAG)
type_conversion,tag.c,88,-,+,,14,			warnlen = strlen(warn);
type_conversion,tag.c,96,-,+,,14,	while (o && o->type == OBJ_TAG) {
type_conversion,tag.c,98,-,+,,12,		if (o && o->type == OBJ_TAG && ((struct tag *)o)->tagged)
type_conversion,tag.c,110,-,+,,33,	ref_list->items[ref_list->nr - 1].util = oiddup(oid);
type_conversion,tag.c,118,-,+,,23,	while (buf < tail && *buf++ != '>')
type_conversion,tag.c,121,-,+,,10,		return 0;
type_conversion,tag.c,123,-,+,,23,	while (buf < tail && *buf++ != '\n')
type_conversion,tag.c,126,-,+,,10,		return 0;
type_conversion,tag.c,135,-,+,,21,	t->object.parsed = 0;
type_conversion,tag.c,136,-,+,,12,	t->date = 0;
type_conversion,tag.c,148,-,+,,32,"	if (gpg_verify_tag(oid, name, flags))"
type_conversion,tag.c,160,-,+,,36,	if (size < the_hash_algo->hexsz + 24)
type_conversion,tag.c,162,-,+,,32,"	if (memcmp(""object "", bufptr, 7) || parse_oid_hex(bufptr + 7, &oid, &bufptr) || *bufptr++ != '\n')"
type_conversion,tag.c,168,-,+,,28,"	nl = memchr(bufptr, '\n', tail - bufptr);"
type_conversion,tag.c,169,-,+,,29,	if (!nl || sizeof(type) <= (nl - bufptr))
type_conversion,tag.c,171,-,+,,23,"	memcpy(type, bufptr, nl - bufptr);"
type_conversion,tag.c,172,-,+,,22,	type[nl - bufptr] = '\0';
type_conversion,tag.c,198,-,+,,28,"	nl = memchr(bufptr, '\n', tail - bufptr);"
type_conversion,tag.c,201,-,+,,31,"	item->tag = xmemdupz(bufptr, nl - bufptr);"
type_conversion,tag.c,207,-,+,,16,		item->date = 0;
type_conversion,tag.c,209,-,+,,24,	item->object.parsed = 1;
type_conversion,tag.c,227,-,+,,6,	if (type != OBJ_TAG) {
type_conversion,tag.c,252,-,+,,22,	if (!sp || !size || type != OBJ_TAG) {
type_conversion,tag.c,257,-,+,,23,"	write_or_die(fd, sp, buf + size - sp);"
type_conversion,tag.c,270,-,+,,21,"				    compat_oid, 0) < 0)"
type_conversion,tag.c,303,-,+,,6,	if (type <= OBJ_NONE)
type_conversion,tag.c,306,-,+,,6,	if (type == OBJ_TAG)
type_conversion,tag.c,316,-,+,,17,"		    type_name(type),"
type_conversion,tag.c,328,-,+,,25,"			strbuf_complete(buf, '\n');"
type_conversion,tag.c,336,-,+,,8,			if (opt->cleanup_mode == CLEANUP_ALL)
type_conversion,tag.c,358,-,+,,36,"			if (strbuf_read_file(buf, path, 0) < 0)"
type_conversion,tag.c,363,-,+,,6,	if (opt->cleanup_mode != CLEANUP_NONE)
type_conversion,tag.c,365,-,+,,5,		  opt->cleanup_mode == CLEANUP_ALL ? comment_line_str : NULL);
type_conversion,tag.c,370,-,+,,21,"	strbuf_insert(buf, 0, header.buf, header.len);"
type_conversion,tag.c,373,-,+,,28,"	if (build_tag_object(buf, opt->sign, result) < 0) {"
type_conversion,tag.c,407,-,+,,46,"			strbuf_insert(sb, sb->len, subject_start, subject_len);"
type_conversion,tag.c,451,-,+,,6,	if (name[0] == '-')
type_conversion,tag.c,488,-,+,,29,"				PARSE_OPT_OPTARG, NULL, 1 },"
type_conversion,tag.c,522,-,+,,38,"			parse_opt_object_name, (intptr_t) ""HEAD"""
type_conversion,tag.c,545,-,+,,17,	filter.lines = -1;
type_conversion,tag.c,546,+,+,opt.sign = -1,13,	opt.sign = -1;
type_conversion,tag.c,555,-,+,,44,			 filter.points_at.nr || filter.lines != -1)
type_conversion,tag.c,562,+,+,opt.sign == -1,18,	if (opt.sign == -1)
type_conversion,tag.c,563,-,+,,14,		opt.sign = cmdmode ? 0 : config_sign_tag > 0;
type_conversion,tag.c,566,-,+,,14,		opt.sign = 1;
type_conversion,tag.c,576,-,+,,40,	if (cmdmode == 'l' && filter.lines != -1) {
type_conversion,tag.c,579,-,+,,13,		colopts = 0;
type_conversion,tag.c,582,-,+,,42,"	ref_sorting_set_sort_flags_all(sorting, REF_SORTING_ICASE, icase);"
type_conversion,tag.c,583,-,+,,23,	filter.ignore_case = icase;
type_conversion,tag.c,589,-,+,,26,"			if (run_column_filter(colopts, &copts))"
type_conversion,tag.c,598,-,+,,22,	if (filter.lines != -1)
type_conversion,tag.c,630,-,+,,30,"				if (strbuf_read(&buf, 0, 1024) < 0)"
type_conversion,tag.c,633,-,+,,41,"				if (strbuf_read_file(&buf, msgfile, 1024) < 0)"
type_conversion,tag.c,657,-,+,,22,	opt.message_given = msg.given || msgfile;
type_conversion,tag.c,658,-,+,,19,	opt.use_editor = edit_flag;
type_conversion,tag.c,673,-,+,,15,			opt.sign = 1;
type_conversion,tempfile.c,107,-,+,,35,"	strbuf_init(&tempfile->filename, 0);"
type_conversion,terminal.c,37,-,+,,25,"	write_in_full(2, ""\n"", 1);"
type_conversion,terminal.c,148,-,+,,15,		term_fd = ((flags & SAVE_TERM_STDIN)
type_conversion,terminal.c,153,-,+,,28,	term_fd_needs_closing = !(flags & SAVE_TERM_STDIN);
type_conversion,terminal.c,194,-,+,,18,		t.c_cc[VMIN] = 1;
type_conversion,terminal.c,195,-,+,,19,		t.c_cc[VTIME] = 0;
type_conversion,terminal.c,228,-,+,,15,		tv.tv_sec = timeout / 1000;
type_conversion,terminal.c,229,-,+,,16,		tv.tv_usec = (timeout % 1000) * 1000;
type_conversion,terminal.c,502,-,+,,54,"		hashmap_init(&sequences, sequence_entry_cmp, NULL, 0);"
type_conversion,terminal.c,505,-,+,,31,"		if (pipe_command(&cp, NULL, 0, &buf, 0, NULL, 0))"
type_conversion,terminal.c,506,-,+,,24,"			strbuf_setlen(&buf, 0);"
type_conversion,terminal.c,516,-,+,,34,"				char *comma = memchr(p, ',', eol - p);"
type_conversion,terminal.c,519,-,+,,12,				p[0] = '^';
type_conversion,terminal.c,520,-,+,,12,				p[1] = '[';
type_conversion,terminal.c,566,-,+,,33,"		strbuf_splice(buf, buf->len - 1, 1, ""^["", 2);"
type_conversion,test-bloom.c,16,-,+,,15,		for (i = 0; i < settings.num_hashes; i++){
type_conversion,test-bloom.c,33,-,+,,14,	for (i = 0; i < filter->len; i++) {
type_conversion,test-bloom.c,34,-,+,,19,"		printf(""%02x|"", filter->data[i]);"
type_conversion,test-bloom.c,66,-,+,,27,"		hashed = murmur3_seeded(0, argv[2], strlen(argv[2]));"
type_conversion,test-bloom.c,73,-,+,,60,		filter.len =  (settings.bits_per_entry + BITS_PER_WORD - 1) / BITS_PER_WORD;
type_conversion,test-bundle-uri.c,34,-,+,,6,	if (mode == CONFIG_FILE)
type_conversion,test-bundle-uri.c,120,-,+,,9,			     PARSE_OPT_STOP_AT_NON_OPTION |
type_conversion,test-bundle-uri.c,121,-,+,,9,			     PARSE_OPT_KEEP_ARGV0);
type_conversion,test-cache-tree.c,51,-,+,,63,		float f_interval = (float)the_repository->index->cache_nr / invalidate_qty;
type_conversion,test-cache-tree.c,52,+,+,(int)f_interval,18,		int interval = f_interval < 1.0 ? 1 : (int)f_interval;
type_conversion,test-cache-tree.c,53,-,+,,37,		for (i = 0; i < invalidate_qty && i * interval < the_repository->index->cache_nr; i++)
type_conversion,test-chmtime.c,50,-,+,,13,	*set_eq = (*timespec == '=') ? 1 : 0;
type_conversion,test-chmtime.c,53,-,+,,7,		if (*timespec == '+') {
type_conversion,test-chmtime.c,62,-,+,,30,	if ((*set_eq && *set_time < 0) || *set_eq == 2) {
type_conversion,test-chmtime.c,77,-,+,,22,	long int set_time = 0;
type_conversion,test-chmtime.c,129,-,+,,25,		mtime = utb.modtime < 0 ? 0: utb.modtime;
type_conversion,test-config.c,121,-,+,,16,			for (i = 0; i < strptr->nr; i++) {
type_conversion,test-config.c,204,-,+,,16,			for (i = 0; i < strptr->nr; i++) {
type_conversion,test-csprng.c,15,-,+,,52,"	count = (argc == 2) ? strtoul(argv[1], NULL, 0) : -1L;"
type_conversion,test-csprng.c,23,-,+,,26,"		if (fwrite(buf, chunk, 1, stdout) != chunk)"
type_conversion,test-date.c,21,-,+,,14,		time_t t = atoi(*argv);
type_conversion,test-date.c,22,-,+,,22,"		show_date_relative(t, &buf);"
type_conversion,test-date.c,31,-,+,,14,		time_t t = atoi(*argv);
type_conversion,test-date.c,32,-,+,,41,"		printf(""%s -> %s\n"", *argv, show_date(t, 0, DATE_MODE(HUMAN)));"
type_conversion,test-date.c,51,-,+,,10,		while (*arg == ' ')
type_conversion,test-date.c,100,-,+,,19,	double seconds = getnanotime() / 1.0e9;
type_conversion,test-date.c,129,-,+,,33,		return sizeof(timestamp_t) == 8 ? 0 : 1;
type_conversion,test-date.c,131,-,+,,28,		return sizeof(time_t) == 8 ? 0 : 1;
type_conversion,test-delete-gpgsig.c,21,-,+,,23,"	strbuf_read(&buf, 0, 0);"
type_conversion,test-delete-gpgsig.c,25,-,+,,19,"		fwrite(buf.buf, 1, payload_size, stdout);"
type_conversion,test-delete-gpgsig.c,35,-,+,,30,"		eol = memchr(bufptr, '\n', tail - bufptr);"
type_conversion,test-delete-gpgsig.c,40,-,+,,38,		if (deleting && (bufptr < eol) && (bufptr[0] == ' ')) {
type_conversion,test-delete-gpgsig.c,49,-,+,,8,		    (bufptr[plen] == ' ')) {
type_conversion,test-delete-gpgsig.c,56,-,+,,18,"		fwrite(bufptr, 1, (eol - bufptr) + 1, stdout);"
type_conversion,test-delta.c,36,-,+,,14,	from_size = st.st_size;
type_conversion,test-delta.c,38,-,+,,46,"	if (read_in_full(fd, from_buf, from_size) < 0) {"
type_conversion,test-delta.c,50,-,+,,14,	data_size = st.st_size;
type_conversion,test-delta.c,52,-,+,,46,"	if (read_in_full(fd, data_buf, data_size) < 0) {"
type_conversion,test-delta.c,59,-,+,,6,	if (argv[1][1] == 'd')
type_conversion,test-delta.c,62,-,+,,21,"				     &out_size, 0);"
type_conversion,test-delta.c,73,-,+,,55,"	if (fd < 0 || write_in_full(fd, out_buf, out_size) < 0) {"
type_conversion,test-dir-iterator.c,23,-,+,,23,	unsigned int flags = 0;
type_conversion,test-dump-fsmonitor.c,20,-,+,,14,	for (i = 0; i < istate->cache_nr; i++)
type_conversion,test-dump-split-index.c,29,-,+,,14,	for (i = 0; i < the_repository->index->cache_nr; i++) {
type_conversion,test-dump-untracked-cache.c,27,-,+,,8,	len = base->len;
type_conversion,test-dump-untracked-cache.c,38,-,+,,14,	for (i = 0; i < ucd->untracked_nr; i++)
type_conversion,test-dump-untracked-cache.c,40,-,+,,14,	for (i = 0; i < ucd->dirs_nr; i++)
type_conversion,test-dump-untracked-cache.c,42,-,+,,22,"	strbuf_setlen(base, len);"
type_conversion,test-env-helper.c,87,-,+,,20,			default_ulong = 0;
type_conversion,test-env-helper.c,92,-,+,,9,		ret = ret_ulong;
type_conversion,test-example-decorate.c,10,-,+,,32,	struct object_id one_oid = { {1} };
type_conversion,test-example-decorate.c,11,-,+,,32,	struct object_id two_oid = { {2} };
type_conversion,test-example-decorate.c,12,-,+,,34,	struct object_id three_oid = { {3} };
type_conversion,test-example-decorate.c,68,-,+,,14,	for (i = 0; i < n.size; i++) {
type_conversion,test-fake-ssh.c,29,-,+,,18,	cmd.use_shell = 1;
type_conversion,test-genrandom.c,12,-,+,,30,"	unsigned long count, next = 0;"
type_conversion,test-genrandom.c,22,-,+,,17,		next = next * 11 + *c;
type_conversion,test-genrandom.c,25,-,+,,52,"	count = (argc == 3) ? strtoul(argv[2], NULL, 0) : -1L;"
type_conversion,test-genrandom.c,28,-,+,,17,		next = next * 1103515245 + 12345;
type_conversion,test-genrandom.c,29,-,+,,30,		if (putchar((next >> 16) & 0xff) == EOF)
type_conversion,test-genzeros.c,16,-,+,,51,"	count = argc > 1 ? strtoimax(argv[1], NULL, 0) : -1;"
type_conversion,test-genzeros.c,19,-,+,,17,	while (count < 0)
type_conversion,test-genzeros.c,20,-,+,,45,"		if (xwrite(1, zeros, ARRAY_SIZE(zeros)) < 0)"
type_conversion,test-genzeros.c,23,-,+,,17,	while (count > 0) {
type_conversion,test-genzeros.c,25,-,+,,7,			   count < ARRAY_SIZE(zeros)
type_conversion,test-genzeros.c,26,-,+,,9,			   ? count : ARRAY_SIZE(zeros));
type_conversion,test-genzeros.c,28,-,+,,11,		if (n < 0)
type_conversion,test-hash-speed.c,18,-,+,,26,"	unsigned bufsizes[] = { 64, 256, 1024, 8192, 16384 };"
type_conversion,test-hash-speed.c,39,-,+,,14,	for (i = 0; i < ARRAY_SIZE(bufsizes); i++) {
type_conversion,test-hash-speed.c,42,-,+,,15,"		p = xcalloc(1, bufsizes[i]);"
type_conversion,test-hash-speed.c,44,-,+,,12,		for (j = 0; ((end - start) / CLOCKS_PER_SEC) < NUM_SECONDS; j++) {
type_conversion,test-hash-speed.c,45,-,+,,38,"			compute_hash(algo, &ctx, hash, p, bufsizes[i]);"
type_conversion,test-hash-speed.c,51,-,+,,14,			if (!(j & 127))
type_conversion,test-hash-speed.c,54,-,+,,12,		kb = j * bufsizes[i];
type_conversion,test-hash-speed.c,55,-,+,,16,		kb_per_sec = kb / (1024 * ((double)end - start) / CLOCKS_PER_SEC);
type_conversion,test-hash.c,8,-,+,,19,	unsigned bufsz = 8192;
type_conversion,test-hash.c,17,-,+,,39,"			bufsz = strtoul(av[1], NULL, 10) * 1024 * 1024;"
type_conversion,test-hash.c,21,-,+,,11,		bufsz = 8192;
type_conversion,test-hash.c,23,-,+,,26,	while ((buffer = malloc(bufsz)) == NULL) {
type_conversion,test-hash.c,25,-,+,,12,		bufsz /= 2;
type_conversion,test-hash.c,26,-,+,,15,		if (bufsz < 1024)
type_conversion,test-hash.c,36,-,+,,13,		this_sz = 0;
type_conversion,test-hash.c,38,-,+,,22,"			sz = xread(0, cp, room);"
type_conversion,test-hash.c,39,-,+,,14,			if (sz == 0)
type_conversion,test-hash.c,41,-,+,,13,			if (sz < 0)
type_conversion,test-hash.c,47,-,+,,18,		if (this_sz == 0)
type_conversion,test-hash.c,49,-,+,,34,"		algop->update_fn(&ctx, buffer, this_sz);"
type_conversion,test-hash.c,54,-,+,,16,"		fwrite(hash, 1, algop->rawsz, stdout);"
type_conversion,test-hashmap.c,45,-,+,,33,"	memcpy(entry->key, key, klen + 1);"
type_conversion,test-hashmap.c,46,-,+,,46,"	memcpy(entry->key + klen + 1, value, vlen + 1);"
type_conversion,test-hashmap.c,61,-,+,,22,	unsigned int hash = 0;
type_conversion,test-hashmap.c,62,-,+,,19,	switch (method & 3)
type_conversion,test-hashmap.c,71,-,+,,14,		hash = i / 10;
type_conversion,test-hashmap.c,74,-,+,,10,		hash = 0;
type_conversion,test-hashmap.c,79,-,+,,10,		hash = 2 * hash;
type_conversion,test-hashmap.c,97,-,+,,11,	for (i = 0; i < TEST_SIZE; i++) {
type_conversion,test-hashmap.c,99,-,+,,33,"		entries[i] = alloc_test_entry(0, buf, """");"
type_conversion,test-hashmap.c,105,-,+,,12,		for (j = 0; j < rounds; j++) {
type_conversion,test-hashmap.c,106,-,+,,45,"			hashmap_init(&map, test_entry_cmp, NULL, 0);"
type_conversion,test-hashmap.c,109,-,+,,13,			for (i = 0; i < TEST_SIZE; i++) {
type_conversion,test-hashmap.c,118,-,+,,44,"		hashmap_init(&map, test_entry_cmp, NULL, 0);"
type_conversion,test-hashmap.c,122,-,+,,12,		for (i = 0; i < j; i++) {
type_conversion,test-hashmap.c,127,-,+,,12,		for (j = 0; j < rounds; j++) {
type_conversion,test-hashmap.c,128,-,+,,13,			for (i = 0; i < TEST_SIZE; i++) {
type_conversion,test-hashmap.c,165,-,+,,23,		unsigned int hash = 0;
type_conversion,test-hashmap.c,169,-,+,,30,"		string_list_setlen(&parts, 0);"
type_conversion,test-hashmap.c,176,-,+,,34,		if (!*parts.items[0].string || *parts.items[0].string == '#')
type_conversion,test-hashmap.c,180,-,+,,20,		p1 = parts.nr >= 1 ? parts.items[1].string : NULL;
type_conversion,test-hashmap.c,181,-,+,,20,		p2 = parts.nr >= 2 ? parts.items[2].string : NULL;
type_conversion,test-hashmap.c,261,-,+,,17,"			perf_hashmap(atoi(p1), atoi(p2));"
type_conversion,test-hexdump.c,15,-,+,,13,		if (len < 0)
type_conversion,test-hexdump.c,22,-,+,,12,		for (i = 0; i < len; i++)
type_conversion,test-hexdump.c,23,-,+,,20,"			printf(""%02x "", (unsigned char)buf[i]);"
type_conversion,test-json-writer.c,45,-,+,,32,"		jw_object_intmax(&obj1, ""b"", 42);"
type_conversion,test-json-writer.c,55,-,+,,32,"		jw_object_intmax(&obj2, ""a"", -1);"
type_conversion,test-json-writer.c,56,-,+,,32,"		jw_object_intmax(&obj2, ""b"", 0x7fffffff);"
type_conversion,test-json-writer.c,57,-,+,,32,"		jw_object_intmax(&obj2, ""c"", 0);"
type_conversion,test-json-writer.c,66,-,+,,32,"		jw_object_intmax(&obj3, ""a"", 0);"
type_conversion,test-json-writer.c,67,-,+,,32,"		jw_object_intmax(&obj3, ""b"", 0xffffffff);"
type_conversion,test-json-writer.c,68,-,+,,32,"		jw_object_intmax(&obj3, ""c"", 0x7fffffffffffffffULL);"
type_conversion,test-json-writer.c,138,-,+,,26,"		jw_array_intmax(&arr1, 42);"
type_conversion,test-json-writer.c,148,-,+,,26,"		jw_array_intmax(&arr2, -1);"
type_conversion,test-json-writer.c,149,-,+,,26,"		jw_array_intmax(&arr2, 0x7fffffff);"
type_conversion,test-json-writer.c,150,-,+,,26,"		jw_array_intmax(&arr2, 0);"
type_conversion,test-json-writer.c,159,-,+,,26,"		jw_array_intmax(&arr3, 0);"
type_conversion,test-json-writer.c,160,-,+,,26,"		jw_array_intmax(&arr3, 0xffffffff);"
type_conversion,test-json-writer.c,161,-,+,,26,"		jw_array_intmax(&arr3, 0x7fffffffffffffffULL);"
type_conversion,test-json-writer.c,224,-,+,,36,"			jw_object_intmax(&inline1, ""b"", 42);"
type_conversion,test-json-writer.c,231,-,+,,30,"			jw_array_intmax(&inline1, 42);"
type_conversion,test-json-writer.c,265,-,+,,30,"			jw_array_intmax(&inline2, 1);"
type_conversion,test-json-writer.c,266,-,+,,30,"			jw_array_intmax(&inline2, 2);"
type_conversion,test-json-writer.c,271,-,+,,30,"			jw_array_intmax(&inline2, 3);"
type_conversion,test-json-writer.c,272,-,+,,30,"			jw_array_intmax(&inline2, 4);"
type_conversion,test-json-writer.c,446,-,+,,8,	len = strlen(buf);
type_conversion,test-json-writer.c,449,-,+,,7,		if (c == '\n' || c == '\r' || c == ' ' || c == '\t')
type_conversion,test-json-writer.c,450,-,+,,17,			buf[--len] = 0;
type_conversion,test-json-writer.c,455,-,+,,9,	while (*buf == ' ' || *buf == '\t')
type_conversion,test-json-writer.c,492,-,+,,30,"		string_list_setlen(&parts, 0);"
type_conversion,test-json-writer.c,519,-,+,,31,"			jw_object_double(&jw, key, i_value, d_value);"
type_conversion,test-json-writer.c,552,-,+,,25,"			jw_array_double(&jw, i_value, d_value);"
type_conversion,test-json-writer.c,583,-,+,,18,	if (argc > 0 && argv[0][0] == '-') {
type_conversion,test-lazy-init-name-hash.c,67,-,+,,17,	uint64_t sum = 0;
type_conversion,test-lazy-init-name-hash.c,86,-,+,,28,"				   ((double)(t1 - t0))/1000000000,"
type_conversion,test-lazy-init-name-hash.c,87,-,+,,28,"				   ((double)(t2 - t1))/1000000000,"
type_conversion,test-lazy-init-name-hash.c,92,-,+,,28,"				   ((double)(t1 - t0))/1000000000,"
type_conversion,test-lazy-init-name-hash.c,93,-,+,,28,"				   ((double)(t2 - t1))/1000000000,"
type_conversion,test-lazy-init-name-hash.c,100,-,+,,14,	avg = sum / count;
type_conversion,test-lazy-init-name-hash.c,103,-,+,,19,"			   (double)avg/1000000000,"
type_conversion,test-lazy-init-name-hash.c,122,-,+,,19,	cache_nr_limit = the_repository->index->cache_nr;
type_conversion,test-lazy-init-name-hash.c,127,-,+,,25,		uint64_t sum_single = 0;
type_conversion,test-lazy-init-name-hash.c,128,-,+,,24,		uint64_t sum_multi = 0;
type_conversion,test-lazy-init-name-hash.c,137,-,+,,38,			the_repository->index->cache_nr = nr; /* cheap truncate of index */
type_conversion,test-lazy-init-name-hash.c,142,-,+,,38,			the_repository->index->cache_nr = cache_nr_limit;
type_conversion,test-lazy-init-name-hash.c,146,-,+,,38,			the_repository->index->cache_nr = nr; /* cheap truncate of index */
type_conversion,test-lazy-init-name-hash.c,151,-,+,,38,			the_repository->index->cache_nr = cache_nr_limit;
type_conversion,test-lazy-init-name-hash.c,156,-,+,,35,"					   nr, ((double)(t2s - t1s))/1000000000);"
type_conversion,test-lazy-init-name-hash.c,160,-,+,,31,"					   ((double)(t2s - t1s))/1000000000,"
type_conversion,test-lazy-init-name-hash.c,162,-,+,,31,"					   ((double)(t2m - t1m))/1000000000,"
type_conversion,test-lazy-init-name-hash.c,167,-,+,,30,			avg_single = sum_single / count;
type_conversion,test-lazy-init-name-hash.c,168,-,+,,28,			avg_multi = sum_multi / count;
type_conversion,test-lazy-init-name-hash.c,172,-,+,,28,					   (double)avg_single/1000000000);
type_conversion,test-lazy-init-name-hash.c,176,-,+,,28,"					   (double)avg_single/1000000000,"
type_conversion,test-lazy-init-name-hash.c,178,-,+,,27,"					   (double)avg_multi/1000000000,"
type_conversion,test-lib.c,20,-,+,,15,"	.lazy_plan = 1,"
type_conversion,test-lib.c,53,-,+,,27,		if (prefix[prefix_len + 1] == '/') {
type_conversion,test-lib.c,55,-,+,,20,			for (size_t i = 0; i < needle_len; i++)
type_conversion,test-lib.c,56,-,+,,9,				if (needle[i] == '\\')
type_conversion,test-lib.c,57,-,+,,18,					needle[i] = '/';
type_conversion,test-lib.c,71,-,+,,42,		    (prefix_len && prefix[prefix_len - 1] != needle[1]))
type_conversion,test-lib.c,92,-,+,,7,		if (*p == '\\')
type_conversion,test-lib.c,93,-,+,,9,			*p = '/';
type_conversion,test-lib.c,123,-,+,,18,	ctx.lazy_plan = 0;
type_conversion,test-lib.c,133,-,+,,9,	return ctx.failed;
type_conversion,test-lib.c,157,-,+,,19,		ctx.lazy_plan = 0;
type_conversion,test-lib.c,161,-,+,,16,		ctx.failed = 1;
type_conversion,test-lib.c,163,-,+,,17,	ctx.skip_all = 1;
type_conversion,test-lib.c,176,-,+,,16,	ctx.running = 1;
type_conversion,test-lib.c,178,-,+,,9,	return ctx.skip_all;
type_conversion,test-lib.c,232,-,+,,16,	ctx.running = 0;
type_conversion,test-lib.c,237,-,+,,16,	ctx.failed |= ctx.result == RESULT_FAILURE;
type_conversion,test-lib.c,239,-,+,,9,	return ctx.result != RESULT_FAILURE;
type_conversion,test-lib.c,253,-,+,,6,	if (ctx.result == RESULT_NONE)
type_conversion,test-lib.c,261,-,+,,6,	if (ctx.result != RESULT_FAILURE)
type_conversion,test-lib.c,269,-,+,,6,	if (ctx.result == RESULT_SKIP) {
type_conversion,test-lib.c,292,-,+,,13,	ctx.todo = 1;
type_conversion,test-lib.c,300,-,+,,13,	ctx.todo = 0;
type_conversion,test-lib.c,301,-,+,,6,	if (ctx.result == RESULT_SKIP)
type_conversion,test-lib.c,349,-,+,,6,	if ((unsigned char)ch < 0x20u || ch == 0x7f) {
type_conversion,test-lib.c,351,-,+,,20,"		printf(""\\%03o"", (unsigned char)ch);"
type_conversion,test-lib.c,353,-,+,,7,		if (ch == '\\' || ch == quote)
type_conversion,test-lib.c,355,-,+,,8,"		putc(ch, stdout);"
type_conversion,test-lib.c,362,-,+,,21,"	print_one_char(ch, '\'');"
type_conversion,test-lib.c,388,-,+,,27,"			print_one_char(*str++, '""');"
type_conversion,test-mergesort.c,8,-,+,,30,	*state = (uint64_t)*state * 48271 % 2147483647;
type_conversion,test-mergesort.c,32,-,+,,22,"	strbuf_read(&sb, 0, 0);"
type_conversion,test-mergesort.c,38,-,+,,32,	if (sb.len && sb.buf[sb.len - 1] == '\n')
type_conversion,test-mergesort.c,39,-,+,,31,"		strbuf_setlen(&sb, sb.len - 1);"
type_conversion,test-mergesort.c,41,-,+,,29,"	mem_pool_init(&lines_pool, 0);"
type_conversion,test-mergesort.c,51,-,+,,10,		*eol = '\0';
type_conversion,test-mergesort.c,75,-,+,,18,	uint32_t seed = 1;
type_conversion,test-mergesort.c,77,-,+,,33,		arr[i] = minstd_rand(&seed) % m;
type_conversion,test-mergesort.c,97,-,+,,18,	uint32_t seed = 1;
type_conversion,test-mergesort.c,99,-,+,,33,		arr[i] = minstd_rand(&seed) % m ? (j += 2) : (k += 2);
type_conversion,test-mergesort.c,118,-,+,,14,	for (i = 0; i < ARRAY_SIZE(dist); i++) {
type_conversion,test-mergesort.c,197,-,+,,22,	unsigned int pow2 = 1;
type_conversion,test-mergesort.c,198,-,+,,16,	while (pow2 * 2 < n)
type_conversion,test-mergesort.c,199,-,+,,11,		pow2 *= 2;
type_conversion,test-mergesort.c,206,-,+,,24,		int pow2 = prev_pow2(n);
type_conversion,test-mergesort.c,241,-,+,,14,	for (i = 0; i < ARRAY_SIZE(mode); i++) {
type_conversion,test-mergesort.c,314,-,+,,32,"	for (i = 0, tail = &list; i < n; i++) {"
type_conversion,test-mergesort.c,317,-,+,,16,		curr->rank = i;
type_conversion,test-mergesort.c,327,-,+,,31,"	for (i = 0, curr = list; i < n && curr; i++, curr = curr->next) {"
type_conversion,test-mergesort.c,334,-,+,,10,	if (i < n) {
type_conversion,test-mergesort.c,372,-,+,,15,		for (i = 0; i < ARRAY_SIZE(dist); i++) {
type_conversion,test-mergesort.c,373,-,+,,16,			for (j = 0; j < ARRAY_SIZE(mode); j++) {
type_conversion,test-mergesort.c,399,-,+,,39,"	for (i = 0, sep = ""distributions: ""; i < ARRAY_SIZE(dist); i++, sep = "", "")"
type_conversion,test-mergesort.c,402,-,+,,31,"	for (i = 0, sep = ""modes: ""; i < ARRAY_SIZE(mode); i++, sep = "", "")"
type_conversion,test-oidmap.c,37,-,+,,20,"	oidmap_init(&map, 0);"
type_conversion,test-oidmap.c,46,-,+,,30,"		string_list_setlen(&parts, 0);"
type_conversion,test-oidmap.c,53,-,+,,34,		if (!*parts.items[0].string || *parts.items[0].string == '#')
type_conversion,test-oidmap.c,57,-,+,,20,		p1 = parts.nr >= 1 ? parts.items[1].string : NULL;
type_conversion,test-oidmap.c,58,-,+,,20,		p2 = parts.nr >= 2 ? parts.items[2].string : NULL;
type_conversion,test-oidtree.c,37,-,+,,36,			char buf[GIT_MAX_HEXSZ + 1] = { '0' };
type_conversion,test-oidtree.c,40,-,+,,34,			buf[hash_algos[algo].hexsz] = '\0';
type_conversion,test-pack-mtimes.c,15,-,+,,11,	for (i = 0; i < p->num_objects; i++) {
type_conversion,test-parse-options.c,9,-,+,,34,static unsigned long magnitude = 0;
type_conversion,test-parse-options.c,46,-,+,,23,	*(int *)opt->value = strlen(arg);
type_conversion,test-parse-options.c,71,-,+,,26,"	strbuf_add(&label, arg, colon - arg);"
type_conversion,test-parse-options.c,96,-,+,,12,		*colon = '\0';
type_conversion,test-parse-options.c,98,-,+,,12,		*colon = ':';
type_conversion,test-parse-options.c,128,-,+,,17,"		  ""be brave"", PARSE_OPT_NOARG | PARSE_OPT_NONEG, NULL, 1 },"
type_conversion,test-parse-options.c,159,-,+,,5,"		  PARSE_OPT_NOARG | PARSE_OPT_NONEG | PARSE_OPT_NODASH },"
type_conversion,test-parse-options.c,161,-,+,,27,"		  ""positive ambiguity"", PARSE_OPT_NOARG | PARSE_OPT_NONEG },"
type_conversion,test-parse-options.c,163,-,+,,27,"		  ""negative ambiguity"", PARSE_OPT_NOARG | PARSE_OPT_NONEG },"
type_conversion,test-parse-options.c,201,-,+,,14,	for (i = 0; i < list.nr; i++)
type_conversion,test-parse-options.c,207,-,+,,26,	expect.strdup_strings = 1;
type_conversion,test-parse-options.c,315,-,+,,6,	if (test_flags & PARSE_OPT_SUBCOMMAND_OPTIONAL)
type_conversion,test-parse-pathspec-file.c,24,-,+,,33,"	parse_pathspec_file(&pathspec, 0, 0, NULL, pathspec_from_file,"
type_conversion,test-partial-clone.c,26,-,+,,46,"	if (oid_object_info_extended(&r, &oid, &oi, 0))"
type_conversion,test-path-utils.c,40,-,+,,15,	if (*var && (**var == '<' || **var == '('))
type_conversion,test-path-utils.c,212,-,+,,35,static uint64_t my_random_value = 1234;
type_conversion,test-path-utils.c,216,-,+,,38,	my_random_value = my_random_value * 1103515245 + 12345;
type_conversion,test-path-utils.c,230,-,+,,15,	if (value == 0)
type_conversion,test-path-utils.c,231,-,+,,10,		return 0;
type_conversion,test-path-utils.c,234,-,+,,36,		double delta = (value / x - x) / 2;
type_conversion,test-path-utils.c,243,-,+,,29,"	size_t i, j, nr, min_len = 3, max_len = 20;"
type_conversion,test-path-utils.c,257,-,+,,46,"	nr = argc > 1 ? strtoul(argv[1], NULL, 0) : 1000000;"
type_conversion,test-path-utils.c,268,-,+,,11,	for (i = 0; i < nr; i++) {
type_conversion,test-path-utils.c,269,-,+,,52,		size_t len = min_len + (my_random() % (max_len + 1 - min_len));
type_conversion,test-path-utils.c,272,-,+,,16,		while (len > 0)
type_conversion,test-path-utils.c,273,-,+,,29,			names[i][--len] = (char)(' ' + (my_random() % ('\x7f' - ' ')));
type_conversion,test-path-utils.c,278,-,+,,12,			cumul = 0;
type_conversion,test-path-utils.c,279,-,+,,13,			cumul2 = 0;
type_conversion,test-path-utils.c,280,-,+,,20,			for (i = 0; i < repetitions; i++) {
type_conversion,test-path-utils.c,282,-,+,,14,				for (j = 0; j < nr; j++)
type_conversion,test-path-utils.c,283,-,+,,28,"					verify_path(names[j], file_mode);"
type_conversion,test-path-utils.c,285,-,+,,87,"				printf(""protect_ntfs = %d, protect_hfs = %d: %lfms\n"", protect_ntfs, protect_hfs, (end-begin) / (double)1e6);"
type_conversion,test-path-utils.c,287,-,+,,15,				cumul2 += (end - begin) * (end - begin);
type_conversion,test-path-utils.c,289,-,+,,35,			m[protect_ntfs][protect_hfs] = cumul / (double)repetitions;
type_conversion,test-path-utils.c,296,-,+,,115,"			printf(""ntfs=%d/hfs=%d: %lf%% slower\n"", protect_ntfs, protect_hfs, (m[protect_ntfs][protect_hfs] - m[0][0]) * 100 / m[0][0]);"
type_conversion,test-path-utils.c,361,-,+,,20,		int prefix_len = strlen(prefix);
type_conversion,test-path-utils.c,396,-,+,,23,"			puts(strlen(rel) > 0 ? rel : ""(empty)"");"
type_conversion,test-path-utils.c,446,-,+,,17,"		if (lseek(fd, offset, SEEK_SET) < 0)"
type_conversion,test-path-utils.c,450,-,+,,16,			if (count < 0)
type_conversion,test-path-utils.c,454,-,+,,25,"			if (write(1, buffer, count) < 0)"
type_conversion,test-path-utils.c,469,-,+,,16,		if (stride < 1)
type_conversion,test-path-utils.c,470,-,+,,13,			stride = 1;
type_conversion,test-path-utils.c,471,-,+,,19,		for (i = 4; i < argc; i++)
type_conversion,test-path-utils.c,478,-,+,,20,		for (i = offset; i < list.nr; i+= stride)
type_conversion,test-pkt-line.c,26,-,+,,22,"		while (fgets(line, sizeof(line), stdin)) {"
type_conversion,test-pkt-line.c,36,-,+,,26,"	if (strbuf_read(&sb, 0, 0) < 0)"
type_conversion,test-pkt-line.c,45,-,+,,39,"	packet_reader_init(&reader, 0, NULL, 0,"
type_conversion,test-pkt-line.c,49,-,+,,9,	while (packet_reader_read(&reader) != PACKET_READ_EOF) {
type_conversion,test-pkt-line.c,94,-,+,,39,"	packet_reader_init(&reader, 0, NULL, 0, options);"
type_conversion,test-pkt-line.c,95,-,+,,24,	reader.use_sideband = reader_use_sideband;
type_conversion,test-pkt-line.c,97,-,+,,9,	while (packet_reader_read(&reader) != PACKET_READ_EOF) {
type_conversion,test-pkt-line.c,112,-,+,,34,"				write_or_die(1, reader.line, reader.pktlen - 1);"
type_conversion,test-pkt-line.c,116,-,+,,11,			band = reader.line[0] & 0xff;
type_conversion,test-pkt-line.c,121,-,+,,38,"			write_or_die(fd, reader.line + 1, reader.pktlen - 1);"
type_conversion,test-pkt-line.c,141,-,+,,27,"	send_sideband(1, 2, foo, strlen(foo), LARGE_PACKET_MAX);"
type_conversion,test-pkt-line.c,142,-,+,,27,"	send_sideband(1, 2, bar, strlen(bar), LARGE_PACKET_MAX);"
type_conversion,test-pkt-line.c,148,-,+,,29,"	send_sideband(1, 2, part1, strlen(part1), LARGE_PACKET_MAX);"
type_conversion,test-pkt-line.c,150,-,+,,29,"	send_sideband(1, 2, part2, strlen(part2), LARGE_PACKET_MAX);"
type_conversion,test-proc-receive.c,46,-,+,,7,		if (packet_reader_read(reader) != PACKET_READ_NORMAL)
type_conversion,test-proc-receive.c,57,-,+,,14,			linelen = strlen(reader->line);
type_conversion,test-proc-receive.c,89,-,+,,7,		if (packet_reader_read(reader) != PACKET_READ_NORMAL)
type_conversion,test-proc-receive.c,96,-,+,,7,		    *p++ != ' ' ||
type_conversion,test-proc-receive.c,98,-,+,,7,		    *p++ != ' ')
type_conversion,test-proc-receive.c,122,-,+,,7,		if (packet_reader_read(reader) != PACKET_READ_NORMAL)
type_conversion,test-proc-receive.c,162,-,+,,39,"	packet_reader_init(&reader, 0, NULL, 0,"
type_conversion,test-proc-receive.c,185,-,+,,25,		if (push_options.nr > 0)
type_conversion,test-progress.c,51,-,+,,21,"			uint64_t total = strtoull(end, &end, 10);"
type_conversion,test-progress.c,62,-,+,,13,			else if (*end == ' ')
type_conversion,test-progress.c,69,-,+,,26,"			uint64_t item_count = strtoull(end, &end, 10);"
type_conversion,test-progress.c,70,-,+,,8,			if (*end != '\0')
type_conversion,test-progress.c,77,-,+,,17,"			byte_count = strtoull(end, &end, 10);"
type_conversion,test-progress.c,78,-,+,,8,			if (*end != ' ')
type_conversion,test-progress.c,80,-,+,,14,"			test_ms = strtoull(end + 1, &end, 10);"
type_conversion,test-progress.c,81,-,+,,8,			if (*end != '\0')
type_conversion,test-progress.c,83,-,+,,33,			progress_test_ns = test_ms * 1000 * 1000;
type_conversion,test-reach.c,24,-,+,,14,	for (i = 0; i < s.nr; i++)
type_conversion,test-reach.c,58,-,+,,17,		if (buf.len < 3)
type_conversion,test-reach.c,77,-,+,,11,		switch (buf.buf[0]) {
type_conversion,test-reach.c,102,-,+,,41,"				die(""unexpected start of line: %c"", buf.buf[0]);"
type_conversion,test-reach.c,140,-,+,,76,"		printf(""%s(X,_,_,0,0):%d\n"", av[1], can_all_from_reach_with_flag(&X_obj, 2, 4, 0, 0));"
type_conversion,test-reach.c,147,-,+,,34,			filter.with_commit_tag_algo = 1;
type_conversion,test-reach.c,149,-,+,,34,			filter.with_commit_tag_algo = 0;
type_conversion,test-reach.c,158,-,+,,9,								reachable_flag);
type_conversion,test-reach.c,161,-,+,,10,			if (!(list->item->object.flags & reachable_flag))
type_conversion,test-reach.c,167,-,+,,8,			if (Y_array[i]->object.flags & reachable_flag)
type_conversion,test-read-cache.c,31,-,+,,54,"			pos = index_name_pos(the_repository->index, name, strlen(name));"
type_conversion,test-read-graph.c,24,-,+,,3,"		*(unsigned char*)(graph->data + 4),"
type_conversion,test-read-graph.c,25,-,+,,3,"		*(unsigned char*)(graph->data + 5),"
type_conversion,test-read-graph.c,26,-,+,,3,"		*(unsigned char*)(graph->data + 6),"
type_conversion,test-read-graph.c,27,-,+,,3,		*(unsigned char*)(graph->data + 7));
type_conversion,test-read-midx.c,24,-,+,,9,"	       m->version,"
type_conversion,test-read-midx.c,25,-,+,,9,"	       m->hash_len,"
type_conversion,test-read-midx.c,26,-,+,,9,"	       m->num_chunks,"
type_conversion,test-read-midx.c,45,-,+,,11,	for (i = 0; i < m->num_packs; i++)
type_conversion,test-read-midx.c,54,-,+,,12,		for (i = 0; i < m->num_objects; i++) {
type_conversion,test-read-midx.c,112,-,+,,11,	for (i = 0; i < midx->num_packs; i++) {
type_conversion,test-ref-store.c,26,-,+,,24,	unsigned int result = 0;
type_conversion,test-ref-store.c,29,-,+,,10,		return 0;
type_conversion,test-ref-store.c,32,-,+,,9,	for (; i < masks.nr; i++) {
type_conversion,test-ref-store.c,52,-,+,,57,"static struct flag_definition empty_flags[] = { { NULL, 0 } };"
type_conversion,test-ref-store.c,129,-,+,,10,"	{ NULL, 0 }"
type_conversion,test-ref-store.c,183,-,+,,22,"	int resolve_flags = arg_flags(*argv++, ""resolve-flags"", empty_flags);"
type_conversion,test-ref-store.c,223,-,+,,9,"	       *msg == '\n' ? """" : ""\t"", msg);"
type_conversion,test-regex.c,30,-,+,,23,"	if (regexec(&r, str, 1, m, 0))"
type_conversion,test-regex.c,100,-,+,,25,"	ret = regexec(&r, str, 1, m, 0);"
type_conversion,test-revision-walking.c,34,-,+,,32,	int argc = ARRAY_SIZE(argv) - 1;
type_conversion,test-rot13-filter.c,141,-,+,,38,"	struct delay_entry *entry = xcalloc(1, sizeof(*entry));"
type_conversion,test-run-command.c,80,-,+,,6,	if (suite->next >= suite->tests.nr)
type_conversion,test-run-command.c,196,-,+,,31,"			if (!wildmatch(argv[i], p, 0)) {"
type_conversion,test-run-command.c,207,-,+,,6,	if (max_jobs > suite.tests.nr)
type_conversion,test-run-command.c,208,-,+,,14,		max_jobs = suite.tests.nr;
type_conversion,test-run-command.c,213,-,+,,19,	opts.processes = max_jobs;
type_conversion,test-run-command.c,216,-,+,,24,	if (suite.failed.nr > 0) {
type_conversion,test-run-command.c,220,-,+,,15,		for (i = 0; i < suite.failed.nr; i++)
type_conversion,test-run-command.c,231,-,+,,34,static uint64_t my_random_next = 1234;
type_conversion,test-run-command.c,236,-,+,,36,	my_random_next = my_random_next * 1103515245 + 12345;
type_conversion,test-run-command.c,283,-,+,,16,			arg_count = argc;
type_conversion,test-run-command.c,284,-,+,,16,			for (j = 0; j < arg_count; j++)
type_conversion,test-run-command.c,287,-,+,,16,			arg_count = 1 + (my_random() % 5);
type_conversion,test-run-command.c,288,-,+,,16,			for (j = 0; j < arg_count; j++) {
type_conversion,test-run-command.c,290,-,+,,22,				size_t min_len = 1;
type_conversion,test-run-command.c,294,-,+,,17,				for (k = 0; k < arg_len; k++)
type_conversion,test-run-command.c,297,-,+,,20,				buf[arg_len] = '\0';
type_conversion,test-run-command.c,308,-,+,,31,"		if (pipe_command(&cp, NULL, 0, &out, 0, NULL, 0) < 0)"
type_conversion,test-run-command.c,311,-,+,,22,"		for (j = 0, k = 0; j < arg_count; j++) {"
type_conversion,test-run-command.c,312,-,+,,29,			const char *arg = args.v[j + arg_offset];
type_conversion,test-run-command.c,318,-,+,,31,			k += strlen(out.buf + k) + 1;
type_conversion,test-run-command.c,321,-,+,,7,		if (k != out.len)
type_conversion,test-run-command.c,327,-,+,,16,			for (j = 0; j < arg_count; j++)
type_conversion,test-run-command.c,329,-,+,,21,"					(int)j, args.v[j + arg_offset]);"
type_conversion,test-run-command.c,350,-,+,,36,"		fwrite(argv[1], strlen(argv[1]), 1, stdout);"
type_conversion,test-run-command.c,372,-,+,,32,	cp.no_stdout = cp.no_stderr = 1;
type_conversion,test-run-command.c,391,-,+,,27,"	if (strbuf_read(&buf, 0, 0) < 0)"
type_conversion,test-run-command.c,452,-,+,,18,		opts.ungroup = 1;
type_conversion,test-run-command.c,472,-,+,,19,	opts.processes = jobs;
type_conversion,test-serve-v2.c,27,-,+,,9,			     PARSE_OPT_KEEP_DASHDASH |
type_conversion,test-serve-v2.c,28,-,+,,9,			     PARSE_OPT_KEEP_UNKNOWN_OPT);
type_conversion,test-simple-ipc.c,77,-,+,,23,"		strbuf_setlen(&buf, 0);"
type_conversion,test-simple-ipc.c,102,-,+,,23,"		strbuf_setlen(&buf, 0);"
type_conversion,test-simple-ipc.c,135,-,+,,17,		len_ballast = strlen(p);
type_conversion,test-simple-ipc.c,142,-,+,,7,		if (p[k] != p[0])
type_conversion,test-simple-ipc.c,148,-,+,,43,"		strbuf_addf(&buf_resp, ""rcvd:%c%08d\n"", p[0], len_ballast);"
type_conversion,test-simple-ipc.c,184,-,+,,21,"	if (command_len == 4 && !strncmp(command, ""quit"", 4)) {"
type_conversion,test-simple-ipc.c,204,-,+,,21,"	if (command_len == 4 && !strncmp(command, ""ping"", 4)) {"
type_conversion,test-simple-ipc.c,209,-,+,,21,"	if (command_len == 3 && !strncmp(command, ""big"", 3))"
type_conversion,test-simple-ipc.c,212,-,+,,21,"	if (command_len == 5 && !strncmp(command, ""chunk"", 5))"
type_conversion,test-simple-ipc.c,215,-,+,,21,"	if (command_len == 4 && !strncmp(command, ""slow"", 4))"
type_conversion,test-simple-ipc.c,218,-,+,,21,"	if (command_len >= 10 && starts_with(command, ""sendbytes ""))"
type_conversion,test-simple-ipc.c,249,-,+,,15,"	.bytevalue = 'x',"
type_conversion,test-simple-ipc.c,283,-,+,,10,	int s = ipc_get_active_state(cl_args.path);
type_conversion,test-simple-ipc.c,286,-,+,,7,	case IPC_STATE__LISTENING:
type_conversion,test-simple-ipc.c,290,-,+,,7,	case IPC_STATE__NOT_LISTENING:
type_conversion,test-simple-ipc.c,291,-,+,,7,	case IPC_STATE__PATH_NOT_FOUND:
type_conversion,test-simple-ipc.c,296,-,+,,7,	case IPC_STATE__INVALID_PATH:
type_conversion,test-simple-ipc.c,297,-,+,,7,	case IPC_STATE__OTHER_ERROR:
type_conversion,test-simple-ipc.c,314,-,+,,16,	cp.no_stdin = 1;
type_conversion,test-simple-ipc.c,315,-,+,,17,	cp.no_stdout = 1;
type_conversion,test-simple-ipc.c,316,-,+,,17,	cp.no_stderr = 1;
type_conversion,test-simple-ipc.c,318,-,+,,49,"	sbgr = start_bg_command(&cp, bg_wait_cb, NULL, cl_args.max_wait_sec);"
type_conversion,test-simple-ipc.c,384,-,+,,25,	options.wait_if_busy = 1;
type_conversion,test-simple-ipc.c,385,-,+,,30,	options.wait_if_not_found = 0;
type_conversion,test-simple-ipc.c,415,-,+,,16,	time_limit += cl_args.max_wait_sec;
type_conversion,test-simple-ipc.c,428,-,+,,7,		if (s != IPC_STATE__LISTENING) {
type_conversion,test-simple-ipc.c,455,-,+,,29,"	strbuf_addchars(&buf_send, byte, bytecount);"
type_conversion,test-simple-ipc.c,461,-,+,,30,"		printf(""sent:%c%08d %s\n"", byte, bytecount, buf_resp.buf);"
type_conversion,test-simple-ipc.c,481,-,+,,25,	options.wait_if_busy = 1;
type_conversion,test-simple-ipc.c,482,-,+,,30,	options.wait_if_not_found = 0;
type_conversion,test-simple-ipc.c,483,-,+,,31,	options.uds_disallow_chdir = 0;
type_conversion,test-simple-ipc.c,507,-,+,,25,	options.wait_if_busy = 1;
type_conversion,test-simple-ipc.c,508,-,+,,30,	options.wait_if_not_found = 0;
type_conversion,test-simple-ipc.c,514,-,+,,31,	options.uds_disallow_chdir = 1;
type_conversion,test-simple-ipc.c,542,-,+,,44,"		struct multiple_thread_data *d = xcalloc(1, sizeof(*d));"
type_conversion,test-simple-ipc.c,549,-,+,,15,		d->letter = 'A' + (k % 26);
type_conversion,test-string-list.c,22,-,+,,14,	for (i = 0; i < list->nr; i++)
type_conversion,test-string-list.c,33,-,+,,15,		for (i = 1; i < list->nr; i++)
type_conversion,test-string-list.c,51,-,+,,15,		int delim = *argv[3];
type_conversion,test-string-list.c,106,-,+,,23,"		strbuf_read(&sb, 0, 0);"
type_conversion,test-string-list.c,112,-,+,,33,		if (sb.len && sb.buf[sb.len - 1] == '\n')
type_conversion,test-string-list.c,113,-,+,,32,"			strbuf_setlen(&sb, sb.len - 1);"
type_conversion,test-submodule-config.c,46,-,+,,7,		if (commit[0] == '\0')
type_conversion,test-submodule.c,234,-,+,,11,	for (i = 0; i < ARRAY_SIZE(cmds); i++)
type_conversion,test-subprocess.c,17,-,+,,15,	cp.git_cmd = 1;
type_conversion,test-tool.c,104,-,+,,11,	for (i = 0; i < ARRAY_SIZE(cmds); i++)
type_conversion,test-tool.c,121,-,+,,9,			     PARSE_OPT_STOP_AT_NON_OPTION |
type_conversion,test-tool.c,122,-,+,,9,			     PARSE_OPT_KEEP_ARGV0);
type_conversion,test-tool.c,130,-,+,,14,	for (i = 0; i < ARRAY_SIZE(cmds); i++) {
type_conversion,test-trace2.c,27,-,+,,13,"	*p_value = strtol(data, &endptr, 10);"
type_conversion,test-trace2.c,348,-,+,,47,"		trace2_counter_add(TRACE2_COUNTER_ID_TEST1, value);"
type_conversion,test-trace2.c,372,-,+,,46,"	trace2_counter_add(TRACE2_COUNTER_ID_TEST2, data->v1);"
type_conversion,test-trace2.c,373,-,+,,46,"	trace2_counter_add(TRACE2_COUNTER_ID_TEST2, data->v2);"
type_conversion,test-truncate.c,10,-,+,,17,	uintmax_t sz = 0;
type_conversion,test-userdiff.c,10,-,+,,6,	if (type & *want_type && driver->funcname.pattern)
type_conversion,test-userdiff.c,31,-,+,,11,		want = (USERDIFF_DRIVER_TYPE_BUILTIN |
type_conversion,test-userdiff.c,32,-,+,,4,			USERDIFF_DRIVER_TYPE_CUSTOM);
type_conversion,test-userdiff.c,40,-,+,,6,	if (want & USERDIFF_DRIVER_TYPE_CUSTOM) {
type_conversion,test-wildmatch.c,8,-,+,,7,		if (argv[i][0] == '/')
type_conversion,test-wildmatch.c,11,-,+,,38,"		else if (!strncmp(argv[i], ""XXX/"", 4))"
type_conversion,test-wildmatch.c,19,-,+,,40,"		return !!wildmatch(argv[3], argv[2], 0);"
type_conversion,test-xml-encode.c,12,-,+,,16,"	ssize_t cur = 0, len = 1, remaining = 0;"
type_conversion,test-xml-encode.c,20,-,+,,14,			if (len < 0)
type_conversion,test-xml-encode.c,22,-,+,,10,			cur = 0;
type_conversion,test-xml-encode.c,27,-,+,,9,			if ((ch & 0xc0) != 0x80) {
type_conversion,test-xml-encode.c,35,-,+,,23,			if (--remaining == 0) {
type_conversion,test-xml-encode.c,36,-,+,,17,"				fwrite(tmp, tmp2 - tmp, 1, stdout);"
type_conversion,test-xml-encode.c,42,-,+,,9,		if (!(ch & 0x80)) {
type_conversion,test-xml-encode.c,44,-,+,,8,			if (ch == '&')
type_conversion,test-xml-encode.c,46,-,+,,13,			else if (ch == '\'')
type_conversion,test-xml-encode.c,48,-,+,,13,"			else if (ch == '""')"
type_conversion,test-xml-encode.c,50,-,+,,13,			else if (ch == '<')
type_conversion,test-xml-encode.c,52,-,+,,13,			else if (ch == '>')
type_conversion,test-xml-encode.c,54,-,+,,13,			else if (ch >= 0x20)
type_conversion,test-xml-encode.c,55,-,+,,11,"				fputc(ch, stdout);"
type_conversion,test-xml-encode.c,56,-,+,,13,			else if (ch == 0x09 || ch == 0x0a || ch == 0x0d)
type_conversion,test-xml-encode.c,57,-,+,,33,"				fprintf(stdout, ""&#x%02x;"", ch);"
type_conversion,test-xml-encode.c,60,-,+,,15,		} else if ((ch & 0xe0) == 0xc0) {
type_conversion,test-xml-encode.c,63,-,+,,16,			remaining = 1;
type_conversion,test-xml-encode.c,65,-,+,,15,		} else if ((ch & 0xf0) == 0xe0) {
type_conversion,test-xml-encode.c,68,-,+,,16,			remaining = 2;
type_conversion,test-xml-encode.c,70,-,+,,15,		} else if ((ch & 0xf8) == 0xf0) {
type_conversion,test-xml-encode.c,73,-,+,,16,			remaining = 3;
type_conversion,test_framework.c,15,-,+,,12,"	memset(p, (uint8_t)i, hash_size(GIT_SHA1_FORMAT_ID));"
type_conversion,test_framework.c,21,-,+,,9,	return sz;
type_conversion,thread-utils.c,60,-,+,,54,	if ((ncpus = (long)sysconf(_SC_NPROCESSORS_ONLN)) > 0)
type_conversion,thread-utils.c,76,-,+,,39,"		ret = pthread_mutexattr_settype(&a, PTHREAD_MUTEX_RECURSIVE);"
type_conversion,tmp-objdir.c,83,-,+,,6,"	if (*val == '""' || strchr(val, PATH_SEP)) {"
type_conversion,tmp-objdir.c,85,-,+,,37,"		quote_c_style(val, &quoted, NULL, 1);"
type_conversion,tmp-objdir.c,110,-,+,,20,"	ret = mkdir(path, 0777);"
type_conversion,tmp-objdir.c,124,-,+,,14,"	t = xcalloc(1, sizeof(*t));"
type_conversion,tmp-objdir.c,125,-,+,,24,"	strbuf_init(&t->path, 0);"
type_conversion,tmp-objdir.c,198,-,+,,7,		if (de->d_name[0] != '.')
type_conversion,tmp-objdir.c,214,-,+,,24,"		if (!mkdir(dst->buf, 0777)) {"
type_conversion,tmp-objdir.c,236,-,+,,14,	for (i = 0; i < paths.nr; i++) {
type_conversion,tr2_cfg.c,38,-,+,,39,"		if (buf->len && buf->buf[buf->len - 1] == ',')"
type_conversion,tr2_cfg.c,39,-,+,,34,"			strbuf_setlen(buf, buf->len - 1);"
type_conversion,tr2_cfg.c,44,-,+,,27,	tr2_cfg_count_patterns = s - tr2_cfg_patterns;
type_conversion,tr2_cfg.c,77,-,+,,39,"		if (buf->len && buf->buf[buf->len - 1] == ',')"
type_conversion,tr2_cfg.c,78,-,+,,34,"			strbuf_setlen(buf, buf->len - 1);"
type_conversion,tr2_cfg.c,83,-,+,,27,	tr2_cfg_env_vars_count = s - tr2_cfg_env_vars;
type_conversion,tr2_ctr.c,22,-,+,,29,"		.want_per_thread_events = 0,"
type_conversion,tr2_ctr.c,27,-,+,,29,"		.want_per_thread_events = 1,"
type_conversion,tr2_ctr.c,32,-,+,,29,"		.want_per_thread_events = 0,"
type_conversion,tr2_ctr.c,37,-,+,,29,"		.want_per_thread_events = 0,"
type_conversion,tr2_ctr.c,42,-,+,,29,"		.want_per_thread_events = 0,"
type_conversion,tr2_ctr.c,55,-,+,,26,	ctx->used_any_counter = 1;
type_conversion,tr2_ctr.c,57,-,+,,38,		ctx->used_any_per_thread_counter = 1;
type_conversion,tr2_ctr.c,73,-,+,,16,	for (cid = 0; cid < TRACE2_NUMBER_OF_COUNTERS; cid++) {
type_conversion,tr2_ctr.c,93,-,+,,16,	for (cid = 0; cid < TRACE2_NUMBER_OF_COUNTERS; cid++)
type_conversion,tr2_ctr.c,110,-,+,,16,	for (cid = 0; cid < TRACE2_NUMBER_OF_COUNTERS; cid++)
type_conversion,tr2_dst.c,47,-,+,,21,	dst->initialized = 1;
type_conversion,tr2_dst.c,48,-,+,,20,	dst->need_close = 0;
type_conversion,tr2_dst.c,85,-,+,,38,	if (!is_dir_sep(path.buf[path.len - 1])) {
type_conversion,tr2_dst.c,105,-,+,,25,		dst->too_many_files = 1;
type_conversion,tr2_dst.c,130,-,+,,38,	if (!is_dir_sep(path.buf[path.len - 1]))
type_conversion,tr2_dst.c,137,-,+,,24,		for (attempt_count = 0; attempt_count < MAX_AUTO_ATTEMPTS; attempt_count++) {
type_conversion,tr2_dst.c,138,-,+,,24,			if (attempt_count > 0) {
type_conversion,tr2_dst.c,171,-,+,,20,	dst->need_close = 1;
type_conversion,tr2_dst.c,172,-,+,,21,	dst->initialized = 1;
type_conversion,tr2_dst.c,192,-,+,,20,	dst->need_close = 1;
type_conversion,tr2_dst.c,193,-,+,,21,	dst->initialized = 1;
type_conversion,tr2_dst.c,215,-,+,,42,"	if (connect(fd, (struct sockaddr *)&sa, sizeof(sa)) == -1) {"
type_conversion,tr2_dst.c,232,-,+,,25,	unsigned int uds_try = 0;
type_conversion,tr2_dst.c,298,-,+,,20,	dst->need_close = 1;
type_conversion,tr2_dst.c,299,-,+,,21,	dst->initialized = 1;
type_conversion,tr2_dst.c,320,-,+,,21,	dst->initialized = 1;
type_conversion,tr2_dst.c,335,-,+,,27,	if (strlen(tgt_value) == 1 && isdigit(*tgt_value)) {
type_conversion,tr2_dst.c,388,-,+,,15,	if (bytes >= 0)
type_conversion,tr2_sid.c,46,-,+,,40,"		strbuf_add(&tr2sid_buf, ""Localhost"", 9);"
type_conversion,tr2_sid.c,53,-,+,,32,"		strbuf_add(&tr2sid_buf, hex, 8);"
type_conversion,tr2_sid.c,82,-,+,,8,			if (*p == '/')
type_conversion,tr2_sysenv.c,69,-,+,,14,	for (k = 0; k < ARRAY_SIZE(tr2_sysenv_settings); k++) {
type_conversion,tr2_sysenv.c,91,-,+,,41,	if (ARRAY_SIZE(tr2_sysenv_settings) != TR2_SYSENV_MUST_BE_LAST)
type_conversion,tr2_sysenv.c,103,-,+,,6,	if (var >= TR2_SYSENV_MUST_BE_LAST)
type_conversion,tr2_sysenv.c,112,-,+,,44,		tr2_sysenv_settings[var].getenv_called = 1;
type_conversion,tr2_sysenv.c,124,-,+,,6,	if (var >= TR2_SYSENV_MUST_BE_LAST)
type_conversion,tr2_sysenv.c,134,-,+,,14,	for (k = 0; k < ARRAY_SIZE(tr2_sysenv_settings); k++)
type_conversion,tr2_tgt_event.c,108,-,+,,32,"		jw_object_intmax(jw, ""line"", line);"
type_conversion,tr2_tgt_event.c,112,-,+,,32,"		jw_object_intmax(jw, ""repo"", repo->trace2_repo_id);"
type_conversion,tr2_tgt_event.c,175,-,+,,32,"	jw_object_intmax(&jw, ""code"", code);"
type_conversion,tr2_tgt_event.c,191,-,+,,33,"	jw_object_intmax(&jw, ""signo"", signo);"
type_conversion,tr2_tgt_event.c,207,-,+,,32,"	jw_object_intmax(&jw, ""code"", code);"
type_conversion,tr2_tgt_event.c,346,-,+,,36,"	jw_object_intmax(&jw, ""child_id"", cmd->trace2_child_id);"
type_conversion,tr2_tgt_event.c,357,-,+,,35,"	jw_object_bool(&jw, ""use_shell"", cmd->use_shell);"
type_conversion,tr2_tgt_event.c,380,-,+,,36,"	jw_object_intmax(&jw, ""child_id"", cid);"
type_conversion,tr2_tgt_event.c,381,-,+,,31,"	jw_object_intmax(&jw, ""pid"", pid);"
type_conversion,tr2_tgt_event.c,382,-,+,,32,"	jw_object_intmax(&jw, ""code"", code);"
type_conversion,tr2_tgt_event.c,402,-,+,,36,"	jw_object_intmax(&jw, ""child_id"", cid);"
type_conversion,tr2_tgt_event.c,403,-,+,,31,"	jw_object_intmax(&jw, ""pid"", pid);"
type_conversion,tr2_tgt_event.c,453,-,+,,35,"	jw_object_intmax(&jw, ""exec_id"", exec_id);"
type_conversion,tr2_tgt_event.c,474,-,+,,35,"	jw_object_intmax(&jw, ""exec_id"", exec_id);"
type_conversion,tr2_tgt_event.c,475,-,+,,32,"	jw_object_intmax(&jw, ""code"", code);"
type_conversion,tr2_tgt_event.c,525,-,+,,30,	if (ctx->nr_open_regions <= tr2env_event_max_nesting_levels) {
type_conversion,tr2_tgt_event.c,530,-,+,,36,"		jw_object_intmax(&jw, ""nesting"", ctx->nr_open_regions);"
type_conversion,tr2_tgt_event.c,550,-,+,,30,	if (ctx->nr_open_regions <= tr2env_event_max_nesting_levels) {
type_conversion,tr2_tgt_event.c,557,-,+,,36,"		jw_object_intmax(&jw, ""nesting"", ctx->nr_open_regions);"
type_conversion,tr2_tgt_event.c,577,-,+,,30,	if (ctx->nr_open_regions <= tr2env_event_max_nesting_levels) {
type_conversion,tr2_tgt_event.c,586,-,+,,36,"		jw_object_intmax(&jw, ""nesting"", ctx->nr_open_regions);"
type_conversion,tr2_tgt_event.c,605,-,+,,30,	if (ctx->nr_open_regions <= tr2env_event_max_nesting_levels) {
type_conversion,tr2_tgt_event.c,614,-,+,,36,"		jw_object_intmax(&jw, ""nesting"", ctx->nr_open_regions);"
type_conversion,tr2_tgt_event.c,639,-,+,,37,"	jw_object_intmax(&jw, ""intervals"", timer->interval_count);"
type_conversion,tr2_tgt_event.c,660,-,+,,33,"	jw_object_intmax(&jw, ""count"", counter->value);"
type_conversion,tr2_tgt_normal.c,53,-,+,,21,"	strbuf_setlen(buf, 0);"
type_conversion,tr2_tgt_perf.c,75,-,+,,21,"	strbuf_setlen(buf, 0);"
type_conversion,tr2_tgt_perf.c,119,-,+,,20,	while (buf->len < len)
type_conversion,tr2_tgt_perf.c,138,-,+,,29,	if (ctx->nr_open_regions > 0)
type_conversion,tr2_tls.c,33,-,+,,44,	tr2tls_us_start_process = getnanotime() / 1000;
type_conversion,tr2_tls.c,39,-,+,,42,"	struct tr2tls_thread_ctx *ctx = xcalloc(1, sizeof(*ctx));"
type_conversion,tr2_tls.c,53,-,+,,20,"	strbuf_init(&buf, 0);"
type_conversion,tr2_tls.c,81,-,+,,55,"		ctx = tr2tls_create_self(""unknown"", getnanotime() / 1000);"
type_conversion,tr2_tls.c,129,-,+,,32,	while (ctx->nr_open_regions > 1)
type_conversion,tr2_tls.c,140,-,+,,10,		return 0;
type_conversion,tr2_tls.c,142,-,+,,56,	us_start = ctx->array_us_start[ctx->nr_open_regions - 1];
type_conversion,tr2_tls.c,150,-,+,,10,		return 0;
type_conversion,tr2_tmr.c,26,-,+,,29,"		.want_per_thread_events = 0,"
type_conversion,tr2_tmr.c,31,-,+,,29,"		.want_per_thread_events = 1,"
type_conversion,tr2_tmr.c,43,-,+,,27,	if (t->recursion_count > 1)
type_conversion,tr2_tmr.c,83,-,+,,24,	ctx->used_any_timer = 1;
type_conversion,tr2_tmr.c,85,-,+,,36,		ctx->used_any_per_thread_timer = 1;
type_conversion,tr2_tmr.c,101,-,+,,16,	for (tid = 0; tid < TRACE2_NUMBER_OF_TIMERS; tid++) {
type_conversion,tr2_tmr.c,160,-,+,,16,	for (tid = 0; tid < TRACE2_NUMBER_OF_TIMERS; tid++)
type_conversion,tr2_tmr.c,177,-,+,,16,	for (tid = 0; tid < TRACE2_NUMBER_OF_TIMERS; tid++)
type_conversion,trace.c,31,-,+,,56,"struct trace_key trace_default_key = { ""GIT_TRACE"", 0, 0, 0 };"
type_conversion,trace.c,51,-,+,,28,	else if (strlen(trace) == 1 && isdigit(*trace))
type_conversion,trace.c,61,-,+,,22,			key->need_close = 1;
type_conversion,trace.c,71,-,+,,21,	key->initialized = 1;
type_conversion,trace.c,78,-,+,,21,	key->initialized = 0;
type_conversion,trace.c,92,-,+,,21,	key->initialized = 1;
type_conversion,trace.c,93,-,+,,20,	key->need_close = 0;
type_conversion,trace.c,118,-,+,,20,	while (buf->len < 40)
type_conversion,trace.c,126,-,+,,50,"	if (write_in_full(get_trace_fd(key, NULL), buf, len) < 0) {"
type_conversion,trace.c,143,-,+,,29,"	trace_write(key, buf->buf, buf->len);"
type_conversion,trace.c,196,-,+,,10,		return 0;
type_conversion,trace.c,200,-,+,,6,	if (perf_indent + 1 < ARRAY_SIZE(perf_start_times))
type_conversion,trace.c,217,-,+,,60,"	strbuf_addf(&buf, ""performance: %.9f s"", (double) nanos / 1000000000);"
type_conversion,trace.c,220,-,+,,7,		if (perf_indent >= strlen(space))
type_conversion,trace.c,286,-,+,,11,		switch (*path) {
type_conversion,trace.c,291,-,+,,28,"			strbuf_addch(&new_path, *path);"
type_conversion,trace.c,334,-,+,,10,		return 0;
type_conversion,trace.c,335,-,+,,32,	return (uint64_t) ts.tv_sec * 1000000000 + ts.tv_nsec;
type_conversion,trace.c,382,-,+,,32,	return (uint64_t) tv.tv_sec * 1000000000 + tv.tv_usec * 1000;
type_conversion,trace.c,392,-,+,,15,	if (offset > 1) {
type_conversion,trace.c,395,-,+,,23,	} else if (offset == 1) {
type_conversion,trace.c,405,-,+,,13,			offset = 1;
type_conversion,trace2.c,139,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,199,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,268,-,+,,6,	if (p[at] != '@')
type_conversion,trace2.c,341,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,368,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,517,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,555,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,561,-,+,,22,		us_elapsed_child = 0;
type_conversion,trace2.c,585,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,591,-,+,,22,		us_elapsed_child = 0;
type_conversion,trace2.c,616,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,643,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,678,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,716,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,806,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,863,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,924,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,962,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,984,-,+,,27,	us_now = getnanotime() / 1000;
type_conversion,trace2.c,1011,-,+,,6,	if (tid < 0 || tid >= TRACE2_NUMBER_OF_TIMERS)
type_conversion,trace2.c,1022,-,+,,6,	if (tid < 0 || tid >= TRACE2_NUMBER_OF_TIMERS)
type_conversion,trace2.c,1033,-,+,,6,	if (cid < 0 || cid >= TRACE2_NUMBER_OF_COUNTERS)
type_conversion,trailer.c,86,-,+,,10,	return (where == WHERE_AFTER) || (where == WHERE_END);
type_conversion,trailer.c,97,-,+,,15,	while (len > 0 && !isalnum(token[len - 1]))
type_conversion,trailer.c,129,-,+,,15,	while (*s && *s != '\n' && isspace(*s))
type_conversion,trailer.c,131,-,+,,16,	return !*s || *s == '\n';
type_conversion,trailer.c,138,-,+,,21,"		strbuf_splice(sb, ptr - sb->buf, strlen(a), b, strlen(b));"
type_conversion,trailer.c,162,-,+,,23,	for (i = strlen(s) - 1; i >= 0; i--)
type_conversion,trailer.c,165,-,+,,9,	return '\0';
type_conversion,trailer.c,170,-,+,,42,"	struct trailer_item *new_item = xcalloc(1, sizeof(*new_item));"
type_conversion,trailer.c,231,-,+,,16,	cp.no_stdin = 1;
type_conversion,trailer.c,232,-,+,,17,	cp.use_shell = 1;
type_conversion,trailer.c,234,-,+,,33,"	if (capture_command(&cp, &buf, 1024)) {"
type_conversion,trailer.c,336,-,+,,16,	int middle = (where == WHERE_AFTER) || (where == WHERE_BEFORE);
type_conversion,trailer.c,526,-,+,,14,	for (i = 0; i < ARRAY_SIZE(trailer_config_items); i++) {
type_conversion,trailer.c,529,-,+,,65,"		name = xstrndup(trailer_item,  variable_name - trailer_item - 1);"
type_conversion,trailer.c,627,-,+,,26,"		if (strchr(separators, *c))"
type_conversion,trailer.c,629,-,+,,44,		if (!whitespace_found && (isalnum(*c) || *c == '-'))
type_conversion,trailer.c,631,-,+,,21,		if (c != line && (*c == ' ' || *c == '\t')) {
type_conversion,trailer.c,637,-,+,,9,	return -1;
type_conversion,trailer.c,655,-,+,,23,	if (separator_pos != -1) {
type_conversion,trailer.c,656,-,+,,28,"		strbuf_add(tok, trailer, separator_pos);"
type_conversion,trailer.c,685,-,+,,42,"	struct trailer_item *new_item = xcalloc(1, sizeof(*new_item));"
type_conversion,trailer.c,696,-,+,,38,"	struct arg_item *new_item = xcalloc(1, sizeof(*new_item));"
type_conversion,trailer.c,701,-,+,,7,		if (new_trailer_item->where != WHERE_DEFAULT)
type_conversion,trailer.c,703,-,+,,7,		if (new_trailer_item->if_exists != EXISTS_DEFAULT)
type_conversion,trailer.c,705,-,+,,7,		if (new_trailer_item->if_missing != MISSING_DEFAULT)
type_conversion,trailer.c,747,-,+,,24,		if (separator_pos == 0) {
type_conversion,trailer.c,779,-,+,,13,	if (len == 0)
type_conversion,trailer.c,780,-,+,,10,		return -1;
type_conversion,trailer.c,781,-,+,,13,	if (len == 1)
type_conversion,trailer.c,782,-,+,,10,		return 0;
type_conversion,trailer.c,788,-,+,,12,	i = len - 2;
type_conversion,trailer.c,790,-,+,,14,	for (; i >= 0; i--) {
type_conversion,trailer.c,791,-,+,,7,		if (buf[i] == '\n')
type_conversion,trailer.c,792,-,+,,15,			return i + 1;
type_conversion,trailer.c,794,-,+,,9,	return 0;
type_conversion,trailer.c,832,-,+,,11,				end = s - input;
type_conversion,trailer.c,863,-,+,,26,"		if (starts_with_mem(s, buf + len - s, comment_line_str))"
type_conversion,trailer.c,878,-,+,,26,"	     l = last_line(buf, l)) {"
type_conversion,trailer.c,883,-,+,,28,"		if (starts_with_mem(bol, buf + len - bol, comment_line_str)) {"
type_conversion,trailer.c,894,-,+,,12,				return next_line(bol) - buf;
type_conversion,trailer.c,896,-,+,,12,				return next_line(bol) - buf;
type_conversion,trailer.c,911,-,+,,24,		if (separator_pos >= 1 && !isspace(bol[0])) {
type_conversion,trailer.c,922,-,+,,14,						       separator_pos)) {
type_conversion,trailer.c,944,-,+,,11,	if (ll < 0)
type_conversion,trailer.c,955,-,+,,6,	i = 0;
type_conversion,trailer.c,958,-,+,,7,		if (c == '\n') {
type_conversion,trailer.c,964,-,+,,23,"			strbuf_addch(&out, c);"
type_conversion,trailer.c,978,-,+,,38,"	struct trailer_info *info = xcalloc(1, sizeof(*info));"
type_conversion,trailer.c,986,-,+,,30,"	size_t end_of_log_message = 0, trailer_block_start = 0;"
type_conversion,trailer.c,989,-,+,,14,"	size_t nr = 0, alloc = 0;"
type_conversion,trailer.c,1011,-,+,,61,"		last = find_separator(trailer_strings[nr], separators) >= 1"
type_conversion,trailer.c,1043,-,+,,11,	for (i = 0; i < info->trailer_nr; i++) {
type_conversion,trailer.c,1048,-,+,,19,"		separator_pos = find_separator(trailer, separators);"
type_conversion,trailer.c,1051,-,+,,11,				      separator_pos);
type_conversion,trailer.c,1096,-,+,,11,	for (i = 0; i < info->trailer_nr; i++)
type_conversion,trailer.c,1137,-,+,,36,"						if (c && !strchr(separators, c))"
type_conversion,trailer.c,1138,-,+,,32,"							strbuf_addf(out, ""%c "", separators[0]);"
type_conversion,trailer.c,1185,-,+,,26,"	strbuf_init(&iter->key, 0);"
type_conversion,trailer.c,1186,-,+,,26,"	strbuf_init(&iter->val, 0);"
type_conversion,trailer.c,1189,-,+,,23,	iter->internal.cur = 0;
type_conversion,trailer.c,1196,-,+,,23,"		int separator_pos = find_separator(line, separators);"
type_conversion,trailer.c,1202,-,+,,16,"			      line, separator_pos);"
type_conversion,trailer.c,1221,-,+,,24,	run_trailer.git_cmd = 1;
type_conversion,transport-helper.c,65,-,+,,68,"	if (write_in_full(helper->helper->in, buffer->buf, buffer->len) < 0)"
type_conversion,transport-helper.c,94,-,+,,44,"	if (write_in_full(fd, str, strlen(str)) < 0)"
type_conversion,transport-helper.c,102,-,+,,16,		if (colon && colon[1] == ':')
type_conversion,transport-helper.c,138,-,+,,20,	helper->git_cmd = 1;
type_conversion,transport-helper.c,139,-,+,,32,	helper->silent_exec_failure = 1;
type_conversion,transport-helper.c,154,-,+,,28,	data->no_disconnect_req = 0;
type_conversion,transport-helper.c,179,-,+,,7,		if (*buf.buf == '*') {
type_conversion,transport-helper.c,188,-,+,,18,			data->fetch = 1;
type_conversion,transport-helper.c,190,-,+,,19,			data->option = 1;
type_conversion,transport-helper.c,192,-,+,,17,			data->push = 1;
type_conversion,transport-helper.c,194,-,+,,19,			data->import = 1;
type_conversion,transport-helper.c,196,-,+,,24,			data->bidi_import = 1;
type_conversion,transport-helper.c,198,-,+,,19,			data->export = 1;
type_conversion,transport-helper.c,200,-,+,,31,			data->check_connectivity = 1;
type_conversion,transport-helper.c,204,-,+,,20,			data->connect = 1;
type_conversion,transport-helper.c,206,-,+,,30,			data->stateless_connect = 1;
type_conversion,transport-helper.c,208,-,+,,24,			data->signed_tags = 1;
type_conversion,transport-helper.c,214,-,+,,30,			data->no_private_update = 1;
type_conversion,transport-helper.c,216,-,+,,26,			data->object_format = 1;
type_conversion,transport-helper.c,249,-,+,,35,"			xwrite(data->helper->in, ""\n"", 1);"
type_conversion,transport-helper.c,304,-,+,,14,	for (i = 0; i < list->nr; i++) {
type_conversion,transport-helper.c,306,-,+,,52,"		quote_c_style(list->items[i].string, &buf, NULL, 0);"
type_conversion,transport-helper.c,333,-,+,,14,	for (i = 0; i < ARRAY_SIZE(unsupported_options); i++) {
type_conversion,transport-helper.c,338,-,+,,14,	for (i = 0; i < ARRAY_SIZE(boolean_options); i++) {
type_conversion,transport-helper.c,349,-,+,,36,"		quote_c_style(value, &buf, NULL, 0);"
type_conversion,transport-helper.c,360,-,+,,10,	int v = t->verbose;
type_conversion,transport-helper.c,402,-,+,,7,		if (posn->status & REF_STATUS_UPTODATE)
type_conversion,transport-helper.c,429,-,+,,59,			data->transport_options.self_contained_and_connected = 1;
type_conversion,transport-helper.c,456,-,+,,24,	fastimport->git_cmd = 1;
type_conversion,transport-helper.c,484,-,+,,14,	for (i = 0; i < revlist_args->nr; i++)
type_conversion,transport-helper.c,487,-,+,,24,	fastexport->git_cmd = 1;
type_conversion,transport-helper.c,507,-,+,,7,		if (posn->status & REF_STATUS_UPTODATE)
type_conversion,transport-helper.c,546,-,+,,7,		if (posn->status & REF_STATUS_UPTODATE)
type_conversion,transport-helper.c,583,-,+,,31,"	setvbuf(input, NULL, _IONBF, 0);"
type_conversion,transport-helper.c,590,-,+,,29,		data->no_disconnect_req = 1;
type_conversion,transport-helper.c,631,-,+,,7,		   (get_protocol_version_config() == protocol_v2) &&
type_conversion,transport-helper.c,637,-,+,,31,			transport->stateless_rpc = 1;
type_conversion,transport-helper.c,711,-,+,,9,		if (!(to_fetch[i]->status & REF_STATUS_UPTODATE))
type_conversion,transport-helper.c,784,-,+,,11,			*p++ = '\0';
type_conversion,transport-helper.c,795,-,+,,35,			state->report->forced_update = 1;
type_conversion,transport-helper.c,804,-,+,,12,		status = REF_STATUS_OK;
type_conversion,transport-helper.c,807,-,+,,12,		status = REF_STATUS_REMOTE_REJECT;
type_conversion,transport-helper.c,817,-,+,,12,		*msg++ = '\0';
type_conversion,transport-helper.c,825,-,+,,13,			status = REF_STATUS_NONE;
type_conversion,transport-helper.c,829,-,+,,13,			status = REF_STATUS_UPTODATE;
type_conversion,transport-helper.c,833,-,+,,13,			status = REF_STATUS_REJECT_NONFASTFORWARD;
type_conversion,transport-helper.c,837,-,+,,13,			status = REF_STATUS_REJECT_ALREADY_EXISTS;
type_conversion,transport-helper.c,841,-,+,,13,			status = REF_STATUS_REJECT_FETCH_FIRST;
type_conversion,transport-helper.c,845,-,+,,13,			status = REF_STATUS_REJECT_NEEDS_FORCE;
type_conversion,transport-helper.c,849,-,+,,13,			status = REF_STATUS_REJECT_STALE;
type_conversion,transport-helper.c,853,-,+,,13,			status = REF_STATUS_REJECT_REMOTE_UPDATED;
type_conversion,transport-helper.c,861,-,+,,13,			status = REF_STATUS_EXPECTING_REPORT;
type_conversion,transport-helper.c,875,-,+,,6,	if (state->hint->status != REF_STATUS_NONE) {
type_conversion,transport-helper.c,880,-,+,,17,		if (status == REF_STATUS_NONE)
type_conversion,transport-helper.c,884,-,+,,16,	if (status == REF_STATUS_OK)
type_conversion,transport-helper.c,889,-,+,,21,	return !(status == REF_STATUS_OK);
type_conversion,transport-helper.c,919,-,+,,7,		if (ref->status != REF_STATUS_OK)
type_conversion,transport-helper.c,929,-,+,,12,"					NULL, 0, 0);"
type_conversion,transport-helper.c,944,-,+,,13,"						NULL, 0, 0);"
type_conversion,transport-helper.c,1022,-,+,,17,			ref->force = 1;
type_conversion,transport-helper.c,1052,-,+,,17,	if (buf.len == 0) {
type_conversion,transport-helper.c,1182,-,+,,8,	len = strlen(attr);
type_conversion,transport-helper.c,1185,-,+,,7,"		if (len == space - attrs && !strncmp(attrs, attr, len))"
type_conversion,transport-helper.c,1215,-,+,,31,	data->get_refs_list_called = 1;
type_conversion,transport-helper.c,1233,-,+,,12,		else if (buf.buf[0] == ':') {
type_conversion,transport-helper.c,1249,-,+,,10,		*eov = '\0';
type_conversion,transport-helper.c,1251,-,+,,11,			*eon = '\0';
type_conversion,transport-helper.c,1253,-,+,,7,		if (buf.buf[0] == '@')
type_conversion,transport-helper.c,1255,-,+,,12,		else if (buf.buf[0] != '?')
type_conversion,transport-helper.c,1259,-,+,,24,				(*tail)->status |= REF_STATUS_UPTODATE;
type_conversion,transport-helper.c,1299,-,+,,37,"	struct helper_data *data = xcalloc(1, sizeof(*data));"
type_conversion,transport-helper.c,1411,-,+,,14,	if (bytes < 0) {
type_conversion,transport-helper.c,1414,-,+,,22,	} else if (bytes == 0) {
type_conversion,transport-helper.c,1418,-,+,,21,	} else if (bytes > 0) {
type_conversion,transport-helper.c,1419,-,+,,16,		t->bufuse += bytes;
type_conversion,transport-helper.c,1433,-,+,,19,	if (t->bufuse == 0)
type_conversion,transport-helper.c,1438,-,+,,14,	if (bytes < 0) {
type_conversion,transport-helper.c,1441,-,+,,21,	} else if (bytes > 0) {
type_conversion,transport-helper.c,1442,-,+,,16,		t->bufuse -= bytes;
type_conversion,transport-helper.c,1616,-,+,,21,	state.ptg.bufuse = 0;
type_conversion,transport-helper.c,1625,-,+,,21,	state.gtp.bufuse = 0;
type_conversion,transport.c,61,-,+,,14,	for (i = 0; i < ARRAY_SIZE(keys); i++)
type_conversion,transport.c,92,-,+,,7,		if (ref->status != REF_STATUS_OK &&
type_conversion,transport.c,93,-,+,,4,			ref->status != REF_STATUS_UPTODATE)
type_conversion,transport.c,117,-,+,,15,			int flag = transport->verbose < 0 ? 0 : BRANCH_CONFIG_VERBOSE;
type_conversion,transport.c,120,-,+,,14,		} else if (transport->verbose >= 0)
type_conversion,transport.c,137,-,+,,38,	data->get_refs_from_bundle_called = 1;
type_conversion,transport.c,161,-,+,,14,	for (i = 0; i < data->header.references.nr; i++) {
type_conversion,transport.c,222,-,+,,16,		opts->thin = !!value;
type_conversion,transport.c,225,-,+,,22,		opts->followtags = !!value;
type_conversion,transport.c,228,-,+,,16,		opts->keep = !!value;
type_conversion,transport.c,231,-,+,,26,		opts->update_shallow = !!value;
type_conversion,transport.c,238,-,+,,18,"			opts->depth = strtol(value, &end, 0);"
type_conversion,transport.c,250,-,+,,27,		opts->deepen_relative = !!value;
type_conversion,transport.c,253,-,+,,25,		opts->from_promisor = !!value;
type_conversion,transport.c,260,-,+,,19,		opts->refetch = !!value;
type_conversion,transport.c,263,-,+,,26,		opts->reject_shallow = !!value;
type_conversion,transport.c,272,-,+,,14,	int flags = transport->verbose > 0 ? CONNECT_VERBOSE : 0;
type_conversion,transport.c,324,-,+,,49,"	packet_reader_init(&reader, data->fd[0], NULL, 0,"
type_conversion,transport.c,338,-,+,,6,					transport->stateless_rpc);
type_conversion,transport.c,344,-,+,,30,"				 for_push ? REF_NORMAL : 0,"
type_conversion,transport.c,357,-,+,,29,	data->finished_handshake = 1;
type_conversion,transport.c,376,-,+,,22,	int stateless_rpc = transport->stateless_rpc;
type_conversion,transport.c,397,-,+,,49,"	packet_reader_init(&reader, data->fd[0], NULL, 0,"
type_conversion,transport.c,416,-,+,,19,	args.keep_pack = data->options.keep;
type_conversion,transport.c,417,-,+,,19,	args.lock_pack = 1;
type_conversion,transport.c,418,-,+,,23,	args.use_thin_pack = data->options.thin;
type_conversion,transport.c,419,-,+,,21,	args.include_tag = data->options.followtags;
type_conversion,transport.c,420,-,+,,18,	args.verbose = (transport->verbose > 1);
type_conversion,transport.c,421,-,+,,16,	args.quiet = (transport->verbose < 0);
type_conversion,transport.c,422,-,+,,21,	args.no_progress = !transport->progress;
type_conversion,transport.c,426,-,+,,25,	args.deepen_relative = data->options.deepen_relative;
type_conversion,transport.c,428,-,+,,3,		data->options.check_self_contained_and_connected;
type_conversion,transport.c,429,-,+,,17,	args.cloning = transport->cloning;
type_conversion,transport.c,430,-,+,,24,	args.update_shallow = data->options.update_shallow;
type_conversion,transport.c,431,-,+,,23,	args.from_promisor = data->options.from_promisor;
type_conversion,transport.c,434,-,+,,17,	args.refetch = data->options.refetch;
type_conversion,transport.c,435,-,+,,23,	args.stateless_rpc = transport->stateless_rpc;
type_conversion,transport.c,438,-,+,,31,	args.reject_shallow_remote = transport->smart_options->reject_shallow;
type_conversion,transport.c,452,-,+,,6,	if (data->version == protocol_unknown_version)
type_conversion,transport.c,454,-,+,,11,	else if (data->version <= protocol_v1)
type_conversion,transport.c,458,-,+,,7,		if (data->version < protocol_v2) {
type_conversion,transport.c,467,-,+,,12,"					      transport->stateless_rpc,"
type_conversion,transport.c,480,-,+,,29,	data->finished_handshake = 0;
type_conversion,transport.c,482,-,+,,3,		args.self_contained_and_connected;
type_conversion,transport.c,483,-,+,,39,	data->options.connectivity_checked = args.connectivity_checked;
type_conversion,transport.c,548,-,+,,26,"					NULL, rs.dst, NULL, 0);"
type_conversion,transport.c,552,-,+,,12,"					NULL, 0, 0);"
type_conversion,transport.c,563,-,+,,6,	if (ref->status != REF_STATUS_OK && ref->status != REF_STATUS_UPTODATE)
type_conversion,transport.c,569,-,+,,6,"					ref->deletion, verbose);"
type_conversion,transport.c,593,-,+,,35,"			fprintf(stdout, ""%c\t%s:%s\t"", flag, from->name, to_name);"
type_conversion,transport.c,595,-,+,,33,"			fprintf(stdout, ""%c\t:%s\t"", flag, to_name);"
type_conversion,transport.c,606,-,+,,41,"		fprintf(stderr, "" %s%c %-*s%s "", red, flag, summary_width,"
type_conversion,transport.c,641,-,+,,19,		forced_update = report->forced_update;
type_conversion,transport.c,643,-,+,,19,		forced_update = ref->forced_update;
type_conversion,transport.c,650,-,+,,20,"		print_ref_status('-', ""[deleted]"", ref, NULL, NULL,"
type_conversion,transport.c,653,-,+,,20,"		print_ref_status('*',"
type_conversion,transport.c,670,-,+,,11,			type = '+';
type_conversion,transport.c,674,-,+,,11,			type = ' ';
type_conversion,transport.c,698,-,+,,20,"		print_ref_status('X', ""[no match]"", ref, NULL, NULL,"
type_conversion,transport.c,702,-,+,,20,"		print_ref_status('!', ""[rejected]"", ref, NULL,"
type_conversion,transport.c,707,-,+,,20,"		print_ref_status('=', ""[up to date]"", ref,"
type_conversion,transport.c,712,-,+,,20,"		print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,"
type_conversion,transport.c,717,-,+,,20,"		print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,"
type_conversion,transport.c,722,-,+,,20,"		print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,"
type_conversion,transport.c,727,-,+,,20,"		print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,"
type_conversion,transport.c,732,-,+,,20,"		print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,"
type_conversion,transport.c,737,-,+,,20,"		print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,"
type_conversion,transport.c,742,-,+,,20,"		print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,"
type_conversion,transport.c,747,-,+,,20,"		print_ref_status('!', ""[remote rejected]"", ref,"
type_conversion,transport.c,753,-,+,,20,"		print_ref_status('!', ""[remote failure]"", ref,"
type_conversion,transport.c,759,-,+,,20,"		print_ref_status('!', ""[rejected]"", ref, ref->peer_ref,"
type_conversion,transport.c,825,-,+,,8,			if (ref->status == REF_STATUS_UPTODATE)
type_conversion,transport.c,831,-,+,,7,		if (ref->status == REF_STATUS_OK)
type_conversion,transport.c,835,-,+,,20,	*reject_reasons = 0;
type_conversion,transport.c,837,-,+,,7,		if (ref->status != REF_STATUS_NONE &&
type_conversion,transport.c,838,-,+,,7,		    ref->status != REF_STATUS_UPTODATE &&
type_conversion,transport.c,839,-,+,,7,		    ref->status != REF_STATUS_OK)
type_conversion,transport.c,842,-,+,,7,		if (ref->status == REF_STATUS_REJECT_NONFASTFORWARD) {
type_conversion,transport.c,847,-,+,,14,		} else if (ref->status == REF_STATUS_REJECT_ALREADY_EXISTS) {
type_conversion,transport.c,849,-,+,,14,		} else if (ref->status == REF_STATUS_REJECT_FETCH_FIRST) {
type_conversion,transport.c,851,-,+,,14,		} else if (ref->status == REF_STATUS_REJECT_NEEDS_FORCE) {
type_conversion,transport.c,853,-,+,,14,		} else if (ref->status == REF_STATUS_REJECT_REMOTE_UPDATED) {
type_conversion,transport.c,875,-,+,,23,	args.use_thin_pack = data->options.thin;
type_conversion,transport.c,876,-,+,,18,	args.verbose = (transport->verbose > 0);
type_conversion,transport.c,877,-,+,,16,	args.quiet = (transport->verbose < 0);
type_conversion,transport.c,878,-,+,,18,	args.progress = transport->progress;
type_conversion,transport.c,917,-,+,,29,	data->finished_handshake = 0;
type_conversion,transport.c,972,-,+,,29,	data->finished_handshake = 0;
type_conversion,transport.c,978,-,+,,28,	transport->cannot_reuse = 1;
type_conversion,transport.c,991,-,+,,9,"	return strchr(url, ':') - url;"
type_conversion,transport.c,1115,-,+,,34,"	struct transport *ret = xcalloc(1, sizeof(*ret));"
type_conversion,transport.c,1117,-,+,,18,	ret->progress = isatty(2);
type_conversion,transport.c,1126,-,+,,25,	ret->got_remote_refs = 0;
type_conversion,transport.c,1138,-,+,,37,"		while (is_urlschemechar(p == url, *p))"
type_conversion,transport.c,1141,-,+,,27,"			helper = xstrndup(url, p - url);"
type_conversion,transport.c,1149,-,+,,48,"		struct bundle_transport_data *data = xcalloc(1, sizeof(*data));"
type_conversion,transport.c,1166,-,+,,45,"		struct git_transport_data *data = xcalloc(1, sizeof(*data));"
type_conversion,transport.c,1173,-,+,,30,		data->finished_handshake = 0;
type_conversion,transport.c,1177,-,+,,33,"		char *handler = xmemdupz(url, len);"
type_conversion,transport.c,1182,-,+,,30,		ret->smart_options->thin = 1;
type_conversion,transport.c,1242,-,+,,25,		transport->progress = !!force_progress;
type_conversion,transport.c,1244,-,+,,25,		transport->progress = verbosity >= 0 && isatty(2);
type_conversion,transport.c,1253,-,+,,14,	for (i = 0; i < needs_pushing->nr; i++)
type_conversion,transport.c,1292,-,+,,20,"	strbuf_init(&buf, 256);"
type_conversion,transport.c,1296,-,+,,7,		if (r->status == REF_STATUS_REJECT_NONFASTFORWARD) continue;
type_conversion,transport.c,1297,-,+,,7,		if (r->status == REF_STATUS_REJECT_STALE) continue;
type_conversion,transport.c,1298,-,+,,7,		if (r->status == REF_STATUS_REJECT_REMOTE_UPDATED) continue;
type_conversion,transport.c,1299,-,+,,7,		if (r->status == REF_STATUS_UPTODATE) continue;
type_conversion,transport.c,1306,-,+,,50,"		if (write_in_full(proc.in, buf.buf, buf.len) < 0) {"
type_conversion,transport.c,1336,-,+,,20,	int match_flags = MATCH_REFS_NONE;
type_conversion,transport.c,1337,-,+,,17,	int verbose = (transport->verbose > 0);
type_conversion,transport.c,1338,-,+,,15,	int quiet = (transport->verbose < 0);
type_conversion,transport.c,1346,-,+,,20,	*reject_reasons = 0;
type_conversion,transport.c,1369,-,+,,18,		match_flags |= MATCH_REFS_ALL;
type_conversion,transport.c,1371,-,+,,18,		match_flags |= MATCH_REFS_MIRROR;
type_conversion,transport.c,1373,-,+,,18,		match_flags |= MATCH_REFS_PRUNE;
type_conversion,transport.c,1375,-,+,,18,		match_flags |= MATCH_REFS_FOLLOW_TAGS;
type_conversion,transport.c,1490,-,+,,32,		transport->got_remote_refs = 1;
type_conversion,transport.c,1546,-,+,,37,	transport->got_remote_bundle_uri = 1;
type_conversion,transport.c,1571,-,+,,14,	for (i = 0; i < transport->pack_lockfiles.nr; i++)
type_conversion,transport.c,1609,-,+,,32,"	size_t anon_len, prefix_len = 0;"
type_conversion,transport.c,1625,-,+,,12,			switch (*cp) {
type_conversion,transport.c,1640,-,+,,38,		prefix_len = scheme_prefix - url + 3;
type_conversion,tree-diff.c,81,-,+,,36,"	cmp = base_name_compare(e1->path, tree_entry_len(e1), e1->mode,"
type_conversion,tree-diff.c,82,-,+,,15,"				e2->path, tree_entry_len(e2), e2->mode);"
type_conversion,tree-diff.c,98,-,+,,19,"			1, 1, p->path, 0, 0);"
type_conversion,tree-diff.c,115,-,+,,58,"		opt->add_remove(opt, addremove, mode, oid, 1, p->path, 0);"
type_conversion,tree-diff.c,157,-,+,,33,"	size_t len = st_add(base->len, pathlen);"
type_conversion,tree-diff.c,162,-,+,,23,	if (p && (alloclen > (intptr_t)p->next)) {
type_conversion,tree-diff.c,180,-,+,,36,"	memcpy(p->path + base->len, path, pathlen);"
type_conversion,tree-diff.c,181,-,+,,17,	p->path[len] = 0;
type_conversion,tree-diff.c,207,-,+,,20,	int old_baselen = base->len;
type_conversion,tree-diff.c,231,-,+,,10,		mode = 0;
type_conversion,tree-diff.c,236,-,+,,14,		emitthis = opt->flags.tree_in_recursive;
type_conversion,tree-diff.c,242,-,+,,55,"		p = path_appendnew(p, nparent, base, path, pathlen, mode, oid);"
type_conversion,tree-diff.c,266,-,+,,14,				mode_i = 0;
type_conversion,tree-diff.c,305,-,+,,26,"		strbuf_add(base, path, pathlen);"
type_conversion,tree-diff.c,312,-,+,,22,"	strbuf_setlen(base, old_baselen);"
type_conversion,tree-diff.c,325,-,+,,8,			if (match == all_entries_not_interesting)
type_conversion,tree-diff.c,326,-,+,,15,				t->size = 0;
type_conversion,tree-diff.c,636,-,+,,30,	diff_opts.flags.recursive = 1;
type_conversion,tree-diff.c,637,-,+,,39,	diff_opts.flags.find_copies_harder = 1;
type_conversion,tree-diff.c,657,-,+,,8,		if ((p->status == 'R' || p->status == 'C') &&
type_conversion,tree-walk.c,19,-,+,,26,	const unsigned hashsz = desc->algo->rawsz;
type_conversion,tree-walk.c,21,-,+,,22,	if (size < hashsz + 3 || buf[size - (hashsz + 1)]) {
type_conversion,tree-walk.c,35,-,+,,23,	len = strlen(path) + 1;
type_conversion,tree-walk.c,39,-,+,,22,	desc->entry.mode = (desc->flags & TREE_DESC_RAW_MODES) ? mode : canon_mode(mode);
type_conversion,tree-walk.c,40,-,+,,30,	desc->entry.pathlen = len - 1;
type_conversion,tree-walk.c,55,-,+,,15,	desc->size = size;
type_conversion,tree-walk.c,87,-,+,,23,	unsigned long size = 0;
type_conversion,tree-walk.c,113,-,+,,23,	unsigned long size = desc->size;
type_conversion,tree-walk.c,114,-,+,,22,	unsigned long len = end - (const unsigned char *)buf;
type_conversion,tree-walk.c,121,-,+,,15,	desc->size = size;
type_conversion,tree-walk.c,142,-,+,,16,		desc->size = 0;
type_conversion,tree-walk.c,180,-,+,,48,"	jw_object_intmax(&jw, ""traverse_trees_count"", traverse_trees_count);"
type_conversion,tree-walk.c,181,-,+,,52,"	jw_object_intmax(&jw, ""traverse_trees_max_depth"", traverse_trees_max_depth);"
type_conversion,tree-walk.c,195,-,+,,30,	if (pathlen && base[pathlen-1] == '/')
type_conversion,tree-walk.c,197,-,+,,38,	info->pathlen = pathlen ? pathlen + 1 : 0;
type_conversion,tree-walk.c,219,-,+,,14,	path[pos] = 0;
type_conversion,tree-walk.c,228,-,+,,17,		path[--pos] = '/';
type_conversion,tree-walk.c,281,-,+,,28,"	int cmp = name_compare(a, a_len, b, b_len);"
type_conversion,tree-walk.c,296,-,+,,37,"	if (a_len < b_len && !memcmp(a, b, a_len) && b[a_len] < '/')"
type_conversion,tree-walk.c,427,-,+,,9,"	return tree_entry_interesting(istate, e, base,
				      info->pathspec);"
type_conversion,tree-walk.c,498,-,+,,30,"			if (name_compare(e->path, len, first, first_len) < 0) {"
type_conversion,tree-walk.c,512,-,+,,31,"				if (name_compare(e->path, len, first, first_len))"
type_conversion,tree-walk.c,518,-,+,,10,		mask = 0;
type_conversion,tree-walk.c,519,-,+,,13,		dirmask = 0;
type_conversion,tree-walk.c,540,-,+,,12,			mask &= trees_used;
type_conversion,tree-walk.c,568,-,+,,16,	int namelen = strlen(name);
type_conversion,tree-walk.c,579,-,+,,29,"		cmp = memcmp(name, entry, entrylen);"
type_conversion,tree-walk.c,588,-,+,,7,		if (name[entrylen] != '/')
type_conversion,tree-walk.c,616,-,+,,6,	if (name[0] == '\0') {
type_conversion,tree-walk.c,660,-,+,,15,	int retval = MISSING_OBJECT;
type_conversion,tree-walk.c,662,-,+,,25,	size_t parents_alloc = 0;
type_conversion,tree-walk.c,663,-,+,,25,"	size_t i, parents_nr = 0;"
type_conversion,tree-walk.c,695,-,+,,8,			if (namebuf.buf[0] == '\0') {
type_conversion,tree-walk.c,697,-,+,,14,				retval = FOUND;
type_conversion,tree-walk.c,709,-,+,,10,		while (namebuf.buf[0] == '/') {
type_conversion,tree-walk.c,710,-,+,,28,"			strbuf_remove(&namebuf, 0, 1);"
type_conversion,tree-walk.c,715,-,+,,19,			*first_slash = 0;
type_conversion,tree-walk.c,726,-,+,,22,			if (parents_nr == 1) {
type_conversion,tree-walk.c,728,-,+,,21,					*first_slash = '/';
type_conversion,tree-walk.c,731,-,+,,13,				*mode = 0;
type_conversion,tree-walk.c,732,-,+,,14,				retval = FOUND;
type_conversion,tree-walk.c,735,-,+,,35,			parent = &parents[parents_nr - 1];
type_conversion,tree-walk.c,738,-,+,,35,			parent = &parents[parents_nr - 1];
type_conversion,tree-walk.c,740,-,+,,28,"			strbuf_remove(&namebuf, 0, remainder ? 3 : 2);"
type_conversion,tree-walk.c,745,-,+,,7,		if (namebuf.buf[0] == '\0') {
type_conversion,tree-walk.c,746,-,+,,41,"			oidcpy(result, &parents[parents_nr - 1].oid);"
type_conversion,tree-walk.c,747,-,+,,13,			retval = FOUND;
type_conversion,tree-walk.c,761,-,+,,14,				retval = FOUND;
type_conversion,tree-walk.c,766,-,+,,28,"			strbuf_remove(&namebuf, 0,"
type_conversion,tree-walk.c,767,-,+,,11,				      1 + first_slash - namebuf.buf);
type_conversion,tree-walk.c,771,-,+,,14,				retval = FOUND;
type_conversion,tree-walk.c,773,-,+,,14,				retval = NOT_DIR;
type_conversion,tree-walk.c,786,-,+,,14,				retval = SYMLINK_LOOP;
type_conversion,tree-walk.c,794,-,+,,13,			retval = DANGLING_SYMLINK;
type_conversion,tree-walk.c,803,-,+,,8,			if (contents[0] == '/') {
type_conversion,tree-walk.c,806,-,+,,13,				*mode = 0;
type_conversion,tree-walk.c,807,-,+,,14,				retval = FOUND;
type_conversion,tree-walk.c,812,-,+,,11,				len = first_slash - namebuf.buf;
type_conversion,tree-walk.c,818,-,+,,35,			parent = &parents[parents_nr - 1];
type_conversion,tree-walk.c,820,-,+,,28,"			strbuf_splice(&namebuf, 0, len,"
type_conversion,tree-walk.c,823,-,+,,29,				namebuf.buf[link_len] = '/';
type_conversion,tree-walk.c,828,-,+,,11,	for (i = 0; i < parents_nr; i++)
type_conversion,tree-walk.c,854,-,+,,11,	else if (*never_interesting != entry_not_interesting) {
type_conversion,tree-walk.c,865,-,+,,8,			    (matchlen < pathlen) ? matchlen : pathlen);
type_conversion,tree-walk.c,889,-,+,,7,		if (match[pathlen] != '/')
type_conversion,tree-walk.c,907,-,+,,44,"		m = ps_strncmp(item, match, entry->path, pathlen);"
type_conversion,tree-walk.c,933,-,+,,30,"		ret = strncmp(base, match, n);"
type_conversion,tree-walk.c,940,-,+,,39,"	return ps_strncmp(item, base, match, len);"
type_conversion,tree-walk.c,955,-,+,,6,	    base[matchlen] == '/' ||
type_conversion,tree-walk.c,956,-,+,,6,	    match[matchlen - 1] == '/')
type_conversion,tree-walk.c,988,-,+,,20,		while (dirlen && match[dirlen - 1] != '/')
type_conversion,tree-walk.c,1008,-,+,,9,	return entry_interesting;
type_conversion,tree-walk.c,1024,-,+,,25,"	int pathlen, baselen = base->len;"
type_conversion,tree-walk.c,1113,-,+,,7,						item->nowildcard_len - baselen))
type_conversion,tree-walk.c,1144,-,+,,33,"		strbuf_add(base, entry->path, pathlen);"
type_conversion,tree-walk.c,1148,-,+,,24,"			strbuf_setlen(base, baselen);"
type_conversion,tree-walk.c,1161,-,+,,5,				item->nowildcard_len)) {
type_conversion,tree-walk.c,1162,-,+,,24,"			strbuf_setlen(base, baselen);"
type_conversion,tree-walk.c,1166,-,+,,23,"		strbuf_setlen(base, baselen);"
type_conversion,tree-walk.c,1201,-,+,,34,"			strbuf_add(base, entry->path, pathlen);"
type_conversion,tree-walk.c,1203,-,+,,10,"						   base->len, item);"
type_conversion,tree-walk.c,1204,-,+,,24,"			strbuf_setlen(base, baselen);"
type_conversion,tree-walk.c,1259,-,+,,6,"	    positive <= entry_not_interesting) /* #1, #2, #11, #12 */"
type_conversion,tree-walk.c,1265,-,+,,6,	if (positive == all_entries_interesting &&
type_conversion,tree-walk.c,1266,-,+,,6,	    negative == entry_not_interesting)
type_conversion,tree-walk.c,1270,-,+,,6,	if (negative <= entry_not_interesting)
type_conversion,tree-walk.c,1275,-,+,,6,	    positive >= entry_interesting &&
type_conversion,tree-walk.c,1276,-,+,,6,	    negative == entry_interesting)
type_conversion,tree-walk.c,1279,-,+,,7,	if ((positive == entry_interesting &&
type_conversion,tree-walk.c,1280,-,+,,7,"	     negative >= entry_interesting) || /* #5, #6, #16 */"
type_conversion,tree-walk.c,1281,-,+,,7,	    (positive == all_entries_interesting &&
type_conversion,tree-walk.c,1282,-,+,,7,	     negative == entry_interesting)) /* #9 */
type_conversion,tree-walk.h,55,-,+,,11,	*modep = desc->entry.mode;
type_conversion,tree.c,23,-,+,,20,"	int len, oldlen = base->len;"
type_conversion,tree.c,35,-,+,,7,		if (retval != all_entries_interesting) {
type_conversion,tree.c,38,-,+,,8,			if (retval == all_entries_not_interesting)
type_conversion,tree.c,40,-,+,,8,			if (retval == entry_not_interesting)
type_conversion,tree.c,76,-,+,,32,"		strbuf_add(base, entry.path, len);"
type_conversion,tree.c,81,-,+,,23,"		strbuf_setlen(base, oldlen);"
type_conversion,tree.c,109,-,+,,7,	c1 = name1[len];
type_conversion,tree.c,110,-,+,,7,	c2 = name2[len];
type_conversion,tree.c,112,-,+,,8,		c1 = '/';
type_conversion,tree.c,114,-,+,,8,		c2 = '/';
type_conversion,tree.c,115,-,+,,10,	return (c1 < c2) ? -1 : (c1 > c2) ? 1 : 0;
type_conversion,tree.c,141,-,+,,7,	c1 = name1[len];
type_conversion,tree.c,143,-,+,,8,		c1 = '/';
type_conversion,tree.c,144,-,+,,7,	c2 = name2[len];
type_conversion,tree.c,146,-,+,,8,		c2 = '/';
type_conversion,tree.c,147,-,+,,6,	if (c1 == '/' && !c2)
type_conversion,tree.c,149,-,+,,6,	if (c2 == '/' && !c1)
type_conversion,tree.c,151,-,+,,9,	return c1 - c2;
type_conversion,tree.c,179,-,+,,24,	item->object.parsed = 1;
type_conversion,tree.c,200,-,+,,6,	if (type != OBJ_TREE) {
type_conversion,tree.c,211,-,+,,15,	tree->size = 0;
type_conversion,tree.c,212,-,+,,24,	tree->object.parsed = 0;
type_conversion,tree_test.c,17,-,+,,9,	return (char *)a - (char *)b;
type_conversion,tree_test.c,46,-,+,,14,	for (i = 1; i < ARRAY_SIZE(nodes); i++) {
type_conversion,ubc_check.c,107,-,+,,33,	mask &= (((((W[44]^W[45])>>29)&1)-1) | ~(DV_I_48_0_bit|DV_I_51_0_bit|DV_I_52_0_bit|DV_II_45_0_bit|DV_II_46_0_bit|DV_II_50_0_bit|DV_II_51_0_bit));
type_conversion,ubc_check.c,108,-,+,,33,	mask &= (((((W[49]^W[50])>>29)&1)-1) | ~(DV_I_46_0_bit|DV_II_45_0_bit|DV_II_50_0_bit|DV_II_51_0_bit|DV_II_55_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,109,-,+,,33,	mask &= (((((W[48]^W[49])>>29)&1)-1) | ~(DV_I_45_0_bit|DV_I_52_0_bit|DV_II_49_0_bit|DV_II_50_0_bit|DV_II_54_0_bit|DV_II_55_0_bit));
type_conversion,ubc_check.c,110,-,+,,33,	mask &= ((((W[47]^(W[50]>>25))&(1<<4))-(1<<4)) | ~(DV_I_47_0_bit|DV_I_49_0_bit|DV_I_51_0_bit|DV_II_45_0_bit|DV_II_51_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,111,-,+,,33,	mask &= (((((W[47]^W[48])>>29)&1)-1) | ~(DV_I_44_0_bit|DV_I_51_0_bit|DV_II_48_0_bit|DV_II_49_0_bit|DV_II_53_0_bit|DV_II_54_0_bit));
type_conversion,ubc_check.c,112,-,+,,38,	mask &= (((((W[46]>>4)^(W[49]>>29))&1)-1) | ~(DV_I_46_0_bit|DV_I_48_0_bit|DV_I_50_0_bit|DV_I_52_0_bit|DV_II_50_0_bit|DV_II_55_0_bit));
type_conversion,ubc_check.c,113,-,+,,33,	mask &= (((((W[46]^W[47])>>29)&1)-1) | ~(DV_I_43_0_bit|DV_I_50_0_bit|DV_II_47_0_bit|DV_II_48_0_bit|DV_II_52_0_bit|DV_II_53_0_bit));
type_conversion,ubc_check.c,114,-,+,,38,	mask &= (((((W[45]>>4)^(W[48]>>29))&1)-1) | ~(DV_I_45_0_bit|DV_I_47_0_bit|DV_I_49_0_bit|DV_I_51_0_bit|DV_II_49_0_bit|DV_II_54_0_bit));
type_conversion,ubc_check.c,115,-,+,,33,	mask &= (((((W[45]^W[46])>>29)&1)-1) | ~(DV_I_49_0_bit|DV_I_52_0_bit|DV_II_46_0_bit|DV_II_47_0_bit|DV_II_51_0_bit|DV_II_52_0_bit));
type_conversion,ubc_check.c,116,-,+,,38,	mask &= (((((W[44]>>4)^(W[47]>>29))&1)-1) | ~(DV_I_44_0_bit|DV_I_46_0_bit|DV_I_48_0_bit|DV_I_50_0_bit|DV_II_48_0_bit|DV_II_53_0_bit));
type_conversion,ubc_check.c,117,-,+,,38,	mask &= (((((W[43]>>4)^(W[46]>>29))&1)-1) | ~(DV_I_43_0_bit|DV_I_45_0_bit|DV_I_47_0_bit|DV_I_49_0_bit|DV_II_47_0_bit|DV_II_52_0_bit));
type_conversion,ubc_check.c,118,-,+,,33,	mask &= (((((W[43]^W[44])>>29)&1)-1) | ~(DV_I_47_0_bit|DV_I_50_0_bit|DV_I_51_0_bit|DV_II_45_0_bit|DV_II_49_0_bit|DV_II_50_0_bit));
type_conversion,ubc_check.c,119,-,+,,38,	mask &= (((((W[42]>>4)^(W[45]>>29))&1)-1) | ~(DV_I_44_0_bit|DV_I_46_0_bit|DV_I_48_0_bit|DV_I_52_0_bit|DV_II_46_0_bit|DV_II_51_0_bit));
type_conversion,ubc_check.c,120,-,+,,38,	mask &= (((((W[41]>>4)^(W[44]>>29))&1)-1) | ~(DV_I_43_0_bit|DV_I_45_0_bit|DV_I_47_0_bit|DV_I_51_0_bit|DV_II_45_0_bit|DV_II_50_0_bit));
type_conversion,ubc_check.c,121,-,+,,33,	mask &= (((((W[40]^W[41])>>29)&1)-1) | ~(DV_I_44_0_bit|DV_I_47_0_bit|DV_I_48_0_bit|DV_II_46_0_bit|DV_II_47_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,122,-,+,,33,	mask &= (((((W[54]^W[55])>>29)&1)-1) | ~(DV_I_51_0_bit|DV_II_47_0_bit|DV_II_50_0_bit|DV_II_55_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,123,-,+,,33,	mask &= (((((W[53]^W[54])>>29)&1)-1) | ~(DV_I_50_0_bit|DV_II_46_0_bit|DV_II_49_0_bit|DV_II_54_0_bit|DV_II_55_0_bit));
type_conversion,ubc_check.c,124,-,+,,33,	mask &= (((((W[52]^W[53])>>29)&1)-1) | ~(DV_I_49_0_bit|DV_II_45_0_bit|DV_II_48_0_bit|DV_II_53_0_bit|DV_II_54_0_bit));
type_conversion,ubc_check.c,125,-,+,,33,	mask &= ((((W[50]^(W[53]>>25))&(1<<4))-(1<<4)) | ~(DV_I_50_0_bit|DV_I_52_0_bit|DV_II_46_0_bit|DV_II_48_0_bit|DV_II_54_0_bit));
type_conversion,ubc_check.c,126,-,+,,33,	mask &= (((((W[50]^W[51])>>29)&1)-1) | ~(DV_I_47_0_bit|DV_II_46_0_bit|DV_II_51_0_bit|DV_II_52_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,127,-,+,,33,	mask &= ((((W[49]^(W[52]>>25))&(1<<4))-(1<<4)) | ~(DV_I_49_0_bit|DV_I_51_0_bit|DV_II_45_0_bit|DV_II_47_0_bit|DV_II_53_0_bit));
type_conversion,ubc_check.c,128,-,+,,33,	mask &= ((((W[48]^(W[51]>>25))&(1<<4))-(1<<4)) | ~(DV_I_48_0_bit|DV_I_50_0_bit|DV_I_52_0_bit|DV_II_46_0_bit|DV_II_52_0_bit));
type_conversion,ubc_check.c,129,-,+,,33,	mask &= (((((W[42]^W[43])>>29)&1)-1) | ~(DV_I_46_0_bit|DV_I_49_0_bit|DV_I_50_0_bit|DV_II_48_0_bit|DV_II_49_0_bit));
type_conversion,ubc_check.c,130,-,+,,33,	mask &= (((((W[41]^W[42])>>29)&1)-1) | ~(DV_I_45_0_bit|DV_I_48_0_bit|DV_I_49_0_bit|DV_II_47_0_bit|DV_II_48_0_bit));
type_conversion,ubc_check.c,131,-,+,,38,	mask &= (((((W[40]>>4)^(W[43]>>29))&1)-1) | ~(DV_I_44_0_bit|DV_I_46_0_bit|DV_I_50_0_bit|DV_II_49_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,132,-,+,,38,	mask &= (((((W[39]>>4)^(W[42]>>29))&1)-1) | ~(DV_I_43_0_bit|DV_I_45_0_bit|DV_I_49_0_bit|DV_II_48_0_bit|DV_II_55_0_bit));
type_conversion,ubc_check.c,134,-,+,,39,		mask &= (((((W[38]>>4)^(W[41]>>29))&1)-1) | ~(DV_I_44_0_bit|DV_I_48_0_bit|DV_II_47_0_bit|DV_II_54_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,135,-,+,,38,	mask &= (((((W[37]>>4)^(W[40]>>29))&1)-1) | ~(DV_I_43_0_bit|DV_I_47_0_bit|DV_II_46_0_bit|DV_II_53_0_bit|DV_II_55_0_bit));
type_conversion,ubc_check.c,137,-,+,,34,		mask &= (((((W[55]^W[56])>>29)&1)-1) | ~(DV_I_52_0_bit|DV_II_48_0_bit|DV_II_51_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,139,-,+,,34,		mask &= ((((W[52]^(W[55]>>25))&(1<<4))-(1<<4)) | ~(DV_I_52_0_bit|DV_II_48_0_bit|DV_II_50_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,141,-,+,,34,		mask &= ((((W[51]^(W[54]>>25))&(1<<4))-(1<<4)) | ~(DV_I_51_0_bit|DV_II_47_0_bit|DV_II_49_0_bit|DV_II_55_0_bit));
type_conversion,ubc_check.c,143,-,+,,34,		mask &= (((((W[51]^W[52])>>29)&1)-1) | ~(DV_I_48_0_bit|DV_II_47_0_bit|DV_II_52_0_bit|DV_II_53_0_bit));
type_conversion,ubc_check.c,145,-,+,,39,		mask &= (((((W[36]>>4)^(W[40]>>29))&1)-1) | ~(DV_I_46_0_bit|DV_I_49_0_bit|DV_II_45_0_bit|DV_II_48_0_bit));
type_conversion,ubc_check.c,147,-,+,,13,		mask &= ((0-(((W[53]^W[56])>>29)&1)) | ~(DV_I_52_0_bit|DV_II_48_0_bit|DV_II_49_0_bit));
type_conversion,ubc_check.c,149,-,+,,13,		mask &= ((0-(((W[51]^W[54])>>29)&1)) | ~(DV_I_50_0_bit|DV_II_46_0_bit|DV_II_47_0_bit));
type_conversion,ubc_check.c,151,-,+,,13,		mask &= ((0-(((W[50]^W[52])>>29)&1)) | ~(DV_I_49_0_bit|DV_I_51_0_bit|DV_II_45_0_bit));
type_conversion,ubc_check.c,153,-,+,,13,		mask &= ((0-(((W[49]^W[51])>>29)&1)) | ~(DV_I_48_0_bit|DV_I_50_0_bit|DV_I_52_0_bit));
type_conversion,ubc_check.c,155,-,+,,13,		mask &= ((0-(((W[48]^W[50])>>29)&1)) | ~(DV_I_47_0_bit|DV_I_49_0_bit|DV_I_51_0_bit));
type_conversion,ubc_check.c,157,-,+,,13,		mask &= ((0-(((W[47]^W[49])>>29)&1)) | ~(DV_I_46_0_bit|DV_I_48_0_bit|DV_I_50_0_bit));
type_conversion,ubc_check.c,159,-,+,,13,		mask &= ((0-(((W[46]^W[48])>>29)&1)) | ~(DV_I_45_0_bit|DV_I_47_0_bit|DV_I_49_0_bit));
type_conversion,ubc_check.c,160,-,+,,27,	mask &= ((((W[45]^W[47])&(1<<6))-(1<<6)) | ~(DV_I_47_2_bit|DV_I_49_2_bit|DV_I_51_2_bit));
type_conversion,ubc_check.c,162,-,+,,13,		mask &= ((0-(((W[45]^W[47])>>29)&1)) | ~(DV_I_44_0_bit|DV_I_46_0_bit|DV_I_48_0_bit));
type_conversion,ubc_check.c,163,-,+,,32,	mask &= (((((W[44]^W[46])>>6)&1)-1) | ~(DV_I_46_2_bit|DV_I_48_2_bit|DV_I_50_2_bit));
type_conversion,ubc_check.c,165,-,+,,13,		mask &= ((0-(((W[44]^W[46])>>29)&1)) | ~(DV_I_43_0_bit|DV_I_45_0_bit|DV_I_47_0_bit));
type_conversion,ubc_check.c,166,-,+,,12,	mask &= ((0-((W[41]^(W[42]>>5))&(1<<1))) | ~(DV_I_48_2_bit|DV_II_46_2_bit|DV_II_51_2_bit));
type_conversion,ubc_check.c,167,-,+,,12,	mask &= ((0-((W[40]^(W[41]>>5))&(1<<1))) | ~(DV_I_47_2_bit|DV_I_51_2_bit|DV_II_50_2_bit));
type_conversion,ubc_check.c,169,-,+,,13,		mask &= ((0-(((W[40]^W[42])>>4)&1)) | ~(DV_I_44_0_bit|DV_I_46_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,170,-,+,,12,	mask &= ((0-((W[39]^(W[40]>>5))&(1<<1))) | ~(DV_I_46_2_bit|DV_I_50_2_bit|DV_II_49_2_bit));
type_conversion,ubc_check.c,172,-,+,,13,		mask &= ((0-(((W[39]^W[41])>>4)&1)) | ~(DV_I_43_0_bit|DV_I_45_0_bit|DV_II_55_0_bit));
type_conversion,ubc_check.c,174,-,+,,13,		mask &= ((0-(((W[38]^W[40])>>4)&1)) | ~(DV_I_44_0_bit|DV_II_54_0_bit|DV_II_56_0_bit));
type_conversion,ubc_check.c,176,-,+,,13,		mask &= ((0-(((W[37]^W[39])>>4)&1)) | ~(DV_I_43_0_bit|DV_II_53_0_bit|DV_II_55_0_bit));
type_conversion,ubc_check.c,177,-,+,,12,	mask &= ((0-((W[36]^(W[37]>>5))&(1<<1))) | ~(DV_I_47_2_bit|DV_I_50_2_bit|DV_II_46_2_bit));
type_conversion,ubc_check.c,179,-,+,,39,		mask &= (((((W[35]>>4)^(W[39]>>29))&1)-1) | ~(DV_I_45_0_bit|DV_I_48_0_bit|DV_II_47_0_bit));
type_conversion,ubc_check.c,181,-,+,,13,		mask &= ((0-((W[63]^(W[64]>>5))&(1<<0))) | ~(DV_I_48_0_bit|DV_II_48_0_bit));
type_conversion,ubc_check.c,183,-,+,,13,		mask &= ((0-((W[63]^(W[64]>>5))&(1<<1))) | ~(DV_I_45_0_bit|DV_II_45_0_bit));
type_conversion,ubc_check.c,185,-,+,,13,		mask &= ((0-((W[62]^(W[63]>>5))&(1<<0))) | ~(DV_I_47_0_bit|DV_II_47_0_bit));
type_conversion,ubc_check.c,187,-,+,,13,		mask &= ((0-((W[61]^(W[62]>>5))&(1<<0))) | ~(DV_I_46_0_bit|DV_II_46_0_bit));
type_conversion,ubc_check.c,188,-,+,,12,	mask &= ((0-((W[61]^(W[62]>>5))&(1<<2))) | ~(DV_I_46_2_bit|DV_II_46_2_bit));
type_conversion,ubc_check.c,190,-,+,,13,		mask &= ((0-((W[60]^(W[61]>>5))&(1<<0))) | ~(DV_I_45_0_bit|DV_II_45_0_bit));
type_conversion,ubc_check.c,192,-,+,,34,		mask &= (((((W[58]^W[59])>>29)&1)-1) | ~(DV_II_51_0_bit|DV_II_54_0_bit));
type_conversion,ubc_check.c,194,-,+,,34,		mask &= (((((W[57]^W[58])>>29)&1)-1) | ~(DV_II_50_0_bit|DV_II_53_0_bit));
type_conversion,ubc_check.c,196,-,+,,34,		mask &= ((((W[56]^(W[59]>>25))&(1<<4))-(1<<4)) | ~(DV_II_52_0_bit|DV_II_54_0_bit));
type_conversion,ubc_check.c,198,-,+,,13,		mask &= ((0-(((W[56]^W[59])>>29)&1)) | ~(DV_II_51_0_bit|DV_II_52_0_bit));
type_conversion,ubc_check.c,200,-,+,,34,		mask &= (((((W[56]^W[57])>>29)&1)-1) | ~(DV_II_49_0_bit|DV_II_52_0_bit));
type_conversion,ubc_check.c,202,-,+,,34,		mask &= ((((W[55]^(W[58]>>25))&(1<<4))-(1<<4)) | ~(DV_II_51_0_bit|DV_II_53_0_bit));
type_conversion,ubc_check.c,204,-,+,,34,		mask &= ((((W[54]^(W[57]>>25))&(1<<4))-(1<<4)) | ~(DV_II_50_0_bit|DV_II_52_0_bit));
type_conversion,ubc_check.c,206,-,+,,34,		mask &= ((((W[53]^(W[56]>>25))&(1<<4))-(1<<4)) | ~(DV_II_49_0_bit|DV_II_51_0_bit));
type_conversion,ubc_check.c,207,-,+,,32,	mask &= ((((W[51]^(W[50]>>5))&(1<<1))-(1<<1)) | ~(DV_I_50_2_bit|DV_II_46_2_bit));
type_conversion,ubc_check.c,208,-,+,,27,	mask &= ((((W[48]^W[50])&(1<<6))-(1<<6)) | ~(DV_I_50_2_bit|DV_II_46_2_bit));
type_conversion,ubc_check.c,210,-,+,,13,		mask &= ((0-(((W[48]^W[55])>>29)&1)) | ~(DV_I_51_0_bit|DV_I_52_0_bit));
type_conversion,ubc_check.c,211,-,+,,27,	mask &= ((((W[47]^W[49])&(1<<6))-(1<<6)) | ~(DV_I_49_2_bit|DV_I_51_2_bit));
type_conversion,ubc_check.c,212,-,+,,32,	mask &= ((((W[48]^(W[47]>>5))&(1<<1))-(1<<1)) | ~(DV_I_47_2_bit|DV_II_51_2_bit));
type_conversion,ubc_check.c,213,-,+,,27,	mask &= ((((W[46]^W[48])&(1<<6))-(1<<6)) | ~(DV_I_48_2_bit|DV_I_50_2_bit));
type_conversion,ubc_check.c,214,-,+,,32,	mask &= ((((W[47]^(W[46]>>5))&(1<<1))-(1<<1)) | ~(DV_I_46_2_bit|DV_II_50_2_bit));
type_conversion,ubc_check.c,215,-,+,,12,	mask &= ((0-((W[44]^(W[45]>>5))&(1<<1))) | ~(DV_I_51_2_bit|DV_II_49_2_bit));
type_conversion,ubc_check.c,216,-,+,,27,	mask &= ((((W[43]^W[45])&(1<<6))-(1<<6)) | ~(DV_I_47_2_bit|DV_I_49_2_bit));
type_conversion,ubc_check.c,217,-,+,,32,	mask &= (((((W[42]^W[44])>>6)&1)-1) | ~(DV_I_46_2_bit|DV_I_48_2_bit));
type_conversion,ubc_check.c,218,-,+,,32,	mask &= ((((W[43]^(W[42]>>5))&(1<<1))-(1<<1)) | ~(DV_II_46_2_bit|DV_II_51_2_bit));
type_conversion,ubc_check.c,219,-,+,,32,	mask &= ((((W[42]^(W[41]>>5))&(1<<1))-(1<<1)) | ~(DV_I_51_2_bit|DV_II_50_2_bit));
type_conversion,ubc_check.c,220,-,+,,32,	mask &= ((((W[41]^(W[40]>>5))&(1<<1))-(1<<1)) | ~(DV_I_50_2_bit|DV_II_49_2_bit));
type_conversion,ubc_check.c,222,-,+,,34,		mask &= ((((W[39]^(W[43]>>25))&(1<<4))-(1<<4)) | ~(DV_I_52_0_bit|DV_II_51_0_bit));
type_conversion,ubc_check.c,224,-,+,,34,		mask &= ((((W[38]^(W[42]>>25))&(1<<4))-(1<<4)) | ~(DV_I_51_0_bit|DV_II_50_0_bit));
type_conversion,ubc_check.c,226,-,+,,13,		mask &= ((0-((W[37]^(W[38]>>5))&(1<<1))) | ~(DV_I_48_2_bit|DV_I_51_2_bit));
type_conversion,ubc_check.c,228,-,+,,34,		mask &= ((((W[37]^(W[41]>>25))&(1<<4))-(1<<4)) | ~(DV_I_50_0_bit|DV_II_49_0_bit));
type_conversion,ubc_check.c,230,-,+,,13,		mask &= ((0-((W[36]^W[38])&(1<<4))) | ~(DV_II_52_0_bit|DV_II_54_0_bit));
type_conversion,ubc_check.c,231,-,+,,12,	mask &= ((0-((W[35]^(W[36]>>5))&(1<<1))) | ~(DV_I_46_2_bit|DV_I_49_2_bit));
type_conversion,ubc_check.c,233,-,+,,34,		mask &= ((((W[35]^(W[39]>>25))&(1<<3))-(1<<3)) | ~(DV_I_51_0_bit|DV_II_47_0_bit));
type_conversion,ubc_check.c,238,-,+,,31,			    !((W[61]^(W[62]>>5)) & (1<<1))
type_conversion,ubc_check.c,239,-,+,,34,			 || !(!((W[59]^(W[63]>>25)) & (1<<5)))
type_conversion,ubc_check.c,240,-,+,,32,			 || !((W[58]^(W[63]>>30)) & (1<<0))
type_conversion,ubc_check.c,244,-,+,,31,			    !((W[62]^(W[63]>>5)) & (1<<1))
type_conversion,ubc_check.c,245,-,+,,34,			 || !(!((W[60]^(W[64]>>25)) & (1<<5)))
type_conversion,ubc_check.c,246,-,+,,32,			 || !((W[59]^(W[64]>>30)) & (1<<0))
type_conversion,ubc_check.c,252,-,+,,31,			    !((W[62]^(W[63]>>5)) & (1<<2))
type_conversion,ubc_check.c,253,-,+,,28,			 || !(!((W[41]^W[43]) & (1<<6)))
type_conversion,ubc_check.c,257,-,+,,31,			    !((W[63]^(W[64]>>5)) & (1<<2))
type_conversion,ubc_check.c,258,-,+,,33,			 || !(!((W[48]^(W[49]<<5)) & (1<<6)))
type_conversion,ubc_check.c,262,-,+,,33,			    !(!((W[49]^(W[50]<<5)) & (1<<6)))
type_conversion,ubc_check.c,263,-,+,,26,			 || !((W[42]^W[50]) & (1<<1))
type_conversion,ubc_check.c,264,-,+,,33,			 || !(!((W[39]^(W[40]<<5)) & (1<<6)))
type_conversion,ubc_check.c,265,-,+,,26,			 || !((W[38]^W[40]) & (1<<1))
type_conversion,ubc_check.c,275,-,+,,33,			    !(!((W[51]^(W[52]<<5)) & (1<<6)))
type_conversion,ubc_check.c,276,-,+,,28,			 || !(!((W[49]^W[51]) & (1<<6)))
type_conversion,ubc_check.c,277,-,+,,33,			 || !(!((W[37]^(W[37]>>5)) & (1<<1)))
type_conversion,ubc_check.c,278,-,+,,34,			 || !(!((W[35]^(W[39]>>25)) & (1<<5)))
type_conversion,ubc_check.c,286,-,+,,34,			    !(!((W[36]^(W[40]>>25)) & (1<<3)))
type_conversion,ubc_check.c,287,-,+,,31,			 || !((W[35]^(W[40]<<2)) & (1<<30))
type_conversion,ubc_check.c,291,-,+,,34,			    !(!((W[37]^(W[41]>>25)) & (1<<3)))
type_conversion,ubc_check.c,292,-,+,,31,			 || !((W[36]^(W[41]<<2)) & (1<<30))
type_conversion,ubc_check.c,296,-,+,,33,			    !(!((W[53]^(W[54]<<5)) & (1<<6)))
type_conversion,ubc_check.c,297,-,+,,28,			 || !(!((W[51]^W[53]) & (1<<6)))
type_conversion,ubc_check.c,298,-,+,,26,			 || !((W[50]^W[54]) & (1<<1))
type_conversion,ubc_check.c,299,-,+,,33,			 || !(!((W[45]^(W[46]<<5)) & (1<<6)))
type_conversion,ubc_check.c,300,-,+,,34,			 || !(!((W[37]^(W[41]>>25)) & (1<<5)))
type_conversion,ubc_check.c,301,-,+,,32,			 || !((W[36]^(W[41]>>30)) & (1<<0))
type_conversion,ubc_check.c,305,-,+,,26,			    !((W[55]^W[58]) & (1<<29))
type_conversion,ubc_check.c,306,-,+,,34,			 || !(!((W[38]^(W[42]>>25)) & (1<<3)))
type_conversion,ubc_check.c,307,-,+,,31,			 || !((W[37]^(W[42]<<2)) & (1<<30))
type_conversion,ubc_check.c,311,-,+,,33,			    !(!((W[54]^(W[55]<<5)) & (1<<6)))
type_conversion,ubc_check.c,312,-,+,,28,			 || !(!((W[52]^W[54]) & (1<<6)))
type_conversion,ubc_check.c,313,-,+,,26,			 || !((W[51]^W[55]) & (1<<1))
type_conversion,ubc_check.c,314,-,+,,26,			 || !((W[45]^W[47]) & (1<<1))
type_conversion,ubc_check.c,315,-,+,,34,			 || !(!((W[38]^(W[42]>>25)) & (1<<5)))
type_conversion,ubc_check.c,316,-,+,,32,			 || !((W[37]^(W[42]>>30)) & (1<<0))
type_conversion,ubc_check.c,320,-,+,,34,			    !(!((W[39]^(W[43]>>25)) & (1<<3)))
type_conversion,ubc_check.c,321,-,+,,31,			 || !((W[38]^(W[43]<<2)) & (1<<30))
type_conversion,ubc_check.c,325,-,+,,33,			    !(!((W[55]^(W[56]<<5)) & (1<<6)))
type_conversion,ubc_check.c,326,-,+,,28,			 || !(!((W[53]^W[55]) & (1<<6)))
type_conversion,ubc_check.c,327,-,+,,26,			 || !((W[52]^W[56]) & (1<<1))
type_conversion,ubc_check.c,328,-,+,,26,			 || !((W[46]^W[48]) & (1<<1))
type_conversion,ubc_check.c,329,-,+,,34,			 || !(!((W[39]^(W[43]>>25)) & (1<<5)))
type_conversion,ubc_check.c,330,-,+,,32,			 || !((W[38]^(W[43]>>30)) & (1<<0))
type_conversion,ubc_check.c,334,-,+,,28,			    !(!((W[59]^W[60]) & (1<<29)))
type_conversion,ubc_check.c,335,-,+,,34,			 || !(!((W[40]^(W[44]>>25)) & (1<<3)))
type_conversion,ubc_check.c,336,-,+,,34,			 || !(!((W[40]^(W[44]>>25)) & (1<<4)))
type_conversion,ubc_check.c,337,-,+,,31,			 || !((W[39]^(W[44]<<2)) & (1<<30))
type_conversion,ubc_check.c,341,-,+,,26,			    !((W[58]^W[61]) & (1<<29))
type_conversion,ubc_check.c,342,-,+,,34,			 || !(!((W[57]^(W[61]>>25)) & (1<<4)))
type_conversion,ubc_check.c,343,-,+,,34,			 || !(!((W[41]^(W[45]>>25)) & (1<<3)))
type_conversion,ubc_check.c,344,-,+,,34,			 || !(!((W[41]^(W[45]>>25)) & (1<<4)))
type_conversion,ubc_check.c,348,-,+,,34,			    !(!((W[58]^(W[62]>>25)) & (1<<4)))
type_conversion,ubc_check.c,349,-,+,,34,			 || !(!((W[42]^(W[46]>>25)) & (1<<3)))
type_conversion,ubc_check.c,350,-,+,,34,			 || !(!((W[42]^(W[46]>>25)) & (1<<4)))
type_conversion,ubc_check.c,354,-,+,,34,			    !(!((W[59]^(W[63]>>25)) & (1<<4)))
type_conversion,ubc_check.c,355,-,+,,34,			 || !(!((W[57]^(W[59]>>25)) & (1<<4)))
type_conversion,ubc_check.c,356,-,+,,34,			 || !(!((W[43]^(W[47]>>25)) & (1<<3)))
type_conversion,ubc_check.c,357,-,+,,34,			 || !(!((W[43]^(W[47]>>25)) & (1<<4)))
type_conversion,ubc_check.c,361,-,+,,34,			    !(!((W[60]^(W[64]>>25)) & (1<<4)))
type_conversion,ubc_check.c,362,-,+,,34,			 || !(!((W[44]^(W[48]>>25)) & (1<<3)))
type_conversion,ubc_check.c,363,-,+,,34,			 || !(!((W[44]^(W[48]>>25)) & (1<<4)))
type_conversion,unix-socket.c,9,-,+,,30,"	char *path = xmemdupz(orig, len);"
type_conversion,unix-socket.c,37,-,+,,28,	int size = strlen(path) + 1;
type_conversion,unix-socket.c,40,-,+,,6,	if (size > sizeof(sa->sun_path)) {
type_conversion,unix-socket.c,58,-,+,,25,		size = strlen(path) + 1;
type_conversion,unix-socket.c,59,-,+,,7,		if (size > sizeof(sa->sun_path)) {
type_conversion,unix-socket.c,66,-,+,,22,"		if (chdir_len(dir, slash - dir) < 0)"
type_conversion,unix-socket.c,72,-,+,,29,"	memcpy(sa->sun_path, path, size);"
type_conversion,unix-socket.c,88,-,+,,42,"	if (connect(fd, (struct sockaddr *)&sa, sizeof(sa)) < 0)"
type_conversion,unix-socket.c,112,-,+,,42,"	if (unix_sockaddr_init(&sa, path, &ctx, opts->disallow_chdir) < 0)"
type_conversion,unix-socket.c,118,-,+,,39,"	if (bind(fd, (struct sockaddr *)&sa, sizeof(sa)) < 0)"
type_conversion,unix-stream-server.c,24,-,+,,37,"	int fd = unix_stream_connect(path, opts->disallow_chdir);"
type_conversion,unix-stream-server.c,44,-,+,,19,	if (timeout_ms < 0)
type_conversion,unix-stream-server.c,74,-,+,,26,"	server_socket = xcalloc(1, sizeof(*server_socket));"
type_conversion,unpack-file.c,16,-,+,,14,	if (!buf || type != OBJ_BLOB)
type_conversion,unpack-file.c,21,-,+,,37,"	if (write_in_full(fd, buf, size) < 0)"
type_conversion,unpack-objects.c,64,-,+,,6,	if (min <= len)
type_conversion,unpack-objects.c,66,-,+,,6,	if (min > sizeof(buffer))
type_conversion,unpack-objects.c,69,-,+,,42,"		the_hash_algo->update_fn(&ctx, buffer, offset);"
type_conversion,unpack-objects.c,70,-,+,,36,"		memmove(buffer, buffer + offset, len);"
type_conversion,unpack-objects.c,71,-,+,,12,		offset = 0;
type_conversion,unpack-objects.c,74,-,+,,57,"		ssize_t ret = xread(0, buffer + len, sizeof(buffer) - len);"
type_conversion,unpack-objects.c,75,-,+,,14,		if (ret <= 0) {
type_conversion,unpack-objects.c,81,-,+,,17,	} while (len < min);
type_conversion,unpack-objects.c,87,-,+,,6,	if (bytes > len)
type_conversion,unpack-objects.c,89,-,+,,9,	len -= bytes;
type_conversion,unpack-objects.c,90,-,+,,12,	offset += bytes;
type_conversion,unpack-objects.c,95,-,+,,20,	consumed_bytes += bytes;
type_conversion,unpack-objects.c,98,-,+,,31,"	display_throughput(progress, consumed_bytes);"
type_conversion,unpack-objects.c,115,-,+,,44,	unsigned long bufsize = dry_run && size > 8192 ? 8192 : size;
type_conversion,unpack-objects.c,123,-,+,,20,	stream.avail_in = len;
type_conversion,unpack-objects.c,128,-,+,,7,		use(len - stream.avail_in);
type_conversion,unpack-objects.c,140,-,+,,21,		stream.avail_in = len;
type_conversion,unpack-objects.c,225,-,+,,6,	if (type != OBJ_ANY && obj->type != type)
type_conversion,unpack-objects.c,231,-,+,,15,		if (type != obj->type || type <= 0)
type_conversion,unpack-objects.c,252,-,+,,11,	for (i = 0; i < nr_objects; i++) {
type_conversion,unpack-objects.c,276,-,+,,13,	} else if (type == OBJ_BLOB) {
type_conversion,unpack-objects.c,300,-,+,,32,"			die(""invalid %s"", type_name(type));"
type_conversion,unpack-objects.c,370,-,+,,14,		*readlen = 0;
type_conversion,unpack-objects.c,377,-,+,,22,	zstream->avail_in = len;
type_conversion,unpack-objects.c,382,-,+,,6,	use(len - zstream->avail_in);
type_conversion,unpack-objects.c,441,-,+,,6,	if (type == OBJ_REF_DELTA) {
type_conversion,unpack-objects.c,455,-,+,,37,"			add_delta_to_list(nr, &base_oid, 0, delta_data, delta_size);"
type_conversion,unpack-objects.c,459,-,+,,25,		unsigned base_found = 0;
type_conversion,unpack-objects.c,467,-,+,,17,		base_offset = c & 127;
type_conversion,unpack-objects.c,468,-,+,,10,		while (c & 128) {
type_conversion,unpack-objects.c,469,-,+,,19,			base_offset += 1;
type_conversion,unpack-objects.c,475,-,+,,40,			base_offset = (base_offset << 7) + (c & 127);
type_conversion,unpack-objects.c,478,-,+,,22,		if (base_offset <= 0 || base_offset >= obj_list[nr].offset)
type_conversion,unpack-objects.c,484,-,+,,8,		lo = 0;
type_conversion,unpack-objects.c,487,-,+,,27,			mid = lo + (hi - lo) / 2;
type_conversion,unpack-objects.c,491,-,+,,16,				lo = mid + 1;
type_conversion,unpack-objects.c,494,-,+,,18,				base_found = !is_null_oid(&base_oid);
type_conversion,unpack-objects.c,537,-,+,,6,	c = *pack;
type_conversion,unpack-objects.c,539,-,+,,20,	type = (c >> 4) & 7;
type_conversion,unpack-objects.c,540,-,+,,14,	size = (c & 15);
type_conversion,unpack-objects.c,541,-,+,,10,	shift = 4;
type_conversion,unpack-objects.c,542,-,+,,13,	while (c & 0x80) {
type_conversion,unpack-objects.c,544,-,+,,7,		c = *pack;
type_conversion,unpack-objects.c,546,-,+,,16,		size += (c & 0x7f) << shift;
type_conversion,unpack-objects.c,547,-,+,,12,		shift += 7;
type_conversion,unpack-objects.c,578,-,+,,33,	struct pack_header *hdr = fill(sizeof(struct pack_header));
type_conversion,unpack-objects.c,587,-,+,,6,	use(sizeof(struct pack_header));
type_conversion,unpack-objects.c,590,-,+,,53,"		progress = start_progress(_(""Unpacking objects""), nr_objects);"
type_conversion,unpack-objects.c,593,-,+,,14,	for (i = 0; i < nr_objects; i++) {
type_conversion,unpack-objects.c,594,-,+,,14,		unpack_one(i);
type_conversion,unpack-objects.c,595,-,+,,30,"		display_progress(progress, i + 1);"
type_conversion,unpack-objects.c,619,-,+,,7,		if (*arg == '-') {
type_conversion,unpack-objects.c,648,-,+,,9,"				if (*c != ',')"
type_conversion,unpack-objects.c,653,-,+,,11,				len = sizeof(*hdr);
type_conversion,unpack-objects.c,668,-,+,,41,"	the_hash_algo->update_fn(&ctx, buffer, offset);"
type_conversion,unpack-objects.c,682,-,+,,36,"	write_in_full(1, buffer + offset, len);"
type_conversion,unpack-trees.c,91,-,+,,42,	static unsigned idx = ARRAY_SIZE(buf) - 1;
type_conversion,unpack-trees.c,98,-,+,,16,			for (i = 0; i < ARRAY_SIZE(buf); i++)
type_conversion,unpack-trees.c,100,-,+,,23,			super_prefix_len = buf[0].len;
type_conversion,unpack-trees.c,107,-,+,,6,	if (++idx >= ARRAY_SIZE(buf))
type_conversion,unpack-trees.c,108,-,+,,9,		idx = 0;
type_conversion,unpack-trees.c,110,-,+,,27,"	strbuf_setlen(&buf[idx], super_prefix_len);"
type_conversion,unpack-trees.c,201,-,+,,35,	opts->internal.show_all_errors = 1;
type_conversion,unpack-trees.c,203,-,+,,14,	for (i = 0; i < ARRAY_SIZE(opts->internal.unpack_rejects); i++)
type_conversion,unpack-trees.c,204,-,+,,53,		opts->internal.unpack_rejects[i].strdup_strings = 1;
type_conversion,unpack-trees.c,263,-,+,,29,	unsigned error_displayed = 0;
type_conversion,unpack-trees.c,264,-,+,,18,	for (e = 0; e < NB_UNPACK_TREES_ERROR_TYPES; e++) {
type_conversion,unpack-trees.c,267,-,+,,21,		if (rejects->nr > 0) {
type_conversion,unpack-trees.c,271,-,+,,22,			error_displayed = 1;
type_conversion,unpack-trees.c,272,-,+,,16,			for (i = 0; i < rejects->nr; i++)
type_conversion,unpack-trees.c,290,-,+,,31,	unsigned warning_displayed = 0;
type_conversion,unpack-trees.c,291,-,+,,11,	for (e = NB_UNPACK_TREES_ERROR_TYPES + 1;
type_conversion,unpack-trees.c,292,-,+,,11,	     e < NB_UNPACK_TREES_WARNING_TYPES; e++) {
type_conversion,unpack-trees.c,295,-,+,,21,		if (rejects->nr > 0) {
type_conversion,unpack-trees.c,299,-,+,,24,			warning_displayed = 1;
type_conversion,unpack-trees.c,300,-,+,,16,			for (i = 0; i < rejects->nr; i++)
type_conversion,unpack-trees.c,360,-,+,,17,"	unsigned cnt = 0, total = 0;"
type_conversion,unpack-trees.c,371,-,+,,53,"	return start_delayed_progress(_(""Updating files""), total);"
type_conversion,unpack-trees.c,379,-,+,,17,	state->clone = 1;
type_conversion,unpack-trees.c,380,-,+,,14,	for (i = 0; i < index->cache_nr; i++)
type_conversion,unpack-trees.c,389,-,+,,14,	for (i = 0; i < index->cache_nr; i++) {
type_conversion,unpack-trees.c,407,-,+,,15,		for (i = 0; i < list.nr; i++)
type_conversion,unpack-trees.c,422,-,+,,17,	unsigned cnt = 0;
type_conversion,unpack-trees.c,430,-,+,,16,	state.force = 1;
type_conversion,unpack-trees.c,431,-,+,,16,	state.quiet = 1;
type_conversion,unpack-trees.c,432,-,+,,24,	state.refresh_cache = 1;
type_conversion,unpack-trees.c,455,-,+,,14,	for (i = 0; i < index->cache_nr; i++) {
type_conversion,unpack-trees.c,459,-,+,,31,"			display_progress(progress, ++cnt);"
type_conversion,unpack-trees.c,482,-,+,,14,	for (i = 0; i < index->cache_nr; i++) {
type_conversion,unpack-trees.c,495,-,+,,32,"				display_progress(progress, ++cnt);"
type_conversion,unpack-trees.c,502,-,+,,42,"	errs |= finish_delayed_checkout(&state, o->verbose_update);"
type_conversion,unpack-trees.c,528,-,+,,6,	if (was_skip_worktree != ce_skip_worktree(ce)) {
type_conversion,unpack-trees.c,592,-,+,,9,	while ((++count) + i < istate->cache_nr &&
type_conversion,unpack-trees.c,612,-,+,,6,	if (o->internal.cache_bottom < o->src_index->cache_nr &&
type_conversion,unpack-trees.c,616,-,+,,10,		while (bottom < o->src_index->cache_nr &&
type_conversion,unpack-trees.c,626,-,+,,14,	for (i = 0; i < index->cache_nr; i++)
type_conversion,unpack-trees.c,653,-,+,,41,"	for (pos = locate_in_src_index(ce, o); pos < index->cache_nr; pos++) {"
type_conversion,unpack-trees.c,655,-,+,,7,		if (len != ce_namelen(next) ||
type_conversion,unpack-trees.c,656,-,+,,36,"		    memcmp(ce->name, next->name, len))"
type_conversion,unpack-trees.c,667,-,+,,9,	while (pos < index->cache_nr) {
type_conversion,unpack-trees.c,685,-,+,,23,	for (pos = -pos - 1; pos < index->cache_nr; pos++) {
type_conversion,unpack-trees.c,687,-,+,,7,		if (len != ce_namelen(next) ||
type_conversion,unpack-trees.c,688,-,+,,36,"		    memcmp(ce->name, next->name, len))"
type_conversion,unpack-trees.c,690,-,+,,22,"		add_entry(o, next, 0, 0);"
type_conversion,unpack-trees.c,706,-,+,,21,"			add_entry(o, ce, 0, 0);"
type_conversion,unpack-trees.c,740,-,+,,30,		o->internal.cache_bottom = o->src_index->cache_nr;
type_conversion,unpack-trees.c,756,-,+,,30,	if (!o->merge || dirmask != ((1 << n) - 1))
type_conversion,unpack-trees.c,773,-,+,,54,"	strbuf_make_traverse_path(&name, info, names->path, names->pathlen);"
type_conversion,unpack-trees.c,775,-,+,,47,"	pos = index_name_pos(o->src_index, name.buf, name.len);"
type_conversion,unpack-trees.c,783,-,+,,6,	if (pos >= o->src_index->cache_nr ||
type_conversion,unpack-trees.c,827,-,+,,32,"			tree_ce = xrealloc(tree_ce, new_ce_len);"
type_conversion,unpack-trees.c,828,-,+,,23,"			memset(tree_ce, 0, new_ce_len);"
type_conversion,unpack-trees.c,831,-,+,,40,			tree_ce->ce_flags = create_ce_flags(0);
type_conversion,unpack-trees.c,838,-,+,,25,		tree_ce->ce_namelen = len;
type_conversion,unpack-trees.c,840,-,+,,39,"		memcpy(tree_ce->name, src[0]->name, len + 1);"
type_conversion,unpack-trees.c,900,-,+,,20,	newinfo.namelen = p->pathlen;
type_conversion,unpack-trees.c,931,-,+,,18,			if (dirmask & 1)
type_conversion,unpack-trees.c,973,-,+,,12,	pathlen = info->pathlen;
type_conversion,unpack-trees.c,983,-,+,,34,"	return df_name_compare(ce_name, ce_len, S_IFREG, name, namelen, mode);"
type_conversion,unpack-trees.c,1008,-,+,,12,	pathlen = info->pathlen;
type_conversion,unpack-trees.c,1018,-,+,,34,"	return df_name_compare(ce_name, ce_len, ce_mode, name, namelen, mode);"
type_conversion,unpack-trees.c,1023,-,+,,48,"	int cmp = do_compare_entry(ce, info, n->path, n->pathlen, n->mode);"
type_conversion,unpack-trees.c,1034,-,+,,6,"	    ce->ce_namelen == traverse_path_len(info, tree_entry_len(n)) + 1)"
type_conversion,unpack-trees.c,1041,-,+,,50,"	return ce_namelen(ce) > traverse_path_len(info, tree_entry_len(n));"
type_conversion,unpack-trees.c,1066,-,+,,39,"	size_t len = traverse_path_len(info, tree_entry_len(n));"
type_conversion,unpack-trees.c,1067,-,+,,49,	size_t alloc_len = is_sparse_directory ? len + 1 : len;
type_conversion,unpack-trees.c,1074,-,+,,33,	ce->ce_flags = create_ce_flags(stage);
type_conversion,unpack-trees.c,1075,-,+,,19,	ce->ce_namelen = len;
type_conversion,unpack-trees.c,1078,-,+,,37,"	make_traverse_path(ce->name, len + 1, info, n->path, n->pathlen);"
type_conversion,unpack-trees.c,1081,-,+,,19,		ce->name[len] = '/';
type_conversion,unpack-trees.c,1082,-,+,,18,		ce->name[len + 1] = '\0';
type_conversion,unpack-trees.c,1114,-,+,,32,"	strbuf_add(&dirpath, p->path, p->pathlen);"
type_conversion,unpack-trees.c,1121,-,+,,57,"	pos = index_name_pos_sparse(o->src_index, dirpath.buf, dirpath.len);"
type_conversion,unpack-trees.c,1130,-,+,,6,	if (pos >= o->src_index->cache_nr) {
type_conversion,unpack-trees.c,1198,-,+,,15,		conflicts = 0;
type_conversion,unpack-trees.c,1206,-,+,,22,		unsigned int bit = 1ul << i;
type_conversion,unpack-trees.c,1207,-,+,,19,		if (conflicts & bit) {
type_conversion,unpack-trees.c,1208,-,+,,8,			src[i + o->merge] = o->df_conflict_entry;
type_conversion,unpack-trees.c,1211,-,+,,16,		if (!(mask & bit))
type_conversion,unpack-trees.c,1229,-,+,,7,"		src[i + o->merge] = create_ce_entry(info, names + i, stage,"
type_conversion,unpack-trees.c,1231,-,+,,11,"						    o->merge, bit & dirmask);"
type_conversion,unpack-trees.c,1238,-,+,,33,			struct cache_entry *ce = src[i + o->merge];
type_conversion,unpack-trees.c,1247,-,+,,32,"			if (do_add_entry(o, src[i], 0, 0))"
type_conversion,unpack-trees.c,1276,-,+,,15,	int pfxlen = info->pathlen;
type_conversion,unpack-trees.c,1278,-,+,,39,	for (pos = o->internal.cache_bottom; pos < index->cache_nr; pos++) {
type_conversion,unpack-trees.c,1309,-,+,,13,			ce_len = ce_slash - ce_name;
type_conversion,unpack-trees.c,1311,-,+,,30,			ce_len = ce_namelen(ce) - pfxlen;
type_conversion,unpack-trees.c,1312,-,+,,41,"		cmp = name_compare(p, p_len, ce_name, ce_len);"
type_conversion,unpack-trees.c,1327,-,+,,15,"		if (p_len < ce_len && !memcmp(ce_name, p, p_len) &&"
type_conversion,unpack-trees.c,1328,-,+,,7,		    ce_name[p_len] < '/')
type_conversion,unpack-trees.c,1352,-,+,,10,		return ce->ce_namelen == info->pathlen + p->pathlen + 1 &&
type_conversion,unpack-trees.c,1353,-,+,,35,		       ce->name[info->pathlen - 1] == '/' &&
type_conversion,unpack-trees.c,1355,-,+,,54,"		       !strncmp(ce->name + info->pathlen, p->path, p->pathlen);"
type_conversion,unpack-trees.c,1356,-,+,,27,	return ce->ce_namelen == p->pathlen + 1 &&
type_conversion,unpack-trees.c,1357,-,+,,37,"	       !strncmp(ce->name, p->path, p->pathlen);"
type_conversion,unpack-trees.c,1364,-,+,,42,"	int pos = find_cache_pos(info, p->path, p->pathlen);"
type_conversion,unpack-trees.c,1378,-,+,,17,	if (pos < 0 || pos >= o->src_index->cache_nr)
type_conversion,unpack-trees.c,1392,-,+,,30,"		    strncmp(path, p->path, p->pathlen) ||"
type_conversion,unpack-trees.c,1393,-,+,,7,		    path[p->pathlen] != '/')
type_conversion,unpack-trees.c,1419,-,+,,29,"	       n->path ? n->mode : 0,"
type_conversion,unpack-trees.c,1469,-,+,,6,					dirmask & (1ul << 0));
type_conversion,unpack-trees.c,1486,-,+,,27,	return ret >= 0 ? mask : -1;
type_conversion,unpack-trees.c,1537,-,+,,14,						return mask;
type_conversion,unpack-trees.c,1560,-,+,,28,		    n == 1 && dirmask == 1 && S_ISDIR(names->mode)) {
type_conversion,unpack-trees.c,1579,-,+,,12,				return mask;
type_conversion,unpack-trees.c,1590,-,+,,10,		return mask;
type_conversion,unpack-trees.c,1593,-,+,,9,	return mask;
type_conversion,unpack-trees.c,1618,-,+,,52,"	orig_ret = path_matches_pattern_list(prefix->buf, prefix->len,"
type_conversion,unpack-trees.c,1624,-,+,,6,	if (orig_ret == UNDECIDED)
type_conversion,unpack-trees.c,1635,-,+,,31,	if (pl->use_cone_patterns && orig_ret == MATCHED_RECURSIVE) {
type_conversion,unpack-trees.c,1637,-,+,,8,		rc = cache_end - cache;
type_conversion,unpack-trees.c,1640,-,+,,23,			(*ce)->ce_flags &= ~clear_mask;
type_conversion,unpack-trees.c,1643,-,+,,38,	} else if (pl->use_cone_patterns && orig_ret == NOT_MATCHED) {
type_conversion,unpack-trees.c,1644,-,+,,8,		rc = cache_end - cache;
type_conversion,unpack-trees.c,1646,-,+,,40,"		rc = clear_ce_flags_1(istate, cache, cache_end - cache,"
type_conversion,unpack-trees.c,1653,-,+,,38,"	strbuf_setlen(prefix, prefix->len - 1);"
type_conversion,unpack-trees.c,1692,-,+,,38,"		display_progress(istate->progress, progress_nr);"
type_conversion,unpack-trees.c,1694,-,+,,39,		if (select_mask && !(ce->ce_flags & select_mask)) {
type_conversion,unpack-trees.c,1710,-,+,,10,			len = slash - name;
type_conversion,unpack-trees.c,1711,-,+,,29,"			strbuf_add(prefix, name, len);"
type_conversion,unpack-trees.c,1713,-,+,,50,"			processed = clear_ce_flags_dir(istate, cache, cache_end - cache,"
type_conversion,unpack-trees.c,1724,-,+,,41,"				strbuf_setlen(prefix, prefix->len - len);"
type_conversion,unpack-trees.c,1729,-,+,,48,"			processed = clear_ce_flags_1(istate, cache, cache_end - cache,"
type_conversion,unpack-trees.c,1737,-,+,,40,"			strbuf_setlen(prefix, prefix->len - len - 1);"
type_conversion,unpack-trees.c,1746,-,+,,7,		if (ret == UNDECIDED)
type_conversion,unpack-trees.c,1748,-,+,,7,		if (ret == MATCHED || ret == MATCHED_RECURSIVE)
type_conversion,unpack-trees.c,1749,-,+,,20,			ce->ce_flags &= ~clear_mask;
type_conversion,unpack-trees.c,1754,-,+,,37,"	display_progress(istate->progress, progress_nr);"
type_conversion,unpack-trees.c,1755,-,+,,9,	return nr - (cache_end - cache);
type_conversion,unpack-trees.c,1771,-,+,,6,					istate->cache_nr);
type_conversion,unpack-trees.c,1778,-,+,,5,"				istate->cache_nr,"
type_conversion,unpack-trees.c,1802,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,unpack-trees.c,1805,-,+,,39,		if (select_flag && !(ce->ce_flags & select_flag))
type_conversion,unpack-trees.c,1809,-,+,,20,			ce->ce_flags |= skip_wt_flag;
type_conversion,unpack-trees.c,1811,-,+,,20,			ce->ce_flags &= ~skip_wt_flag;
type_conversion,unpack-trees.c,1825,-,+,,29,		o->skip_sparse_checkout = 1;
type_conversion,unpack-trees.c,1833,-,+,,19,	int prefix_len = strlen(prefix);
type_conversion,unpack-trees.c,1839,-,+,,27,	while (prefix_len > 0 && prefix[prefix_len - 1] == '/')
type_conversion,unpack-trees.c,1845,-,+,,26,"	strbuf_grow(&ce_prefix, prefix_len + 1);"
type_conversion,unpack-trees.c,1846,-,+,,33,"	strbuf_add(&ce_prefix, prefix, prefix_len);"
type_conversion,unpack-trees.c,1860,-,+,,44,"	    index_name_pos(istate, ce_prefix.buf, ce_prefix.len) >= 0)"
type_conversion,unpack-trees.c,1884,-,+,,6,	if (o->reset == UNPACK_RESET_INVALID)
type_conversion,unpack-trees.c,1906,-,+,,6,	if (o->reset == UNPACK_RESET_OVERWRITE_UNTRACKED &&
type_conversion,unpack-trees.c,1912,-,+,,29,		o->internal.dir->flags |= DIR_SHOW_IGNORED;
type_conversion,unpack-trees.c,1920,-,+,,29,		o->skip_sparse_checkout = 1;
type_conversion,unpack-trees.c,1928,-,+,,35,	o->internal.result.initialized = 1;
type_conversion,unpack-trees.c,1950,-,+,,27,	o->internal.merge_size = len;
type_conversion,unpack-trees.c,1955,-,+,,46,	o->internal.result.fsmonitor_has_run_once = o->src_index->fsmonitor_has_run_once;
type_conversion,unpack-trees.c,1967,-,+,,34,"				       CE_NEW_SKIP_WORKTREE, o->verbose_update);"
type_conversion,unpack-trees.c,1970,-,+,,17,"		dfc = xcalloc(1, cache_entry_size(0));"
type_conversion,unpack-trees.c,1980,-,+,,26,		info.show_all_errors = o->internal.show_all_errors;
type_conversion,unpack-trees.c,2002,-,+,,38,"		ret = traverse_trees(o->src_index, len, t, &info);"
type_conversion,unpack-trees.c,2034,-,+,,12,				       o->verbose_update);
type_conversion,unpack-trees.c,2037,-,+,,15,		for (i = 0; i < o->internal.result.cache_nr; i++) {
type_conversion,unpack-trees.c,2080,-,+,,40,		o->internal.result.updated_workdir = 1;
type_conversion,unpack-trees.c,2124,-,+,,32,	o->internal.show_all_errors = 1;
type_conversion,unpack-trees.c,2138,-,+,,16,"		pl = xcalloc(1, sizeof(*pl));"
type_conversion,unpack-trees.c,2149,-,+,,33,"			       CE_NEW_SKIP_WORKTREE, o->verbose_update);"
type_conversion,unpack-trees.c,2153,-,+,,14,	for (i = 0; i < o->src_index->cache_nr; i++) {
type_conversion,unpack-trees.c,2228,-,+,,59,"		unsigned changed = ie_match_stat(o->src_index, ce, &st, flags);"
type_conversion,unpack-trees.c,2338,-,+,,7,	     i < o->src_index->cache_nr;
type_conversion,unpack-trees.c,2343,-,+,,36,"		    strncmp(ce->name, ce2->name, namelen) ||"
type_conversion,unpack-trees.c,2344,-,+,,7,		    ce2->name[namelen] != '/')
type_conversion,unpack-trees.c,2353,-,+,,33,"			add_entry(o, ce2, CE_REMOVE, 0);"
type_conversion,unpack-trees.c,2440,-,+,,6,	if (absent_type == ABSENT_ANY_DIRECTORY)
type_conversion,unpack-trees.c,2472,-,+,,6,	if (o->reset == UNPACK_RESET_OVERWRITE_UNTRACKED) {
type_conversion,unpack-trees.c,2489,-,+,,29,"		path = xmemdupz(ce->name, len);"
type_conversion,unpack-trees.c,2624,-,+,,29,"	if (do_add_entry(o, merge, update, CE_STAGEMASK) < 0)"
type_conversion,unpack-trees.c,2644,-,+,,25,	info.show_all_errors = o->internal.show_all_errors;
type_conversion,unpack-trees.c,2675,-,+,,30,"	add_entry(o, ce, CE_REMOVE, 0);"
type_conversion,unpack-trees.c,2683,-,+,,19,"	add_entry(o, ce, 0, 0);"
type_conversion,unpack-trees.c,2862,-,+,,33,	o->internal.nontrivial_merge = 1;
type_conversion,unpack-trees.c,2939,-,+,,28,			   ce_stage(current) == 0) {
type_conversion,unpack-trees.c,3030,-,+,,21,"		add_entry(o, old, update, CE_STAGEMASK);"
type_conversion,update-index.c,102,-,+,,18,"	if (mkdir(path, 0700))"
type_conversion,update-index.c,142,-,+,,8,	sleep(1);
type_conversion,update-index.c,192,-,+,,27,"	write_or_die(fd, ""data"", 4);"
type_conversion,update-index.c,249,-,+,,16,	int namelen = strlen(path);
type_conversion,update-index.c,254,-,+,,51,			the_repository->index->cache[pos]->ce_flags |= flag;
type_conversion,update-index.c,256,-,+,,51,			the_repository->index->cache[pos]->ce_flags &= ~flag;
type_conversion,update-index.c,294,-,+,,78,"	if (old && !ce_stage(old) && !ie_match_stat(the_repository->index, old, st, 0))"
type_conversion,update-index.c,297,-,+,,53,"	ce = make_empty_cache_entry(the_repository->index, len);"
type_conversion,update-index.c,298,-,+,,25,"	memcpy(ce->name, path, len);"
type_conversion,update-index.c,299,-,+,,33,	ce->ce_flags = create_ce_flags(0);
type_conversion,update-index.c,300,-,+,,19,	ce->ce_namelen = len;
type_conversion,update-index.c,363,-,+,,9,	while (pos < the_repository->index->cache_nr) {
type_conversion,update-index.c,366,-,+,,31,"		if (strncmp(ce->name, path, len))"
type_conversion,update-index.c,368,-,+,,7,		if (ce->name[len] > '/')
type_conversion,update-index.c,370,-,+,,7,		if (ce->name[len] < '/')
type_conversion,update-index.c,390,-,+,,8,	len = strlen(path);
type_conversion,update-index.c,430,-,+,,8,	len = strlen(path);
type_conversion,update-index.c,431,-,+,,53,"	ce = make_empty_cache_entry(the_repository->index, len);"
type_conversion,update-index.c,434,-,+,,25,"	memcpy(ce->name, path, len);"
type_conversion,update-index.c,435,-,+,,33,	ce->ce_flags = create_ce_flags(stage);
type_conversion,update-index.c,436,-,+,,19,	ce->ce_namelen = len;
type_conversion,update-index.c,454,-,+,,52,"	pos = index_name_pos(the_repository->index, path, strlen(path));"
type_conversion,update-index.c,461,-,+,,27,"	report(""chmod %cx '%s'"", flip, path);"
type_conversion,update-index.c,464,-,+,,49,"	die(""git update-index: cannot chmod %cx '%s'"", flip, path);"
type_conversion,update-index.c,474,-,+,,16,		st.st_mode = 0;
type_conversion,update-index.c,476,-,+,,16,		st.st_mode = 0;
type_conversion,update-index.c,545,-,+,,25,		if (ptr == buf.buf || *ptr != ' '
type_conversion,update-index.c,546,-,+,,19,		    || errno || (unsigned int) ul != ul)
type_conversion,update-index.c,548,-,+,,10,		mode = ul;
type_conversion,update-index.c,551,-,+,,27,		if (!tab || tab - ptr < hexsz + 1)
type_conversion,update-index.c,554,-,+,,7,		if (tab[-2] == ' ' && '0' <= tab[-1] && tab[-1] <= '3') {
type_conversion,update-index.c,555,-,+,,12,			stage = tab[-1] - '0';
type_conversion,update-index.c,565,-,+,,4,			tab[-(hexsz + 1)] != ' ')
type_conversion,update-index.c,569,-,+,,25,"		if (!nul_term_line && path_name[0] == '""') {"
type_conversion,update-index.c,593,-,+,,34,			ptr[-(hexsz + 2)] = ptr[-1] = 0;
type_conversion,update-index.c,625,-,+,,46,	if (!the_repository->index->sparse_index && mode == S_IFDIR) {
type_conversion,update-index.c,630,-,+,,53,"	ce = make_empty_cache_entry(the_repository->index, namelen);"
type_conversion,update-index.c,633,-,+,,25,"	memcpy(ce->name, path, namelen);"
type_conversion,update-index.c,634,-,+,,33,	ce->ce_flags = create_ce_flags(stage);
type_conversion,update-index.c,635,-,+,,19,	ce->ce_namelen = namelen;
type_conversion,update-index.c,636,-,+,,31,	ce->ce_mode = create_ce_mode(mode);
type_conversion,update-index.c,650,-,+,,69,"	res = unmerge_index_entry(the_repository->index, path, item->util, 0);"
type_conversion,update-index.c,681,-,+,,28,"	parse_pathspec(&pathspec, 0,"
type_conversion,update-index.c,691,-,+,,16,	for (pos = 0; pos < the_repository->index->cache_nr; pos++) {
type_conversion,update-index.c,721,-,+,,13,		save_nr = the_repository->index->cache_nr;
type_conversion,update-index.c,726,-,+,,7,		if (save_nr != the_repository->index->cache_nr)
type_conversion,update-index.c,763,-,+,,29,"	return refresh(opt->value, 0);"
type_conversion,update-index.c,779,-,+,,7,	if ((arg[0] != '-' && arg[0] != '+') || arg[1] != 'x' || arg[2])
type_conversion,update-index.c,808,-,+,,30,"	if (errno || endp == arg || *endp != ',' || (unsigned int) ul != ul)"
type_conversion,update-index.c,810,-,+,,10,	*mode = ul;
type_conversion,update-index.c,812,-,+,,38,"	if (parse_oid_hex(endp, oid, &p) || *p != ',')"
type_conversion,update-index.c,889,-,+,,39,"				prefix, prefix ? strlen(prefix) : 0);"
type_conversion,update-index.c,891,-,+,,42,		the_repository->index->cache_changed = 0;
type_conversion,update-index.c,912,-,+,,42,		the_repository->index->cache_changed = 0;
type_conversion,update-index.c,924,-,+,,48,	int prefix_length = prefix ? strlen(prefix) : 0;
type_conversion,update-index.c,926,-,+,,28,	char set_executable_bit = 0;
type_conversion,update-index.c,927,-,+,,40,"	struct refresh_params refresh_args = {0, &has_errors};"
type_conversion,update-index.c,935,-,+,,23,	int parseopt_state = PARSE_OPT_UNKNOWN;
type_conversion,update-index.c,964,-,+,,4,			PARSE_OPT_NOARG | /* disallow --cacheinfo=<mode> form */
type_conversion,update-index.c,965,-,+,,4,"			PARSE_OPT_NONEG | PARSE_OPT_LITERAL_ARGHELP,"
type_conversion,update-index.c,966,-,+,,10,"			NULL, 0,"
type_conversion,update-index.c,974,-,+,,4,"			PARSE_OPT_NOARG | PARSE_OPT_NONEG, NULL, MARK_FLAG},"
type_conversion,update-index.c,977,-,+,,4,"			PARSE_OPT_NOARG | PARSE_OPT_NONEG, NULL, UNMARK_FLAG},"
type_conversion,update-index.c,980,-,+,,4,"			PARSE_OPT_NOARG | PARSE_OPT_NONEG, NULL, MARK_FLAG},"
type_conversion,update-index.c,983,-,+,,4,"			PARSE_OPT_NOARG | PARSE_OPT_NONEG, NULL, UNMARK_FLAG},"
type_conversion,update-index.c,994,-,+,,4,"			PARSE_OPT_NONEG | PARSE_OPT_NOARG,"
type_conversion,update-index.c,995,-,+,,10,"			NULL, 0, stdin_callback},"
type_conversion,update-index.c,998,-,+,,4,"			PARSE_OPT_NONEG | PARSE_OPT_NOARG,"
type_conversion,update-index.c,999,-,+,,10,"			NULL, 0, stdin_cacheinfo_callback},"
type_conversion,update-index.c,1002,-,+,,4,"			PARSE_OPT_NONEG | PARSE_OPT_NOARG,"
type_conversion,update-index.c,1003,-,+,,10,"			NULL, 0, unresolve_callback},"
type_conversion,update-index.c,1006,-,+,,4,"			PARSE_OPT_NONEG | PARSE_OPT_NOARG,"
type_conversion,update-index.c,1007,-,+,,10,"			NULL, 0, reupdate_callback},"
type_conversion,update-index.c,1035,-,+,,4,"			PARSE_OPT_NOARG | PARSE_OPT_NONEG, NULL, MARK_FLAG},"
type_conversion,update-index.c,1038,-,+,,4,"			PARSE_OPT_NOARG | PARSE_OPT_NONEG, NULL, UNMARK_FLAG},"
type_conversion,update-index.c,1059,-,+,,48,	the_repository->index->updated_skipworktree = 1;
type_conversion,update-index.c,1074,-,+,,25,		if (parseopt_state != PARSE_OPT_DONE)
type_conversion,update-index.c,1075,-,+,,21,"			parseopt_state = parse_options_step(&ctx, options,
							    update_index_usage);"
type_conversion,update-index.c,1080,-,+,,8,		case PARSE_OPT_HELP:
type_conversion,update-index.c,1081,-,+,,8,		case PARSE_OPT_ERROR:
type_conversion,update-index.c,1083,-,+,,8,		case PARSE_OPT_COMPLETE:
type_conversion,update-index.c,1085,-,+,,8,		case PARSE_OPT_NON_OPTION:
type_conversion,update-index.c,1086,-,+,,8,		case PARSE_OPT_DONE:
type_conversion,update-index.c,1101,-,+,,8,		case PARSE_OPT_UNKNOWN:
type_conversion,update-index.c,1102,-,+,,8,			if (ctx.argv[0][1] == '-')
type_conversion,update-index.c,1121,-,+,,42,			if (the_repository->index->version != preferred_index_format)
type_conversion,update-index.c,1125,-,+,,37,			the_repository->index->version = preferred_index_format;
type_conversion,update-index.c,1136,-,+,,26,"			if (!nul_term_line && buf.buf[0] == '""') {"
type_conversion,update-index.c,1179,-,+,,7,		if (r->settings.core_untracked_cache == UNTRACKED_CACHE_WRITE)
type_conversion,update-index.c,1191,-,+,,7,		if (r->settings.core_untracked_cache == UNTRACKED_CACHE_REMOVE)
type_conversion,update-index.c,1216,-,+,,7,		if (reason > FSMONITOR_REASON_OK)
type_conversion,update-index.c,1220,-,+,,7,		if (fsm_mode == FSMONITOR_MODE_DISABLED) {
type_conversion,update-index.c,1229,-,+,,7,		if (fsm_mode > FSMONITOR_MODE_DISABLED)
type_conversion,update-ref.c,18,-,+,,32,static char line_termination = '\n';
type_conversion,update-ref.c,32,-,+,,6,"	if (*next == '""') {"
type_conversion,update-ref.c,41,-,+,,22,"			strbuf_addch(arg, *next++);"
type_conversion,update-ref.c,113,-,+,,18,		if (!**next || **next == line_termination)
type_conversion,update-ref.c,115,-,+,,7,		if (**next != ' ')
type_conversion,update-ref.c,202,-,+,,6,	if (*next != line_termination)
type_conversion,update-ref.c,234,-,+,,6,	if (*next != line_termination)
type_conversion,update-ref.c,268,-,+,,6,	if (*next != line_termination)
type_conversion,update-ref.c,296,-,+,,6,	if (*next != line_termination)
type_conversion,update-ref.c,318,-,+,,46,"	if (skip_prefix(next, ""no-deref"", &rest) && *rest == line_termination)"
type_conversion,update-ref.c,327,-,+,,6,	if (*next != line_termination)
type_conversion,update-ref.c,336,-,+,,6,	if (*next != line_termination)
type_conversion,update-ref.c,347,-,+,,6,	if (*next != line_termination)
type_conversion,update-ref.c,358,-,+,,6,	if (*next != line_termination)
type_conversion,update-ref.c,383,-,+,,34,"	{ ""update"",  parse_cmd_update,  3, UPDATE_REFS_OPEN },"
type_conversion,update-ref.c,384,-,+,,34,"	{ ""create"",  parse_cmd_create,  2, UPDATE_REFS_OPEN },"
type_conversion,update-ref.c,385,-,+,,34,"	{ ""delete"",  parse_cmd_delete,  2, UPDATE_REFS_OPEN },"
type_conversion,update-ref.c,386,-,+,,34,"	{ ""verify"",  parse_cmd_verify,  2, UPDATE_REFS_OPEN },"
type_conversion,update-ref.c,387,-,+,,34,"	{ ""option"",  parse_cmd_option,  1, UPDATE_REFS_OPEN },"
type_conversion,update-ref.c,388,-,+,,34,"	{ ""start"",   parse_cmd_start,   0, UPDATE_REFS_STARTED },"
type_conversion,update-ref.c,389,-,+,,34,"	{ ""prepare"", parse_cmd_prepare, 0, UPDATE_REFS_PREPARED },"
type_conversion,update-ref.c,390,-,+,,34,"	{ ""abort"",   parse_cmd_abort,   0, UPDATE_REFS_CLOSED },"
type_conversion,update-ref.c,391,-,+,,34,"	{ ""commit"",  parse_cmd_commit,  0, UPDATE_REFS_CLOSED },"
type_conversion,update-ref.c,407,-,+,,45,"	while (!strbuf_getwholeline(&input, stdin, line_termination)) {"
type_conversion,update-ref.c,410,-,+,,7,		if (*input.buf == line_termination)
type_conversion,update-ref.c,415,-,+,,15,		for (i = 0; i < ARRAY_SIZE(command); i++) {
type_conversion,update-ref.c,427,-,+,,32,			c = command[i].args ? ' ' : line_termination;
type_conversion,update-ref.c,428,-,+,,8,			if (input.buf[strlen(prefix)] != c)
type_conversion,update-ref.c,442,-,+,,15,		for (j = 1; line_termination == '\0' && j < cmd->args; j++)
type_conversion,update-ref.c,443,-,+,,46,"			if (strbuf_appendwholeline(&input, stdin, line_termination))"
type_conversion,update-ref.c,449,-,+,,8,			if (state == UPDATE_REFS_STARTED && cmd->state == UPDATE_REFS_STARTED)
type_conversion,update-ref.c,452,-,+,,8,			if (cmd->state >= state)
type_conversion,update-ref.c,456,-,+,,8,			if (cmd->state != UPDATE_REFS_CLOSED)
type_conversion,update-ref.c,461,-,+,,8,			if (cmd->state != UPDATE_REFS_STARTED)
type_conversion,update-ref.c,537,-,+,,23,			line_termination = '\0';
type_conversion,upload-archive.c,49,-,+,,23,"	return write_archive(sent_argv.nr, sent_argv.v, prefix,"
type_conversion,upload-archive.c,62,-,+,,31,"	send_sideband(1, 3, buf.buf, buf.len, LARGE_PACKET_MAX);"
type_conversion,upload-archive.c,70,-,+,,11,	if (sz < 0) {
type_conversion,upload-archive.c,96,-,+,,19,	writer.git_cmd = 1;
type_conversion,upload-archive.c,115,-,+,,17,"		if (poll(pfd, 2, -1) < 0) {"
type_conversion,upload-archive.c,118,-,+,,11,				sleep(1);
type_conversion,upload-archive.c,122,-,+,,7,		if (pfd[1].revents & POLLIN)
type_conversion,upload-archive.c,126,-,+,,7,		if (pfd[0].revents & POLLIN)
type_conversion,upload-pack.c,146,-,+,,32,	data->allow_filter_fallback = 1;
type_conversion,upload-pack.c,152,-,+,,24,	data->advertise_sid = 0;
type_conversion,upload-pack.c,188,-,+,,20,"		xwrite(fd, data, sz);"
type_conversion,upload-pack.c,191,-,+,,25,"	write_or_die(fd, data, sz);"
type_conversion,upload-pack.c,231,-,+,,31,		       sizeof(os->buffer) - os->used);
type_conversion,upload-pack.c,232,-,+,,15,	if (readsz < 0) {
type_conversion,upload-pack.c,233,-,+,,10,		return readsz;
type_conversion,upload-pack.c,239,-,+,,52,"		if (os->used >= 4 && !memcmp(os->buffer, ""PACK"", 4)) {"
type_conversion,upload-pack.c,240,-,+,,27,			os->packfile_started = 1;
type_conversion,upload-pack.c,248,-,+,,37,"		if ((p = memchr(os->buffer, '\n', os->used))) {"
type_conversion,upload-pack.c,250,-,+,,33,				os->packfile_uris_started = 1;
type_conversion,upload-pack.c,255,-,+,,9,			*p = '\0';
type_conversion,upload-pack.c,258,-,+,,33,			os->used -= p - os->buffer + 1;
type_conversion,upload-pack.c,259,-,+,,31,"			memmove(os->buffer, p + 1, os->used);"
type_conversion,upload-pack.c,264,-,+,,11,			return readsz;
type_conversion,upload-pack.c,269,-,+,,35,"		send_client_data(1, os->buffer, os->used - 1, use_sideband);"
type_conversion,upload-pack.c,273,-,+,,35,"		send_client_data(1, os->buffer, os->used, use_sideband);"
type_conversion,upload-pack.c,277,-,+,,9,	return readsz;
type_conversion,upload-pack.c,284,-,+,,46,"	struct output_state *output_state = xcalloc(1, sizeof(struct output_state));"
type_conversion,upload-pack.c,293,-,+,,26,		pack_objects.git_cmd = 1;
type_conversion,upload-pack.c,297,-,+,,28,		pack_objects.use_shell = 1;
type_conversion,upload-pack.c,324,-,+,,15,		for (i = 0; i < uri_protocols->nr; i++)
type_conversion,upload-pack.c,332,-,+,,31,	pack_objects.clean_on_exit = 1;
type_conversion,upload-pack.c,342,-,+,,14,	for (i = 0; i < pack_data->want_obj.nr; i++)
type_conversion,upload-pack.c,346,-,+,,14,	for (i = 0; i < pack_data->have_obj.nr; i++)
type_conversion,upload-pack.c,349,-,+,,14,	for (i = 0; i < pack_data->extra_edge_obj.nr; i++)
type_conversion,upload-pack.c,390,-,+,,19,"		ret = poll(pfd, pollsize, polltimeout);"
type_conversion,upload-pack.c,395,-,+,,11,				sleep(1);
type_conversion,upload-pack.c,399,-,+,,19,		if (0 <= pe && (pfd[pe].revents & (POLLIN|POLLHUP))) {
type_conversion,upload-pack.c,405,-,+,,8,			if (0 < sz)
type_conversion,upload-pack.c,408,-,+,,19,			else if (sz == 0) {
type_conversion,upload-pack.c,417,-,+,,19,		if (0 <= pu && (pfd[pu].revents & (POLLIN|POLLHUP))) {
type_conversion,upload-pack.c,443,-,+,,25,"			write_or_die(1, buf, 5);"
type_conversion,upload-pack.c,454,-,+,,45,"		send_client_data(1, output_state->buffer, output_state->used,"
type_conversion,upload-pack.c,465,-,+,,33,"	send_client_data(3, abort_msg, strlen(abort_msg),"
type_conversion,upload-pack.c,474,-,+,,10,						   PARSE_OBJECT_SKIP_HASH_CHECK |
type_conversion,upload-pack.c,475,-,+,,10,						   PARSE_OBJECT_DISCARD_TREE);
type_conversion,upload-pack.c,479,-,+,,6,	if (o->type == OBJ_COMMIT) {
type_conversion,upload-pack.c,519,-,+,,24,"					    COMMON_KNOWN, data->oldest_have,"
type_conversion,upload-pack.c,537,-,+,,7,		if (packet_reader_read(reader) != PACKET_READ_NORMAL) {
type_conversion,upload-pack.c,538,-,+,,8,			if (data->multi_ack == MULTI_ACK_DETAILED
type_conversion,upload-pack.c,545,-,+,,29,			if (data->have_obj.nr == 0 || data->multi_ack)
type_conversion,upload-pack.c,565,-,+,,10,					if (data->multi_ack == MULTI_ACK_DETAILED) {
type_conversion,upload-pack.c,575,-,+,,9,				if (data->multi_ack == MULTI_ACK_DETAILED)
type_conversion,upload-pack.c,579,-,+,,35,				else if (data->have_obj.nr == 1)
type_conversion,upload-pack.c,586,-,+,,28,			if (data->have_obj.nr > 0) {
type_conversion,upload-pack.c,600,-,+,,7,	if ((allow_uor & ALLOW_ANY_SHA1) == ALLOW_ANY_SHA1)
type_conversion,upload-pack.c,602,-,+,,11,	return !(allow_uor & (ALLOW_TIP_SHA1 | ALLOW_REACHABLE_SHA1));
type_conversion,upload-pack.c,628,-,+,,53,	return o->flags & ((allow_hidden_refs(allow_uor) ? 0 : HIDDEN_REF) | OUR_REF);
type_conversion,upload-pack.c,644,-,+,,17,	cmd->git_cmd = 1;
type_conversion,upload-pack.c,645,-,+,,19,	cmd->no_stderr = 1;
type_conversion,upload-pack.c,661,-,+,,11,	for (i = get_max_object_index(); 0 < i; ) {
type_conversion,upload-pack.c,662,-,+,,26,		o = get_indexed_object(--i);
type_conversion,upload-pack.c,665,-,+,,20,		if (reachable && o->type == OBJ_COMMIT)
type_conversion,upload-pack.c,672,-,+,,14,	for (i = 0; i < src->nr; i++) {
type_conversion,upload-pack.c,679,-,+,,20,		if (reachable && o->type == OBJ_COMMIT)
type_conversion,upload-pack.c,715,-,+,,53,"	while ((i = read_in_full(cmd.out, namebuf, hexsz + 1)) == hexsz + 1) {"
type_conversion,upload-pack.c,719,-,+,,43,"		if (parse_oid_hex(namebuf, &oid, &p) || *p != '\n')"
type_conversion,upload-pack.c,723,-,+,,12,		if (o && o->type == OBJ_COMMIT) {
type_conversion,upload-pack.c,727,-,+,,11,	for (i = get_max_object_index(); 0 < i; i--) {
type_conversion,upload-pack.c,728,-,+,,26,		o = get_indexed_object(i - 1);
type_conversion,upload-pack.c,729,-,+,,12,		if (o && o->type == OBJ_COMMIT &&
type_conversion,upload-pack.c,756,-,+,,33,"	i = read_in_full(cmd.out, buf, 1);"
type_conversion,upload-pack.c,788,-,+,,32,	if (!data->stateless_rpc && !(data->allow_uor & ALLOW_REACHABLE_SHA1))
type_conversion,upload-pack.c,796,-,+,,14,	for (i = 0; i < data->want_obj.nr; i++) {
type_conversion,upload-pack.c,828,-,+,,14,	for (i = 0; i < data->shallows.nr; i++) {
type_conversion,upload-pack.c,843,-,+,,21,			object->parsed = 0;
type_conversion,upload-pack.c,865,-,+,,15,		for (i = 0; i < data->shallows.nr; i++) {
type_conversion,upload-pack.c,939,-,+,,15,		for (i = 0; i < data->want_obj.nr; i++) {
type_conversion,upload-pack.c,943,-,+,,28,"		deepen_by_rev_list(data, av.nr, av.v);"
type_conversion,upload-pack.c,947,-,+,,27,		if (data->shallows.nr > 0) {
type_conversion,upload-pack.c,949,-,+,,16,			for (i = 0; i < data->shallows.nr; i++)
type_conversion,upload-pack.c,970,-,+,,7,		if (object->type != OBJ_COMMIT)
type_conversion,upload-pack.c,1004,-,+,,24,		    *deepen_since == -1)
type_conversion,upload-pack.c,1018,-,+,,39,"		if (expand_ref(the_repository, arg, strlen(arg), &oid, &ref) != 1)"
type_conversion,upload-pack.c,1052,-,+,,13,		allowed = (intptr_t)item->util;
type_conversion,upload-pack.c,1054,-,+,,13,		allowed = data->allow_filter_fallback;
type_conversion,upload-pack.c,1059,-,+,,6,	if (opts->choice == LOFC_TREE_DEPTH &&
type_conversion,upload-pack.c,1073,-,+,,6,	if (opts->choice != LOFC_COMBINE)
type_conversion,upload-pack.c,1076,-,+,,11,	for (i = 0; i < opts->sub_nr; i++)
type_conversion,upload-pack.c,1099,-,+,,7,		if (packet_reader_read(reader) != PACKET_READ_NORMAL)
type_conversion,upload-pack.c,1132,-,+,,20,			data->no_done = 1;
type_conversion,upload-pack.c,1134,-,+,,26,			data->use_thin_pack = 1;
type_conversion,upload-pack.c,1136,-,+,,26,			data->use_ofs_delta = 1;
type_conversion,upload-pack.c,1142,-,+,,24,			data->no_progress = 1;
type_conversion,upload-pack.c,1144,-,+,,28,			data->use_include_tag = 1;
type_conversion,upload-pack.c,1147,-,+,,40,			data->filter_capability_requested = 1;
type_conversion,upload-pack.c,1157,-,+,,10,					    PARSE_OBJECT_SKIP_HASH_CHECK |
type_conversion,upload-pack.c,1158,-,+,,10,					    PARSE_OBJECT_DISCARD_TREE);
type_conversion,upload-pack.c,1168,-,+,,11,			if (!((data->allow_uor & ALLOW_ANY_SHA1) == ALLOW_ANY_SHA1
type_conversion,upload-pack.c,1186,-,+,,23,		data->no_progress = 1;
type_conversion,upload-pack.c,1188,-,+,,73,	if (data->depth == 0 && !data->deepen_rev_list && data->shallows.nr == 0)
type_conversion,upload-pack.c,1255,-,+,,10,			     (data->allow_uor & ALLOW_TIP_SHA1) ?
type_conversion,upload-pack.c,1257,-,+,,10,			     (data->allow_uor & ALLOW_REACHABLE_SHA1) ?
type_conversion,upload-pack.c,1267,-,+,,29,		data->sent_capabilities = 1;
type_conversion,upload-pack.c,1315,-,+,,34,"			data->allow_filter_fallback = git_config_bool(var, value);"
type_conversion,upload-pack.c,1347,-,+,,23,			data->allow_uor |= ALLOW_TIP_SHA1;
type_conversion,upload-pack.c,1349,-,+,,23,			data->allow_uor &= ~ALLOW_TIP_SHA1;
type_conversion,upload-pack.c,1352,-,+,,23,			data->allow_uor |= ALLOW_REACHABLE_SHA1;
type_conversion,upload-pack.c,1354,-,+,,23,			data->allow_uor &= ~ALLOW_REACHABLE_SHA1;
type_conversion,upload-pack.c,1357,-,+,,23,			data->allow_uor |= ALLOW_ANY_SHA1;
type_conversion,upload-pack.c,1359,-,+,,23,			data->allow_uor &= ~ALLOW_ANY_SHA1;
type_conversion,upload-pack.c,1365,-,+,,24,"		data->allow_filter = git_config_bool(var, value);"
type_conversion,upload-pack.c,1367,-,+,,29,"		data->allow_ref_in_want = git_config_bool(var, value);"
type_conversion,upload-pack.c,1369,-,+,,30,"		data->allow_sideband_all = git_config_bool(var, value);"
type_conversion,upload-pack.c,1372,-,+,,32,			data->allow_packfile_uris = 1;
type_conversion,upload-pack.c,1376,-,+,,25,"		data->advertise_sid = git_config_bool(var, value);"
type_conversion,upload-pack.c,1414,-,+,,23,	data.stateless_rpc = stateless_rpc;
type_conversion,upload-pack.c,1415,-,+,,17,	data.timeout = timeout;
type_conversion,upload-pack.c,1417,-,+,,22,		data.daemon_mode = 1;
type_conversion,upload-pack.c,1425,-,+,,19,			data.no_done = 1;
type_conversion,upload-pack.c,1447,-,+,,40,"		packet_reader_init(&reader, 0, NULL, 0,"
type_conversion,upload-pack.c,1462,-,+,,7,		    packet_reader_peek(&reader) != PACKET_READ_EOF) {
type_conversion,upload-pack.c,1485,-,+,,10,					    PARSE_OBJECT_SKIP_HASH_CHECK |
type_conversion,upload-pack.c,1486,-,+,,10,					    PARSE_OBJECT_DISCARD_TREE);
type_conversion,upload-pack.c,1559,-,+,,22,		data->seen_haves = 1;
type_conversion,upload-pack.c,1571,-,+,,33,"	jw_object_intmax(&jw, ""haves"", data->have_obj.nr);"
type_conversion,upload-pack.c,1572,-,+,,33,"	jw_object_intmax(&jw, ""wants"", data->want_obj.nr);"
type_conversion,upload-pack.c,1573,-,+,,37,"	jw_object_intmax(&jw, ""want-refs"", strmap_get_size(&data->wanted_refs));"
type_conversion,upload-pack.c,1574,-,+,,33,"	jw_object_intmax(&jw, ""depth"", data->depth);"
type_conversion,upload-pack.c,1575,-,+,,36,"	jw_object_intmax(&jw, ""shallows"", data->shallows.nr);"
type_conversion,upload-pack.c,1576,-,+,,38,"	jw_object_bool(&jw, ""deepen-since"", data->deepen_since);"
type_conversion,upload-pack.c,1577,-,+,,38,"	jw_object_intmax(&jw, ""deepen-not"", oidset_size(&data->deepen_not));"
type_conversion,upload-pack.c,1593,-,+,,9,	while (packet_reader_read(request) == PACKET_READ_NORMAL) {
type_conversion,upload-pack.c,1610,-,+,,26,			data->use_thin_pack = 1;
type_conversion,upload-pack.c,1614,-,+,,26,			data->use_ofs_delta = 1;
type_conversion,upload-pack.c,1618,-,+,,24,			data->no_progress = 1;
type_conversion,upload-pack.c,1622,-,+,,28,			data->use_include_tag = 1;
type_conversion,upload-pack.c,1626,-,+,,17,			data->done = 1;
type_conversion,upload-pack.c,1630,-,+,,26,			data->wait_for_done = 1;
type_conversion,upload-pack.c,1659,-,+,,32,			data->writer.use_sideband = 1;
type_conversion,upload-pack.c,1679,-,+,,6,	if (request->status != PACKET_READ_FLUSH)
type_conversion,upload-pack.c,1696,-,+,,14,	for (i = 0; i < acks->nr; i++) {
type_conversion,upload-pack.c,1781,-,+,,9,	while (state != FETCH_DONE) {
type_conversion,url.c,24,-,+,,35,"	if (!url || !is_urlschemechar(1, *url++))"
type_conversion,url.c,26,-,+,,17,	while (*url && *url != ':') {
type_conversion,url.c,27,-,+,,28,"		if (!is_urlschemechar(0, *url++))"
type_conversion,url.c,31,-,+,,10,	return (url[0] == ':' && url[1] == '/' && url[2] == '/');
type_conversion,url.c,41,-,+,,21,		unsigned char c = *q;
type_conversion,url.c,45,-,+,,34,"		if (stop_at && strchr(stop_at, c)) {"
type_conversion,url.c,51,-,+,,7,		if (c == '%' && (len < 0 || len >= 3)) {
type_conversion,url.c,61,-,+,,22,		if (decode_plus && c == '+')
type_conversion,url.c,64,-,+,,22,"			strbuf_addch(out, c);"
type_conversion,url.c,74,-,+,,29,"	return url_decode_mem(url, strlen(url));"
type_conversion,url.c,80,-,+,,39,"	const char *colon = memchr(url, ':', len);"
type_conversion,url.c,84,-,+,,25,"		strbuf_add(&out, url, colon - url);"
type_conversion,url.c,94,-,+,,39,"	return url_decode_internal(&encoded, strlen(encoded), NULL, &out, 0);"
type_conversion,url.c,112,-,+,,23,"	strbuf_complete(buf, '/');"
type_conversion,urlmatch.c,43,-,+,,12,		int ch = *from++;
type_conversion,urlmatch.c,48,-,+,,19,			if (from_len < 2)
type_conversion,urlmatch.c,54,-,+,,16,			from_len -= 2;
type_conversion,urlmatch.c,57,-,+,,7,		if ((unsigned char)ch <= 0x1F || (unsigned char)ch >= 0x7F ||
type_conversion,urlmatch.c,61,-,+,,31,"			strbuf_addf(buf, ""%%%02X"", (unsigned char)ch);"
type_conversion,urlmatch.c,82,-,+,,16,	int url_len = url_info->host_len;
type_conversion,urlmatch.c,83,-,+,,16,	int pat_len = pattern_info->host_len;
type_conversion,urlmatch.c,86,-,+,,49,"		const char *url_next = end_of_token(url, '.', url_len);"
type_conversion,urlmatch.c,87,-,+,,49,"		const char *pat_next = end_of_token(pat, '.', pat_len);"
type_conversion,urlmatch.c,89,-,+,,30,		if (pat_next == pat + 1 && pat[0] == '*')
type_conversion,urlmatch.c,93,-,+,,23,"			 !memcmp(url, pat, url_next - url))"
type_conversion,urlmatch.c,152,-,+,,30,"	size_t scheme_len, user_off=0, user_len=0, passwd_off=0, passwd_len=0;"
type_conversion,urlmatch.c,153,-,+,,18,"	size_t host_off=0, host_len=0, port_off=0, port_len=0, path_off, path_len, result_len;"
type_conversion,urlmatch.c,162,-,+,,48,	if (!spanned || !isalpha(url[0]) || spanned + 3 > url_len ||
type_conversion,urlmatch.c,163,-,+,,6,	    url[spanned] != ':' || url[spanned+1] != '/' || url[spanned+2] != '/') {
type_conversion,urlmatch.c,172,-,+,,13,	spanned += 3;
type_conversion,urlmatch.c,186,-,+,,47,"			if (!append_normalized_escapes(&norm, url, at_ptr - url,"
type_conversion,urlmatch.c,197,-,+,,18,				passwd_off = (colon_ptr + 1) - norm.buf;
type_conversion,urlmatch.c,199,-,+,,30,				user_len = (passwd_off - 1) - (scheme_len + 3);
type_conversion,urlmatch.c,201,-,+,,41,				user_len = norm.len - (scheme_len + 3);
type_conversion,urlmatch.c,205,-,+,,14,		url_len -= (++at_ptr - url);
type_conversion,urlmatch.c,213,-,+,,33,"	if (!url_len || strchr("":/?#"", *url)) {"
type_conversion,urlmatch.c,227,-,+,,28,	while (colon_ptr > url && *colon_ptr != ':' && *colon_ptr != ']')
type_conversion,urlmatch.c,229,-,+,,6,	if (*colon_ptr != ':') {
type_conversion,urlmatch.c,246,-,+,,16,	if (spanned < colon_ptr - url) {
type_conversion,urlmatch.c,269,-,+,,27,		if (url == slash_ptr && url[-1] == '0')
type_conversion,urlmatch.c,273,-,+,,33,		} else if (slash_ptr - url == 2 &&
type_conversion,urlmatch.c,275,-,+,,27,"			   !strncmp(url, ""80"", 2)) {"
type_conversion,urlmatch.c,277,-,+,,33,		} else if (slash_ptr - url == 3 &&
type_conversion,urlmatch.c,279,-,+,,28,"			   !strncmp(url, ""443"", 3)) {"
type_conversion,urlmatch.c,289,-,+,,25,			unsigned long pnum = 0;
type_conversion,urlmatch.c,291,-,+,,18,			if (spanned < slash_ptr - url) {
type_conversion,urlmatch.c,300,-,+,,27,			if (slash_ptr - url <= 5)
type_conversion,urlmatch.c,302,-,+,,16,			if (pnum == 0 || pnum > 65535) {
type_conversion,urlmatch.c,313,-,+,,27,"			strbuf_add(&norm, url, slash_ptr - url);"
type_conversion,urlmatch.c,314,-,+,,15,			port_len = slash_ptr - url;
type_conversion,urlmatch.c,316,-,+,,14,		url_len -= slash_ptr - colon_ptr;
type_conversion,urlmatch.c,320,-,+,,59,		host_len = norm.len - host_off - (port_len ? port_len + 1 : 0);
type_conversion,urlmatch.c,331,-,+,,6,	if (*url == '/') {
type_conversion,urlmatch.c,345,-,+,,46,"		if (!append_normalized_escapes(&norm, url, next_slash - url, """","
type_conversion,urlmatch.c,359,-,+,,37,"				strbuf_setlen(&norm, norm.len - 1);"
type_conversion,urlmatch.c,362,-,+,,37,"				strbuf_setlen(&norm, norm.len - 2);"
type_conversion,urlmatch.c,379,-,+,,11,			while (*--prev_slash != '/') {}
type_conversion,urlmatch.c,381,-,+,,50,"				strbuf_setlen(&norm, prev_slash - norm.buf + 1);"
type_conversion,urlmatch.c,384,-,+,,26,"				strbuf_setlen(&norm, prev_slash - norm.buf);"
type_conversion,urlmatch.c,387,-,+,,14,		url_len -= next_slash - url;
type_conversion,urlmatch.c,390,-,+,,7,		if (*url != '/')
type_conversion,urlmatch.c,438,-,+,,40,"	return url_normalize_1(url, out_info, 0);"
type_conversion,urlmatch.c,461,-,+,,10,		return 0;
type_conversion,urlmatch.c,462,-,+,,44,	if (!url_prefix_len || (url_prefix_len == 1 && *url_prefix == '/'))
type_conversion,urlmatch.c,463,-,+,,20,		return (!*url || *url == '/') ? 1 : 0;
type_conversion,urlmatch.c,464,-,+,,34,	if (url_prefix[url_prefix_len - 1] == '/')
type_conversion,urlmatch.c,467,-,+,,10,		return 0;
type_conversion,urlmatch.c,468,-,+,,42,	if ((strlen(url) == url_prefix_len) || (url[url_prefix_len] == '/'))
type_conversion,urlmatch.c,469,-,+,,27,		return url_prefix_len + 1;
type_conversion,urlmatch.c,470,-,+,,9,	return 0;
type_conversion,urlmatch.c,494,-,+,,21,	char usermatched = 0;
type_conversion,urlmatch.c,512,-,+,,17,		usermatched = 1;
type_conversion,urlmatch.c,549,-,+,,6,	if (a->user_matched != b->user_matched)
type_conversion,urlmatch.c,559,-,+,,34,	struct urlmatch_item matched = {0};
type_conversion,urlmatch.c,567,-,+,,51,"	if (!skip_prefix(var, collect->section, &key) || *(key++) != '.') {"
type_conversion,urlmatch.c,577,-,+,,30,"		config_url = xmemdupz(key, dot - key);"
type_conversion,urlmatch.c,578,-,+,,54,"		norm_url = url_normalize_1(config_url, &norm_info, 1);"
type_conversion,urlmatch.c,598,-,+,,24,"		item->util = xcalloc(1, sizeof(matched));"
type_conversion,usage.c,22,-,+,,19,"	if (vsnprintf(p, pend - p, err, params) < 0) {"
type_conversion,usage.c,25,-,+,,8,"		*p = '\0'; /* vsnprintf() failed, clip at prefix */"
type_conversion,usage.c,29,-,+,,22,		if (iscntrl(*p) && *p != '\t' && *p != '\n')
type_conversion,usage.c,30,-,+,,9,			*p = '?';
type_conversion,usage.c,33,-,+,,11,	*(p++) = '\n'; /* we no longer need a NUL */
type_conversion,usage.c,35,-,+,,24,"	write_in_full(2, msg, p - msg);"
type_conversion,usage.c,195,-,+,,28,	for (i = j = 0; err[i] && j < sizeof(str_error) - 1; ) {
type_conversion,usage.c,196,-,+,,7,		if ((str_error[j++] = err[i++]) != '%')
type_conversion,usage.c,198,-,+,,7,		if (j < sizeof(str_error) - 1) {
type_conversion,usage.c,199,-,+,,21,			str_error[j++] = '%';
type_conversion,usage.c,207,-,+,,17,	str_error[j] = 0;
type_conversion,usage.c,209,-,+,,16,"	snprintf(buf, n, ""%s: %s"", fmt, str_error);"
type_conversion,usage.c,225,-,+,,32,"	die_routine(fmt_with_err(buf, sizeof(buf), fmt), params);"
type_conversion,usage.c,247,-,+,,40,"	die_message_routine(fmt_with_err(buf, sizeof(buf), fmt), params);"
type_conversion,usage.c,259,-,+,,34,"	error_routine(fmt_with_err(buf, sizeof(buf), fmt), params);"
type_conversion,usage.c,281,-,+,,33,"	warn_routine(fmt_with_err(buf, sizeof(buf), warn), params);"
type_conversion,userdiff.c,382,-,+,,47,"	result = !regexec(&re, utf8_multi_byte_char, 1, &match, 0) &&"
type_conversion,userdiff.c,384,-,+,,3,		match.rm_eo == strlen(utf8_multi_byte_char);
type_conversion,userdiff.c,463,-,+,,12,	int len = strlen(name);
type_conversion,userdiff.c,464,-,+,,66,"	struct userdiff_driver *driver = userdiff_find_by_namelen(name, len);"
type_conversion,utf8.c,7,-,+,,37,"static const char utf16_be_bom[] = {'\xFE', '\xFF'};"
type_conversion,utf8.c,8,-,+,,37,"static const char utf16_le_bom[] = {'\xFF', '\xFE'};"
type_conversion,utf8.c,9,-,+,,37,"static const char utf32_be_bom[] = {'\0', '\0', '\xFE', '\xFF'};"
type_conversion,utf8.c,10,-,+,,37,"static const char utf32_le_bom[] = {'\xFF', '\xFE', '\0', '\0'};"
type_conversion,utf8.c,20,-,+,,6,	if (*p++ != '\033')
type_conversion,utf8.c,21,-,+,,10,		return 0;
type_conversion,utf8.c,22,-,+,,6,	if (*p++ != '[')
type_conversion,utf8.c,23,-,+,,10,		return 0;
type_conversion,utf8.c,24,-,+,,24,	while (isdigit(*p) || *p == ';')
type_conversion,utf8.c,26,-,+,,6,	if (*p++ != 'm')
type_conversion,utf8.c,27,-,+,,10,		return 0;
type_conversion,utf8.c,28,-,+,,9,	return p - s;
type_conversion,utf8.c,92,-,+,,12,	if (ch == 0)
type_conversion,utf8.c,94,-,+,,11,	if (ch < 32 || (ch >= 0x7f && ch < 0xa0))
type_conversion,utf8.c,98,-,+,,56,"	if (bisearch(ch, zero_width, ARRAY_SIZE(zero_width) - 1))"
type_conversion,utf8.c,102,-,+,,60,"	if (bisearch(ch, double_width, ARRAY_SIZE(double_width) - 1))"
type_conversion,utf8.c,131,-,+,,44,	remainder = (remainder_p ? *remainder_p : 999);
type_conversion,utf8.c,133,-,+,,18,	if (remainder < 1) {
type_conversion,utf8.c,135,-,+,,13,	} else if (*s < 0x80) {
type_conversion,utf8.c,137,-,+,,8,		ch = *s;
type_conversion,utf8.c,138,-,+,,10,		incr = 1;
type_conversion,utf8.c,139,-,+,,14,	} else if ((s[0] & 0xe0) == 0xc0) {
type_conversion,utf8.c,141,-,+,,19,		if (remainder < 2 ||
type_conversion,utf8.c,142,-,+,,8,		    (s[1] & 0xc0) != 0x80 ||
type_conversion,utf8.c,143,-,+,,8,		    (s[0] & 0xfe) == 0xc0)
type_conversion,utf8.c,145,-,+,,10,		ch = ((s[0] & 0x1f) << 6) | (s[1] & 0x3f);
type_conversion,utf8.c,146,-,+,,10,		incr = 2;
type_conversion,utf8.c,147,-,+,,14,	} else if ((s[0] & 0xf0) == 0xe0) {
type_conversion,utf8.c,149,-,+,,19,		if (remainder < 3 ||
type_conversion,utf8.c,150,-,+,,8,		    (s[1] & 0xc0) != 0x80 ||
type_conversion,utf8.c,151,-,+,,8,		    (s[2] & 0xc0) != 0x80 ||
type_conversion,utf8.c,153,-,+,,8,		    (s[0] == 0xe0 && (s[1] & 0xe0) == 0x80) ||
type_conversion,utf8.c,155,-,+,,8,		    (s[0] == 0xed && (s[1] & 0xe0) == 0xa0) ||
type_conversion,utf8.c,157,-,+,,8,		    (s[0] == 0xef && s[1] == 0xbf &&
type_conversion,utf8.c,158,-,+,,9,		     (s[2] & 0xfe) == 0xbe))
type_conversion,utf8.c,160,-,+,,10,		ch = ((s[0] & 0x0f) << 12) |
type_conversion,utf8.c,161,-,+,,6,			((s[1] & 0x3f) << 6) | (s[2] & 0x3f);
type_conversion,utf8.c,162,-,+,,10,		incr = 3;
type_conversion,utf8.c,163,-,+,,14,	} else if ((s[0] & 0xf8) == 0xf0) {
type_conversion,utf8.c,165,-,+,,19,		if (remainder < 4 ||
type_conversion,utf8.c,166,-,+,,8,		    (s[1] & 0xc0) != 0x80 ||
type_conversion,utf8.c,167,-,+,,8,		    (s[2] & 0xc0) != 0x80 ||
type_conversion,utf8.c,168,-,+,,8,		    (s[3] & 0xc0) != 0x80 ||
type_conversion,utf8.c,170,-,+,,8,		    (s[0] == 0xf0 && (s[1] & 0xf0) == 0x80) ||
type_conversion,utf8.c,172,-,+,,8,		    (s[0] == 0xf4 && s[1] > 0x8f) || s[0] > 0xf4)
type_conversion,utf8.c,174,-,+,,10,		ch = ((s[0] & 0x07) << 18) | ((s[1] & 0x3f) << 12) |
type_conversion,utf8.c,175,-,+,,6,			((s[2] & 0x3f) << 6) | (s[3] & 0x3f);
type_conversion,utf8.c,176,-,+,,10,		incr = 4;
type_conversion,utf8.c,180,-,+,,10,		return 0;
type_conversion,utf8.c,212,-,+,,17,	size_t width = 0;
type_conversion,utf8.c,219,-,+,,60,		       (skip = display_mode_esc_sequence_len(string)) != 0)
type_conversion,utf8.c,224,-,+,,13,			width += glyph_width;
type_conversion,utf8.c,242,-,+,,7,		if (*text == '\n' || *text == '\t' || *text == '\r') {
type_conversion,utf8.c,260,-,+,,7,		if (*eol == '\n')
type_conversion,utf8.c,262,-,+,,29,"		strbuf_addchars(buf, ' ', indent);"
type_conversion,utf8.c,263,-,+,,25,"		strbuf_add(buf, text, eol - text);"
type_conversion,utf8.c,312,-,+,,32,"					strbuf_addchars(buf, ' ', indent);"
type_conversion,utf8.c,313,-,+,,28,"				strbuf_add(buf, start, text - start);"
type_conversion,utf8.c,317,-,+,,9,				if (c == '\t')
type_conversion,utf8.c,319,-,+,,14,				else if (c == '\n') {
type_conversion,utf8.c,321,-,+,,10,					if (*space == '\n') {
type_conversion,utf8.c,360,-,+,,29,"	char *tmp = xstrndup(data, len);"
type_conversion,utf8.c,405,-,+,,26,"			strbuf_add(&dst, old, src - old);"
type_conversion,utf8.c,492,-,+,,27,"	outalloc = st_add(outsz, 1 + bom_len); /* for terminating NUL */"
type_conversion,utf8.c,511,-,+,,12,			sofar = outpos - out;
type_conversion,utf8.c,515,-,+,,31,			outsz = outalloc - sofar - 1;
type_conversion,utf8.c,518,-,+,,14,			*outpos = '\0';
type_conversion,utf8.c,520,-,+,,16,				*outsz_p = outpos - out;
type_conversion,utf8.c,556,-,+,,19,	size_t bom_len = 0;
type_conversion,utf8.c,659,-,+,,10,	if (r < 1)
type_conversion,utf8.c,665,-,+,,12,"		chrlen = p ? (p - *text)
			   : 1 /* not valid UTF-8 -> raw byte sequence */;"
type_conversion,utf8.c,666,-,+,,9,			   : 1 /* not valid UTF-8 -> raw byte sequence */;
type_conversion,utf8.c,678,-,+,,19,		*remainder_p -= chrlen;
type_conversion,utf8.c,699,-,+,,11,			return 0;
type_conversion,utf8.c,703,-,+,,8,		case 0x200c: /* ZERO WIDTH NON-JOINER */
type_conversion,utf8.c,704,-,+,,8,		case 0x200d: /* ZERO WIDTH JOINER */
type_conversion,utf8.c,705,-,+,,8,		case 0x200e: /* LEFT-TO-RIGHT MARK */
type_conversion,utf8.c,706,-,+,,8,		case 0x200f: /* RIGHT-TO-LEFT MARK */
type_conversion,utf8.c,707,-,+,,8,		case 0x202a: /* LEFT-TO-RIGHT EMBEDDING */
type_conversion,utf8.c,708,-,+,,8,		case 0x202b: /* RIGHT-TO-LEFT EMBEDDING */
type_conversion,utf8.c,709,-,+,,8,		case 0x202c: /* POP DIRECTIONAL FORMATTING */
type_conversion,utf8.c,710,-,+,,8,		case 0x202d: /* LEFT-TO-RIGHT OVERRIDE */
type_conversion,utf8.c,711,-,+,,8,		case 0x202e: /* RIGHT-TO-LEFT OVERRIDE */
type_conversion,utf8.c,712,-,+,,8,		case 0x206a: /* INHIBIT SYMMETRIC SWAPPING */
type_conversion,utf8.c,713,-,+,,8,		case 0x206b: /* ACTIVATE SYMMETRIC SWAPPING */
type_conversion,utf8.c,714,-,+,,8,		case 0x206c: /* INHIBIT ARABIC FORM SHAPING */
type_conversion,utf8.c,715,-,+,,8,		case 0x206d: /* ACTIVATE ARABIC FORM SHAPING */
type_conversion,utf8.c,716,-,+,,8,		case 0x206e: /* NATIONAL DIGIT SHAPES */
type_conversion,utf8.c,717,-,+,,8,		case 0x206f: /* NOMINAL DIGIT SHAPES */
type_conversion,utf8.c,718,-,+,,8,		case 0xfeff: /* ZERO WIDTH NO-BREAK SPACE */
type_conversion,utf8.c,732,-,+,,11,	if (c != '.')
type_conversion,utf8.c,740,-,+,,22,"	for (; needle_len > 0; needle++, needle_len--) {"
type_conversion,utf8.c,747,-,+,,11,		if (c > 127)
type_conversion,utf8.c,749,-,+,,21,		if (tolower(c) != *needle)
type_conversion,utf8.c,754,-,+,,23,	if (c && !is_dir_sep(c))
type_conversion,utf8.c,810,-,+,,33,	int utf8_compensation = slen - display_len;
type_conversion,utf8.c,812,-,+,,6,	if (display_len >= width) {
type_conversion,utf8.c,817,-,+,,6,	if (position == ALIGN_LEFT)
type_conversion,utf8.c,818,-,+,,36,"		strbuf_addf(buf, ""%-*s"", width + utf8_compensation, s);"
type_conversion,utf8.c,819,-,+,,11,	else if (position == ALIGN_MIDDLE) {
type_conversion,utf8.c,820,-,+,,23,		int left = (width - display_len) / 2;
type_conversion,utf8.c,821,-,+,,49,"		strbuf_addf(buf, ""%*s%-*s"", left, """", width - left + utf8_compensation, s);"
type_conversion,utf8.c,822,-,+,,13,	} else if (position == ALIGN_RIGHT)
type_conversion,utf8.c,823,-,+,,35,
type_conversion,var.c,105,-,+,,17,	if (buf.len == 0) {
type_conversion,var.c,181,-,+,,17,				for (i = 0; i < list.nr; i++)
type_conversion,varint.c,8,-,+,,18,	uintmax_t val = c & 127;
type_conversion,varint.c,9,-,+,,9,	while (c & 128) {
type_conversion,varint.c,10,-,+,,10,		val += 1;
type_conversion,varint.c,12,-,+,,11,			return 0; /* overflow */
type_conversion,varint.c,14,-,+,,23,		val = (val << 7) + (c & 127);
type_conversion,varint.c,23,-,+,,34,	unsigned pos = sizeof(varint) - 1;
type_conversion,varint.c,24,-,+,,24,	varint[pos] = value & 127;
type_conversion,varint.c,26,-,+,,19,		varint[--pos] = 128 | (--value & 127);
type_conversion,varint.c,28,-,+,,46,"		memcpy(buf, varint + pos, sizeof(varint) - pos);"
type_conversion,varint.c,29,-,+,,26,
type_conversion,verify-commit.c,47,-,+,,6,	if (obj->type != OBJ_COMMIT)
type_conversion,verify-commit.c,57,-,+,,19,	unsigned flags = 0;
type_conversion,verify-pack.c,42,-,+,,23,	index_pack.git_cmd = 1;
type_conversion,verify-pack.c,67,-,+,,23,	unsigned int flags = 0;
type_conversion,verify-tag.c,25,-,+,,19,	unsigned flags = 0;
type_conversion,version.c,31,-,+,,15,		for (i = 0; i < buf.len; i++) {
type_conversion,version.c,32,-,+,,8,			if (buf.buf[i] <= 32 || buf.buf[i] >= 127)
type_conversion,version.c,33,-,+,,18,				buf.buf[i] = '.';
type_conversion,versioncmp.c,82,-,+,,14,	for (i = 0; i < prereleases->nr; i++) {
type_conversion,versioncmp.c,84,-,+,,27,"		int start, suffix_len = strlen(suffix);"
type_conversion,versioncmp.c,141,-,+,,19,"		/* S_I */  CMP, -1,  -1,  +1,  LEN, LEN, +1,  LEN, LEN,"
type_conversion,versioncmp.c,143,-,+,,19,"		/* S_Z */  CMP, +1,  +1,  -1,  CMP, CMP, -1,  CMP, CMP"
type_conversion,versioncmp.c,152,-,+,,18,	state = S_N + ((c1 == '0') + (isdigit (c1) != 0));
type_conversion,versioncmp.c,154,-,+,,17,	while ((diff = c1 - c2) == 0) {
type_conversion,versioncmp.c,155,-,+,,7,		if (c1 == '\0')
type_conversion,versioncmp.c,158,-,+,,11,		state = next_state[state];
type_conversion,versioncmp.c,161,-,+,,13,		state += (c1 == '0') + (isdigit (c1) != 0);
type_conversion,versioncmp.c,181,-,+,,71,"	if (prereleases && swap_prereleases(s1, s2, (const char *) p1 - s1 - 1,"
type_conversion,versioncmp.c,185,-,+,,37,	state = result_type[state * 3 + (((c2 == '0') + (isdigit (c2) != 0)))];
type_conversion,walker.c,31,-,+,,25,"		obj->type ? type_name(obj->type): ""object"","
type_conversion,walker.c,122,-,+,,6,	if (obj->type == OBJ_COMMIT) {
type_conversion,walker.c,127,-,+,,6,	if (obj->type == OBJ_TREE) {
type_conversion,walker.c,132,-,+,,6,	if (obj->type == OBJ_BLOB) {
type_conversion,walker.c,135,-,+,,6,	if (obj->type == OBJ_TAG) {
type_conversion,walker.c,170,-,+,,16,	uint64_t nr = 0;
type_conversion,walker.c,173,-,+,,60,"		progress = start_delayed_progress(_(""Fetching objects""), 0);"
type_conversion,walker.c,250,-,+,,16,			*rf_one++ = 0;
type_conversion,walker.c,329,-,+,,37,"					   oids + i, NULL, NULL, NULL, 0,"
type_conversion,wildmatch.c,64,-,+,,10,"	for ( ; (p_ch = *p) != '\0'; text++, p++) {"
type_conversion,wildmatch.c,67,-,+,,7,		if ((t_ch = *text) == '\0' && p_ch != '*')
type_conversion,wildmatch.c,73,-,+,,11,		switch (p_ch) {
type_conversion,wildmatch.c,80,-,+,,8,			if (t_ch != p_ch)
type_conversion,wildmatch.c,85,-,+,,33,			if ((flags & WM_PATHNAME) && t_ch == '/')
type_conversion,wildmatch.c,89,-,+,,8,			if (*++p == '*') {
type_conversion,wildmatch.c,91,-,+,,12,				while (*++p == '*') {}
type_conversion,wildmatch.c,95,-,+,,34,				else if ((prev_p - pattern < 2 || *(prev_p - 2) == '/') &&
type_conversion,wildmatch.c,96,-,+,,10,				    (*p == '\0' || *p == '/' ||
type_conversion,wildmatch.c,97,-,+,,11,				     (p[0] == '\\' && p[1] == '/'))) {
type_conversion,wildmatch.c,107,-,+,,10,					if (p[0] == '/' &&
type_conversion,wildmatch.c,116,-,+,,8,			if (*p == '\0') {
type_conversion,wildmatch.c,124,-,+,,31,			} else if (!match_slash && *p == '/') {
type_conversion,wildmatch.c,138,-,+,,9,				if (t_ch == '\0')
type_conversion,wildmatch.c,152,-,+,,13,					while ((t_ch = *text) != '\0' &&
type_conversion,wildmatch.c,153,-,+,,29,					       (match_slash || t_ch != '/')) {
type_conversion,wildmatch.c,156,-,+,,11,						if (t_ch == p_ch)
type_conversion,wildmatch.c,160,-,+,,10,					if (t_ch != p_ch) {
type_conversion,wildmatch.c,170,-,+,,32,				} else if (!match_slash && t_ch == '/')
type_conversion,wildmatch.c,178,-,+,,8,			if (p_ch == NEGATE_CLASS2)
type_conversion,wildmatch.c,182,-,+,,14,			negated = p_ch == NEGATE_CLASS ? 1 : 0;
type_conversion,wildmatch.c,187,-,+,,14,			prev_ch = 0;
type_conversion,wildmatch.c,192,-,+,,9,				if (p_ch == '\\') {
type_conversion,wildmatch.c,196,-,+,,10,					if (t_ch == p_ch)
type_conversion,wildmatch.c,198,-,+,,16,				} else if (p_ch == '-' && prev_ch && p[1] && p[1] != ']') {
type_conversion,wildmatch.c,200,-,+,,10,					if (p_ch == '\\') {
type_conversion,wildmatch.c,205,-,+,,10,					if (t_ch <= p_ch && t_ch >= prev_ch)
type_conversion,wildmatch.c,209,-,+,,11,						if (t_ch_upper <= p_ch && t_ch_upper >= prev_ch)
type_conversion,wildmatch.c,212,-,+,,13,"					p_ch = 0; /* This makes ""prev_ch"" get set to 0. */"
type_conversion,wildmatch.c,213,-,+,,16,				} else if (p_ch == '[' && p[1] == ':') {
type_conversion,wildmatch.c,216,-,+,,38,					for (s = p += 2; (p_ch = *p) && p_ch != ']'; p++) {} /*SHARED ITERATOR*/
type_conversion,wildmatch.c,219,-,+,,18,					i = p - s - 1;
type_conversion,wildmatch.c,220,-,+,,19,					if (i < 0 || p[-1] != ':') {
type_conversion,wildmatch.c,223,-,+,,14,						p_ch = '[';
type_conversion,wildmatch.c,224,-,+,,11,						if (t_ch == p_ch)
type_conversion,wildmatch.c,268,-,+,,13,"					p_ch = 0; /* This makes ""prev_ch"" get set to 0. */"
type_conversion,wildmatch.c,269,-,+,,16,				} else if (t_ch == p_ch)
type_conversion,wildmatch.c,271,-,+,,29,"			} while (prev_ch = p_ch, (p_ch = *++p) != ']');"
type_conversion,wildmatch.c,273,-,+,,34,			    ((flags & WM_PATHNAME) && t_ch == '/'))
type_conversion,worktree.c,94,-,+,,49,"	if (strbuf_read_file(&worktree_path, path.buf, 0) <= 0)"
type_conversion,worktree.c,190,-,+,,14,	suffixlen = strlen(suffix);
type_conversion,worktree.c,196,-,+,,19,		int		 pathlen = strlen(path);
type_conversion,worktree.c,197,-,+,,14,	for (i = 1; i < l->nr; i++) {
type_conversion,worktree.c,200,-,+,,43,		if ((!start || (start > 0 && is_dir_sep(path[start - 1]))) &&
type_conversion,worktree.c,261,-,+,,49,"			if (strbuf_read_file(&lock_reason, path.buf, 0) < 0)"
type_conversion,worktree.c,287,-,+,,8,	len = strlen(path);
type_conversion,worktree.c,288,-,+,,27,	while (len && is_dir_sep(path[len - 1]))
type_conversion,worktree.c,292,-,+,,18,		if (is_dir_sep(*name)) {
type_conversion,worktree.c,368,-,+,,47,"				to_file, ""core.bare"", NULL, ""true"", NULL, 0))"
type_conversion,worktree.c,389,-,+,,15,	cp.git_cmd = 1;
type_conversion,worktree.c,409,-,+,,15,	cp.git_cmd = 1;
type_conversion,worktree.c,420,-,+,,25,	unsigned int counter = 0;
type_conversion,worktree.c,446,-,+,,24,"	strbuf_add(&sb, name, path + len - name);"
type_conversion,worktree.c,453,-,+,,8,	len = sb_repo.len;
type_conversion,worktree.c,458,-,+,,28,"	while (mkdir(sb_repo.buf, 0777)) {"
type_conversion,worktree.c,463,-,+,,27,"		strbuf_setlen(&sb_repo, len);"
type_conversion,worktree.c,518,-,+,,17,"				      NULL, 0, UPDATE_REFS_MSG_ON_ERR);"
type_conversion,worktree.c,521,-,+,,7,		    REF_WORKTREE_CURRENT &&
type_conversion,worktree.c,654,-,+,,41,"	if (strbuf_read_file(&actual, gitfile, 0) < 0)"
type_conversion,worktree.c,659,-,+,,42,"			strbuf_read_file(&contents, path.buf, 64);"
type_conversion,worktree.c,719,-,+,,47,"	if (strbuf_read_file(&olddotgit, gitdir.buf, 0) < 0)"
type_conversion,worktree.c,744,-,+,,39,"	const char *branchname = xstrndup(s, n);"
type_conversion,worktree.c,768,-,+,,20,	if (read_result < 0) {
type_conversion,worktree.c,777,-,+,,6,	if (read_result != len) {
type_conversion,worktree.c,784,-,+,,28,	while (len && (path[len - 1] == '\n' || path[len - 1] == '\r'))
type_conversion,worktree.c,791,-,+,,14,	path[len] = '\0';
type_conversion,worktree.c,850,-,+,,28,"		new_branch = xstrndup(s, n);"
type_conversion,worktree.c,907,-,+,,16,		cp.git_cmd = 1;
type_conversion,worktree.c,965,-,+,,21,	int cur_path_len = strlen(wt->path);
type_conversion,worktree.c,1009,-,+,,18,		int path_len = strlen(wt[i]->path);
type_conversion,worktree.c,1013,-,+,,14,"		sha1_len = strlen(repo_find_unique_abbrev(the_repository, &wt[i]->head_oid, *abbrev));"
type_conversion,worktree.c,1156,-,+,,15,		for (i = 0; i < istate.cache_nr; i++) {
type_conversion,worktree.c,1230,-,+,,37,"	if (validate_worktree(wt, &errmsg, 0))"
type_conversion,worktree.c,1277,-,+,,15,	cp.git_cmd = 1;
type_conversion,worktree.c,1284,-,+,,8,"	ret = xread(cp.out, buf, sizeof(buf));"
type_conversion,wrapper.c,20,-,+,,24,	static size_t limit = 0;
type_conversion,wrapper.c,22,-,+,,44,"		limit = git_env_ulong(""GIT_ALLOC_LIMIT"", 0);"
type_conversion,wrapper.c,54,-,+,,16,		ret = malloc(1);
type_conversion,wrapper.c,86,-,+,,26,"	ret = do_xmalloc(size + 1, gentle);"
type_conversion,wrapper.c,88,-,+,,24,		((char*)ret)[size] = 0;
type_conversion,wrapper.c,116,-,+,,27,"	return xmemdupz(str, p ? p - str : len);"
type_conversion,wrapper.c,124,-,+,,9,	return s[len] == '\0' ? 0 : 1;
type_conversion,wrapper.c,133,-,+,,18,		return xmalloc(0);
type_conversion,wrapper.c,153,-,+,,16,"		ret = calloc(1, 1);"
type_conversion,wrapper.c,170,-,+,,16,	mode_t mode = 0;
type_conversion,wrapper.c,216,-,+,,13,"	poll(&pfd, 1, -1);"
type_conversion,wrapper.c,232,-,+,,12,		if (nr < 0) {
type_conversion,wrapper.c,254,-,+,,12,		if (nr < 0) {
type_conversion,wrapper.c,277,-,+,,13,		if ((nr < 0) && (errno == EAGAIN || errno == EINTR))
type_conversion,wrapper.c,286,-,+,,18,	ssize_t total = 0;
type_conversion,wrapper.c,288,-,+,,17,	while (count > 0) {
type_conversion,wrapper.c,290,-,+,,16,		if (loaded < 0)
type_conversion,wrapper.c,291,-,+,,11,			return -1;
type_conversion,wrapper.c,292,-,+,,17,		if (loaded == 0)
type_conversion,wrapper.c,294,-,+,,12,		count -= loaded;
type_conversion,wrapper.c,305,-,+,,18,	ssize_t total = 0;
type_conversion,wrapper.c,307,-,+,,17,	while (count > 0) {
type_conversion,wrapper.c,309,-,+,,17,		if (written < 0)
type_conversion,wrapper.c,310,-,+,,11,			return -1;
type_conversion,wrapper.c,313,-,+,,11,			return -1;
type_conversion,wrapper.c,315,-,+,,12,		count -= written;
type_conversion,wrapper.c,326,-,+,,18,	ssize_t total = 0;
type_conversion,wrapper.c,328,-,+,,17,	while (count > 0) {
type_conversion,wrapper.c,330,-,+,,16,		if (loaded < 0)
type_conversion,wrapper.c,331,-,+,,11,			return -1;
type_conversion,wrapper.c,332,-,+,,17,		if (loaded == 0)
type_conversion,wrapper.c,334,-,+,,12,		count -= loaded;
type_conversion,wrapper.c,363,-,+,,16,		if (*mode && mode[1] == '+')
type_conversion,wrapper.c,365,-,+,,12,		else if (*mode == 'w' || *mode == 'a')
type_conversion,wrapper.c,452,-,+,,55,	static const int num_letters = ARRAY_SIZE(letters) - 1;
type_conversion,wrapper.c,454,-,+,,51,	static const int num_x = ARRAY_SIZE(x_pattern) - 1;
type_conversion,wrapper.c,461,-,+,,12,	if (len < num_x + suffix_len) {
type_conversion,wrapper.c,466,-,+,,29,"	if (strncmp(&pattern[len - num_x - suffix_len], x_pattern, num_x)) {"
type_conversion,wrapper.c,475,-,+,,37,	filename_template = &pattern[len - num_x - suffix_len];
type_conversion,wrapper.c,484,-,+,,39,			filename_template[i] = letters[v % num_letters];
type_conversion,wrapper.c,485,-,+,,9,			v /= num_letters;
type_conversion,wrapper.c,499,-,+,,15,	pattern[0] = '\0';
type_conversion,wrapper.c,549,-,+,,61,"		trace2_counter_add(TRACE2_COUNTER_ID_FSYNC_WRITEOUT_ONLY, 1);"
type_conversion,wrapper.c,568,-,+,,30,"		return sync_file_range(fd, 0, 0, SYNC_FILE_RANGE_WAIT_BEFORE |"
type_conversion,wrapper.c,581,-,+,,62,"		trace2_counter_add(TRACE2_COUNTER_ID_FSYNC_HARDWARE_FLUSH, 1);"
type_conversion,wrapper.c,674,-,+,,6,	if (len >= max)
type_conversion,wrapper.c,682,-,+,,36,"	if (write_in_full(fd, buf, len) < 0)"
type_conversion,wrapper.c,705,-,+,,13,"	poll(NULL, 0, millisec);"
type_conversion,wrapper.c,717,-,+,,13,		buf[len - 1] = 0;
type_conversion,wrapper.c,802,-,+,,13,		if (res < 0) {
type_conversion,wrapper.c,808,-,+,,10,		len -= res;
type_conversion,write-or-die.c,65,-,+,,6,	if (fsync_method == FSYNC_METHOD_WRITEOUT_ONLY &&
type_conversion,write-or-die.c,80,-,+,,6,	if (fsync_components & component)
type_conversion,write-or-die.c,87,-,+,,6,	if (fsync_components & component)
type_conversion,write-or-die.c,93,-,+,,38,"	if (write_in_full(fd, buf, count) < 0) {"
type_conversion,write-or-die.c,101,-,+,,18,"	if (fwrite(buf, 1, count, f) != count)"
type_conversion,write-or-die.h,75,-,+,,10,	return (fsync_components & component) && (fsync_method == FSYNC_METHOD_BATCH);
type_conversion,write-tree.c,35,-,+,,5,"		  PARSE_OPT_HIDDEN | PARSE_OPT_NOARG, NULL,"
type_conversion,writer.c,31,-,+,,10,	switch (typ) {
type_conversion,writer.c,52,-,+,,37,"		uint8_t *zeroed = reftable_calloc(w->pending_padding, sizeof(*zeroed));"
type_conversion,writer.c,53,-,+,,42,"		int n = w->write(w->write_arg, zeroed, w->pending_padding);"
type_conversion,writer.c,62,-,+,,6,"	n = w->write(w->write_arg, data, len);"
type_conversion,writer.c,75,-,+,,23,	if (opts->hash_id == 0) {
type_conversion,writer.c,78,-,+,,26,	if (opts->block_size == 0) {
type_conversion,writer.c,85,-,+,,29,	return (w->opts.hash_id == 0 || w->opts.hash_id == GIT_SHA1_FORMAT_ID) ?
type_conversion,writer.c,92,-,+,,23,"	memcpy(dest, ""REFT"", 4);"
type_conversion,writer.c,94,-,+,,12,	dest[4] = writer_version(w);
type_conversion,writer.c,108,-,+,,17,	if (w->next == 0) {
type_conversion,writer.c,114,-,+,,26,"			  w->opts.block_size, block_start,"
type_conversion,writer.c,127,-,+,,47,"	struct reftable_writer *wp = reftable_calloc(1, sizeof(*wp));"
type_conversion,writer.c,128,-,+,,47,"	strbuf_init(&wp->block_writer_data.last_key, 0);"
type_conversion,writer.c,130,-,+,,26,	if (opts->block_size >= (1 << 24)) {
type_conversion,writer.c,210,-,+,,24,	if (key->offset_len > 0 && key->offsets[key->offset_len - 1] == off) {
type_conversion,writer.c,226,-,+,,9,		err = REFTABLE_API_ERROR;
type_conversion,writer.c,235,-,+,,6,	if (block_writer_type(w->block_writer) != reftable_record_type(rec))
type_conversion,writer.c,268,-,+,,9,		err = REFTABLE_ENTRY_TOO_BIG_ERROR;
type_conversion,writer.c,289,-,+,,10,		return REFTABLE_API_ERROR;
type_conversion,writer.c,292,-,+,,10,		return REFTABLE_API_ERROR;
type_conversion,writer.c,303,-,+,,7,			   hash_size(w->opts.hash_id));
type_conversion,writer.c,311,-,+,,7,			   hash_size(w->opts.hash_id));
type_conversion,writer.c,340,-,+,,6,	    block_writer_type(w->block_writer) == BLOCK_TYPE_REF) {
type_conversion,writer.c,346,-,+,,13,	w->next -= w->pending_padding;
type_conversion,writer.c,358,-,+,,6,	if (log->value_type == REFTABLE_LOG_DELETION)
type_conversion,writer.c,362,-,+,,10,		return REFTABLE_API_ERROR;
type_conversion,writer.c,368,-,+,,52,		       cleaned_message.buf[cleaned_message.len - 1] == '\n')
type_conversion,writer.c,370,-,+,,33,				      cleaned_message.len - 1);
type_conversion,writer.c,373,-,+,,10,			err = REFTABLE_API_ERROR;
type_conversion,writer.c,404,-,+,,25,	uint64_t index_start = 0;
type_conversion,writer.c,406,-,+,,21,	size_t threshold = w->opts.unpadded ? 1 : 3;
type_conversion,writer.c,444,-,+,,18,		w->index_len = 0;
type_conversion,writer.c,445,-,+,,18,		w->index_cap = 0;
type_conversion,writer.c,446,-,+,,12,		for (i = 0; i < idx_len; i++) {
type_conversion,writer.c,463,-,+,,12,		for (i = 0; i < idx_len; i++)
type_conversion,writer.c,519,-,+,,19,"				.offset_len = entry->offset_len,"
type_conversion,writer.c,579,-,+,,16,	uint8_t typ = 0;
type_conversion,writer.c,589,-,+,,6,	if (typ == BLOCK_TYPE_REF && !w->opts.skip_index_objects &&
type_conversion,writer.c,611,-,+,,31,	int empty_table = w->next == 0;
type_conversion,writer.c,619,-,+,,33,"		err = padded_write(w, header, n, 0);"
type_conversion,writer.c,627,-,+,,49,"	put_be64(p, (w->stats.obj_stats.offset) << 5 | w->stats.object_id_len);"
type_conversion,writer.c,637,-,+,,20,"	put_be32(p, crc32(0, footer, p - footer));"
type_conversion,writer.c,642,-,+,,9,		err = REFTABLE_IO_ERROR;
type_conversion,writer.c,646,-,+,,32,"	err = padded_write(w, footer, footer_size(writer_version(w)), 0);"
type_conversion,writer.c,651,-,+,,9,		err = REFTABLE_EMPTY_TABLE_ERROR;
type_conversion,writer.c,662,-,+,,18,	for (size_t i = 0; w->index && i < w->index_len; i++)
type_conversion,writer.c,665,-,+,,17,	w->index_len = 0;
type_conversion,writer.c,666,-,+,,17,	w->index_cap = 0;
type_conversion,writer.c,694,-,+,,27,	if (!w->opts.unpadded && typ != BLOCK_TYPE_LOG)
type_conversion,writer.c,695,-,+,,34,		padding = w->opts.block_size - raw_bytes;
type_conversion,writer.c,698,-,+,,52,	block_typ_off = (bstats->blocks == 0) ? w->next : 0;
type_conversion,writer.c,699,-,+,,22,	if (block_typ_off > 0)
type_conversion,writer.c,713,-,+,,34,"	err = padded_write(w, w->block, raw_bytes, padding);"
type_conversion,writer.c,734,-,+,,13,	w->next += padding + raw_bytes;
type_conversion,ws.c,19,-,+,,41,"	{ ""trailing-space"", WS_TRAILING_SPACE, 0 },"
type_conversion,ws.c,20,-,+,,45,"	{ ""space-before-tab"", WS_SPACE_BEFORE_TAB, 0 },"
type_conversion,ws.c,21,-,+,,51,"	{ ""indent-with-non-tab"", WS_INDENT_WITH_NON_TAB, 0 },"
type_conversion,ws.c,22,-,+,,31,"	{ ""cr-at-eol"", WS_CR_AT_EOL, 1 },"
type_conversion,ws.c,23,-,+,,37,"	{ ""blank-at-eol"", WS_BLANK_AT_EOL, 0 },"
type_conversion,ws.c,24,-,+,,37,"	{ ""blank-at-eof"", WS_BLANK_AT_EOF, 0 },"
type_conversion,ws.c,25,-,+,,39,"	{ ""tab-in-indent"", WS_TAB_IN_INDENT, 0, 1 },"
type_conversion,ws.c,41,-,+,,9,		len = ep - string;
type_conversion,ws.c,43,-,+,,7,		if (*string == '-') {
type_conversion,ws.c,50,-,+,,15,		for (i = 0; i < ARRAY_SIZE(whitespace_rule_names); i++) {
type_conversion,ws.c,61,-,+,,24,			unsigned tabwidth = atoi(arg);
type_conversion,ws.c,62,-,+,,8,			if (0 < tabwidth && tabwidth < 0100) {
type_conversion,ws.c,92,-,+,,15,		for (i = 0; i < ARRAY_SIZE(whitespace_rule_names); i++)
type_conversion,ws.c,147,-,+,,20,	unsigned result = 0;
type_conversion,ws.c,155,-,+,,17,	if (len > 0 && line[len - 1] == '\n') {
type_conversion,ws.c,160,-,+,,17,	    len > 0 && line[len - 1] == '\r') {
type_conversion,ws.c,182,-,+,,7,		if (line[i] == ' ')
type_conversion,ws.c,184,-,+,,7,		if (line[i] != '\t')
type_conversion,ws.c,190,-,+,,28,"				fwrite(line + written, i - written, 1, stream);"
type_conversion,ws.c,192,-,+,,22,"				fwrite(line + i, 1, 1, stream);"
type_conversion,ws.c,197,-,+,,28,"				fwrite(line + written, i - written, 1, stream);"
type_conversion,ws.c,199,-,+,,22,"				fwrite(line + i, 1, 1, stream);"
type_conversion,ws.c,203,-,+,,27,"			fwrite(line + written, i - written + 1, 1, stream);"
type_conversion,ws.c,209,-,+,,44,	if ((ws_rule & WS_INDENT_WITH_NON_TAB) && i - written >= ws_tab_width(ws_rule)) {
type_conversion,ws.c,213,-,+,,27,"			fwrite(line + written, i - written, 1, stream);"
type_conversion,ws.c,229,-,+,,8,"			    trailing_whitespace - written, 1, stream);"
type_conversion,ws.c,237,-,+,,8,"			    len - trailing_whitespace, 1, stream);"
type_conversion,ws.c,295,-,+,,18,		if (0 < len && src[len - 1] == '\n') {
type_conversion,ws.c,298,-,+,,19,			if (0 < len && src[len - 1] == '\r') {
type_conversion,ws.c,315,-,+,,7,		if (ch == '\t') {
type_conversion,ws.c,320,-,+,,14,		} else if (ch == ' ') {
type_conversion,ws.c,323,-,+,,33,			    ws_tab_width(ws_rule) <= i - last_tab_in_indent)
type_conversion,ws.c,348,-,+,,8,			if (ch != ' ') {
type_conversion,ws.c,350,-,+,,23,"				strbuf_addch(dst, ch);"
type_conversion,ws.c,353,-,+,,9,				if (consecutive_spaces == ws_tab_width(ws_rule)) {
type_conversion,ws.c,366,-,+,,15,		int start = dst->len;
type_conversion,ws.c,369,-,+,,8,			if (src[i] == '\t')
type_conversion,ws.c,372,-,+,,26,				} while ((dst->len - start) % ws_tab_width(ws_rule));
type_conversion,ws.c,374,-,+,,23,"				strbuf_addch(dst, src[i]);"
type_conversion,ws.c,381,-,+,,23,"	strbuf_add(dst, src, len);"
type_conversion,wt-status.c,58,-,+,,14,	if (slot == WT_STATUS_ONBRANCH && color_is_nil(c))
type_conversion,wt-status.c,89,-,+,,8,			if (*line != '\n' && *line != '\t')
type_conversion,wt-status.c,93,-,+,,31,"			strbuf_add(&linebuf, line, eol - line);"
type_conversion,wt-status.c,153,-,+,,29,	s->change.strdup_strings = 1;
type_conversion,wt-status.c,154,-,+,,32,	s->untracked.strdup_strings = 1;
type_conversion,wt-status.c,155,-,+,,30,	s->ignored.strdup_strings = 1;
type_conversion,wt-status.c,171,-,+,,24,"	const char *c = color(WT_STATUS_HEADER, s);"
type_conversion,wt-status.c,175,-,+,,14,	for (i = 0; i < s->change.nr; i++) {
type_conversion,wt-status.c,197,-,+,,6,	if (s->whence != FROM_COMMIT)
type_conversion,wt-status.c,224,-,+,,24,"	const char *c = color(WT_STATUS_HEADER, s);"
type_conversion,wt-status.c,229,-,+,,6,	if (s->whence != FROM_COMMIT)
type_conversion,wt-status.c,247,-,+,,24,"	const char *c = color(WT_STATUS_HEADER, s);"
type_conversion,wt-status.c,265,-,+,,24,"	const char *c = color(WT_STATUS_HEADER, s);"
type_conversion,wt-status.c,274,-,+,,28,"	status_printf_ln(s, color(WT_STATUS_HEADER, s), ""%s"", """");"
type_conversion,wt-status.c,339,-,+,,24,"	const char *c = color(WT_STATUS_UNMERGED, s);"
type_conversion,wt-status.c,350,-,+,,22,		padding = xmallocz(label_width);
type_conversion,wt-status.c,351,-,+,,24,"		memset(padding, ' ', label_width);"
type_conversion,wt-status.c,354,-,+,,51,"	one = quote_path(it->string, s->prefix, &onebuf, 0);"
type_conversion,wt-status.c,355,-,+,,25,"	status_printf(s, color(WT_STATUS_HEADER, s), ""\t"");"
type_conversion,wt-status.c,384,-,+,,22,		padding = xmallocz(label_width);
type_conversion,wt-status.c,385,-,+,,24,"		memset(padding, ' ', label_width);"
type_conversion,wt-status.c,390,-,+,,7,	case WT_STATUS_UPDATED:
type_conversion,wt-status.c,393,-,+,,7,	case WT_STATUS_CHANGED:
type_conversion,wt-status.c,398,-,+,,8,			if (d->dirty_submodule & DIRTY_SUBMODULE_MODIFIED)
type_conversion,wt-status.c,400,-,+,,8,			if (d->dirty_submodule & DIRTY_SUBMODULE_UNTRACKED)
type_conversion,wt-status.c,402,-,+,,38,"			strbuf_setlen(&extra, extra.len - 2);"
type_conversion,wt-status.c,420,-,+,,49,"	one = quote_path(one_name, s->prefix, &onebuf, 0);"
type_conversion,wt-status.c,421,-,+,,49,"	two = quote_path(two_name, s->prefix, &twobuf, 0);"
type_conversion,wt-status.c,423,-,+,,25,"	status_printf(s, color(WT_STATUS_HEADER, s), ""\t"");"
type_conversion,wt-status.c,436,-,+,,31,"		status_printf_more(s, color(WT_STATUS_HEADER, s), ""%s"", extra.buf);"
type_conversion,wt-status.c,447,-,+,,10,		return 'M';
type_conversion,wt-status.c,448,-,+,,6,	if (d->dirty_submodule & DIRTY_SUBMODULE_MODIFIED)
type_conversion,wt-status.c,449,-,+,,10,		return 'm';
type_conversion,wt-status.c,450,-,+,,6,	if (d->dirty_submodule & DIRTY_SUBMODULE_UNTRACKED)
type_conversion,wt-status.c,451,-,+,,10,		return '?';
type_conversion,wt-status.c,452,-,+,,9,	return d->worktree_status;
type_conversion,wt-status.c,478,-,+,,25,			d->worktree_status = p->status;
type_conversion,wt-status.c,480,-,+,,25,			d->dirty_submodule = p->two->dirty_submodule;
type_conversion,wt-status.c,481,-,+,,31,"			d->new_submodule_commits = !oideq(&p->one->oid,
							  &p->two->oid);"
type_conversion,wt-status.c,483,-,+,,8,			if (s->status_format == STATUS_FORMAT_SHORT)
type_conversion,wt-status.c,484,-,+,,26,				d->worktree_status = short_submodule_status(d);
type_conversion,wt-status.c,487,-,+,,11,		switch (p->status) {
type_conversion,wt-status.c,489,-,+,,23,			d->mode_worktree = p->two->mode;
type_conversion,wt-status.c,493,-,+,,20,			d->mode_index = p->one->mode;
type_conversion,wt-status.c,503,-,+,,22,			d->rename_score = p->score * 100 / MAX_SCORE;
type_conversion,wt-status.c,504,-,+,,23,			d->rename_status = p->status;
type_conversion,wt-status.c,509,-,+,,20,			d->mode_index = p->one->mode;
type_conversion,wt-status.c,510,-,+,,23,			d->mode_worktree = p->two->mode;
type_conversion,wt-status.c,527,-,+,,37,"	pos = index_name_pos(istate, path, strlen(path));"
type_conversion,wt-status.c,533,-,+,,9,	while (pos < istate->cache_nr) {
type_conversion,wt-status.c,537,-,+,,33,		mask |= (1 << (ce_stage(ce) - 1));
type_conversion,wt-status.c,562,-,+,,22,			d->index_status = p->status;
type_conversion,wt-status.c,563,-,+,,11,		switch (p->status) {
type_conversion,wt-status.c,566,-,+,,20,			d->mode_index = p->two->mode;
type_conversion,wt-status.c,571,-,+,,19,			d->mode_head = p->one->mode;
type_conversion,wt-status.c,582,-,+,,22,			d->rename_score = p->score * 100 / MAX_SCORE;
type_conversion,wt-status.c,583,-,+,,23,			d->rename_status = p->status;
type_conversion,wt-status.c,587,-,+,,19,			d->mode_head = p->one->mode;
type_conversion,wt-status.c,588,-,+,,20,			d->mode_index = p->two->mode;
type_conversion,wt-status.c,617,-,+,,39,	rev.diffopt.flags.dirty_submodules = 1;
type_conversion,wt-status.c,620,-,+,,54,		rev.diffopt.flags.ignore_untracked_in_submodules = 1;
type_conversion,wt-status.c,622,-,+,,49,		rev.diffopt.flags.override_submodule_config = 1;
type_conversion,wt-status.c,625,-,+,,4,			s->show_untracked_files != SHOW_NO_UNTRACKED_FILES)
type_conversion,wt-status.c,633,-,+,,23,"	run_diff_files(&rev, 0);"
type_conversion,wt-status.c,647,-,+,,48,	rev.diffopt.flags.override_submodule_config = 1;
type_conversion,wt-status.c,676,-,+,,32,	rev.diffopt.flags.recursive = 1;
type_conversion,wt-status.c,706,-,+,,18,	d->mode_index = mode;
type_conversion,wt-status.c,718,-,+,,14,	for (i = 0; i < istate->cache_nr; i++) {
type_conversion,wt-status.c,738,-,+,,19,			ps.recursive = 1;
type_conversion,wt-status.c,739,-,+,,22,			ps.has_wildcard = 1;
type_conversion,wt-status.c,742,-,+,,32,"			strbuf_add(&base, ce->name, ce->ce_namelen);"
type_conversion,wt-status.c,756,-,+,,42,			d->stagemask |= (1 << (ce_stage(ce) - 1));
type_conversion,wt-status.c,766,-,+,,20,			d->mode_index = ce->ce_mode;
type_conversion,wt-status.c,783,-,+,,6,	if (s->show_untracked_files != SHOW_ALL_UNTRACKED_FILES)
type_conversion,wt-status.c,785,-,+,,4,			DIR_SHOW_OTHER_DIRECTORIES | DIR_HIDE_EMPTY_DIRECTORIES;
type_conversion,wt-status.c,787,-,+,,16,		dir.flags |= DIR_SHOW_IGNORED_TOO;
type_conversion,wt-status.c,789,-,+,,7,		if (s->show_ignored_mode == SHOW_MATCHING_IGNORED)
type_conversion,wt-status.c,790,-,+,,17,			dir.flags |= DIR_SHOW_IGNORED_TOO_MODE_MATCHING;
type_conversion,wt-status.c,801,-,+,,46,"		if (index_name_is_other(istate, ent->name, ent->len))"
type_conversion,wt-status.c,807,-,+,,46,"		if (index_name_is_other(istate, ent->name, ent->len))"
type_conversion,wt-status.c,814,-,+,,52,		s->untracked_in_ms = (getnanotime() - t_begin) / 1000000;
type_conversion,wt-status.c,821,-,+,,14,	for (i = 0; i < s->change.nr; i++) {
type_conversion,wt-status.c,873,-,+,,14,	for (i = 0; i < s->change.nr; i++) {
type_conversion,wt-status.c,896,-,+,,14,	for (i = 0; i < s->change.nr; i++) {
type_conversion,wt-status.c,908,-,+,,38,"		wt_longstatus_print_change_data(s, WT_STATUS_UPDATED, it);"
type_conversion,wt-status.c,927,-,+,,14,	for (i = 0; i < s->change.nr; i++) {
type_conversion,wt-status.c,953,-,+,,14,	for (i = 0; i < s->change.nr; i++) {
type_conversion,wt-status.c,961,-,+,,38,"		wt_longstatus_print_change_data(s, WT_STATUS_CHANGED, it);"
type_conversion,wt-status.c,992,-,+,,48,"				    ""Your stash currently has %d entries"", stash_count),"
type_conversion,wt-status.c,1014,-,+,,23,	sm_summary.git_cmd = 1;
type_conversion,wt-status.c,1015,-,+,,24,	sm_summary.no_stdin = 1;
type_conversion,wt-status.c,1017,-,+,,44,"	capture_command(&sm_summary, &cmd_stdout, 1024);"
type_conversion,wt-status.c,1056,-,+,,14,	for (i = 0; i < l->nr; i++) {
type_conversion,wt-status.c,1060,-,+,,50,"		path = quote_path(it->string, s->prefix, &buf, 0);"
type_conversion,wt-status.c,1065,-,+,,26,"		status_printf(s, color(WT_STATUS_HEADER, s), ""\t"");"
type_conversion,wt-status.c,1066,-,+,,31,"		status_printf_more(s, color(WT_STATUS_UNTRACKED, s),"
type_conversion,wt-status.c,1075,-,+,,13,"		    color(WT_STATUS_HEADER, s),"
type_conversion,wt-status.c,1077,-,+,,13,"		    color(WT_STATUS_UNTRACKED, s));"
type_conversion,wt-status.c,1097,-,+,,9,		len = 0;
type_conversion,wt-status.c,1099,-,+,,27,		size_t newlen = p - s + 1;
type_conversion,wt-status.c,1121,-,+,,22,	s->added_cut_line = 1;
type_conversion,wt-status.c,1132,-,+,,24,"	const char *c = color(WT_STATUS_HEADER, s);"
type_conversion,wt-status.c,1135,-,+,,37,	rev.diffopt.flags.allow_textconv = 1;
type_conversion,wt-status.c,1178,-,+,,24,"		run_diff_files(&rev, 0);"
type_conversion,wt-status.c,1188,-,+,,21,	uint64_t t_begin = 0;
type_conversion,wt-status.c,1202,-,+,,6,	    s->ahead_behind_flags == AHEAD_BEHIND_FULL) {
type_conversion,wt-status.c,1203,-,+,,56,		uint64_t t_delta_in_ms = (getnanotime() - t_begin) / 1000000;
type_conversion,wt-status.c,1208,-,+,,9,				    t_delta_in_ms / 1000.0);
type_conversion,wt-status.c,1213,-,+,,33,"		color_fprintf_ln(s->fp, color(WT_STATUS_HEADER, s),"
type_conversion,wt-status.c,1219,-,+,,33,"		color_fprintf_ln(s->fp, color(WT_STATUS_HEADER, s), ""%s"","
type_conversion,wt-status.c,1229,-,+,,24,		s->untracked_in_ms = 3250;
type_conversion,wt-status.c,1415,-,+,,23,		if (have_done.nr == 0)
type_conversion,wt-status.c,1423,-,+,,29,			for (i = (have_done.nr > nr_lines_to_show)
type_conversion,wt-status.c,1424,-,+,,22,				? have_done.nr - nr_lines_to_show : 0;
type_conversion,wt-status.c,1425,-,+,,5,				i < have_done.nr;
type_conversion,wt-status.c,1428,-,+,,23,			if (have_done.nr > nr_lines_to_show && s->hints)
type_conversion,wt-status.c,1433,-,+,,23,		if (yet_to_do.nr == 0)
type_conversion,wt-status.c,1442,-,+,,40,			for (i = 0; i < nr_lines_to_show && i < yet_to_do.nr; i++)
type_conversion,wt-status.c,1618,-,+,,63,"	if (strbuf_read_file(&sb, worktree_git_path(wt, ""%s"", path), 0) <= 0)"
type_conversion,wt-status.c,1621,-,+,,35,	while (sb.len && sb.buf[sb.len - 1] == '\n')
type_conversion,wt-status.c,1622,-,+,,31,"		strbuf_setlen(&sb, sb.len - 1);"
type_conversion,wt-status.c,1626,-,+,,22,"		strbuf_remove(&sb, 0, branch_name - sb.buf);"
type_conversion,wt-status.c,1666,-,+,,31,"	strbuf_add(&cb->buf, target, end - target);"
type_conversion,wt-status.c,1683,-,+,,23,"	strbuf_init(&cb.buf, 0);"
type_conversion,wt-status.c,1689,-,+,,35,"	if (repo_dwim_ref(r, cb.buf.buf, cb.buf.len, &oid, &ref,"
type_conversion,wt-status.c,1757,-,+,,59,	if (!core_apply_sparse_checkout || r->index->cache_nr == 0) {
type_conversion,wt-status.c,1771,-,+,,14,	for (i = 0; i < r->index->cache_nr; i++) {
type_conversion,wt-status.c,1778,-,+,,3,		100 - (100 * skip_worktree)/r->index->cache_nr;
type_conversion,wt-status.c,1806,-,+,,7,		if (action == REPLAY_PICK && !state->cherry_pick_in_progress) {
type_conversion,wt-status.c,1809,-,+,,14,		} else if (action == REPLAY_REVERT && !state->revert_in_progress) {
type_conversion,wt-status.c,1821,-,+,,34,"	const char *state_color = color(WT_STATUS_HEADER, s);"
type_conversion,wt-status.c,1847,-,+,,35,"	const char *branch_color = color(WT_STATUS_ONBRANCH, s);"
type_conversion,wt-status.c,1848,-,+,,42,"	const char *branch_status_color = color(WT_STATUS_HEADER, s);"
type_conversion,wt-status.c,1855,-,+,,32,"			branch_status_color = color(WT_STATUS_NOBRANCH, s);"
type_conversion,wt-status.c,1875,-,+,,26,"		status_printf(s, color(WT_STATUS_HEADER, s), ""%s"", """");"
type_conversion,wt-status.c,1885,-,+,,29,"		status_printf_ln(s, color(WT_STATUS_HEADER, s), ""%s"", """");"
type_conversion,wt-status.c,1886,-,+,,29,"		status_printf_ln(s, color(WT_STATUS_HEADER, s),"
type_conversion,wt-status.c,1890,-,+,,29,"		status_printf_ln(s, color(WT_STATUS_HEADER, s), ""%s"", """");"
type_conversion,wt-status.c,1908,-,+,,8,			if (fsm_mode > FSMONITOR_MODE_DISABLED) {
type_conversion,wt-status.c,1912,-,+,,7,						s->untracked_in_ms / 1000.0);
type_conversion,wt-status.c,1916,-,+,,7,						s->untracked_in_ms / 1000.0);
type_conversion,wt-status.c,1986,-,+,,29,"	color_fprintf(s->fp, color(WT_STATUS_UNMERGED, s), ""%s"", how);"
type_conversion,wt-status.c,2004,-,+,,30,"		color_fprintf(s->fp, color(WT_STATUS_UPDATED, s), ""%c"", d->index_status);"
type_conversion,wt-status.c,2008,-,+,,30,"		color_fprintf(s->fp, color(WT_STATUS_CHANGED, s), ""%c"", d->worktree_status);"
type_conversion,wt-status.c,2041,-,+,,30,"		color_fprintf(s->fp, color(WT_STATUS_UNTRACKED, s), ""%s"", sign);"
type_conversion,wt-status.c,2050,-,+,,35,"	const char *header_color = color(WT_STATUS_HEADER, s);"
type_conversion,wt-status.c,2051,-,+,,41,"	const char *branch_color_local = color(WT_STATUS_LOCAL_BRANCH, s);"
type_conversion,wt-status.c,2052,-,+,,42,"	const char *branch_color_remote = color(WT_STATUS_REMOTE_BRANCH, s);"
type_conversion,wt-status.c,2060,-,+,,29,"	color_fprintf(s->fp, color(WT_STATUS_HEADER, s), ""## "");"
type_conversion,wt-status.c,2072,-,+,,30,"		color_fprintf(s->fp, color(WT_STATUS_NOBRANCH, s), ""%s"","
type_conversion,wt-status.c,2104,-,+,,13,	} else if (s->ahead_behind_flags == AHEAD_BEHIND_QUICK) {
type_conversion,wt-status.c,2194,-,+,,13,	char eol = s->null_termination ? '\0' : '\n';
type_conversion,wt-status.c,2198,-,+,,4,			eol);
type_conversion,wt-status.c,2201,-,+,,53,"		fprintf(s->fp, ""# branch.head %s%c"", ""(unknown)"", eol);"
type_conversion,wt-status.c,2204,-,+,,55,"			fprintf(s->fp, ""# branch.head %s%c"", ""(detached)"", eol);"
type_conversion,wt-status.c,2217,-,+,,54,"			fprintf(s->fp, ""# branch.head %s%c"", branch_name, eol);"
type_conversion,wt-status.c,2228,-,+,,51,"			fprintf(s->fp, ""# branch.upstream %s%c"", base, eol);"
type_conversion,wt-status.c,2235,-,+,,28,"						nr_ahead, nr_behind, eol);"
type_conversion,wt-status.c,2238,-,+,,7,						eol);
type_conversion,wt-status.c,2241,-,+,,43,"				fprintf(s->fp, ""# branch.ab +0 -0%c"", eol);"
type_conversion,wt-status.c,2253,-,+,,13,	char eol = s->null_termination ? '\0' : '\n';
type_conversion,wt-status.c,2256,-,+,,47,"		fprintf(s->fp, ""# stash %d%c"", stash_count, eol);"
type_conversion,wt-status.c,2270,-,+,,12,		sub[0] = 'S';
type_conversion,wt-status.c,2271,-,+,,12,		sub[1] = d->new_submodule_commits ? 'C' : '.';
type_conversion,wt-status.c,2272,-,+,,13,		sub[2] = (d->dirty_submodule & DIRTY_SUBMODULE_MODIFIED) ? 'M' : '.';
type_conversion,wt-status.c,2273,-,+,,13,		sub[3] = (d->dirty_submodule & DIRTY_SUBMODULE_UNTRACKED) ? 'U' : '.';
type_conversion,wt-status.c,2275,-,+,,12,		sub[0] = 'N';
type_conversion,wt-status.c,2276,-,+,,12,		sub[1] = '.';
type_conversion,wt-status.c,2277,-,+,,12,		sub[2] = '.';
type_conversion,wt-status.c,2278,-,+,,12,		sub[3] = '.';
type_conversion,wt-status.c,2280,-,+,,11,	sub[4] = 0;
type_conversion,wt-status.c,2349,-,+,,11,	key[0] = d->index_status ? d->index_status : '.';
type_conversion,wt-status.c,2350,-,+,,11,	key[1] = d->worktree_status ? d->worktree_status : '.';
type_conversion,wt-status.c,2351,-,+,,11,	key[2] = 0;
type_conversion,wt-status.c,2358,-,+,,14,		sep_char = '\0';
type_conversion,wt-status.c,2359,-,+,,14,		eol_char = '\0';
type_conversion,wt-status.c,2369,-,+,,14,		sep_char = '\t';
type_conversion,wt-status.c,2370,-,+,,14,		eol_char = '\n';
type_conversion,wt-status.c,2371,-,+,,50,"		path = quote_path(it->string, s->prefix, &buf, 0);"
type_conversion,wt-status.c,2373,-,+,,67,"			path_from = quote_path(d->rename_source, s->prefix, &buf_from, 0);"
type_conversion,wt-status.c,2382,-,+,,11,"				path, sep_char, path_from, eol_char);"
type_conversion,wt-status.c,2388,-,+,,11,"				path, eol_char);"
type_conversion,wt-status.c,2413,-,+,,25,	char unmerged_prefix = 'u';
type_conversion,wt-status.c,2414,-,+,,18,	char eol_char = s->null_termination ? '\0' : '\n';
type_conversion,wt-status.c,2441,-,+,,43,"	pos = index_name_pos(istate, it->string, strlen(it->string));"
type_conversion,wt-status.c,2444,-,+,,9,	while (pos < istate->cache_nr) {
type_conversion,wt-status.c,2449,-,+,,28,		stages[stage - 1].mode = ce->ce_mode;
type_conversion,wt-status.c,2459,-,+,,62,"		path_index = quote_path(it->string, s->prefix, &buf_index, 0);"
type_conversion,wt-status.c,2462,-,+,,4,"			unmerged_prefix, key, submodule_token,"
type_conversion,wt-status.c,2471,-,+,,4,			eol_char);
type_conversion,wt-status.c,2490,-,+,,14,		eol_char = '\0';
type_conversion,wt-status.c,2492,-,+,,50,"		path = quote_path(it->string, s->prefix, &buf, 0);"
type_conversion,wt-status.c,2493,-,+,,14,		eol_char = '\n';
type_conversion,wt-status.c,2496,-,+,,28,"	fprintf(s->fp, ""%c %s%c"", prefix, path, eol_char);"
type_conversion,wt-status.c,2523,-,+,,14,	for (i = 0; i < s->change.nr; i++) {
type_conversion,wt-status.c,2530,-,+,,14,	for (i = 0; i < s->change.nr; i++) {
type_conversion,wt-status.c,2537,-,+,,14,	for (i = 0; i < s->untracked.nr; i++) {
type_conversion,wt-status.c,2539,-,+,,38,"		wt_porcelain_v2_print_other(it, s, '?');"
type_conversion,wt-status.c,2542,-,+,,14,	for (i = 0; i < s->ignored.nr; i++) {
type_conversion,wt-status.c,2544,-,+,,38,"		wt_porcelain_v2_print_other(it, s, '!');"
type_conversion,wt-status.c,2589,-,+,,46,		rev_info.diffopt.flags.ignore_submodules = 1;
type_conversion,wt-status.c,2590,-,+,,54,		rev_info.diffopt.flags.override_submodule_config = 1;
type_conversion,wt-status.c,2592,-,+,,33,	rev_info.diffopt.flags.quick = 1;
type_conversion,wt-status.c,2594,-,+,,28,"	run_diff_files(&rev_info, 0);"
type_conversion,wt-status.c,2614,-,+,,46,		rev_info.diffopt.flags.ignore_submodules = 1;
type_conversion,wt-status.c,2615,-,+,,33,	rev_info.diffopt.flags.quick = 1;
type_conversion,wt-status.h,49,-,+,,9,	return whence == FROM_CHERRY_PICK_SINGLE ||
type_conversion,wt-status.h,50,-,+,,3,		whence == FROM_CHERRY_PICK_MULTI;
type_conversion,wt-status.h,55,-,+,,9,	return whence == FROM_REBASE_PICK;
type_conversion,xdiff-interface.c,43,-,+,,47,		this_size = (ep == NULL) ? size : (ep - s + 1);
type_conversion,xdiff-interface.c,65,-,+,,28,		if (mb[i].ptr[mb[i].size-1] != '\n') {
type_conversion,xdiff-interface.c,67,-,+,,44,"			strbuf_add(&priv->remainder, mb[i].ptr, mb[i].size);"
type_conversion,xdiff-interface.c,73,-,+,,40,"			stop = consume_one(priv, mb[i].ptr, mb[i].size);"
type_conversion,xdiff-interface.c,76,-,+,,43,"		strbuf_add(&priv->remainder, mb[i].ptr, mb[i].size);"
type_conversion,xdiff-interface.c,98,-,+,,17,"	long trimmed = 0, recovered = 0;"
type_conversion,xdiff-interface.c,103,-,+,,9,"	while (blk + trimmed <= smaller && !memcmp(ap - blk, bp - blk, blk)) {"
type_conversion,xdiff-interface.c,104,-,+,,14,		trimmed += blk;
type_conversion,xdiff-interface.c,110,-,+,,7,		if (ap[recovered++] == '\n')
type_conversion,xdiff-interface.c,121,-,+,,6,	if (mf1->size > MAX_XDIFF_SIZE || mf2->size > MAX_XDIFF_SIZE)
type_conversion,xdiff-interface.c,149,-,+,,32,"	strbuf_init(&state.remainder, 0);"
type_conversion,xdiff-interface.c,166,-,+,,31,	ptr->ptr = xmalloc(sz ? sz : 1);
type_conversion,xdiff-interface.c,167,-,+,,32,"	if (sz && fread(ptr->ptr, sz, 1, f) != 1) {"
type_conversion,xdiff-interface.c,172,-,+,,14,	ptr->size = sz;
type_conversion,xdiff-interface.c,183,-,+,,15,		ptr->size = 0;
type_conversion,xdiff-interface.c,188,-,+,,19,	if (!ptr->ptr || type != OBJ_BLOB)
type_conversion,xdiff-interface.c,190,-,+,,14,	ptr->size = size;
type_conversion,xdiff-interface.c,218,-,+,,12,	if (len > 0 && line[len-1] == '\n') {
type_conversion,xdiff-interface.c,219,-,+,,13,		if (len > 1 && line[len-2] == '\r')
type_conversion,xdiff-interface.c,220,-,+,,11,			len -= 2;
type_conversion,xdiff-interface.c,227,-,+,,36,"		if (!regexec_buf(&reg->re, line, len, 2, pmatch, 0)) {"
type_conversion,xdiff-interface.c,229,-,+,,12,				return -1;
type_conversion,xdiff-interface.c,234,-,+,,10,		return -1;
type_conversion,xdiff-interface.c,238,-,+,,6,	if (result > buffer_size)
type_conversion,xdiff-interface.c,239,-,+,,12,		result = buffer_size;
type_conversion,xdiff-interface.c,242,-,+,,23,"	memcpy(buffer, line, result);"
type_conversion,xdiff-interface.c,243,-,+,,9,	return result;
type_conversion,xdiff-interface.c,254,-,+,,7,		if (value[i] == '\n')
type_conversion,xdiff-interface.c,266,-,+,,18,		reg->negate = (*value == '!');
type_conversion,xdiff-interface.c,269,-,+,,7,		if (*value == '!')
type_conversion,xdiff-interface.c,272,-,+,,42,"			expression = buffer = xstrndup(value, ep - value);"
type_conversion,xdiffi.c,51,-,+,,29,	long odd = (fmid - bmid) & 1;
type_conversion,xdiffi.c,62,-,+,,12,	for (ec = 1;; ec++) {
type_conversion,xdiffi.c,75,-,+,,18,			kvdf[--fmin - 1] = -1;
type_conversion,xdiffi.c,79,-,+,,18,			kvdf[++fmax + 1] = -1;
type_conversion,xdiffi.c,83,-,+,,34,		for (d = fmax; d >= fmin; d -= 2) {
type_conversion,xdiffi.c,84,-,+,,17,			if (kvdf[d - 1] >= kvdf[d + 1])
type_conversion,xdiffi.c,85,-,+,,19,				i1 = kvdf[d - 1] + 1;
type_conversion,xdiffi.c,87,-,+,,19,				i1 = kvdf[d + 1];
type_conversion,xdiffi.c,112,-,+,,18,			kvdb[--bmin - 1] = XDL_LINE_MAX;
type_conversion,xdiffi.c,116,-,+,,18,			kvdb[++bmax + 1] = XDL_LINE_MAX;
type_conversion,xdiffi.c,120,-,+,,34,		for (d = bmax; d >= bmin; d -= 2) {
type_conversion,xdiffi.c,121,-,+,,17,			if (kvdb[d - 1] < kvdb[d + 1])
type_conversion,xdiffi.c,122,-,+,,19,				i1 = kvdb[d - 1];
type_conversion,xdiffi.c,124,-,+,,19,				i1 = kvdb[d + 1] - 1;
type_conversion,xdiffi.c,127,-,+,,46,"			for (; i1 > off1 && i2 > off2 && ha1[i1 - 1] == ha2[i2 - 1]; i1--, i2--);"
type_conversion,xdiffi.c,153,-,+,,16,"			for (best = 0, d = fmax; d >= fmin; d -= 2) {"
type_conversion,xdiffi.c,162,-,+,,15,					for (k = 1; ha1[i1 - k] == ha2[i2 - k]; k++)
type_conversion,xdiffi.c,171,-,+,,15,			if (best > 0) {
type_conversion,xdiffi.c,177,-,+,,16,"			for (best = 0, d = bmax; d >= bmin; d -= 2) {"
type_conversion,xdiffi.c,186,-,+,,15,					for (k = 0; ha1[i1 + k] == ha2[i2 + k]; k++)
type_conversion,xdiffi.c,187,-,+,,34,						if (k == xenv->snake_cnt - 1) {
type_conversion,xdiffi.c,195,-,+,,15,			if (best > 0) {
type_conversion,xdiffi.c,210,-,+,,21,			fbest = fbest1 = -1;
type_conversion,xdiffi.c,211,-,+,,35,			for (d = fmax; d >= fmin; d -= 2) {
type_conversion,xdiffi.c,223,-,+,,35,			for (d = bmax; d >= bmin; d -= 2) {
type_conversion,xdiffi.c,265,-,+,,50,"	for (; off1 < lim1 && off2 < lim2 && ha1[lim1 - 1] == ha2[lim2 - 1]; lim1--, lim2--);"
type_conversion,xdiffi.c,276,-,+,,27,			rchg2[rindex2[off2]] = 1;
type_conversion,xdiffi.c,282,-,+,,27,			rchg1[rindex1[off1]] = 1;
type_conversion,xdiffi.c,285,-,+,,21,		spl.i1 = spl.i2 = 0;
type_conversion,xdiffi.c,291,-,+,,34,"			      need_min, &spl, xenv) < 0) {"
type_conversion,xdiffi.c,339,-,+,,45,	ndiags = xe->xdf1.nreff + xe->xdf2.nreff + 3;
type_conversion,xdiffi.c,347,-,+,,27,	kvdf += xe->xdf2.nreff + 1;
type_conversion,xdiffi.c,348,-,+,,27,	kvdb += xe->xdf2.nreff + 1;
type_conversion,xdiffi.c,365,-,+,,27,"	res = xdl_recs_cmp(&dd1, 0, dd1.nrec, &dd2, 0, dd2.nrec,"
type_conversion,xdiffi.c,366,-,+,,54,"			   kvdf, kvdb, (xpp->flags & XDF_NEED_MINIMAL) != 0,"
type_conversion,xdiffi.c,417,-,+,,11,	for (i = 0; i < rec->size; i++) {
type_conversion,xdiffi.c,422,-,+,,12,		else if (c == ' ')
type_conversion,xdiffi.c,424,-,+,,12,		else if (c == '\t')
type_conversion,xdiffi.c,505,-,+,,27,	for (i = split - 1; i >= 0; i--) {
type_conversion,xdiffi.c,518,-,+,,19,	for (i = split + 1; i < xdf->nrec; i++) {
type_conversion,xdiffi.c,718,-,+,,22,	g->start = g->end = 0;
type_conversion,xdiffi.c,732,-,+,,22,	g->start = g->end + 1;
type_conversion,xdiffi.c,745,-,+,,18,	if (g->start == 0)
type_conversion,xdiffi.c,748,-,+,,22,	g->end = g->start - 1;
type_conversion,xdiffi.c,749,-,+,,47,	for (g->start = g->end; xdf->rchg[g->start - 1]; g->start--)
type_conversion,xdiffi.c,764,-,+,,27,		xdf->rchg[g->start++] = 0;
type_conversion,xdiffi.c,765,-,+,,25,		xdf->rchg[g->end++] = 1;
type_conversion,xdiffi.c,783,-,+,,17,	if (g->start > 0 &&
type_conversion,xdiffi.c,784,-,+,,38,"	    recs_match(xdf->recs[g->start - 1], xdf->recs[g->end - 1])) {"
type_conversion,xdiffi.c,785,-,+,,27,		xdf->rchg[--g->start] = 1;
type_conversion,xdiffi.c,786,-,+,,25,		xdf->rchg[--g->end] = 0;
type_conversion,xdiffi.c,788,-,+,,31,		while (xdf->rchg[g->start - 1])
type_conversion,xdiffi.c,831,-,+,,25,			end_matching_other = -1;
type_conversion,xdiffi.c,869,-,+,,36,		} else if (end_matching_other != -1) {
type_conversion,xdiffi.c,894,-,+,,29,"			long shift, best_shift = -1;"
type_conversion,xdiffi.c,898,-,+,,28,			if (g.end - groupsize - 1 > shift)
type_conversion,xdiffi.c,899,-,+,,33,				shift = g.end - groupsize - 1;
type_conversion,xdiffi.c,910,-,+,,23,				if (best_shift == -1 ||
type_conversion,xdiffi.c,949,-,+,,53,"	for (i1 = xe->xdf1.nrec, i2 = xe->xdf2.nrec; i1 >= 0 || i2 >= 0; i1--, i2--)"
type_conversion,xdiffi.c,950,-,+,,18,		if (rchg1[i1 - 1] || rchg2[i2 - 1]) {
type_conversion,xdiffi.c,951,-,+,,29,			for (l1 = i1; rchg1[i1 - 1]; i1--);
type_conversion,xdiffi.c,952,-,+,,29,			for (l2 = i2; rchg2[i2 - 1]; i2--);
type_conversion,xdiffi.c,1003,-,+,,12,		for (i = 0; i < xch->chg1 && ignore; i++)
type_conversion,xdiffi.c,1007,-,+,,12,		for (i = 0; i < xch->chg2 && ignore; i++)
type_conversion,xdiffi.c,1018,-,+,,14,	for (i = 0; i < xpp->ignore_regex_nr; i++)
type_conversion,xdiffi.c,1019,-,+,,52,"		if (!regexec_buf(xpp->ignore_regex[i], rec->ptr, rec->size, 1,"
type_conversion,xdiffi.c,1043,-,+,,12,		for (i = 0; i < xch->chg1 && ignore; i++)
type_conversion,xdiffi.c,1047,-,+,,12,		for (i = 0; i < xch->chg2 && ignore; i++)
type_conversion,xdiffi.c,1064,-,+,,45,"	if (xdl_change_compact(&xe.xdf1, &xe.xdf2, xpp->flags) < 0 ||"
type_conversion,xdiffi.c,1065,-,+,,45,"	    xdl_change_compact(&xe.xdf2, &xe.xdf1, xpp->flags) < 0 ||"
type_conversion,xdiffi.c,1073,-,+,,40,"			xdl_mark_ignorable_lines(xscr, &xe, xpp->flags);"
type_conversion,xemit.c,34,-,+,,21,"	long size, psize = strlen(pre);"
type_conversion,xemit.c,55,-,+,,20,	long max_common = 2 * xecfg->ctxlen + xecfg->interhunkctxlen;
type_conversion,xemit.c,57,-,+,,26,	unsigned long ignored = 0; /* number of ignored blank lines */
type_conversion,xemit.c,80,-,+,,14,			ignored = 0;
type_conversion,xemit.c,82,-,+,,15,			ignored += xch->chg2;
type_conversion,xemit.c,84,-,+,,7,			   xch->i1 + ignored - (lxch->i1 + lxch->chg1) > max_common) {
type_conversion,xemit.c,88,-,+,,14,			ignored = 0;
type_conversion,xemit.c,90,-,+,,15,			ignored += xch->chg2;
type_conversion,xemit.c,100,-,+,,12,	if (len > 0 &&
type_conversion,xemit.c,102,-,+,,5,			 *rec == '_' || /* also identifier? */
type_conversion,xemit.c,103,-,+,,5,			 *rec == '$')) { /* identifiers from VMS and other esoterico */
type_conversion,xemit.c,106,-,+,,10,		while (0 < len && isspace((unsigned char)rec[len - 1]))
type_conversion,xemit.c,108,-,+,,20,"		memcpy(buf, rec, len);"
type_conversion,xemit.c,111,-,+,,9,	return -1;
type_conversion,xemit.c,127,-,+,,47,"	return match_func_rec(xdf, xecfg, ri, dummy, sizeof(dummy)) >= 0;"
type_conversion,xemit.c,138,-,+,,23,"	long l, size, step = (start > limit) ? -1 : 1;"
type_conversion,xemit.c,142,-,+,,9,	size = func_line ? sizeof(func_line->buf) : sizeof(dummy);
type_conversion,xemit.c,144,-,+,,32,	for (l = start; l != limit && 0 <= l && l < xe->xdf1.nrec; l += step) {
type_conversion,xemit.c,146,-,+,,14,		if (len >= 0) {
type_conversion,xemit.c,152,-,+,,9,	return -1;
type_conversion,xemit.c,160,-,+,,15,	while (len > 0 && XDL_ISSPACE(*rec)) {
type_conversion,xemit.c,171,-,+,,22,	long funclineprev = -1;
type_conversion,xemit.c,172,-,+,,33,	struct func_line func_line = { 0 };
type_conversion,xemit.c,205,-,+,,26,				i1 = xe->xdf1.nrec - 1;
type_conversion,xemit.c,208,-,+,,45,"			fs1 = get_func_line(xe, xecfg, NULL, i1, -1);"
type_conversion,xemit.c,209,-,+,,17,"			while (fs1 > 0 && !is_empty_rec(&xe->xdf1, fs1 - 1) &&"
type_conversion,xemit.c,210,-,+,,48,"			       !is_func_rec(&xe->xdf1, xecfg, fs1 - 1))"
type_conversion,xemit.c,212,-,+,,14,			if (fs1 < 0)
type_conversion,xemit.c,213,-,+,,11,				fs1 = 0;
type_conversion,xemit.c,247,-,+,,17,"			while (fe1 > 0 && is_empty_rec(&xe->xdf1, fe1 - 1))"
type_conversion,xemit.c,249,-,+,,14,			if (fe1 < 0)
type_conversion,xemit.c,265,-,+,,49,"				    get_func_line(xe, xecfg, NULL, l, e1) < 0) {"
type_conversion,xemit.c,278,-,+,,16,"				      s1 - 1, funclineprev);"
type_conversion,xemit.c,279,-,+,,24,			funclineprev = s1 - 1;
type_conversion,xemit.c,282,-,+,,30,"		    xdl_emit_hunk_hdr(s1 + 1, e1 - s1, s2 + 1, e2 - s2,"
type_conversion,xhistogram.c,109,-,+,,26,	for (ptr = LINE_END(1); line1 <= ptr; ptr--) {
type_conversion,xhistogram.c,114,-,+,,15,		chain_len = 0;
type_conversion,xhistogram.c,144,-,+,,14,		rec->cnt = 1;
type_conversion,xhistogram.c,159,-,+,,24,	unsigned int b_next = b_ptr + 1;
type_conversion,xhistogram.c,175,-,+,,23,		index->has_common = 1;
type_conversion,xhistogram.c,179,-,+,,9,			bs = b_ptr;
type_conversion,xhistogram.c,184,-,+,,11,			while (line1 < as && line2 < bs
type_conversion,xhistogram.c,188,-,+,,9,				if (1 < rc)
type_conversion,xhistogram.c,195,-,+,,9,				if (1 < rc)
type_conversion,xhistogram.c,200,-,+,,19,				b_next = be + 1;
type_conversion,xhistogram.c,209,-,+,,14,			if (np == 0)
type_conversion,xhistogram.c,214,-,+,,15,				if (np == 0) {
type_conversion,xhistogram.c,226,-,+,,9,	return b_next;
type_conversion,xhistogram.c,267,-,+,,34,	index.table_bits = xdl_hashbits(count1);
type_conversion,xhistogram.c,268,-,+,,23,	index.records_size = 1 << index.table_bits;
type_conversion,xhistogram.c,272,-,+,,24,	index.line_map_size = count1;
type_conversion,xhistogram.c,280,-,+,,32,"	if (xdl_cha_init(&index.rcha, sizeof(struct record), count1 / 4 + 1) < 0)"
type_conversion,xhistogram.c,283,-,+,,20,	index.ptr_shift = line1;
type_conversion,xhistogram.c,284,-,+,,27,	index.max_chain_length = 64;
type_conversion,xhistogram.c,289,-,+,,39,	index.cnt = index.max_chain_length + 1;
type_conversion,xhistogram.c,321,-,+,,34,			env->xdf2.rchg[line2++ - 1] = 1;
type_conversion,xhistogram.c,325,-,+,,34,			env->xdf1.rchg[line1++ - 1] = 1;
type_conversion,xhistogram.c,336,-,+,,21,		if (lcs.begin1 == 0 && lcs.begin2 == 0) {
type_conversion,xhistogram.c,338,-,+,,35,				env->xdf1.rchg[line1++ - 1] = 1;
type_conversion,xhistogram.c,340,-,+,,35,				env->xdf2.rchg[line2++ - 1] = 1;
type_conversion,xhistogram.c,344,-,+,,27,"						line1, lcs.begin1 - line1,"
type_conversion,xhistogram.c,345,-,+,,27,"						line2, lcs.begin2 - line2);"
type_conversion,xhistogram.c,355,-,+,,23,			line1 = lcs.end1 + 1;
type_conversion,xhistogram.c,357,-,+,,23,			line2 = lcs.end2 + 1;
type_conversion,xhistogram.c,368,-,+,,22,"		env->xdf1.dstart + 1, env->xdf1.dend - env->xdf1.dstart + 1,"
type_conversion,xhistogram.c,369,-,+,,22,
type_conversion,xmerge.c,124,-,+,,38,"			memcpy(dest + size, recs[i]->ptr, recs[i]->size);"
type_conversion,xmerge.c,126,-,+,,7,		i = recs[count - 1]->size;
type_conversion,xmerge.c,127,-,+,,17,		if (i == 0 || recs[count - 1]->ptr[i - 1] != '\n') {
type_conversion,xmerge.c,130,-,+,,19,					dest[size] = '\r';
type_conversion,xmerge.c,135,-,+,,18,				dest[size] = '\n';
type_conversion,xmerge.c,161,-,+,,6,	if (i < file->nrec - 1)
type_conversion,xmerge.c,163,-,+,,41,		return (size = file->recs[i]->size) > 1 &&
type_conversion,xmerge.c,164,-,+,,30,			file->recs[i]->ptr[size - 2] == '\r';
type_conversion,xmerge.c,169,-,+,,30,			file->recs[i]->ptr[size - 1] == '\n')
type_conversion,xmerge.c,171,-,+,,17,		return size > 1 &&
type_conversion,xmerge.c,172,-,+,,30,			file->recs[i]->ptr[size - 2] == '\r';
type_conversion,xmerge.c,177,-,+,,44,	return (size = file->recs[i - 1]->size) > 1 &&
type_conversion,xmerge.c,178,-,+,,33,		file->recs[i - 1]->ptr[size - 2] == '\r';
type_conversion,xmerge.c,186,-,+,,53,"	needs_cr = is_eol_crlf(&xe1->xdf2, m->i1 ? m->i1 - 1 : 0);"
type_conversion,xmerge.c,188,-,+,,54,"		needs_cr = is_eol_crlf(&xe2->xdf2, m->i2 ? m->i2 - 1 : 0);"
type_conversion,xmerge.c,202,-,+,,46,	int marker1_size = (name1 ? strlen(name1) + 1 : 0);
type_conversion,xmerge.c,203,-,+,,46,	int marker2_size = (name2 ? strlen(name2) + 1 : 0);
type_conversion,xmerge.c,204,-,+,,46,	int marker3_size = (name3 ? strlen(name3) + 1 : 0);
type_conversion,xmerge.c,211,-,+,,40,"	size += xdl_recs_copy(xe1, i, m->i1 - i, 0, 0,"
type_conversion,xmerge.c,217,-,+,,28,"		memset(dest + size, '<', marker_size);"
type_conversion,xmerge.c,220,-,+,,17,			dest[size] = ' ';
type_conversion,xmerge.c,221,-,+,,35,"			memcpy(dest + size + 1, name1, marker1_size - 1);"
type_conversion,xmerge.c,225,-,+,,19,			dest[size++] = '\r';
type_conversion,xmerge.c,226,-,+,,18,		dest[size++] = '\n';
type_conversion,xmerge.c,230,-,+,,29,"	size += xdl_recs_copy(xe1, m->i1, m->chg1, needs_cr, 1,"
type_conversion,xmerge.c,238,-,+,,29,"			memset(dest + size, '|', marker_size);"
type_conversion,xmerge.c,241,-,+,,18,				dest[size] = ' ';
type_conversion,xmerge.c,242,-,+,,36,"				memcpy(dest + size + 1, name3, marker3_size - 1);"
type_conversion,xmerge.c,246,-,+,,20,				dest[size++] = '\r';
type_conversion,xmerge.c,247,-,+,,19,			dest[size++] = '\n';
type_conversion,xmerge.c,249,-,+,,30,"		size += xdl_orig_copy(xe1, m->i0, m->chg0, needs_cr, 1,"
type_conversion,xmerge.c,256,-,+,,28,"		memset(dest + size, '=', marker_size);"
type_conversion,xmerge.c,259,-,+,,19,			dest[size++] = '\r';
type_conversion,xmerge.c,260,-,+,,18,		dest[size++] = '\n';
type_conversion,xmerge.c,264,-,+,,29,"	size += xdl_recs_copy(xe2, m->i2, m->chg2, needs_cr, 1,"
type_conversion,xmerge.c,269,-,+,,28,"		memset(dest + size, '>', marker_size);"
type_conversion,xmerge.c,272,-,+,,17,			dest[size] = ' ';
type_conversion,xmerge.c,273,-,+,,35,"			memcpy(dest + size + 1, name2, marker2_size - 1);"
type_conversion,xmerge.c,277,-,+,,19,			dest[size++] = '\r';
type_conversion,xmerge.c,278,-,+,,18,		dest[size++] = '\n';
type_conversion,xmerge.c,303,-,+,,42,"			size += xdl_recs_copy(xe1, i, m->i1 - i, 0, 0,"
type_conversion,xmerge.c,309,-,+,,32,"				size += xdl_recs_copy(xe1, m->i1, m->chg1, needs_cr, (m->mode & 2),"
type_conversion,xmerge.c,314,-,+,,32,"				size += xdl_recs_copy(xe2, m->i2, m->chg2, 0, 0,"
type_conversion,xmerge.c,318,-,+,,7,		i = m->i1 + m->chg1;
type_conversion,xmerge.c,320,-,+,,49,"	size += xdl_recs_copy(xe1, i, xe1->xdf2.nrec - i, 0, 0,"
type_conversion,xmerge.c,328,-,+,,31,"			    rec2->ptr, rec2->size, flags);"
type_conversion,xmerge.c,351,-,+,,42,"		       recmatch(rec1[m->i1 + m->chg1 - 1],"
type_conversion,xmerge.c,352,-,+,,28,"				rec2[m->i2 + m->chg2 - 1], xpp->flags)) {"
type_conversion,xmerge.c,370,-,+,,12,"		int i1 = m->i1, i2 = m->i2;"
type_conversion,xmerge.c,377,-,+,,18,		if (m->chg1 == 0 || m->chg2 == 0)
type_conversion,xmerge.c,385,-,+,,46,		t1.size = xe1->xdf2.recs[m->i1 + m->chg1 - 1]->ptr
type_conversion,xmerge.c,386,-,+,,39,			+ xe1->xdf2.recs[m->i1 + m->chg1 - 1]->size - t1.ptr;
type_conversion,xmerge.c,388,-,+,,46,		t2.size = xe2->xdf2.recs[m->i2 + m->chg2 - 1]->ptr
type_conversion,xmerge.c,389,-,+,,39,			+ xe2->xdf2.recs[m->i2 + m->chg2 - 1]->size - t2.ptr;
type_conversion,xmerge.c,392,-,+,,46,"		if (xdl_change_compact(&xe.xdf1, &xe.xdf2, xpp->flags) < 0 ||"
type_conversion,xmerge.c,393,-,+,,46,"		    xdl_change_compact(&xe.xdf2, &xe.xdf1, xpp->flags) < 0 ||"
type_conversion,xmerge.c,405,-,+,,22,		m->i1 = xscr->i1 + i1;
type_conversion,xmerge.c,407,-,+,,22,		m->i2 = xscr->i2 + i2;
type_conversion,xmerge.c,421,-,+,,23,			m->i1 = xscr->i1 + i1;
type_conversion,xmerge.c,423,-,+,,23,			m->i2 = xscr->i2 + i2;
type_conversion,xmerge.c,481,-,+,,11,		begin = m->i1 + m->chg1;
type_conversion,xmerge.c,482,-,+,,9,		end = next_m->i1;
type_conversion,xmerge.c,549,-,+,,9,			i0 = xscr1->i1;
type_conversion,xmerge.c,550,-,+,,9,			i1 = xscr1->i2;
type_conversion,xmerge.c,551,-,+,,9,			i2 = xscr2->i2 - xscr2->i1 + xscr1->i1;
type_conversion,xmerge.c,552,-,+,,11,			chg0 = xscr1->chg1;
type_conversion,xmerge.c,553,-,+,,11,			chg1 = xscr1->chg2;
type_conversion,xmerge.c,554,-,+,,11,			chg2 = xscr1->chg1;
type_conversion,xmerge.c,556,-,+,,11,"					     i0, chg0, i1, chg1, i2, chg2)) {"
type_conversion,xmerge.c,564,-,+,,9,			i0 = xscr2->i1;
type_conversion,xmerge.c,565,-,+,,9,			i1 = xscr1->i2 - xscr1->i1 + xscr2->i1;
type_conversion,xmerge.c,566,-,+,,9,			i2 = xscr2->i2;
type_conversion,xmerge.c,567,-,+,,11,			chg0 = xscr2->chg1;
type_conversion,xmerge.c,568,-,+,,11,			chg1 = xscr2->chg1;
type_conversion,xmerge.c,569,-,+,,11,			chg2 = xscr2->chg2;
type_conversion,xmerge.c,571,-,+,,11,"					     i0, chg0, i1, chg1, i2, chg2)) {"
type_conversion,xmerge.c,581,-,+,,30,"				xdl_merge_cmp_lines(xe1, xscr1->i2,"
type_conversion,xmerge.c,582,-,+,,11,"					xe2, xscr2->i2,"
type_conversion,xmerge.c,583,-,+,,6,"					xscr1->chg2, xpp->flags)) {"
type_conversion,xmerge.c,585,-,+,,14,			int off = xscr1->i1 - xscr2->i1;
type_conversion,xmerge.c,586,-,+,,14,			int ffo = off + xscr1->chg1 - xscr2->chg1;
type_conversion,xmerge.c,588,-,+,,9,			i0 = xscr1->i1;
type_conversion,xmerge.c,589,-,+,,9,			i1 = xscr1->i2;
type_conversion,xmerge.c,590,-,+,,9,			i2 = xscr2->i2;
type_conversion,xmerge.c,597,-,+,,37,			chg0 = xscr1->i1 + xscr1->chg1 - i0;
type_conversion,xmerge.c,598,-,+,,37,			chg1 = xscr1->i2 + xscr1->chg2 - i1;
type_conversion,xmerge.c,599,-,+,,37,			chg2 = xscr2->i2 + xscr2->chg2 - i2;
type_conversion,xmerge.c,606,-,+,,11,"					     i0, chg0, i1, chg1, i2, chg2)) {"
type_conversion,xmerge.c,612,-,+,,8,		i1 = xscr1->i1 + xscr1->chg1;
type_conversion,xmerge.c,613,-,+,,8,		i2 = xscr2->i1 + xscr2->chg1;
type_conversion,xmerge.c,623,-,+,,8,		i0 = xscr1->i1;
type_conversion,xmerge.c,624,-,+,,8,		i1 = xscr1->i2;
type_conversion,xmerge.c,625,-,+,,8,		i2 = xscr1->i1 + xe2->xdf2.nrec - xe2->xdf1.nrec;
type_conversion,xmerge.c,626,-,+,,10,		chg0 = xscr1->chg1;
type_conversion,xmerge.c,627,-,+,,10,		chg1 = xscr1->chg2;
type_conversion,xmerge.c,628,-,+,,10,		chg2 = xscr1->chg1;
type_conversion,xmerge.c,630,-,+,,10,"				     i0, chg0, i1, chg1, i2, chg2)) {"
type_conversion,xmerge.c,639,-,+,,8,		i0 = xscr2->i1;
type_conversion,xmerge.c,640,-,+,,8,		i1 = xscr2->i1 + xe1->xdf2.nrec - xe1->xdf1.nrec;
type_conversion,xmerge.c,641,-,+,,8,		i2 = xscr2->i2;
type_conversion,xmerge.c,642,-,+,,10,		chg0 = xscr2->chg1;
type_conversion,xmerge.c,643,-,+,,10,		chg1 = xscr2->chg1;
type_conversion,xmerge.c,644,-,+,,10,		chg2 = xscr2->chg2;
type_conversion,xmerge.c,646,-,+,,10,"				     i0, chg0, i1, chg1, i2, chg2)) {"
type_conversion,xmerge.c,676,-,+,,18,		result->size = size;
type_conversion,xmerge.c,693,-,+,,17,	result->size = 0;
type_conversion,xmerge.c,701,-,+,,47,"	if (xdl_change_compact(&xe1.xdf1, &xe1.xdf2, xpp->flags) < 0 ||"
type_conversion,xmerge.c,702,-,+,,47,"	    xdl_change_compact(&xe1.xdf2, &xe1.xdf1, xpp->flags) < 0 ||"
type_conversion,xmerge.c,706,-,+,,47,"	if (xdl_change_compact(&xe2.xdf1, &xe2.xdf2, xpp->flags) < 0 ||"
type_conversion,xmerge.c,707,-,+,,47,"	    xdl_change_compact(&xe2.xdf2, &xe2.xdf1, xpp->flags) < 0 ||"
type_conversion,xmerge.c,716,-,+,,33,"		memcpy(result->ptr, mf2->ptr, mf2->size);"
type_conversion,xmerge.c,723,-,+,,33,"		memcpy(result->ptr, mf1->ptr, mf1->size);"
type_conversion,xpatience.c,79,-,+,,14,	for (i = 0; i < xpp->anchors_nr; i++) {
type_conversion,xpatience.c,103,-,+,,40,	int index = (int)((record->ha << 1) % map->alloc);
type_conversion,xpatience.c,112,-,+,,23,			map->has_matches = 1;
type_conversion,xpatience.c,116,-,+,,32,			map->entries[index].line2 = line;
type_conversion,xpatience.c,121,-,+,,30,	map->entries[index].line1 = line;
type_conversion,xpatience.c,123,-,+,,31,"	map->entries[index].anchor = is_anchor(xpp, map->env->xdf1.recs[line - 1]->ptr);"
type_conversion,xpatience.c,265,-,+,,12,			next1 = first->line1;
type_conversion,xpatience.c,266,-,+,,12,			next2 = first->line2;
type_conversion,xpatience.c,294,-,+,,42,				first->next->line1 == first->line1 + 1 &&
type_conversion,xpatience.c,295,-,+,,42,				first->next->line2 == first->line2 + 1)
type_conversion,xpatience.c,298,-,+,,26,		line1 = first->line1 + 1;
type_conversion,xpatience.c,299,-,+,,26,		line2 = first->line2 + 1;
type_conversion,xpatience.c,333,-,+,,34,			env->xdf2.rchg[line2++ - 1] = 1;
type_conversion,xpatience.c,337,-,+,,34,			env->xdf1.rchg[line1++ - 1] = 1;
type_conversion,xpatience.c,349,-,+,,34,			env->xdf1.rchg[line1++ - 1] = 1;
type_conversion,xpatience.c,351,-,+,,34,			env->xdf2.rchg[line2++ - 1] = 1;
type_conversion,xpatience.c,372,-,+,,36,
type_conversion,xprepare.c,75,-,+,,14,	cf->hsize = 1 << cf->hbits;
type_conversion,xprepare.c,77,-,+,,30,"	if (xdl_cha_init(&cf->ncha, sizeof(xdlclass_t), size / 4 + 1) < 0) {"
type_conversion,xprepare.c,95,-,+,,14,	cf->count = 0;
type_conversion,xprepare.c,135,-,+,,31,		rcrec->len1 = rcrec->len2 = 0;
type_conversion,xprepare.c,140,-,+,,11,	(pass == 1) ? rcrec->len1++ : rcrec->len2++;
type_conversion,xprepare.c,171,-,+,,31,"	if (xdl_cha_init(&xdf->rcha, sizeof(xrecord_t), narec / 4 + 1) < 0)"
type_conversion,xprepare.c,177,-,+,,10,	hsize = 1 << hbits;
type_conversion,xprepare.c,181,-,+,,9,	nrec = 0;
type_conversion,xprepare.c,185,-,+,,37,"			hav = xdl_hash_record(&cur, top, xpp->flags);"
type_conversion,xprepare.c,216,-,+,,15,	xdf->nreff = 0;
type_conversion,xprepare.c,218,-,+,,16,	xdf->dstart = 0;
type_conversion,xprepare.c,219,-,+,,21,	xdf->dend = nrec - 1;
type_conversion,xprepare.c,262,-,+,,40,"	enl1 = xdl_guess_lines(mf1, sample) + 1;"
type_conversion,xprepare.c,263,-,+,,40,"	enl2 = xdl_guess_lines(mf2, sample) + 1;"
type_conversion,xprepare.c,265,-,+,,45,"	if (xdl_init_classifier(&cf, enl1 + enl2 + 1, xpp->flags) < 0)"
type_conversion,xprepare.c,268,-,+,,22,"	if (xdl_prepare_ctx(1, mf1, enl1, xpp, &cf, &xe->xdf1) < 0) {"
type_conversion,xprepare.c,273,-,+,,22,"	if (xdl_prepare_ctx(2, mf2, enl2, xpp, &cf, &xe->xdf2) < 0) {"
type_conversion,xprepare.c,324,-,+,,11,"	for (r = 1, rdis0 = 0, rpdis0 = 1; (i - r) >= s; r++) {"
type_conversion,xprepare.c,327,-,+,,12,		else if (dis[i - r] == 2)
type_conversion,xprepare.c,338,-,+,,15,	if (rdis0 == 0)
type_conversion,xprepare.c,340,-,+,,11,"	for (r = 1, rdis1 = 0, rpdis1 = 1; (i + r) <= e; r++) {"
type_conversion,xprepare.c,343,-,+,,12,		else if (dis[i + r] == 2)
type_conversion,xprepare.c,352,-,+,,15,	if (rdis1 == 0)
type_conversion,xprepare.c,381,-,+,,30,		nm = rcrec ? rcrec->len2 : 0;
type_conversion,xprepare.c,382,-,+,,20,		dis1[i] = (nm == 0) ? 0: (nm >= mlim) ? 2: 1;
type_conversion,xprepare.c,389,-,+,,30,		nm = rcrec ? rcrec->len1 : 0;
type_conversion,xprepare.c,390,-,+,,20,		dis2[i] = (nm == 0) ? 0: (nm >= mlim) ? 2: 1;
type_conversion,xprepare.c,393,-,+,,15,"	for (nreff = 0, i = xdf1->dstart, recs = &xdf1->recs[xdf1->dstart];"
type_conversion,xprepare.c,395,-,+,,7,		if (dis1[i] == 1 ||
type_conversion,xprepare.c,396,-,+,,8,"		    (dis1[i] == 2 && !xdl_clean_mmatch(dis1, i, xdf1->dstart, xdf1->dend))) {"
type_conversion,xprepare.c,401,-,+,,20,			xdf1->rchg[i] = 1;
type_conversion,xprepare.c,405,-,+,,15,"	for (nreff = 0, i = xdf2->dstart, recs = &xdf2->recs[xdf2->dstart];"
type_conversion,xprepare.c,407,-,+,,7,		if (dis2[i] == 1 ||
type_conversion,xprepare.c,408,-,+,,8,"		    (dis2[i] == 2 && !xdl_clean_mmatch(dis2, i, xdf2->dstart, xdf2->dend))) {"
type_conversion,xprepare.c,413,-,+,,20,			xdf2->rchg[i] = 1;
type_conversion,xprepare.c,432,-,+,,11,"	for (i = 0, lim = XDL_MIN(xdf1->nrec, xdf2->nrec); i < lim;"
type_conversion,xprepare.c,441,-,+,,21,"	for (lim -= i, i = 0; i < lim; i++, recs1--, recs2--)"
type_conversion,xprepare.c,445,-,+,,32,	xdf1->dend = xdf1->nrec - i - 1;
type_conversion,xprepare.c,446,-,+,,32,	xdf2->dend = xdf2->nrec - i - 1;
type_conversion,xutils.c,32,-,+,,18,	for (i = 1; n > 0; n >>= 2)
type_conversion,xutils.c,48,-,+,,13,	if (size > 0 && rec[size - 1] != '\n') {
type_conversion,xutils.c,50,-,+,,16,		mb[2].size = strlen(mb[2].ptr);
type_conversion,xutils.c,80,-,+,,15,	cha->scurr = 0;
type_conversion,xutils.c,105,-,+,,18,		ancur->icurr = 0;
type_conversion,xutils.c,122,-,+,,12,"	long nl = 0, size, tsize = 0;"
type_conversion,xutils.c,128,-,+,,34,"			if (!(cur = memchr(cur, '\n', top - cur)))"
type_conversion,xutils.c,139,-,+,,14,	return nl + 1;
type_conversion,xutils.c,147,-,+,,19,		return (size <= 1);
type_conversion,xutils.c,149,-,+,,11,	for (i = 0; i < size && XDL_ISSPACE(line[i]); i++)
type_conversion,xutils.c,161,-,+,,26,	int complete = s && l[s-1] == '\n';
type_conversion,xutils.c,168,-,+,,27,	if (complete && s == i + 1 && l[i] == '\r')
type_conversion,xutils.c,177,-,+,,34,"	if (s1 == s2 && !memcmp(l1, l2, s1))"
type_conversion,xutils.c,195,-,+,,10,		while (i1 < s1 && i2 < s2) {
type_conversion,xutils.c,196,-,+,,8,			if (l1[i1++] != l2[i2++])
type_conversion,xutils.c,199,-,+,,11,			while (i1 < s1 && XDL_ISSPACE(l1[i1]))
type_conversion,xutils.c,201,-,+,,11,			while (i2 < s2 && XDL_ISSPACE(l2[i2]))
type_conversion,xutils.c,205,-,+,,10,		while (i1 < s1 && i2 < s2) {
type_conversion,xutils.c,208,-,+,,12,				while (i1 < s1 && XDL_ISSPACE(l1[i1]))
type_conversion,xutils.c,210,-,+,,12,				while (i2 < s2 && XDL_ISSPACE(l2[i2]))
type_conversion,xutils.c,214,-,+,,8,			if (l1[i1++] != l2[i2++])
type_conversion,xutils.c,218,-,+,,10,		while (i1 < s1 && i2 < s2 && l1[i1] == l2[i2]) {
type_conversion,xutils.c,224,-,+,,10,		while (i1 < s1 && i2 < s2 && l1[i1] == l2[i2]) {
type_conversion,xutils.c,228,-,+,,41,"		return (ends_with_optional_cr(l1, s1, i1) &&"
type_conversion,xutils.c,229,-,+,,34,"			ends_with_optional_cr(l2, s2, i2));"
type_conversion,xutils.c,238,-,+,,6,	if (i1 < s1) {
type_conversion,xutils.c,239,-,+,,10,		while (i1 < s1 && XDL_ISSPACE(l1[i1]))
type_conversion,xutils.c,241,-,+,,13,		if (s1 != i1)
type_conversion,xutils.c,244,-,+,,6,	if (i2 < s2) {
type_conversion,xutils.c,245,-,+,,10,		while (i2 < s2 && XDL_ISSPACE(l2[i2]))
type_conversion,xutils.c,247,-,+,,17,		return (s2 == i2);
type_conversion,xutils.c,254,-,+,,21,	unsigned long ha = 5381;
type_conversion,xutils.c,258,-,+,,22,	for (; ptr < top && *ptr != '\n'; ptr++) {
type_conversion,xutils.c,261,-,+,,8,			if (*ptr == '\r' &&
type_conversion,xutils.c,262,-,+,,26,			    (ptr + 1 < top && ptr[1] == '\n'))
type_conversion,xutils.c,269,-,+,,9,					&& ptr[1] != '\n')
type_conversion,xutils.c,271,-,+,,32,			at_eol = (top <= ptr + 1 || ptr[1] == '\n');
type_conversion,xutils.c,298,-,+,,21,	unsigned long ha = 5381;
type_conversion,xutils.c,304,-,+,,22,	for (; ptr < top && *ptr != '\n'; ptr++) {
type_conversion,xutils.c,314,-,+,,21,"	unsigned int val = 1, bits = 0;"
type_conversion,xutils.c,316,-,+,,23,"	for (; val < size && bits < CHAR_BIT * sizeof(unsigned int); val <<= 1, bits++);"
type_conversion,xutils.c,317,-,+,,22,	return bits ? bits: 1;
type_conversion,xutils.c,326,-,+,,9,	*ptr = '\0';
type_conversion,xutils.c,327,-,+,,12,	if (val < 0) {
type_conversion,xutils.c,328,-,+,,12,		*--ptr = '-';
type_conversion,xutils.c,331,-,+,,34,	for (; val && ptr > buf; val /= 10)
type_conversion,xutils.c,332,-,+,,31,"		*--ptr = ""0123456789""[val % 10];"
type_conversion,xutils.c,337,-,+,,12,		*str++ = '0';
type_conversion,xutils.c,338,-,+,,9,	*str = '\0';
type_conversion,xutils.c,340,-,+,,9,	return str - out;
type_conversion,xutils.c,350,-,+,,22,"	memcpy(buf, ""@@ -"", 4);"
type_conversion,xutils.c,353,-,+,,44,"	nb += xdl_num_out(buf + nb, c1 ? s1: s1 - 1);"
type_conversion,xutils.c,355,-,+,,12,	if (c1 != 1) {
type_conversion,xutils.c,356,-,+,,25,"		memcpy(buf + nb, "","", 1);"
type_conversion,xutils.c,362,-,+,,25,"	memcpy(buf + nb, "" +"", 2);"
type_conversion,xutils.c,365,-,+,,44,"	nb += xdl_num_out(buf + nb, c2 ? s2: s2 - 1);"
type_conversion,xutils.c,367,-,+,,12,	if (c2 != 1) {
type_conversion,xutils.c,368,-,+,,25,"		memcpy(buf + nb, "","", 1);"
type_conversion,xutils.c,374,-,+,,26,"	memcpy(buf + nb, "" @@"", 3);"
type_conversion,xutils.c,377,-,+,,15,		buf[nb++] = ' ';
type_conversion,xutils.c,378,-,+,,7,		if (funclen > sizeof(buf) - nb - 1)
type_conversion,xutils.c,379,-,+,,28,			funclen = sizeof(buf) - nb - 1;
type_conversion,xutils.c,380,-,+,,26,"		memcpy(buf + nb, func, funclen);"
type_conversion,xutils.c,383,-,+,,14,	buf[nb++] = '\n';
type_conversion,xutils.c,386,-,+,,12,	mb.size = nb;
type_conversion,xutils.c,398,-,+,,21,"			  c1 ? s1 : s1 - 1, c1,"
type_conversion,xutils.c,399,-,+,,21,"			  c2 ? s2 : s2 - 1, c2,"
type_conversion,xutils.c,428,-,+,,57,"	memcpy(diff_env->xdf1.rchg + line1 - 1, env.xdf1.rchg, count1);"
type_conversion,xutils.c,429,-,+,,57,"	memcpy(diff_env->xdf2.rchg + line2 - 1, env.xdf2.rchg, count2);"
type_conversion,xutils.c,439,-,+,,26,	size_t n = ((LONG_MAX - 16) / 2 >= *alloc) ? 2 * *alloc + 16 : LONG_MAX;
type_conversion,xutils.c,440,-,+,,6,	if (nr > n)
type_conversion,xutils.c,441,-,+,,7,		n = nr;
type_conversion,xutils.c,445,-,+,,12,		*alloc = n;
type_conversion,xutils.c,448,-,+,,12,		*alloc = 0;
